/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/
#pragma once

#include "Control.hppml"
#include "ControlInstanceRoot.hppml"
#include "../ComputedGraph/Root.hpp"
#include "../ComputedGraph/Graph.hpp"
#include "../../core/PolymorphicSharedPtr.hpp"



class ControlInstance;

typedef PolymorphicSharedPtr<ControlInstance> ControlInstancePtr;
typedef PolymorphicSharedWeakPtr<ControlInstance> WeakControlInstancePtr;

class ControlInstance : public PolymorphicSharedPtrBase<ControlInstance> {
private:
	ControlInstance& operator=(const ControlInstance& in) { return *this; }
public:
	ControlInstance(Control inControl, PolymorphicSharedPtr<ControlInstanceRoot> inRoot);

	ControlInstance(Control inControl, ControlInstancePtr inParent);

	~ControlInstance();

	Control getControl(void) const;

	void destroy(bool isStillValid);

	string toString(void);

	void initialize(void);

	bool getIsInvalid(void);

	int32_t getLevel(void) const;

	void markChildrenDirty(void);

	boost::python::list getChildren(void);

	ControlInstancePtr getParent(void);

	static Control unwrap(boost::python::object o);

	void preResetChildren(void);

	void resetChildren(void);

	PolymorphicSharedPtr<ControlInstanceRoot> getRoot(void) const;

private:
	void rebuildVariableLayoutChildren(void);

	Control childForKey(boost::python::object key, boost::python::object generatorFunction);

	WeakControlInstancePtr 								mParent;

	map<boost::python::object, ControlInstancePtr>		mLayoutKeysToChildren;

	boost::python::object								mVariableLayoutKeys;

	vector<ControlInstancePtr> 							mChildren;

	Control 											mControl;

	int32_t 											mLevel;

	int32_t 											mGeneratedLevel;

	PolymorphicSharedPtr<ControlInstanceRoot>			mRoot;

	mutable PolymorphicSharedPtr<ComputedGraph::Root>	mChildrenWatcher;

	bool												mIsInitialized, mIsDestroyed;

	boost::python::object								mIdentity;

	bool												mHasBeenGenerated;

	WeakControlInstancePtr 								mWeakSelfPtr;
};

