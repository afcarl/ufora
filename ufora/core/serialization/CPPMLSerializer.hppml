/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/
#ifndef CPPMLSerializer_hpp_
#define CPPMLSerializer_hpp_

#include "../Common.hppml"

template<class A,class B>
class CPPMLSerializer;

template<class T>
class CPPMLSerializer<T, ::CPPML::Null> {
public:
		template<class stream_type>
		static void serialize(stream_type& s,const T& t)
			{
			}
		template<class stream_type>
		static void deserialize(stream_type& s,T& t)
			{
			}
		template<class stream_type>
		static void serialize(stream_type& s,const T& t, int16_t& ioTag)
			{
			}
		template<class stream_type>
		static void deserialize(stream_type& s,T& t, int16_t& ioTag)
			{
			}

};
template<class T, class A1, class A2>
class CPPMLSerializer<T, ::CPPML::Chain<A1, A2> > {
public:
		template<class stream_type>
		static void serialize(stream_type& s,const T& t)
			{
			int16_t ioTag = -1;

			CPPMLSerializer<T, A1>::serialize(s, t, ioTag);
			CPPMLSerializer<T, A2>::serialize(s, t, ioTag);
			}
		template<class stream_type>
		static void deserialize(stream_type& s, T& t)
			{
			int16_t ioTag = -1;

			CPPMLSerializer<T, A1>::deserialize(s, t, ioTag);
			CPPMLSerializer<T, A2>::deserialize(s, t, ioTag);
			}
		template<class stream_type>
		static void serialize(stream_type& s, const T& t, int16_t& ioTag)
			{
			CPPMLSerializer<T, A1>::serialize(s, t, ioTag);
			CPPMLSerializer<T, A2>::serialize(s, t, ioTag);
			}
		template<class stream_type>
		static void deserialize(stream_type& s, T& t, int16_t& ioTag)
			{
			CPPMLSerializer<T, A1>::deserialize(s, t, ioTag);
			CPPMLSerializer<T, A2>::deserialize(s, t, ioTag);
			}
};

template<class T, class member_type_in, class accessor_in, const int32_t ix>
class CPPMLSerializer<T, ::CPPML::TupleMember<T, member_type_in, accessor_in, ix> > {
public:
		template<class stream_type>
		static void serialize(stream_type& s, const T& t)
			{
			s.serialize(accessor_in::get(t));
			}
		template<class stream_type>
		static void deserialize(stream_type& s, T& t)
			{
			s.deserialize(accessor_in::get(t));
			}
		template<class stream_type>
		static void serialize(stream_type& s, const T& t, int16_t& ioTag)
			{
			s.serialize(accessor_in::get(t));
			}
		template<class stream_type>
		static void deserialize(stream_type& s, T& t, int16_t& ioTag)
			{
			s.deserialize(accessor_in::get(t));
			}
};


template<class T, class member_type_in, class accessor_in>
class CPPMLSerializer<T, ::CPPML::Alternative<T, member_type_in, accessor_in> > {
public:

		template<class stream_type>
		static void serialize(stream_type& s, const T& t, int16_t& ioTag)
			{
			bool is = accessor_in::is(t);

			ioTag = ioTag + 1;

			if (is)
				{
				s.serialize(ioTag);

				s.serialize(accessor_in::get(t));
				}
			}
		template<class stream_type>
		static void deserialize(stream_type& s, T& t, int16_t& ioTag)
			{
			if (ioTag == -1)
				{
				s.deserialize(ioTag);
				}

			if (ioTag == 0)
				{
				member_type_in m;

				s.deserialize(m);

				t = T(m);

				ioTag = -2;
				}
			else
				{
				ioTag = ioTag - 1;
				}
			}
};


template<class T, class member_type_in, class accessor_in, const int32_t ix>
class CPPMLSerializer<T, ::CPPML::AlternativeCommonMember<T, member_type_in, accessor_in, ix> > {
public:
		template<class stream_type>
		static void serialize(stream_type& s,const T& t)
			{
			s.serialize(accessor_in::get(t));
			}
		template<class stream_type>
		static void deserialize(stream_type& s, T& t)
			{
			s.deserialize(accessor_in::get(t));
			}
		template<class stream_type>
		static void serialize(stream_type& s,const T& t, int16_t& ioTag)
			{
			s.serialize(accessor_in::get(t));
			}
		template<class stream_type>
		static void deserialize(stream_type& s, T& t, int16_t& ioTag)
			{
			s.deserialize(accessor_in::get(t));
			}
};


#endif

