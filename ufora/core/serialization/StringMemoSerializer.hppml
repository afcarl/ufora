/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/
#pragma once

#include "Serialization.hpp"
#include "../math/Hash.hpp"
#include <boost/unordered_map.hpp>

template<class inner_serializer_type>
class StringMemoSerializer : public inner_serializer_type {
public:
		StringMemoSerializer(OBinaryStream& s) : inner_serializer_type(s)
			{
			}

		template<class T>
		void serialize(const T& in)
			{
			Serializer<T, StringMemoSerializer<inner_serializer_type> >::serialize(*this, in);
			}

		void serializeString(const std::string& in)
			{
			hash_type h = Hash::CityHash(in);

			auto it = mStringHashToIndices.find(h);

			if (it == mStringHashToIndices.end())
				{
				uint32_t index = mStringHashToIndices.size();
				mStringHashToIndices.insert(make_pair(h, index));

				((inner_serializer_type*)this)->serialize(index);
				((inner_serializer_type*)this)->serialize(in);
				}
			else
				{
				uint32_t index = it->second;

				((inner_serializer_type*)this)->serialize(index);
				}
			}
private:
		boost::unordered_map<hash_type, uint32_t> mStringHashToIndices;
};


template<class inner_serializer_type>
class StringMemoDeserializer : public inner_serializer_type {
public:
		StringMemoDeserializer(IBinaryStream& s) : inner_serializer_type(s)
			{
			}

		template<class T>
		void deserialize(T& in)
			{
			Deserializer<T, StringMemoDeserializer<inner_serializer_type> >::deserialize(*this, in);
			}

		void deserializeString(std::string& out)
			{
			uint32_t index;

			((inner_serializer_type*)this)->deserialize(index);

			auto it = mIndicesToStrings.find(index);

			if (it != mIndicesToStrings.end())
				{
				out = it->second;
				return;
				}

			((inner_serializer_type*)this)->deserialize(out);

			mIndicesToStrings[index] = out;
			}
private:
		boost::unordered_map<uint32_t, std::string> mIndicesToStrings;
};

template<class inner_storage_type>
class Serializer<std::string, StringMemoSerializer<inner_storage_type> > {
public:
		static void serialize(StringMemoSerializer<inner_storage_type>& s, const std::string& o)
			{
			s.serializeString(o);
			}
};
template<class inner_storage_type>
class Deserializer<std::string, StringMemoDeserializer<inner_storage_type> > {
public:
		static void deserialize(StringMemoDeserializer<inner_storage_type>& s, std::string& t)
			{
			s.deserializeString(t);
			}
};


