/***************************************************************************
   Copyright 2016 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/
#pragma once

#include "MemoryBlockId.hppml"
#include "MemoryViewId.hppml"

#include "../../core/math/IntegerRange.hppml"
#include "../../core/containers/ImmutableTreeVector.hppml"

@type MemoryViewDefinitionTerm = 
	-| ViewOfBlock of 
		MemoryBlockId block
	-| ViewOfOtherView of 
		MemoryViewId subview
	-| EmptyBytes of ()
	// -| Computed of 
	// 	int64_t bytecount,
	// 	MemoryBlockId block,
	// 	IntegerRange byterange,
	// 	MemoryViewRangeComputer ...
	with
		uint64_t bytecount, // must be: bytecount == byterange.size()
		IntegerRange byterange
	{
	public:
		static MemoryViewDefinitionTerm ViewOfBlock(MemoryBlockId id, IntegerRange byterange);

		static MemoryViewDefinitionTerm ViewOfOtherView(MemoryViewId id, IntegerRange byterange);

		static MemoryViewDefinitionTerm EmptyBytes(uint64_t bytecount);
	}
	;


@type MemoryViewDefinition = 
	MemoryViewId viewId,
	ImmutableTreeVector<MemoryViewDefinitionTerm> terms
	{
	public:
		pair<MemoryViewDefinitionTerm, int64_t>
			blockTermAndOffsetContainingIndex(int64_t index) const;
	};

