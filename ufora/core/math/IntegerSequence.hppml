/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/
#pragma once

#include <stdint.h>
#include "Nullable.hpp"
#include "../cppml/CPPMLEquality.hppml"
#include "../cppml/CPPMLPrettyPrinter.hppml"
#include "IntegerRange.hppml"

//models the integers [a X + b] for X in [0,N) where
//a = offset()
//b = stride()
//N = size()

@type IntegerSequence = int64_t size, int64_t offset, int64_t stride {
public:
	explicit IntegerSequence(int64_t inSize)
		{
		size() = inSize;
		offset() = 0;
		stride() = 1;
		}

	IntegerSequence(int64_t inSize, int64_t inOffset)
		{
		size() = inSize;
		offset() = inOffset;
		stride() = 1;
		}

	IntegerSequence(const IntegerRange& range)
		{
		size() = range.size();
		offset() = range.low();
		stride() = 1;
		}

	IntegerRange containingRange() const;

	IntegerSequence slice(IntegerSequence inSequence) const;

	IntegerSequence reversed() const;

	Nullable<IntegerSequence> isSequentialWith(const IntegerSequence& otherSequence) const;

	int64_t offsetForIndex(int64_t ix) const
		{
		return offset() + stride() * ix;
		}

	int64_t endValue() const
		{
		return offset() + stride() * size();
		}

	int64_t endValueInclusive() const
		{
		return offset() + stride() * (size() - 1);
		}

	int64_t smallestValue() const
		{
		if (stride() < 0)
			return offset() + (size()-1)*stride();
		else
			return offset();
		}

	int64_t largestValue() const
		{
		if (stride() > 0)
			return offset() + (size()-1)*stride();
		else
			return offset();
		}

	bool contains(int64_t val) const
		{
		int64_t relOffset = val - offset();

		if (relOffset % stride() != 0)
			return false;

		relOffset /= stride();

		return relOffset >= 0 && relOffset < size();
		}

	IntegerSequence slice(
			Nullable<int64_t> low,
			Nullable<int64_t> high = null(),
			Nullable<int64_t> stride = null()
			)  const;

	IntegerSequence slice(int64_t low)  const
		{
		return slice(null() << low);
		}

	IntegerSequence slice(
			int64_t low,
			int64_t high,
			Nullable<int64_t> stride = null()
			)  const
		{
		return slice(null() << low, null() << high, stride);
		}

	IntegerSequence slice(
			int64_t low,
			int64_t high,
			int64_t stride
			)  const
		{
		return slice(null() << low, null() << high, null() << stride);
		}

	IntegerSequence slice(
			Nullable<int64_t> low,
			int64_t high,
			Nullable<int64_t> stride = null()
			)  const
		{
		return slice(low, null() << high, stride);
		}

	IntegerSequence slice(
			Nullable<int64_t> low,
			Nullable<int64_t> high,
			int64_t stride
			)  const
		{
		return slice(low, high, null() << stride);
		}

	IntegerSequence intersect(IntegerSequence sequence) const;

	IntegerSequence offset(int64_t by) const
		{
		return IntegerSequence(size(), offset() + by, stride());
		}
};

macro_defineCppmlComparisonOperators(IntegerSequence)

template<>
class CPPMLPrettyPrint<IntegerSequence> {
public:
		static void prettyPrint(CPPMLPrettyPrintStream& s, const IntegerSequence& t)
			{
			s << "[" << t.offset() << ":" << t.endValue();

			if (t.stride() != 1)
				s << ":" << t.stride();

			s << ")";
			}
};

