/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/
#include "RangeToIntegerSequence.hppml"

#include "../UnitTest.hpp"
#include "../UnitTestCppml.hpp"
#include "../containers/ImmutableTreeVector.hppml"
#include "../Logging.hpp"

#include "Random.hpp"


BOOST_AUTO_TEST_CASE( test_math_RangeToIntegerSequence )
	{
	typedef RangeToIntegerSequence S;

	BOOST_CHECK_EQUAL(S(0, 10, 0, 1).width(), 10);
	BOOST_CHECK_EQUAL(S(0, 10, 0, 2).width(), 10);
	BOOST_CHECK_EQUAL(S(11, 10, 0, 2).width(), 0);

	BOOST_CHECK(!S(0, 10, 0, 2).indexIsValid(-1));
	BOOST_CHECK(S(0, 10, 0, 2).indexIsValid(0));
	BOOST_CHECK(S(0, 10, 0, 2).indexIsValid(9));
	BOOST_CHECK(!S(0, 10, 0, 2).indexIsValid(10));
	}

BOOST_AUTO_TEST_CASE( test_math_RangeToIntegerSequenceOffsets )
	{
	typedef RangeToIntegerSequence S;

	BOOST_CHECK_EQUAL(S(0, 10, 0, 1).offsetForIndex(5), 5);

	S s(0,10,0,2);

	for (long index = 0; index < 10; index++)
		{
		BOOST_CHECK_EQUAL(s.offsetOutputs(10).offsetForIndex(index), s.offsetForIndex(index) + 10);
		BOOST_CHECK_EQUAL(s.offsetOutputs(10).indexIsValid(index), s.indexIsValid(index));
		}

	for (long index = 0; index < 10; index++)
		{
		BOOST_CHECK_EQUAL(s.offsetInputs(10).offsetForIndex(index + 10), s.offsetForIndex(index));
		BOOST_CHECK_EQUAL(s.offsetInputs(10).indexIsValid(index + 10), s.indexIsValid(index));
		}
	}

BOOST_AUTO_TEST_CASE( test_math_RangeToIntegerSequenceDividing )
	{
	BOOST_CHECK_EQUAL( RangeToIntegerSequence::divideRoundingUp(1, 1), 1 );
	BOOST_CHECK_EQUAL( RangeToIntegerSequence::divideRoundingUp(1, 2), 1 );
	BOOST_CHECK_EQUAL( RangeToIntegerSequence::divideRoundingUp(1, 3), 1 );
	BOOST_CHECK_EQUAL( RangeToIntegerSequence::divideRoundingUp(2, 3), 1 );
	BOOST_CHECK_EQUAL( RangeToIntegerSequence::divideRoundingUp(3, 3), 1 );

	BOOST_CHECK_EQUAL( RangeToIntegerSequence::divideRoundingUp(-4, -3), 2 );
	BOOST_CHECK_EQUAL( RangeToIntegerSequence::divideRoundingUp(-3, -3), 1 );
	BOOST_CHECK_EQUAL( RangeToIntegerSequence::divideRoundingUp(-2, -3), 1 );
	BOOST_CHECK_EQUAL( RangeToIntegerSequence::divideRoundingUp(-1, -3), 1 );
	BOOST_CHECK_EQUAL( RangeToIntegerSequence::divideRoundingUp(0, -3), 0 );
	BOOST_CHECK_EQUAL( RangeToIntegerSequence::divideRoundingUp(1, -3), 0 );
	BOOST_CHECK_EQUAL( RangeToIntegerSequence::divideRoundingUp(2, -3), 0 );
	BOOST_CHECK_EQUAL( RangeToIntegerSequence::divideRoundingUp(3, -3), -1 );
	BOOST_CHECK_EQUAL( RangeToIntegerSequence::divideRoundingUp(1, -1), -1 );


	BOOST_CHECK_EQUAL( RangeToIntegerSequence::divideRoundingDown(1, 1), 1 );
	BOOST_CHECK_EQUAL( RangeToIntegerSequence::divideRoundingDown(1, 2), 0 );
	BOOST_CHECK_EQUAL( RangeToIntegerSequence::divideRoundingDown(1, 3), 0 );
	BOOST_CHECK_EQUAL( RangeToIntegerSequence::divideRoundingDown(2, 3), 0 );
	BOOST_CHECK_EQUAL( RangeToIntegerSequence::divideRoundingDown(3, 3), 1 );

	BOOST_CHECK_EQUAL( RangeToIntegerSequence::divideRoundingDown(-3, -3), 1 );
	BOOST_CHECK_EQUAL( RangeToIntegerSequence::divideRoundingDown(-2, -3), 0 );
	BOOST_CHECK_EQUAL( RangeToIntegerSequence::divideRoundingDown(-1, -3), 0 );
	BOOST_CHECK_EQUAL( RangeToIntegerSequence::divideRoundingDown(0, -3), 0 );
	BOOST_CHECK_EQUAL( RangeToIntegerSequence::divideRoundingDown(1, -3), -1 );
	BOOST_CHECK_EQUAL( RangeToIntegerSequence::divideRoundingDown(2, -3), -1 );
	BOOST_CHECK_EQUAL( RangeToIntegerSequence::divideRoundingDown(3, -3), -1 );
	BOOST_CHECK_EQUAL( RangeToIntegerSequence::divideRoundingDown(1, -1), -1 );
	}

BOOST_AUTO_TEST_CASE( test_math_RangeToIntegerSequenceComposition )
	{
	std::vector<RangeToIntegerSequence> slices;

	for (long offset = 0; offset < 5; offset++)
		for (long width = 0; width < 5; width++)
			for (long stride = -3; stride <= 3; stride++)
				if (stride != 0)
					for (long valueOffset = -1; valueOffset <= 1; valueOffset++)
						slices.push_back(RangeToIntegerSequence(offset, offset+width, valueOffset, stride));

	for (long k = 0; k < slices.size(); k++)
		for (long j = 0; j < slices.size(); j++)
			{
			RangeToIntegerSequence slice1 = slices[k];
			RangeToIntegerSequence slice2 = slices[j];

			RangeToIntegerSequence composed = slice1.compose(slice2);
			//composed[x] <---> slice1[slice2[x]]

			for (long input = -10; input < 20; input++)
				{
				bool computedValidity =
					slice2.indexIsValid(input) &&
						slice1.indexIsValid(slice2.offsetForIndex(input));

				int64_t computedOutput =
					slice1.offsetForIndex(slice2.offsetForIndex(input));

				if (computedValidity != composed.indexIsValid(input) ||
						computedOutput != composed.offsetForIndex(input))
					LOG_ERROR
						<< "On input " << input << ", composition of "
						<< slice1 << " and " << slice2 << " produces "
						<< composed
						;
				lassert(computedValidity == composed.indexIsValid(input));
				lassert(computedOutput == composed.offsetForIndex(input));
				}
			}
	}

BOOST_AUTO_TEST_CASE( test_math_RangeToIntegerSequenceConstruction )
	{
	IntegerRange range1(0, 10);
	IntegerRange range2(2, 12);

	IntegerSequence seq1(10);
	IntegerSequence seq2(10, 7, 23);

	BOOST_CHECK(seq1.size() == 10);
	BOOST_CHECK(seq2.size() == 10);

	BOOST_CHECK_EQUAL_CPPML(RangeToIntegerSequence::maps(range1, seq1).domain(), range1);
	BOOST_CHECK_EQUAL_CPPML(RangeToIntegerSequence::maps(range1, seq1).range(), seq1);

	BOOST_CHECK_EQUAL_CPPML(RangeToIntegerSequence::maps(range2, seq1).domain(), range2);
	BOOST_CHECK_EQUAL_CPPML(RangeToIntegerSequence::maps(range2, seq1).range(), seq1);

	BOOST_CHECK_EQUAL_CPPML(RangeToIntegerSequence::maps(range1, seq2).domain(), range1);
	BOOST_CHECK_EQUAL_CPPML(RangeToIntegerSequence::maps(range1, seq2).range(), seq2);

	BOOST_CHECK_EQUAL_CPPML(RangeToIntegerSequence::maps(range2, seq2).domain(), range2);
	BOOST_CHECK_EQUAL_CPPML(RangeToIntegerSequence::maps(range2, seq2).range(), seq2);
	}


