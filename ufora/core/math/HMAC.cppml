/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/
#include "HMAC.hppml"
#include "Hash.hpp"

/********************

from http://en.wikipedia.org/wiki/Hmac

#!/usr/bin/env python
from hashlib import md5
trans_5C = "".join(chr(x ^ 0x5c) for x in xrange(256))
trans_36 = "".join(chr(x ^ 0x36) for x in xrange(256))
blocksize = md5().block_size

def hmac_md5(key, msg):
    if len(key) > blocksize:
        key = md5(key).digest()
    key += chr(0) * (blocksize - len(key))
    o_key_pad = key.translate(trans_5C)
    i_key_pad = key.translate(trans_36)
    return md5(o_key_pad + md5(i_key_pad + msg).digest())

if __name__ == "__main__":
    h = hmac_md5("key", "The quick brown fox jumps over the lazy dog")
    print h.hexdigest()  # 80070713463e7749b90c2dc24911e275

*******************/

namespace Ufora {
namespace math {
namespace crypto {

//blockSize in bytes
static int blockSize = 512 / 8;

std::string hashToStringAsBytes(HashSha256 h)
	{
	std::string tr((char*)&h, (char*)(&h+1));

	//HashSha256 keys are 32 bytes
	lassert(tr.size() == 32);

	return tr;
	}

std::string padKey(std::string key)
	{
	if (key.size() > blockSize)
		{
		HashSha256 h = HashSha256::Sha256(key);

		//hashes are POD, so we can just copy their memory
		key = hashToStringAsBytes(h);
		}

	if (key.size() < blockSize)
		return key + std::string(blockSize - key.size(), 0);

	return key;
	}

std::string xorStringWith(std::string s, unsigned char toXorIn)
	{
	std::string tr;
	tr.resize(s.size());

	unsigned char* dest = (unsigned char*)&tr[0];
	unsigned char* src = (unsigned char*)&s[0];

	for (long k = 0; k < s.size();k++)
		dest[k] = src[k] ^ toXorIn;

	return tr;
	}

HashSha256 hmacDigest(std::string message, std::string key)
	{
	key = padKey(key);

	return
		HashSha256::Sha256(
			xorStringWith(key, 0x5c) +
			hashToStringAsBytes(
				HashSha256::Sha256(
					xorStringWith(key, 0x36) +
					message
					)
				)
			);
	}


}
}
}



