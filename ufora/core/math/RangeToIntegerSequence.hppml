/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/
#pragma once

#include <stdint.h>
#include "IntegerSequence.hppml"
#include "IntegerRange.hppml"
#include "Nullable.hpp"
#include "../cppml/CPPMLEquality.hppml"
#include "../cppml/CPPMLPrettyPrinter.hppml"

//models a mapping of a contiguous block of integers in [L,H) to
//an arithmetic sequence of integers

@type RangeToIntegerSequence = int64_t lowIndex, int64_t highIndex, int64_t offset, int64_t stride {
public:
	explicit RangeToIntegerSequence(const IntegerSequence& seq)
		{
		lowIndex() = 0;
		highIndex() = seq.size();
		offset() = seq.offset();
		stride() = seq.stride();
		}

	static RangeToIntegerSequence maps(IntegerRange range, IntegerSequence to)
		{
		lassert_dump(
			range.size() == to.size(),
			"expected " << range.size() << " == " << to.size() << ". args are "
				<< prettyPrintString(range) << " and " << prettyPrintString(to)
			);

		return RangeToIntegerSequence(
			range.low(), range.high(),
			to.offset() - to.stride() * range.low(), to.stride()
			);
		}

	int64_t offsetForIndex(int64_t index) const
		{
		return offset() + stride() * index;
		}

	bool indexIsValid(int64_t index) const
		{
		return index >= lowIndex() && index < highIndex();
		}

	int64_t width() const
		{
		return std::max<int64_t>(0, highIndex() - lowIndex());
		}

	IntegerRange domain() const
		{
		return IntegerRange(lowIndex(), highIndex());
		}

	bool domainOverlaps(const RangeToIntegerSequence& other) const
		{
		return domain().overlaps(other.domain());
		}

	IntegerSequence range() const
		{
		return IntegerSequence(width(), offsetForIndex(lowIndex()), stride());
		}



	//for the same input range, offset every output by 'by'
	RangeToIntegerSequence offsetOutputs(int64_t by) const
		{
		return RangeToIntegerSequence(lowIndex(), highIndex(), offset() + by, stride());
		}

	//return newArray such that
	//	newArray[x+s] == oldArray[x]
	//and the set of actual values mapped to doesn't change
	RangeToIntegerSequence offsetInputs(int64_t shiftBy) const
		{
		//x * stride + newOffset == (x - s) * stride + oldOffset
		//so, newOffset = oldOffset - s * stride
		return RangeToIntegerSequence(
			lowIndex() + shiftBy,
			highIndex() + shiftBy,
			offset() - stride() * shiftBy,
			stride()
			);
		}

	RangeToIntegerSequence restrictedTo(IntegerRange range) const
		{
		return RangeToIntegerSequence(
			std::max<int64_t>(range.low(), lowIndex()),
			std::min<int64_t>(range.high(), highIndex()),
			offset(),
			stride()
			);
		}

	//produce an RangeToIntegerSequence newArray, such that
	//	newArray[x] == oldArray[first[x]]
	//and such that newArray[x] is valid whenever both first[x] is valid
	//and oldArray[first[x]] is valid
	RangeToIntegerSequence compose(RangeToIntegerSequence first) const
		{
		lassert(first.stride() != 0);

		int64_t newLowIndex;
		int64_t newHighIndex;

		if (first.stride() > 0)
			{
			//we want to find the new low and high indices.
			//we should have it so that
			//	newLowIndex * first.stride() + first.offset() >= lowIndex()
			//and
			//	(newLowIndex-1) * first.stride() + first.offset() < lowIndex()

			newLowIndex = divideRoundingUp(lowIndex() - first.offset(), first.stride());

			//we should have it so that
			//	(newHighIndex-1) * first.stride() + first.offset() < highIndex()
			//and
			//	(newHighIndex) * first.stride() + first.offset() >= highIndex()

			newHighIndex = divideRoundingUp(highIndex() - first.offset(), first.stride());
			}
		else
			{
			//we want to find the new low and high indices. Because the stride is negative
			//it will switch around the targets - namely,

			//we want the integer newLowIndex such that
			//	newLowIndex * first.stride() + first.offset() < highIndex()
			//	(newLowIndex-1) * first.stride() + first.offset() >= highIndex()
			//implying
			//	newLowIndex * first.stride() < highIndex() - first.offset()
			//	(newLowIndex-1) * first.stride() >= highIndex() - first.offset()
			//and switching signs (because stride is negative)
			//	newLowIndex > (highIndex() - first.offset()) / first.stride()
			//	newLowIndex <= (highIndex() - first.offset()) / first.stride() + 1
			//which implies that if
			//	(highIndex() - first.offset()) / first.stride()
			//is an integer, we want the next one up, and otherwise, we just want to round up
			//which can be accomplished by:
			newLowIndex = divideRoundingDown(highIndex() - first.offset(), first.stride()) + 1;

			//we should have it so that
			//	(newHighIndex-1) * first.stride() + first.offset() >= lowIndex()
			//and
			//	(newHighIndex) * first.stride() + first.offset() < lowIndex()
			//which is analagous to the situation above

			newHighIndex = divideRoundingDown(lowIndex() - first.offset(), first.stride()) + 1;
			}

		return RangeToIntegerSequence(
			std::max<int64_t>(newLowIndex, first.lowIndex()),
			std::min<int64_t>(newHighIndex, first.highIndex()),
			offset() + first.offset() * stride(),
			stride() * first.stride()
			);
		}

	static int64_t divideRoundingUp(int64_t val, int64_t mul)
		{
		if (val == 0)
			return 0;

		if (mul < 0)
			return -divideRoundingDown(val, -mul);

		if (val < 0)
			return -divideRoundingDown(-val, mul);

		return ((val - 1) / mul + 1);
		}
	static int64_t divideRoundingDown(int64_t val, int64_t mul)
		{
		if (val == 0)
			return 0;

		if (val < 0)
			return -divideRoundingUp(-val, mul);

		if (mul < 0)
			return -divideRoundingUp(val, -mul);

		return (val / mul);
		}

};

macro_defineCppmlComparisonOperators(RangeToIntegerSequence)

template<>
class CPPMLPrettyPrint<RangeToIntegerSequence> {
public:
		static void prettyPrint(CPPMLPrettyPrintStream& s, const RangeToIntegerSequence& t)
			{
			s << "Map(" << t.domain() << " -> " << t.range() << ")";
			}
};

