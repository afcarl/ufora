/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/
#include "SimpleParse.hppml"

SimpleParseRange::SimpleParseRange(const SimpleParseNode& left, const SimpleParseNode& right)
	{
	start() = left.extent().start();
	stop() = right.extent().stop();
	}

SimpleParseRange::SimpleParseRange(const ImmutableTreeVector<SimpleParseNode>& nodes)
	{
	lassert(nodes.size());

	start() = nodes[0].extent().start();
	stop() = nodes.back().extent().stop();
	}

SimpleParseRange SimpleParseRange::ForText(const std::string& text)
	{
	long newlines = 0;
	long cols = 0;
	for (long k = 0; k < text.size(); k++)
		if (text[k] == '\n')
			{
			newlines++;
			cols = 0;
			}
		else
			cols++;

	return SimpleParseRange(
		SimpleParsePosition(1, 1),
		SimpleParsePosition(newlines + 1, cols+1)
		);
	}

void SimpleParseNode::toString(CPPMLPrettyPrintStream  str) const
	{
	@match SimpleParseNode(*this)
		-|	Empty() ->> {;}
		-|	Identifier(v) ->> { str << v; ;}
		-|	Quote(v) ->> { str << "\"" << v << "\""; ;}
		-|	Number(v) ->> { str << v; ;}
		-|	Operator(v) ->> { str << v; ;}
		-|	Sequence(Semicolon(),elts) ->> { for (long k = 0; k < elts.size(); k++) { str << (k == 0 ? "" : "; ");  elts[k].toString(str); } ; }
		-|	Sequence(Comma(),elts) ->> { for (long k = 0; k < elts.size(); k++) { str << (k == 0 ? "" : ", ");  elts[k].toString(str); } ; }
		-|	Sequence(Colon(),elts) ->> { for (long k = 0; k < elts.size(); k++) { str << (k == 0 ? "" : ": ");  elts[k].toString(str); } ; }
		-|	Sequence(Concatenation(),elts) ->> { for (long k = 0; k < elts.size(); k++) { str << (k == 0 ? "" : " ");  elts[k].toString(str); } ; }
		-|	Grouping(Parens(), node) ->> { str << "("; node.toString(str); str << ")";; }
		-|	Grouping(Braces(), node) ->> { str << "{"; node.toString(str); str << "}";; }
		-|	Grouping(Brackets(), node) ->> { str << "["; node.toString(str); str << "]";; }
		;
	}

std::string SimpleParseGroup::toString(void) const
	{
	@match SimpleParseGroup(*this)
		-|	Parens()   ->> { return "parentheses"; }
		-|	Braces()   ->> { return "braces"; }
		-|	Brackets() ->> { return "brackets"; }
		;
	}

std::string SimpleParseGroup::toStringSingular(void) const
	{
	@match SimpleParseGroup(*this)
		-|	Parens()   ->> { return "parenthesis"; }
		-|	Braces()   ->> { return "brace"; }
		-|	Brackets() ->> { return "bracket"; }
		;
	}

std::string SimpleParseError::errorString(void) const
	{
	@match SimpleParseError(*this)
		-|	UnknownToken() ->> { return "Unknown character."; }
		-|	UnterminatedComment() ->> { return "Unterminated comment."; }
		-|	UnterminatedStringConstant() ->> { return "Unterminated string literal."; }
		-|	BadNumericConstant(msg) ->> { return "Invalid numeric literal: " + msg + "."; }
		-|	InvalidEscapeSequence() ->> { return "Invalid escape sequence in string literal."; }
		-|	GroupMismatch(left, right) ->> {
				return "Mismatch balancing left " +
					left.toStringSingular() + " with right " +
					right.toStringSingular() + ".";
				}
		-|	GroupUnterminated(left) ->> { return "Unterminated left " + left.toStringSingular() + "."; }
		-|	ExcessTerminator(left) ->> { return "Extraneous right " + left.toStringSingular() + "."; }
		;
	}


