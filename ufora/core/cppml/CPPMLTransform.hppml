/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/
#ifndef CPPMLTransform_hppml_
#define CPPMLTransform_hppml_

#include <string>
#include <set>
#include <map>
#include <vector>
#include "../math/Nullable.hpp"
#include "CPPMLTransform.fwd.hppml"
#include <boost/unordered_set.hpp>
#include <boost/unordered_map.hpp>
#include "../Platform.hpp"
#include <boost/uuid/uuid.hpp>

template<class T, class T2>
class CPPMLTransform {
public:
	template<class F>
	static Nullable<T> apply(const T& in, const F& f)
		{
		return CPPMLTransform<T, typename T::kind>::apply(in, f);
		}
};
/*
template<class T, class T2>
class CPPMLTransform {
public:
	template<class F>
	static Nullable<T> apply(const T& in, const F& f)
		{
		return CPPMLTransform<T, typename T::metadata>::apply(in, f);
		}
};*/


#define CPPMLTransform_define_passthrough(ty) \
template<> class CPPMLTransform<ty, void> {\
public:\
	template<class F>\
	static Nullable<ty> apply(const ty& in, const F& f)\
		{\
		return null();\
		}\
};\


CPPMLTransform_define_passthrough(std::string)
CPPMLTransform_define_passthrough(bool)
CPPMLTransform_define_passthrough(uint8_t)
CPPMLTransform_define_passthrough(int8_t)
CPPMLTransform_define_passthrough(uint16_t)
CPPMLTransform_define_passthrough(int16_t)
CPPMLTransform_define_passthrough(uint32_t)
CPPMLTransform_define_passthrough(int32_t)
CPPMLTransform_define_passthrough(uint64_t)
CPPMLTransform_define_passthrough(int64_t)
CPPMLTransform_define_passthrough(float)
CPPMLTransform_define_passthrough(double)
#ifdef BSA_PLATFORM_APPLE
    CPPMLTransform_define_passthrough(long)
#endif


template<class T, class T2>
class CPPMLTransform<std::pair<T, T2>, void> {
public:
	template<class F>
	static Nullable<std::pair<T, T2> > apply(const std::pair<T, T2>& in, const F& f)
		{
		Nullable<T> t1 = transformNullable(in.first, f);
		Nullable<T2> t2 = transformNullable(in.second, f);
		if (!t1 && !t2)
			return null();
		return null() << std::make_pair(t1 ? *t1 : in.first, t2 ? *t2 : in.second);
		}
};

template<class T, class T2>
class CPPMLTransform<std::map<T, T2>, void> {
public:
	template<class F>
	static Nullable<std::map<T, T2> > apply(const std::map<T, T2>& in, const F& f)
		{
		for (typename std::map<T, T2>::const_iterator it = in.begin(), it_end = in.end(); it != it_end; ++it)
			{
			Nullable<T> t1 = transformNullable(it->first, f);
			Nullable<T2> t2 = transformNullable(it->second, f);

			if (t1 || t2)
				{
				Nullable<std::map<T, T2> > out;
				out = std::map<T, T2>();

				typename std::map<T, T2>::const_iterator it2 = in.begin();

				for (; it2 != it; ++it2)
					(*out)[it2->first] = it2->second;

				(*out)[t1 ? *t1 : it->first] = t2 ? *t2 : it->second;

				it2++;
				for (; it2 != it_end; ++it2)
					{
					t1 = transformNullable(it2->first, f);
					t2 = transformNullable(it2->second, f);

					(*out)[t1 ? *t1 : it2->first] = t2 ? *t2 : it2->second;
					}
				return out;
				}
			}
		return null();
		}
};

template<class T>
class CPPMLTransform<std::set<T>, void> {
public:
	template<class F>
	static Nullable<std::set<T> > apply(const std::set<T>& in, const F& f)
		{
		for (typename std::set<T>::const_iterator it = in.begin(), it_end = in.end(); it != it_end; ++it)
			{
			Nullable<T> t1 = transformNullable(*it, f);

			if (t1)
				{
				Nullable<std::set<T> > out;
				out = std::set<T>();

				typename std::set<T>::const_iterator it2 = in.begin();

				for (; it2 != it; ++it2)
					out->insert(*it2);

				out->insert(*t1);

				it2++;
				for (; it2 != it_end; ++it2)
					{
					t1 = transformNullable(*it2, f);
					out->insert(t1 ? *t1 : *it2);
					}
				return out;
				}
			}
		return null();
		}
};

template<class T, class T2>
class CPPMLTransform<boost::unordered_map<T, T2>, void> {
public:
	template<class F>
	static Nullable<boost::unordered_map<T, T2> > apply(const boost::unordered_map<T, T2>& in, const F& f)
		{
		for (typename boost::unordered_map<T, T2>::const_iterator it = in.begin(), it_end = in.end(); it != it_end; ++it)
			{
			Nullable<T> t1 = transformNullable(it->first, f);
			Nullable<T2> t2 = transformNullable(it->second, f);

			if (t1 || t2)
				{
				Nullable<boost::unordered_map<T, T2> > out;
				out = boost::unordered_map<T, T2>();

				typename boost::unordered_map<T, T2>::const_iterator it2 = in.begin();

				for (; it2 != it; ++it2)
					(*out)[it2->first] = it2->second;

				(*out)[t1 ? *t1 : it->first] = t2 ? *t2 : it->second;

				it2++;
				for (; it2 != it_end; ++it2)
					{
					t1 = transformNullable(it2->first, f);
					t2 = transformNullable(it2->second, f);

					(*out)[t1 ? *t1 : it2->first] = t2 ? *t2 : it2->second;
					}
				return out;
				}
			}
		return null();
		}
};

template<class T>
class CPPMLTransform<boost::unordered_set<T>, void> {
public:
	template<class F>
	static Nullable<boost::unordered_set<T> > apply(const boost::unordered_set<T>& in, const F& f)
		{
		for (typename boost::unordered_set<T>::const_iterator it = in.begin(), it_end = in.end(); it != it_end; ++it)
			{
			Nullable<T> t1 = transformNullable(*it, f);

			if (t1)
				{
				Nullable<boost::unordered_set<T> > out;
				out = boost::unordered_set<T>();

				typename boost::unordered_set<T>::const_iterator it2 = in.begin();

				for (; it2 != it; ++it2)
					out->insert(*it2);

				out->insert(*t1);

				it2++;
				for (; it2 != it_end; ++it2)
					{
					t1 = transformNullable(*it2, f);
					out->insert(t1 ? *t1 : *it2);
					}
				return out;
				}
			}
		return null();
		}
};


template<class T>
class CPPMLTransform<std::vector<T>, void> {
public:
	template<class F>
	static Nullable<std::vector<T> > apply(const std::vector<T>& in, const F& f)
		{
		for (typename std::vector<T>::const_iterator it = in.begin(), it_end = in.end(); it != it_end; ++it)
			{
			Nullable<T> t1 = transformNullable(*it, f);

			if (t1)
				{
				Nullable<std::vector<T> > out;
				out = std::vector<T>();

				typename std::vector<T>::const_iterator it2 = in.begin();

				for (; it2 != it; ++it2)
					out->push_back(*it2);

				out->push_back(*t1);

				it2++;
				for (; it2 != it_end; ++it2)
					{
					t1 = transformNullable(*it2, f);
					out->push_back(t1 ? *t1 : *it2);
					}
				return out;
				}
			}
		return null();
		}
};
template<class T>
class EnsureIsInNullable {
public:
	static	Nullable<T> ensure(const T& in) { return null() << in; }
	static	Nullable<T> ensure(const Nullable<T>& in) { return in; }
};

template<class T, class F>
Nullable<T> transformNullable(const T& inT, const F& inF)
	{
	bool shouldContinue = true;
	bool everChanged = false;

	Nullable<T> t2 = EnsureIsInNullable<T>::ensure(inF.processDown(inT, shouldContinue));

	Nullable<T> t3;
	if (shouldContinue)
		t3 = CPPMLTransform<T, void>::apply(t2 ? *t2 : inT, inF);
		else
		t3 = t2;

	Nullable<T> fin = EnsureIsInNullable<T>::ensure(inF.processUp(t3 ? *t3 : t2 ? *t2 : inT));

	return fin ? null() << *fin : t3 ? null() << *t3 : t2 ? null() << *t2 : null();
	}

template<class T, class F>
T transform(const T& inT, const F& inF)
	{
	Nullable<T> tr = transformNullable(inT, inF);
	if (!tr)
		return inT;
	return *tr;
	}



template<class T>
class CPPMLTransform<T, ::CPPML::Kinds::tuple> {
public:
	//class that gets handed each element of the tuple, along with the cppml getter function.
	//If the transformation isn't null, it ensures that the result is populated;
	template<class F>
	class Applier {
	public:
			const F& mF;
			Nullable<T>* mTR;
			const T& mOrig;

			Applier(const F& inF, Nullable<T>& inTR, const T& inOrig) :
					mF(inF),
					mTR(&inTR),
					mOrig(inOrig)
				{
				}

			template<class elt_type, class getter_type>
			void operator()(const elt_type& in, const getter_type& getter) const
				{
				Nullable<elt_type> tr = transformNullable(in, mF);

				if (tr)
					{
					if (!*mTR)
						*mTR = mOrig;
                    getter_type::get(**mTR) = std::move(*tr);
					}
				}
	};

	template<class F>
	static Nullable<T> apply(const T& in, const F& f)
		{
		Nullable<T> tr;

		Applier<F> a(f, tr, in);
		in.visitWithGetter_(a);

		if (tr)
			CPPML::validate(*tr);

		return tr;
		}
};
template<class T>
class CPPMLTransform<T, ::CPPML::Kinds::alternative> {
public:
		template<class F>
		class Applier {
		public:
				const F& mF;
				const T& mT;
				Nullable<T> *mTR;

				Applier(const F& inF, const T& inT, Nullable<T>& inTR) : mF(inF), mT(inT), mTR(&inTR)
					{
					}

				template<class elt_type>
				void operator()(const elt_type& in) const
					{
					Nullable<elt_type> tr = transformNullable(in, mF);

					if (!tr)
						*mTR = null();
					else
						*mTR = T(tr ? *tr : in, mT.getCommonData());
					}
		};

		template<class F>
		static Nullable<T> apply(const T& in, const F& f)
			{
			Nullable<T> tr;
			Applier<F> ap(f, in, tr);
			in.visit(ap);

			return tr;
			}
};
template<class T>
class CPPMLTransform<Nullable<T>, void> {
public:
	template<class F>
	static Nullable<Nullable<T> > apply(const Nullable<T>& in, const F& f)
		{
		if (in)
			{
			Nullable<T> res = transformNullable(*in, f);
			if (res)
				return null() << res;
			return null();
			}
			else
			return Nullable<Nullable<T> >();
		}
};


namespace boost {
template<class T>
class shared_ptr;
}

template<class T>
class CPPMLTransform<boost::shared_ptr<T>, void> {
public:
	template<class F>
	static Nullable<boost::shared_ptr<T> > apply(const boost::shared_ptr<T>& in, const F& f)
		{
		if (in)
			{
			Nullable<T> res = transformNullable(*in, f);
			if (res)
				return null() << boost::shared_ptr<T>(new T(*res));
			return null();
			}
			else
			return Nullable<boost::shared_ptr<T> >();
		}
};

template<class T, class T2>
class CPPMLTransform;

template<>
class CPPMLTransform<boost::uuids::uuid, void> {
public:
		template<class F>
		static Nullable<boost::uuids::uuid> apply(const boost::uuids::uuid& in, const F& f)
			{
			return null();
			}
};




#endif

