/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/
#ifndef CPPMLVisitWithIndex_hppml_
#define CPPMLVisitWithIndex_hppml_

#include <string>
#include <set>
#include <map>
#include <vector>

template<class T, class T2>
class CPPMLVisitWithIndex {
public:
		template<class F, class indices_type>
		static void apply(const T& in, F& f, const indices_type& inIndices)
			{
			CPPMLVisitWithIndex<T, typename T::metadata>::apply(in, f, inIndices);
			}
};


#define CPPMLVisitWithIndex_define_passthrough(ty) \
template<> class CPPMLVisitWithIndex<ty, void> {\
public:\
		template<class F, class indices_type>\
		static void apply(const ty& in, F& f, const indices_type& inIndices)\
			{\
			}\
};\


CPPMLVisitWithIndex_define_passthrough(std::string)
CPPMLVisitWithIndex_define_passthrough(bool)
CPPMLVisitWithIndex_define_passthrough(uint8_t)
CPPMLVisitWithIndex_define_passthrough(int8_t)
CPPMLVisitWithIndex_define_passthrough(uint16_t)
CPPMLVisitWithIndex_define_passthrough(int16_t)
CPPMLVisitWithIndex_define_passthrough(uint32_t)
CPPMLVisitWithIndex_define_passthrough(int32_t)
CPPMLVisitWithIndex_define_passthrough(uint64_t)
CPPMLVisitWithIndex_define_passthrough(int64_t)
CPPMLVisitWithIndex_define_passthrough(float)
CPPMLVisitWithIndex_define_passthrough(double)


template<class T, class T2>
class CPPMLVisitWithIndex<std::pair<T, T2>, void> {
public:
		template<class F, class indices_type>
		static void apply(const std::pair<T, T2>& in, F& f, const indices_type& inIndices)
			{
			visit(in.first, f, inIndices + 0);
			visit(in.second, f, inIndices + 1);
			}
};

template<class T, class T2>
class CPPMLVisitWithIndex<std::map<T, T2>, void> {
public:
		template<class F, class indices_type>
		static void apply(const std::map<T, T2>& in, F& f, const indices_type& inIndices)
			{
			uint64_t ix = 0;
			for (typename std::map<T, T2>::const_iterator it = in.begin(), it_end = in.end(); it != it_end; ++it)
				{
				visit(*it, f, inIndices + ix);
				ix++;
				}
			}
};

template<class T>
class CPPMLVisitWithIndex<std::set<T>, void> {
public:
		template<class F, class indices_type>
		static void apply(const std::set<T>& in, F& f, const indices_type& inIndices)
			{
			uint64_t ix = 0;
			for (typename std::set<T>::const_iterator it = in.begin(), it_end = in.end(); it != it_end; ++it)
				{
				visit(*it, f, inIndices + ix);
				ix++;
				}
			}
};

template<class T>
class CPPMLVisitWithIndex<std::vector<T>, void> {
public:
		template<class F, class indices_type>
		static void apply(const std::vector<T>& in, F& f, const indices_type& inIndices)
			{
			uint64_t ix = 0;
			for (typename std::vector<T>::const_iterator it = in.begin(), it_end = in.end(); it != it_end; ++it)
				{
				visit(*it, f, inIndices + ix);
				ix++;
				}
			}
};

template<class T, class F, class indices_type>
void visit(const T& inT, F& inF, const indices_type& inIndices)
	{
	bool shouldContinue = true;

	inF.processDown(inT, shouldContinue, inIndices);

	if (!shouldContinue)
		return;

	CPPMLVisitWithIndex<T, void>::apply(inT, inF, inIndices);

	inF.processUp(inT);
	}
template<class T>
class CPPMLVisitWithIndex<T, ::CPPML::Null> {
public:
		template<class F, class indices_type>
		static void apply(const T& in, F& f, const indices_type& inIndices)
			{
			}
};
template<class T, class A1, class A2>
class CPPMLVisitWithIndex<T, ::CPPML::Chain<A1, A2> > {
public:
		template<class F, class indices_type>
		static void apply(const T& in, F& f, const indices_type& inIndices)
			{
			CPPMLVisitWithIndex<T, A1>::apply(in, f, inIndices);
			CPPMLVisitWithIndex<T, A2>::apply(in, f, inIndices);
			}
};

template<class T, class member_type_in, class accessor_in, const int32_t ix>
class CPPMLVisitWithIndex<T, ::CPPML::TupleMember<T, member_type_in, accessor_in, ix> > {
public:
		template<class F, class indices_type>
		static void apply(const T& in, F& f, const indices_type& inIndices)
			{
			visit(accessor_in::get(in), f, inIndices + ix);
			}
};


template<class T, class member_type_in, class accessor_in, const int32_t ix>
class CPPMLVisitWithIndex<T, ::CPPML::AlternativeCommonMember<T, member_type_in, accessor_in, ix> > {
public:
		template<class F, class indices_type>
		static void apply(const T& in, F& f, const indices_type& inIndices)
			{
			visit(accessor_in::get(in), f, inIndices + ix);
			}
};


template<class T, class member_type_in, class accessor_in>
class CPPMLVisitWithIndex<T, ::CPPML::Alternative<T, member_type_in, accessor_in> > {
public:
		template<class F, class indices_type>
		static void apply(const T& in, F& f, const indices_type& inIndices)
			{
			if (accessor_in::is(in))
				visit(accessor_in::get(in), f, inIndices);
			}
};


namespace boost {
template<class T>
class shared_ptr;
}

template<class T>
class CPPMLVisitWithIndex<boost::shared_ptr<T>, void> {
public:
		template<class F, class F2>
		static void apply(const boost::shared_ptr<T>& in, F& f, const F2& inF2)
			{
			if (in)
				visit(*in, f, inF2);
			}
};




#endif

