/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/
#pragma once

#include "../Common.hppml"
#include "../math/Hash.hpp"
#include "../containers/ImmutableTreeVector.hppml"
#include "../containers/ImmutableTreeMap.hppml"
#include "../Json.hppml"
#include "../Platform.hpp"

template<class T>
class CPPMLToJson;

template<class T, class M1, class M2>
class CPPMLToJsonGivenCppmlMetadata;

template<class T>
Ufora::Json cppmlToJson(const T& in)
	{
	return CPPMLToJson<T>::toJson(in);
	}

template<class T>
T jsonToCppml(const Ufora::Json& in)
	{
	T out;

	CPPMLToJson<T>::fromJson(out, in);

	return out;
	}

template<class T>
void jsonToCppml(T& out, const Ufora::Json& in)
	{
	CPPMLToJson<T>::fromJson(out, in);
	}

template<class T>
class CPPMLToJson<Nullable<T> > {
public:
	static Ufora::Json toJson(const Nullable<T>& in)
		{
		ImmutableTreeVector<Ufora::Json> tr;

		if (in)
			tr = tr + CPPMLToJson<T>::toJson(*in);

		return Ufora::Json::Array(tr);
		}

	static void fromJson(Nullable<T>& out, const Ufora::Json& in)
		{
		out = Nullable<T>();

		@match Ufora::Json(in)
			-| Array(x) ->> {
				if (x.size() == 0)
					return;
				if (x.size() == 1)
					{
					T elt;

					CPPMLToJson<T>::fromJson(elt, x[0]);

					out = elt;
					return;
					}
				}
			-| _ ->> {
				}

		lassert_dump(false, "badly formed json");
		}
};

template<class T>
class CPPMLToJson<ImmutableTreeVector<T> > {
public:
	static Ufora::Json toJson(const ImmutableTreeVector<T>& in)
		{
		ImmutableTreeVector<Ufora::Json> tr;

		for (long k = 0; k < in.size();k++)
			tr = tr + CPPMLToJson<T>::toJson(in[k]);

		return Ufora::Json::Array(tr);
		}

	static void fromJson(ImmutableTreeVector<T>& out, const Ufora::Json& in)
		{
		out = ImmutableTreeVector<T>();

		@match Ufora::Json(in)
			-| Array(x) ->> {
				for (long k = 0; k < x.size();k++)
					{
					T elt;

					CPPMLToJson<T>::fromJson(elt, x[k]);

					out = out + elt;
					}
				}
			-| _ ->> {
				lassert_dump(false, "badly formed json");
				}
		}
};

template<class T>
class CPPMLToJson<ImmutableTreeSet<T> > {
public:
	static Ufora::Json toJson(const ImmutableTreeSet<T>& in)
		{
		ImmutableTreeVector<Ufora::Json> tr;

		for (long k = 0; k < in.size();k++)
			tr = tr + CPPMLToJson<T>::toJson(in[k]);

		return Ufora::Json::Array(tr);
		}

	static void fromJson(ImmutableTreeSet<T>& out, const Ufora::Json& in)
		{
		out = ImmutableTreeSet<T>();

		@match Ufora::Json(in)
			-| Array(x) ->> {
				for (long k = 0; k < x.size();k++)
					{
					T elt;

					CPPMLToJson<T>::fromJson(elt, x[k]);

					out = out + elt;
					}
				}
			-| _ ->> {
				lassert_dump(false, "badly formed json");
				}
		}
};

template<class T1, class T2>
class CPPMLToJson<std::pair<T1, T2> > {
public:
	static Ufora::Json toJson(const std::pair<T1, T2>& in)
		{
		return Ufora::Json::Array(
			emptyTreeVec() +
				CPPMLToJson<T1>::toJson(in.first)  +
				CPPMLToJson<T2>::toJson(in.second)
			);
		}

	static void fromJson(std::pair<T1, T2>& out, const Ufora::Json& in)
		{
		@match Ufora::Json(in)
			-| Array(x) ->> {
				lassert(x.size() == 2);

				CPPMLToJson<T1>::fromJson(out.first, x[0]);
				CPPMLToJson<T1>::fromJson(out.second, x[1]);
				}
			-| _ ->> {
				lassert_dump(false, "badly formed json");
				}
		}
};

template<class T1, class T2>
class CPPMLToJson<ImmutableTreeMap<T1, T2> > {
public:
	static Ufora::Json toJson(const ImmutableTreeMap<T1, T2>& in)
		{
		ImmutableTreeVector<Ufora::Json> tr;

		for (long k = 0; k < in.size();k++)
			tr = tr + CPPMLToJson<pair<T1, T2> >::toJson(in.pairAtPosition(k));

		return Ufora::Json::Array(tr);
		}

	static void fromJson(ImmutableTreeMap<T1, T2>& out, const Ufora::Json& in)
		{
		out = ImmutableTreeMap<T1, T2>();

		@match Ufora::Json(in)
			-| Array(x) ->> {
				for (long k = 0; k < x.size();k++)
					{
					pair<T1, T2> elt;

					CPPMLToJson<pair<T1, T2> >::fromJson(elt, x[k]);

					out = out + elt;
					}
				}
			-| _ ->> {
				lassert_dump(false, "badly formed json");
				}
		}
};

template<>
class CPPMLToJson<Ufora::Json> {
public:
	static Ufora::Json toJson(const Ufora::Json& in)
		{
		return in;
		}
	static void fromJson(Ufora::Json& out, const Ufora::Json& in)
		{
		out = in;
		}
};


template<>
class CPPMLToJson<std::string> {
public:
	static Ufora::Json toJson(const std::string& in)
		{
		return Ufora::Json::String(in);
		}
	static void fromJson(std::string& out, const Ufora::Json& in)
		{
		@match Ufora::Json(in)
			-| String(x) ->> {
				out = x;
				}
			-| _ ->> {
				lassert_dump(false, "badly formed json");
				}
		}
};

template<>
class CPPMLToJson<bool> {
public:
	static Ufora::Json toJson(const bool& in)
		{
		return Ufora::Json::Boolean(in);
		}
	static void fromJson(bool& out, const Ufora::Json& in)
		{
		@match Ufora::Json(in)
			-| Boolean(x) ->> {
				out = x;
				}
			-| _ ->> {
				lassert_dump(false, "badly formed json");
				}
		}
};

template<>
class CPPMLToJson<double> {
public:
	static Ufora::Json toJson(const double& in)
		{
		return Ufora::Json::Number(in);
		}
	static void fromJson(double& out, const Ufora::Json& in)
		{
		@match Ufora::Json(in)
			-| Number(x) ->> {
				out = x;
				}
			-| _ ->> {
				lassert_dump(false, "badly formed json");
				}
		}
};

template<>
class CPPMLToJson<float> {
public:
	static Ufora::Json toJson(const float& in)
		{
		return Ufora::Json::Number(in);
		}
	static void fromJson(float& out, const Ufora::Json& in)
		{
		@match Ufora::Json(in)
			-| Number(x) ->> {
				out = x;
				}
			-| _ ->> {
				lassert_dump(false, "badly formed json");
				}
		}
};

#define macro_cppml_to_json_integer_as_string(T) \
template<>\
class CPPMLToJson<T> {\
public:\
	static Ufora::Json toJson(const T& in)\
		{\
		return Ufora::Json::String(boost::lexical_cast<std::string>(in));\
		}\
	static void fromJson(T& out, const Ufora::Json& in)\
		{\
		if (!in.isString())\
			lassert_dump(false, "badly formed json");\
		try {\
			out = boost::lexical_cast<T>(in.getString().value());\
			}\
		catch(...)\
			{\
			lassert_dump(false, "badly formed json");\
			}\
		}\
};\


macro_cppml_to_json_integer_as_string(long);
macro_cppml_to_json_integer_as_string(int);
macro_cppml_to_json_integer_as_string(short);
macro_cppml_to_json_integer_as_string(char);
macro_cppml_to_json_integer_as_string(unsigned long);
macro_cppml_to_json_integer_as_string(unsigned int);
macro_cppml_to_json_integer_as_string(unsigned short);
macro_cppml_to_json_integer_as_string(unsigned char);

#ifdef BSA_PLATFORM_APPLE
macro_cppml_to_json_integer_as_string(long long);
macro_cppml_to_json_integer_as_string(unsigned long long);
#endif



template<>
class CPPMLToJson<Hash> {
public:
	static Ufora::Json toJson(const Hash& in)
		{
		return Ufora::Json::String(hashToString(in));
		}

	static void fromJson(Hash& out, const Ufora::Json& in)
		{
		@match Ufora::Json(in)
			-| String(x) ->> {
				try {
					out = stringToHash(x);
					}
				catch(...)
					{
					lassert_dump(false, "badly formed json");
					}
				}
			-| _ ->> {
				lassert_dump(false, "badly formed json");
				}
		}
};


template<class T>
class CPPMLToJson {
public:
	typedef typename T::kind kind;
	typedef typename T::metadata metadata;

	static Ufora::Json toJson(const T& in)
		{
		return toJson(in, kind());
		}

	static Ufora::Json toJson(const T& in, const ::CPPML::Kinds::tuple& kindSelector)
		{
		ImmutableTreeVector<Ufora::Json> io;

		CPPMLToJsonGivenCppmlMetadata<T, kind, metadata>::toJson(io, in);

		return Ufora::Json::Array(io);
		}

	static Ufora::Json toJson(const T& in, const ::CPPML::Kinds::alternative& kindSelector)
		{
		ImmutableTreeMap<std::string, Ufora::Json> io;

		CPPMLToJsonGivenCppmlMetadata<T, kind, metadata>::toJson(io, in);

		return Ufora::Json::Object(io);
		}

	static void fromJson(T& out, Ufora::Json in)
		{
		CPPMLToJsonGivenCppmlMetadata<T, kind, metadata>::fromJson(out, in);
		}
};

/******************** tuples ****************************/

template<class T, class A1, class A2>
class CPPMLToJsonGivenCppmlMetadata<T, ::CPPML::Kinds::tuple, ::CPPML::Chain<A1, A2> > {
public:
	//recursive forms
	static void toJson(ImmutableTreeVector<Ufora::Json>& io, const T& in)
		{
		CPPMLToJsonGivenCppmlMetadata<T, ::CPPML::Kinds::tuple, A1>::toJson(io, in);
		CPPMLToJsonGivenCppmlMetadata<T, ::CPPML::Kinds::tuple, A2>::toJson(io, in);
		}

	static void fromJson(T& out, Ufora::Json in)
		{
		CPPMLToJsonGivenCppmlMetadata<T, ::CPPML::Kinds::tuple, A1>::fromJson(out, in);
		CPPMLToJsonGivenCppmlMetadata<T, ::CPPML::Kinds::tuple, A2>::fromJson(out, in);
		}

};

template<class T>
class CPPMLToJsonGivenCppmlMetadata<T, ::CPPML::Kinds::tuple, ::CPPML::Null> {
public:

	static void toJson(ImmutableTreeVector<Ufora::Json>& io, const T& in)
		{
		}
	static void fromJson(T& out, Ufora::Json in)
		{
		}
};

template<class T, class member_type_in, class accessor_in, const int32_t ix>
class CPPMLToJsonGivenCppmlMetadata<T, ::CPPML::Kinds::tuple,
							::CPPML::TupleMember<T, member_type_in, accessor_in, ix> > {
public:
	static void toJson(ImmutableTreeVector<Ufora::Json>& io, const T& in)
		{
		io = io + cppmlToJson(accessor_in::get(in));
		}
	static void fromJson(T& out, Ufora::Json in)
		{
		@match Ufora::Json(in)
			-| Array(x) ->> {
				jsonToCppml(accessor_in::get(out), x[ix]);
				}
		}
};


/******************************** alternatives *************************/

template<class T, class A1, class A2>
class CPPMLToJsonGivenCppmlMetadata<T, ::CPPML::Kinds::alternative, ::CPPML::Chain<A1, A2> > {
public:
	//entrypoint forms
	static void fromJson(T& out, const Ufora::Json& in)
		{
		@match Ufora::Json(in)
			-| Object(x) ->> {
				lassert(x.size() == 1);

				std::string tag = x.pairAtPosition(0).first;
				Ufora::Json value = x.pairAtPosition(0).second;

				fromJson(out, tag, value);
				}
		}

	static Ufora::Json toJson(const T& in)
		{
		ImmutableTreeMap<std::string, Ufora::Json> tr;

		toJson(tr, in);

		return Ufora::Json::Object(tr);
		}

	//recursive forms
	static bool toJson(ImmutableTreeMap<std::string, Ufora::Json>& out, const T& in)
		{
		if (CPPMLToJsonGivenCppmlMetadata<T, ::CPPML::Kinds::alternative, A1>::toJson(out, in))
			return true;

		if (CPPMLToJsonGivenCppmlMetadata<T, ::CPPML::Kinds::alternative, A2>::toJson(out, in))
			return true;

		return false;
		}

	static bool fromJson(T& out, std::string tag, const Ufora::Json& body)
		{
		if (CPPMLToJsonGivenCppmlMetadata<T, ::CPPML::Kinds::alternative, A1>::fromJson(out, tag, body))
			return true;

		if (CPPMLToJsonGivenCppmlMetadata<T, ::CPPML::Kinds::alternative, A2>::fromJson(out, tag, body))
			return true;

		return false;
		}
};


template<class T>
class CPPMLToJsonGivenCppmlMetadata<T, ::CPPML::Kinds::alternative, ::CPPML::Null> {
public:
	static bool toJson(ImmutableTreeMap<std::string, Ufora::Json>& out, const T& in)
		{
		return false;
		}
	static bool fromJson(T& out, std::string tag, const Ufora::Json& body)
		{
		return false;
		}
};

template<class T, class member_type_in, class accessor_in>
class CPPMLToJsonGivenCppmlMetadata<T, ::CPPML::Kinds::alternative,
					::CPPML::Alternative<T, member_type_in, accessor_in> > {
public:

	static bool toJson(ImmutableTreeMap<std::string, Ufora::Json>& out, const T& in)
		{
		if (accessor_in::is(in))
			{
			out = out +
				std::string(in.tagName()) +
				cppmlToJson(accessor_in::get(in))
				;

			return true;
			}

		return false;
		}
	static bool fromJson(T& out, std::string tag, const Ufora::Json& body)
		{
		if (accessor_in::name() == tag)
			{
			member_type_in m;

			jsonToCppml(m, body);

			out = T(m);

			return true;
			}

		return false;
		}
};


template<class T, class member_type_in, class accessor_in, const int32_t ix>
class CPPMLToJsonGivenCppmlMetadata<T, ::CPPML::Kinds::alternative,
				::CPPML::AlternativeCommonMember<T, member_type_in, accessor_in, ix> > {
public:
	static bool toJson(ImmutableTreeMap<std::string, Ufora::Json>& out, const T& in)
		{
		lassert(false);
		}
	static bool fromJson(T& out, std::string tag, const Ufora::Json& body)
		{
		lassert(false);
		}
};




