/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/
#pragma once

#include "CPPMLPrettyPrinter.hppml"
#include "../math/Nullable.hpp"
#include <iostream>

//holds a cppml type using a boost shared_ptr, so that
//we don't have to have the definition around to copy it
//however, unlike a boost shared_ptr, comparison and hashing
//are done using the value itself.
//a CPPMLOpaqueHandle is not visited in a visitor algorithm
template<class T>
class CPPMLOpaqueHandle {
public:
		CPPMLOpaqueHandle()
			{
			}
		CPPMLOpaqueHandle(const CPPMLOpaqueHandle& in) :
				m(in.m)
			{
			}
		explicit CPPMLOpaqueHandle(T* in)
			{
			m.reset(in);
			}
		explicit CPPMLOpaqueHandle(const T& in)
			{
			m.reset(new T(in));
			}


		const T&	get() const
			{
			return *m;
			}
		T&	get()
			{
			return *m;
			}
		operator bool() const
			{
			return bool(m);
			}
		T& operator* () const // never throws
			{
			return *m;
			}
		T* operator-> () const // never throws
			{
			return m.get();
			}


		bool operator<(const CPPMLOpaqueHandle<T>& in) const
			{
			if (m && in)
				return get() < in.get();
				else
			if (in && !m)
				return true;
				else
				return false;
			}
		bool operator==(const CPPMLOpaqueHandle<T>& in) const
			{
			if (m && in)
				return get() == in.get();
			return !m && !in;
			}
		bool operator!=(const CPPMLOpaqueHandle<T>& in) const
			{
			return !(*this == in);
			}
private:
		mutable boost::shared_ptr<T>	m;
};

template<class T, class storage_type>
class Serializer;

template<class T, class storage_type>
class Deserializer;

template<class T, class storage_type>
class Serializer<CPPMLOpaqueHandle<T>, storage_type> {
public:
		static void serialize(storage_type& s, const CPPMLOpaqueHandle<T>& o)
			{
			bool hasOne = (bool)o;
			s.serialize(hasOne);

			if (hasOne)
				s.serialize(o.get());
			}
};
template<class T, class storage_type>
class Deserializer<CPPMLOpaqueHandle<T>, storage_type> {
public:
		static void deserialize(storage_type& s, CPPMLOpaqueHandle<T>& t)
			{
			bool hasOne = false;
			s.deserialize(hasOne);

			if (!hasOne)
				t = CPPMLOpaqueHandle<T>();
			else
				{
				T tr;
				s.deserialize(tr);

				t = CPPMLOpaqueHandle<T>(tr);
				}
			}
};

template<class T1, class T2>
class CPPMLEquality;

template<class T>
class CPPMLEquality<CPPMLOpaqueHandle<T>, void> {
public:
		static char cmp(const CPPMLOpaqueHandle<T>& lhs, const CPPMLOpaqueHandle<T>& rhs)
			{
			return cppmlCmp(lhs.get(), rhs.get());
			}
};


template<class T>
class CPPMLPrettyPrint<CPPMLOpaqueHandle<T> > {
public:
		static void prettyPrint(CPPMLPrettyPrintStream& s, const CPPMLOpaqueHandle<T>& t)
			{
			s << t.get();
			}
};

template<class T, class T2>
class CPPMLTransform;

template<class T>
class CPPMLTransform<CPPMLOpaqueHandle<T>, void> {
public:
		template<class F>
		static Nullable<CPPMLOpaqueHandle<T> > apply(const CPPMLOpaqueHandle<T>& in, const F& f)
			{
			return null();
			}
};
template<class T, class T2>
class CPPMLTransformWithIndex;

template<class T>
class CPPMLTransformWithIndex<CPPMLOpaqueHandle<T>, void> {
public:
		template<class F, class F2>
		static Nullable<CPPMLOpaqueHandle<T> > apply(const CPPMLOpaqueHandle<T>& in, const F& f, const F2& f2)
			{
			return null();
			}
};

template<class T, class T2>
class CPPMLVisit;

template<class T>
class CPPMLVisit<CPPMLOpaqueHandle<T>, void> {
public:
		template<class F>
		static void apply(const CPPMLOpaqueHandle<T>& in, const F& f)
			{
			}
};
template<class T, class T2>
class CPPMLVisitWithIndex;

template<class T>
class CPPMLVisitWithIndex<CPPMLOpaqueHandle<T>, void> {
public:
		template<class F, class F2>
		static void apply(const CPPMLOpaqueHandle<T>& in, const F& f, const F2& inF2)
			{
			}
};



