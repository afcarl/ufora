/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/
#include "CPPMLVisit.hppml"
#include "CPPMLPrettyPrinter.hppml"
#include "../UnitTest.hpp"
#include <stack>
#include <algorithm>

using namespace std;

namespace {

@type Tree =
        Nil of ()
    -|  Node of int data, Tree left, Tree right
    ;

std::ostream&	operator<<(std::ostream& stream, const Tree& in)
    {
    return stream << prettyPrintString(in);
    }

class TreeSumVisitor {
private:
    int mSum;
public:
    TreeSumVisitor() : mSum(0) {}
    TreeSumVisitor(int baseOffset) : mSum(baseOffset) {}

    int sum() const { return mSum; }

    template<class T>
    void processDown(const T& e)
        {
        }
    template<class T>
    void processUp(const T& e)
        {
        }

    void processDown(const Tree& tree)
        {
        @match Tree(tree)
            -|  Nil() ->> { ; }
            -|  Node(data, left, right) ->> {
                mSum += data;
                }
        }
};

@type Tree2 =
        Nil of ()
    -|  Three of Tree2 tree0, Tree2 tree1, Tree2 tree2
    -|  Two of Tree2 tree0, Tree2 tree1
    ;

class Tree2DepthVisitor {
private:
    stack<int> mS;
public:
    int depth() const { return mS.top(); }

    template<class T>
    void processDown(const T&) {}

    template<class T>
    void processUp(const T&) {}

    void processUp(const Tree2& tree2)
        {
        @match Tree(tree2)
            -|  Nil() ->> { mS.push(0); }
            -|  Two(_, _) ->> {
                int rightDepth = mS.top();
                mS.pop();

                int leftDepth = mS.top();
                mS.pop();

                mS.push(rightDepth > leftDepth ? rightDepth + 1: leftDepth + 1);
                }
            -|  Three(_,_,_) ->> {
                int rightDepth = mS.top();
                mS.pop();

                int centerDepth = mS.top();
                mS.pop();

                int leftDepth = mS.top();
                mS.pop();

                mS.push(max(max(leftDepth, centerDepth), rightDepth) + 1);
                }
            ;
        }
};


}

BOOST_AUTO_TEST_CASE( test_CPPMLVisitors_1 )
{
    Tree tree = Tree::Node(
                        1,
                        Tree::Node(
                            2,
                            Tree::Node(
                                3,
                                Tree::Nil(),
                                Tree::Node(
                                    4,
                                    Tree::Nil(),
                                    Tree::Nil()
                                    )
                                ),
                            Tree::Nil()
                            ),
                        Tree::Node(
                            5,
                            Tree::Node(
                                6,
                                Tree::Nil(),
                                Tree::Nil()
                                ),
                            Tree::Nil()
                            )
                        );

    TreeSumVisitor treeSumVisitor;
    visit(tree, treeSumVisitor);

    BOOST_CHECK_EQUAL(treeSumVisitor.sum(), 21);

    treeSumVisitor = TreeSumVisitor(100);
    visit(tree, treeSumVisitor);

    BOOST_CHECK_EQUAL(treeSumVisitor.sum(), 121);
}

Tree2 tree2 =
    Tree2::Three(
        Tree2::Two(
            Tree2::Two(
                Tree2::Nil(),
                Tree2::Two(
                    Tree2::Nil(),
                    Tree2::Two(
                        Tree2::Nil(),
                        Tree2::Nil()
                    )
                )
            ),
            Tree2::Three(
                Tree2::Nil(),
                Tree2::Nil(),
                Tree2::Two(
                    Tree2::Nil(),
                    Tree2::Nil()
                )
            )
        ),
        Tree2::Nil(),
        Tree2::Two(
            Tree2::Nil(),
            Tree2::Nil()
        )
    );

BOOST_AUTO_TEST_CASE( test_CPPMLVisitors_2 )
{
    Tree2DepthVisitor tree2DepthVisitor;
    visit(tree2, tree2DepthVisitor);
    BOOST_CHECK_EQUAL(tree2DepthVisitor.depth(), 5);
}


BOOST_AUTO_TEST_CASE( test_CPPMLVisitorUtil_1 )
{
    int64_t nils = 0, twos = 0, threes = 0, tree2s = 0;

    CPPMLVisitor<>()
        .down<Tree2::ThreeType>([&](Tree2::ThreeType in) { threes++; })
        .down<Tree2::TwoType>([&](Tree2::TwoType in) { twos++; })
        .up<Tree2::NilType>([&](Tree2::NilType in) { nils++; })
        .down<Tree2>([&](Tree2 in) { tree2s++; })
        .visit(tree2);

    BOOST_CHECK_EQUAL(tree2s, 19);
    BOOST_CHECK_EQUAL(nils, 11);
    BOOST_CHECK_EQUAL(twos, 6);
    BOOST_CHECK_EQUAL(threes, 2);
}


BOOST_AUTO_TEST_CASE( test_CPPMLVisitorUtil_2 )
{
    int64_t nils = 0, twos = 0, threes = 0, tree2s = 0;

    CPPMLVisitor<>()
        .down<Tree2::ThreeType>([&](Tree2::ThreeType in) { threes++; })
        .stopAt<Tree2::TwoType>()
        .visit(tree2);

    BOOST_CHECK_EQUAL(threes, 1);
}

BOOST_AUTO_TEST_CASE( test_CPPMLVisitorUtil_3 )
{
    int64_t treecount = 0;

    CPPMLVisitor<>()
        .down<Tree2::TwoType>([&](Tree2::TwoType in) { 
            treecount++; 
            return ContinueOrStop::Stop;
            })
        .visit(tree2);

    BOOST_CHECK_EQUAL(treecount, 2);
}
