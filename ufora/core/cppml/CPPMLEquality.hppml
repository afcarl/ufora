/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/
#ifndef CPPMLEquality_hpp_
#define CPPMLEquality_hpp_

#include <string>
#include <sstream>
#include <vector>
#include <set>
#include <map>
#include "../debug/StackTrace.hpp"
#include "../Platform.hpp"
#include <boost/shared_ptr.hpp>
#include <boost/python.hpp>
#include <boost/uuid/uuid.hpp>

template<class T, class kind>
class CPPMLEquality {
public:
		static char cmp(const T& lhs, const T& rhs)
			{
			return CPPMLEquality<T, typename T::kind>::cmp(lhs, rhs);
			}
};

template<class T>
char cppmlCmp(const T& lhs, const T& rhs)
	{
	return CPPMLEquality<T, void>::cmp(lhs, rhs);
	}


#define cppmlequality_direct_macro( T ) 	\
template<> class CPPMLEquality<T, void> {\
public:\
static char cmp(const T& lhs, const T &rhs)\
	{\
	if (lhs < rhs) return -1;\
	if (rhs < lhs) return 1;\
	return 0;\
	}\
};\

typedef void* void_ptr;

cppmlequality_direct_macro(std::string)
cppmlequality_direct_macro(float)
cppmlequality_direct_macro(double)
cppmlequality_direct_macro(bool)
cppmlequality_direct_macro(char)
cppmlequality_direct_macro(signed char)
cppmlequality_direct_macro(unsigned char)
cppmlequality_direct_macro(void_ptr)
cppmlequality_direct_macro(int16_t)
cppmlequality_direct_macro(uint16_t)
cppmlequality_direct_macro(int32_t)
cppmlequality_direct_macro(uint32_t)
cppmlequality_direct_macro(int64_t)
cppmlequality_direct_macro(uint64_t)

#ifdef BSA_PLATFORM_APPLE
cppmlequality_direct_macro(long unsigned int)
cppmlequality_direct_macro(long)
#endif


#define macro_defineCppmlComparisonOperators(T)	\
inline bool operator<(const T & lhs, const T & rhs)\
	{\
	return cppmlCmp(lhs, rhs) < 0;\
	}\
inline bool operator>(const T & lhs, const T & rhs)\
	{\
	return cppmlCmp(lhs, rhs) > 0;\
	}\
inline bool operator<=(const T & lhs, const T & rhs)\
	{\
	return cppmlCmp(lhs, rhs) <= 0;\
	}\
inline bool operator>=(const T & lhs, const T & rhs)\
	{\
	return cppmlCmp(lhs, rhs) >= 0;\
	}\
inline bool operator==(const T & lhs, const T & rhs)\
	{\
	return cppmlCmp(lhs, rhs) == 0;\
	}\
inline bool operator!=(const T & lhs, const T & rhs)\
	{\
	return cppmlCmp(lhs, rhs) != 0;\
	}



template<class T>
class CPPMLEquality<std::vector<T>, void> {
public:
		static char cmp(const std::vector<T>& lhs, const std::vector<T>& rhs)
			{
			if (lhs.size() < rhs.size())
				return -1;
			if (lhs.size() > rhs.size())
				return 1;
			for (long k = 0; k < lhs.size();k++)
				{
				char c = cppmlCmp(lhs[k], rhs[k]);
				if (c != 0)
					return c;
				}
			return 0;
			}
};

template<class T>
class CPPMLEquality<boost::shared_ptr<T>, void> {
public:
		static char cmp(const boost::shared_ptr<T>& lhs, const boost::shared_ptr<T>& rhs)
			{
			if (!lhs && !rhs)
				return 0;
			if (lhs && !rhs)
				return 1;
			if (!lhs && rhs)
				return -1;
			return cppmlCmp(*lhs, *rhs);
			}
};


template<class T>
class CPPMLEquality<std::set<T>, void> {
public:
		static char cmp(const std::set<T>& lhs, const std::set<T>& rhs)
			{
			if (lhs.size() < rhs.size())
				return -1;
			if (lhs.size() > rhs.size())
				return 1;

			typename std::set<T>::const_iterator it1 = lhs.begin();
			typename std::set<T>::const_iterator it2 = rhs.begin();

			for (; it1 != lhs.end();++it1, ++it2)
				{
				char c = cppmlCmp(*it1, *it2);
				if (c != 0)
					return c;
				}
			return 0;
			}
};

template<class T, class T2>
class CPPMLEquality<std::map<T, T2>, void> {
public:
		static char cmp(const std::map<T, T2>& lhs, const std::map<T, T2>& rhs)
			{
			if (lhs.size() < rhs.size())
				return -1;
			if (lhs.size() > rhs.size())
				return 1;

			typename std::map<T, T2>::const_iterator it1 = lhs.begin();
			typename std::map<T, T2>::const_iterator it2 = rhs.begin();

			for (; it1 != lhs.end();++it1, ++it2)
				{
				char c = cppmlCmp(*it1, *it2);
				if (c != 0)
					return c;
				}
			return 0;
			}
};

template<class T, class T2>
class CPPMLEquality<std::pair<T, T2>, void> {
public:
		static char cmp(const std::pair<T, T2>& lhs, const std::pair<T, T2>& rhs)
			{
			char c = cppmlCmp(lhs.first, rhs.first);
			if (c != 0)
				return c;
			return cppmlCmp(lhs.second, rhs.second);
			}
};

template<>
class CPPMLEquality<boost::python::object, void> {
public:
		static char cmp(const boost::python::object& lhs, const boost::python::object& rhs)
			{
			return cppmlCmp((size_t)lhs.ptr(), (size_t)rhs.ptr());
			}
};


template<>
class CPPMLEquality<boost::uuids::uuid, void> {
public:
		static char cmp(const boost::uuids::uuid& lhs, const boost::uuids::uuid& rhs)
			{
			if (lhs < rhs)
				return -1;
			if (rhs < lhs)
				return 1;
			return 0;
			}
};


template<class T>
class CPPMLEquality<T, ::CPPML::Null> {
public:
		static char cmp(const T& lhs, const T& rhs)
			{
			return 0;
			}

};
template<class T>
class CPPMLEquality<T, ::CPPML::Kinds::alternative> {
public:
		static char cmp(const T& lhs, const T& rhs)
			{
			return CPPMLEquality<T, typename T::metadata>::cmp(lhs, rhs);
			}
};
template<class T>
class CPPMLEquality<T, ::CPPML::Kinds::tuple> {
public:
		static char cmp(const T& lhs, const T& rhs)
			{
			return CPPMLEquality<T, typename T::metadata>::cmp(lhs, rhs);
			}
};

template<class T, class A1, class A2>
class CPPMLEquality<T, ::CPPML::Chain<A1, A2> > {
public:
		static char cmp(const T& lhs, const T& rhs)
			{
			char c = CPPMLEquality<T, A1>::cmp(lhs, rhs);
			if (c != 0)
				return c;
			return CPPMLEquality<T, A2>::cmp(lhs, rhs);
			}
};

template<class T, class member_type_in, class accessor_in, const int32_t ix>
class CPPMLEquality<T, ::CPPML::TupleMember<T, member_type_in, accessor_in, ix> > {
public:
		static char cmp(const T& lhs, const T& rhs)
			{
			return cppmlCmp(accessor_in::get(lhs), accessor_in::get(rhs));
			}
};

template<class T, class member_type_in, class accessor_in>
class CPPMLEquality<T, ::CPPML::Alternative<T, member_type_in, accessor_in> > {
public:
		static char cmp(const T& lhs, const T& rhs)
			{
			bool is1 = accessor_in::is(lhs);
			bool is2 = accessor_in::is(rhs);
			if (is1 && !is2)
				return -1;
			if (is2 && !is1)
				return 1;
			if (!is1 && !is2)
				return 0;
			return cppmlCmp(accessor_in::get(lhs), accessor_in::get(rhs));
			}
};

template<class T, class member_type_in, class accessor_in, const int32_t ix>
class CPPMLEquality<T, ::CPPML::AlternativeCommonMember<T, member_type_in, accessor_in, ix> > {
public:
		static char cmp(const T& lhs, const T& rhs)
			{
			return cppmlCmp(accessor_in::get(lhs), accessor_in::get(rhs));
			}
};


#endif

