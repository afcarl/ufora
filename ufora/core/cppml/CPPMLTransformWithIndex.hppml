/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/
#ifndef CPPMLTransformWithIndex_hppml_
#define CPPMLTransformWithIndex_hppml_

#include <string>
#include <set>
#include <map>
#include <vector>
#include "../math/Nullable.hpp"
#include "CPPMLTransform.hppml"

//simple class that keeps track of whether this is the first time we've ever
//transformed an expression.  It acts like a 'bool', but any time you add
//anything to it, it becomes 'false'.
class IsFirstTransform {
public:
		IsFirstTransform(bool in = true) : isFirst(in) {}

		operator bool() const { return isFirst; }
		template<class T>
		IsFirstTransform operator+(const T& in) const
			{
			return IsFirstTransform(false);
			}
private:
		bool 		isFirst;
};


template<class T, class T2>
class CPPMLTransformWithIndex {
public:
		template<class F, class indices_type>
		static Nullable<T> apply(const T& in, const F& f, const indices_type& inIndices)
			{
			return CPPMLTransformWithIndex<T, typename T::metadata>::apply(in, f, inIndices);
			}
};


#define CPPMLTransformWithIndex_define_passthrough(ty) \
template<> class CPPMLTransformWithIndex<ty, void> {\
public:\
		template<class F, class indices_type>\
		static Nullable<ty> apply(const ty& in, const F& f, const indices_type& inIndices)\
			{\
			return null();\
			}\
};\


CPPMLTransformWithIndex_define_passthrough(std::string)
CPPMLTransformWithIndex_define_passthrough(bool)
CPPMLTransformWithIndex_define_passthrough(uint8_t)
CPPMLTransformWithIndex_define_passthrough(int8_t)
CPPMLTransformWithIndex_define_passthrough(uint16_t)
CPPMLTransformWithIndex_define_passthrough(int16_t)
CPPMLTransformWithIndex_define_passthrough(uint32_t)
CPPMLTransformWithIndex_define_passthrough(int32_t)
CPPMLTransformWithIndex_define_passthrough(uint64_t)
CPPMLTransformWithIndex_define_passthrough(int64_t)
CPPMLTransformWithIndex_define_passthrough(float)
CPPMLTransformWithIndex_define_passthrough(double)


template<class T, class T2>
class CPPMLTransformWithIndex<std::pair<T, T2>, void> {
public:
		template<class F, class indices_type>
		static Nullable<pair<T, T2> > apply(const std::pair<T, T2>& in, const F& f, const indices_type& inIndices)
			{
			Nullable<T> t1 = transformNullable(in.first, f, inIndices + 0);
			Nullable<T2> t2 = transformNullable(in.second, f, inIndices + 1);
			if (!t1 && !t2)
				return null();
			return null() << make_pair(t1 ? *t1 : in.first, t2 ? *t2 : in.second);
			}
};

template<class T, class T2>
class CPPMLTransformWithIndex<std::map<T, T2>, void> {
public:
		template<class F, class indices_type>
		static Nullable<std::map<T, T2> > apply(const std::map<T, T2>& in, const F& f, const indices_type& inIndices)
			{
			indices_type ix = 0;

			for (typename std::map<T, T2>::const_iterator it = in.begin(), it_end = in.end(); it != it_end; ++it)
				{
				Nullable<T> t1 = transformNullable(it->first, f, inIndices + ix + 0);
				Nullable<T2> t2 = transformNullable(it->second, f, inIndices + ix + 1);

				if (t1 || t2)
					{
					Nullable<std::map<T, T2> > out;
					out = std::map<T, T2>();

					typename std::map<T, T2>::const_iterator it2 = in.begin();

					for (; it2 != it; ++it2)
						(*out)[it2->first] = it2->second;

					(*out)[t1 ? *t1 : it->first] = t2 ? *t2 : it->second;

					it2++;
					for (; it2 != it_end; ++it2)
						{
						t1 = transformNullable(it2->first, f, inIndices + ix + (indices_type)0);
						t2 = transformNullable(it2->second, f, inIndices + ix + (indices_type)1);

						(*out)[t1 ? *t1 : it2->first] = t2 ? *t2 : it2->second;

						++ix;
						}
					return out;
					}

				++ix;
				}
			return null();
			}
};

template<class T>
class CPPMLTransformWithIndex<std::set<T>, void> {
public:
		template<class F, class indices_type>
		static Nullable<std::set<T> > apply(const std::set<T>& in, const F& f, const indices_type& inIndices)
			{
			indices_type ix = 0;

			for (typename std::set<T>::const_iterator it = in.begin(), it_end = in.end(); it != it_end; ++it)
				{
				Nullable<T> t1 = transformNullable(*it, f, inIndices + ix);

				if (t1)
					{
					Nullable<std::set<T> > out;
					out = std::set<T>();

					typename std::set<T>::const_iterator it2 = in.begin();

					for (; it2 != it; ++it2)
						out->insert(*it2);

					out->insert(*t1);

					it2++;
					for (; it2 != it_end; ++it2)
						{
						t1 = transformNullable(*it2, f, inIndices + ix);
						out->insert(t1 ? *t1 : *it2);
						++ix;
						}
					return out;
					}

				++ix;
				}
			return null();
			}
};


template<class T>
class CPPMLTransformWithIndex<std::vector<T>, void> {
public:
		template<class F, class indices_type>
		static Nullable<std::vector<T> > apply(const std::vector<T>& in, const F& f, const indices_type& inIndices)
			{
			indices_type ix = 0;

			for (typename std::vector<T>::const_iterator it = in.begin(), it_end = in.end(); it != it_end; ++it)
				{
				Nullable<T> t1 = transformNullable(*it, f, inIndices + ix);

				if (t1)
					{
					Nullable<std::vector<T> > out;
					out = std::vector<T>();

					typename std::vector<T>::const_iterator it2 = in.begin();

					for (; it2 != it; ++it2)
						out->push_back(*it2);

					out->push_back(*t1);

					it2++;
					for (; it2 != it_end; ++it2)
						{
						t1 = transformNullable(*it2, f, inIndices + ix);
						out->push_back(t1 ? *t1 : *it2);
						++ix;
						}
					return out;
					}

				++ix;
				}
			return null();
			}
};

template<class T, class F, class indices_type>
Nullable<T> transformNullable(const T& inT, const F& inF, const indices_type& inIndices)
	{
	bool shouldContinue = true;
	bool everChanged = false;

	Nullable<T> t2 = EnsureIsInNullable<T>::ensure(inF.processDown(inT, shouldContinue, inIndices));

	Nullable<T> t3;
	if (!shouldContinue)
		t3 = t2;
		else
		t3 = CPPMLTransformWithIndex<T, void>::apply(t2 ? *t2 : inT, inF, inIndices);

	Nullable<T> fin = EnsureIsInNullable<T>::ensure(inF.processUp(t3 ? *t3 : t2 ? *t2 : inT, inIndices));

	return fin ? null() << *fin : t3 ? null() << *t3 : t2 ? null() << *t2 : null();
	}

template<class T, class F, class indices_type>
T transform(const T& inT, const F& inF, const indices_type& inIndices)
	{
	Nullable<T> tr = transformNullable(inT, inF, inIndices);
	if (!tr)
		return inT;
	return *tr;
	}


template<class T>
class CPPMLTransformWithIndex<T, ::CPPML::Null> {
public:
		template<class F, class indices_type>
		static Nullable<T> apply(const T& in, const F& f, const indices_type& inIndices)
			{
			return null();
			}
};
template<class T, class A1, class A2>
class CPPMLTransformWithIndex<T, ::CPPML::Chain<A1, A2> > {
public:
		template<class F, class indices_type>
		static Nullable<T> apply(const T& in, const F& f, const indices_type& inIndices)
			{
			Nullable<T> t1 = CPPMLTransformWithIndex<T, A1>::apply(in, f, inIndices);
			Nullable<T> t2 = CPPMLTransformWithIndex<T, A2>::apply(t1 ? *t1 : in, f, inIndices);
			return t2 ? null() << *t2 : t1 ? null() << *t1 : null();
			}
};

template<class T, class member_type_in, class accessor_in, const int32_t ix>
class CPPMLTransformWithIndex<T, ::CPPML::TupleMember<T, member_type_in, accessor_in, ix> > {
public:
		template<class F, class indices_type>
		static Nullable<T> apply(const T& in, const F& f, const indices_type& inIndices)
			{
			Nullable<member_type_in> t = transformNullable(accessor_in::get(in), f, inIndices + ix);
			if (t)
				{
				Nullable<T> tr(in);
				accessor_in::get(*tr) = *t;
				return tr;
				}
			return null();
			}
};


template<class T, class member_type_in, class accessor_in, const int32_t ix>
class CPPMLTransformWithIndex<T, ::CPPML::AlternativeCommonMember<T, member_type_in, accessor_in, ix> > {
public:
		template<class F, class indices_type>
		static Nullable<T> apply(const T& in, const F& f, const indices_type& inIndices)
			{
			Nullable<member_type_in> t = transformNullable(accessor_in::get(in), f, inIndices + ix);
			if (t)
				{
				Nullable<T> tr (in);
				accessor_in::get(*tr) = *t;
				return tr;
				}
			return null();
			}
};


template<class T, class member_type_in, class accessor_in>
class CPPMLTransformWithIndex<T, ::CPPML::Alternative<T, member_type_in, accessor_in> > {
public:
		template<class F, class indices_type>
		static Nullable<T> apply(const T& in, const F& f, const indices_type& inIndices)
			{
			if (!accessor_in::is(in))
				return null();
			Nullable<member_type_in> m = transformNullable(accessor_in::get(in), f, inIndices);
			if (!m)
				return null();

			return null() << T(*m);
			}
};

template<class T>
class CPPMLTransformWithIndex<Nullable<T>, void> {
public:
		template<class F, class indices_type>
		static Nullable<Nullable<T> > apply(const Nullable<T>& in, const F& f, const indices_type& inIndices)
			{
			if (in)
				{
				Nullable<T> res = transformNullable(*in, f, inIndices + 0);
				if (res)
					return null() << res;
				return null();
				}
				else
				return Nullable<Nullable<T> >();
			}
};

namespace boost {
template<class T>
class shared_ptr;
}

template<class T>
class CPPMLTransformWithIndex<boost::shared_ptr<T>, void> {
public:
		template<class F, class indices_type>
		static Nullable<boost::shared_ptr<T> > apply(const boost::shared_ptr<T>& in, const F& f, const indices_type& inIndices)
			{
			if (in)
				{
				Nullable<T> res = transformNullable(*in, f, inIndices + 0);
				if (res)
					return null() << boost::shared_ptr<T>(new T(*res));
				return null();
				}
				else
				return Nullable<boost::shared_ptr<T> >();
			}
};





#endif

