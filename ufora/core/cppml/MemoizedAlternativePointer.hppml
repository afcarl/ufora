/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/
#pragma once

#include "MemoizeByTagAndHash.hppml"
#include <type_traits>

/***********************

MemoizedAlternativePointer

CPPML types that have had "macro_memoizeCppmlClassByTagAndHash" defined on them
may be converted back and forth to a void* at will, since they're just pointers
to singletons. This class allows us to formalize that notion so that we get
the right semantics in a type-safe way.

These objects compare and hash using pointer semantics (which are not stable
across program invocation) so be careful.

************************/

template<class T>
class MemoizedAlternativePointer {
public:
	static_assert(
		std::is_same<
			typename CPPML::TaggedUnionMemoizer<T>::result_type,
			MemoizeByTagAndHash<T> >::value,
		"Target of MemoizedAlternativePointer must have MemoizedByTagAndHash enabled"
		);

	MemoizedAlternativePointer()
		{
		T defaultValue;
		mPtr = *(void**)&defaultValue;
		}

	MemoizedAlternativePointer(const T& in) :
			mPtr(*(void**)&in)
		{
		}

	bool operator<(MemoizedAlternativePointer<T> other) const
		{
		return mPtr < other.mPtr;
		}

	bool operator==(MemoizedAlternativePointer<T> other) const
		{
		return mPtr == other.mPtr;
		}

	bool operator!=(MemoizedAlternativePointer<T> other) const
		{
		return mPtr != other.mPtr;
		}

	void* getPtr() const
		{
		return mPtr;
		}

	const T* operator->() const
		{
		return (const T*)&mPtr;
		}

	const T& operator*() const
		{
		return *(const T*)&mPtr;
		}

private:
	void* mPtr;
};


namespace boost {

template<class T>
class hash<MemoizedAlternativePointer<T> > : public std::unary_function<MemoizedAlternativePointer<T>, std::size_t> {
public:
		std::size_t operator()(MemoizedAlternativePointer<T> const& in) const
			{
			return boost::hash<void*>()(in.getPtr());
			}
};

};

