/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/
#ifndef CPPMLVisit_hppml_
#define CPPMLVisit_hppml_

#include <string>
#include <set>
#include <map>
#include <vector>
#include "../cppml/CPPMLVisit.fwd.hppml"
#include "../Platform.hpp"

template<class T, class T2>
class CPPMLVisit {
public:
		template<class F>
		static void apply(const T& in, F& f)
			{
			CPPMLVisit<T, typename T::metadata>::apply(in, f);
			}
};


#define CPPMLVisit_define_passthrough(ty) \
template<> class CPPMLVisit<ty, void> {\
public:\
		template<class F>\
		static void apply(const ty& in, F& f)\
			{\
			}\
};\


CPPMLVisit_define_passthrough(std::string)
CPPMLVisit_define_passthrough(bool)
CPPMLVisit_define_passthrough(uint8_t)
CPPMLVisit_define_passthrough(int8_t)
CPPMLVisit_define_passthrough(uint16_t)
CPPMLVisit_define_passthrough(int16_t)
CPPMLVisit_define_passthrough(uint32_t)
CPPMLVisit_define_passthrough(int32_t)
CPPMLVisit_define_passthrough(uint64_t)
CPPMLVisit_define_passthrough(int64_t)
CPPMLVisit_define_passthrough(float)
CPPMLVisit_define_passthrough(double)
#ifdef BSA_PLATFORM_APPLE
    CPPMLVisit_define_passthrough(long)
#endif



template<class T, class T2>
class CPPMLVisit<std::pair<T, T2>, void> {
public:
		template<class F>
		static void apply(const std::pair<T, T2>& in, F& f)
			{
			visit(in.first, f);
			visit(in.second, f);
			}
};

template<class T, class T2>
class CPPMLVisit<std::map<T, T2>, void> {
public:
		template<class F>
		static void apply(const std::map<T, T2>& in, F& f)
			{
			for (typename std::map<T, T2>::const_iterator it = in.begin(), it_end = in.end(); it != it_end; ++it)
				visit(*it, f);
			}
};

template<class T>
class CPPMLVisit<std::set<T>, void> {
public:
		template<class F>
		static void apply(const std::set<T>& in, F& f)
			{
			for (typename std::set<T>::const_iterator it = in.begin(), it_end = in.end(); it != it_end; ++it)
				visit(*it, f);
			}
};

template<class T>
class CPPMLVisit<std::vector<T>, void> {
public:
		template<class F>
		static void apply(const std::vector<T>& in, F& f)
			{
			for (typename std::vector<T>::const_iterator it = in.begin(), it_end = in.end(); it != it_end; ++it)
				visit(*it, f);
			}
};

template<class T, class F>
void visit(const T& inT, F& inF)
	{
	bool shouldContinue = true;

	inF.processDown(inT, shouldContinue);

	if (!shouldContinue)
		return;

	CPPMLVisit<T, void>::apply(inT, inF);

	inF.processUp(inT);
	}
template<class T>
class CPPMLVisit<T, ::CPPML::Null> {
public:
		template<class F>
		static void apply(const T& in, F& f)
			{
			}
};
template<class T, class A1, class A2>
class CPPMLVisit<T, ::CPPML::Chain<A1, A2> > {
public:
		template<class F>
		static void apply(const T& in, F& f)
			{
			CPPMLVisit<T, A1>::apply(in, f);
			CPPMLVisit<T, A2>::apply(in, f);
			}
};

template<class T, class member_type_in, class accessor_in, const int32_t ix>
class CPPMLVisit<T, ::CPPML::TupleMember<T, member_type_in, accessor_in, ix> > {
public:
		template<class F>
		static void apply(const T& in, F& f)
			{
			visit(accessor_in::get(in), f);
			}
};


template<class T, class member_type_in, class accessor_in, const int32_t ix>
class CPPMLVisit<T, ::CPPML::AlternativeCommonMember<T, member_type_in, accessor_in, ix> > {
public:
		template<class F>
		static void apply(const T& in, F& f)
			{
			visit(accessor_in::get(in), f);
			}
};


template<class T, class member_type_in, class accessor_in>
class CPPMLVisit<T, ::CPPML::Alternative<T, member_type_in, accessor_in> > {
public:
		template<class F>
		static void apply(const T& in, F& f)
			{
			if (accessor_in::is(in))
				visit(accessor_in::get(in), f);
			}
};

namespace boost {
template<class T>
class shared_ptr;
}

template<class T>
class CPPMLVisit<boost::shared_ptr<T>, void> {
public:
		template<class F>
		static void apply(const boost::shared_ptr<T>& in, F& f)
			{
			if (in)
				visit(*in, f);
			}
};

#endif

