/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/
#pragma once

#include <string>
#include <set>
#include <map>
#include <vector>
#include "../cppml/CPPMLVisit.fwd.hppml"
#include "../Platform.hpp"

//visitors returning this are indicating that they definitely want to
//stop visiting immediately
class StopVisiting {};

//visitors returning this indicate whether they want to continue or not
enum class ContinueOrStop { Continue, Stop };

namespace boost {

template<class T>
class shared_ptr;

}

template<class T, class T2>
class CPPMLVisit {
public:
	template<class F>
	static void apply(const T& in, F& f)
		{
		CPPMLVisit<T, typename T::metadata>::apply(in, f);
		}
};

#define CPPMLVisit_define_passthrough(ty) \
template<> class CPPMLVisit<ty, void> {\
public:\
	template<class F>\
	static void apply(const ty& in, F& f)\
		{\
		}\
};\

CPPMLVisit_define_passthrough(std::string)
CPPMLVisit_define_passthrough(bool)
CPPMLVisit_define_passthrough(uint8_t)
CPPMLVisit_define_passthrough(int8_t)
CPPMLVisit_define_passthrough(uint16_t)
CPPMLVisit_define_passthrough(int16_t)
CPPMLVisit_define_passthrough(uint32_t)
CPPMLVisit_define_passthrough(int32_t)
CPPMLVisit_define_passthrough(uint64_t)
CPPMLVisit_define_passthrough(int64_t)
CPPMLVisit_define_passthrough(float)
CPPMLVisit_define_passthrough(double)
#ifdef BSA_PLATFORM_APPLE
    CPPMLVisit_define_passthrough(long)
#endif

template<class T, class T2>
class CPPMLVisit<std::pair<T, T2>, void> {
public:
	template<class F>
	static void apply(const std::pair<T, T2>& in, F& f)
		{
		visit(in.first, f);
		visit(in.second, f);
		}
};

template<class T, class T2>
class CPPMLVisit<std::map<T, T2>, void> {
public:
	template<class F>
	static void apply(const std::map<T, T2>& in, F& f)
		{
		for (typename std::map<T, T2>::const_iterator it = in.begin(), it_end = in.end(); it != it_end; ++it)
			visit(*it, f);
		}
};

template<class T>
class CPPMLVisit<std::set<T>, void> {
public:
	template<class F>
	static void apply(const std::set<T>& in, F& f)
		{
		for (typename std::set<T>::const_iterator it = in.begin(), it_end = in.end(); it != it_end; ++it)
			visit(*it, f);
		}
};

template<class T>
class CPPMLVisit<std::vector<T>, void> {
public:
	template<class F>
	static void apply(const std::vector<T>& in, F& f)
		{
		for (typename std::vector<T>::const_iterator it = in.begin(), it_end = in.end(); it != it_end; ++it)
			visit(*it, f);
		}
};

template<class T>
class CPPMLVisit<T, ::CPPML::Null> {
public:
	template<class F>
	static void apply(const T& in, F& f)
		{
		}
};

template<class T, class A1, class A2>
class CPPMLVisit<T, ::CPPML::Chain<A1, A2> > {
public:
	template<class F>
	static void apply(const T& in, F& f)
		{
		CPPMLVisit<T, A1>::apply(in, f);
		CPPMLVisit<T, A2>::apply(in, f);
		}
};

template<class T, class member_type_in, class accessor_in, const int32_t ix>
class CPPMLVisit<T, ::CPPML::TupleMember<T, member_type_in, accessor_in, ix> > {
public:
	template<class F>
	static void apply(const T& in, F& f)
		{
		visit(accessor_in::get(in), f);
		}
};


template<class T, class member_type_in, class accessor_in, const int32_t ix>
class CPPMLVisit<T, ::CPPML::AlternativeCommonMember<T, member_type_in, accessor_in, ix> > {
public:
	template<class F>
	static void apply(const T& in, F& f)
		{
		visit(accessor_in::get(in), f);
		}
};


template<class T, class member_type_in, class accessor_in>
class CPPMLVisit<T, ::CPPML::Alternative<T, member_type_in, accessor_in> > {
public:
	template<class F>
	static void apply(const T& in, F& f)
		{
		if (accessor_in::is(in))
			visit(accessor_in::get(in), f);
		}
};

template<class T>
class CPPMLVisit<boost::shared_ptr<T>, void> {
public:
	template<class F>
	static void apply(const boost::shared_ptr<T>& in, F& f)
		{
		if (in)
			visit(*in, f);
		}
};

template<class T, class F>
void continueVisiting(const T& in, F& f, StopVisiting selector)
	{
	}

template<class T, class F>
void continueVisiting(const T& in, F& f, ContinueOrStop selector)
	{
	if (selector == ContinueOrStop::Continue)
		{
		CPPMLVisit<T, void>::apply(in, f);

		f.processUp(in);
		}
	}

template<class call_returns>
class CallProcessDown {
public:
	template<class T, class F>
	static auto call(const T& inT, F& inF) -> decltype(inF.processDown(inT))
		{
		return inF.processDown(inT);
		}
};

template<>
class CallProcessDown<void> {
public:
	template<class T, class F>
	static ContinueOrStop call(const T& inT, F& inF)
		{
		inF.processDown(inT);
		return ContinueOrStop::Continue;
		}
};

template<class T, class F>
auto callProcessDown(const T& in, F& f) -> decltype(CallProcessDown<decltype(f.processDown(in))>::call(in, f))
	{
	return CallProcessDown<decltype(f.processDown(in))>::call(in, f);
	}

template<class T, class F>
void visit(const T& inT, F& inF)
	{
	//many 'processDown' functions return void, which we can't 
	//just hand around like a variable here.
	auto shouldContinue = CallProcessDown<decltype(inF.processDown(inT))>::call(inT, inF);

	continueVisiting(inT, inF, shouldContinue);
	}

template<class T, class F>
void visitInternals(const T& inT, F& inF)
	{
	CPPMLVisit<T, void>::apply(inT, inF);
	}


class CPPMLNullVisitor {
public:
	template<class T>
	void processDown(const T& in)
		{
		}

	template<class T>
	void processUp(const T& in)
		{
		}
};

template<class A, class F>
class CPPMLFunctionProcessDownVisitor {
	F mFunc;
public:
	CPPMLFunctionProcessDownVisitor(const F& func) : mFunc(func)
		{
		}

	template<class T>
	void processDown(const T& in)
		{
		}

	template<class T>
	void processUp(const T& in)
		{
		}

	auto processDown(const A& in) -> decltype(mFunc(in))
		{
		return mFunc(in);
		}
};

template<class A, class F>
class CPPMLFunctionProcessUpVisitor {
	F mFunc;
public:
	CPPMLFunctionProcessUpVisitor(const F& func) : mFunc(func)
		{
		}

	template<class T>
	void processDown(const T& in)
		{
		}

	template<class T>
	void processUp(const T& in)
		{
		}

	void processUp(const A& in)
		{
		mFunc(in);
		}
};

template<class A>
class CPPMLStopVisitingVisitor {
public:
	template<class T>
	void processDown(const T& in)
		{
		}

	template<class T>
	void processUp(const T& in)
		{
		}

	StopVisiting processDown(const A& in)
		{
		return StopVisiting();
		}
};

template<class V1, class V2>
@type UnionVisitor = V1 v1, V2 v2 {
public:
	static StopVisiting mergeUnionOutput(StopVisiting v1, ContinueOrStop v2)
		{
		return v1;
		}

	static StopVisiting mergeUnionOutput(ContinueOrStop v1, StopVisiting v2)
		{
		return v2;
		}

	static ContinueOrStop mergeUnionOutput(ContinueOrStop v1, ContinueOrStop v2)
		{
		if (v1 == ContinueOrStop::Stop || v2 == ContinueOrStop::Stop)
			return ContinueOrStop::Stop;

		return ContinueOrStop::Continue;
		}

	template<class T>
	static T* ptrTo(T in) { return &in; }
	
	template<class T>
	auto processDown(const T& in) -> decltype(mergeUnionOutput(callProcessDown(in, v1()), callProcessDown(in, v2())))
		{
		return mergeUnionOutput(callProcessDown(in, v1()), callProcessDown(in, v2()));
		}

	template<class T>
	void processUp(const T& in)
		{
		v1().processUp(in);
		v2().processUp(in);
		}
};

template<class held_type = CPPMLNullVisitor>
class CPPMLVisitor;

template<class held_type>
@type CPPMLVisitor = held_type internalVisitor {
public:
	template<class T>
	auto processDown(const T& in) -> decltype(internalVisitor().processDown(in))
		{
		return internalVisitor().processDown(in);
		}

	template<class T>
	void processUp(const T& in)
		{
		internalVisitor().processUp(in);
		}

	template<class T>
	void visit(const T& in)
		{
		::visit(in, *this);
		}

	template<class T>
	void visitInternals(const T& in)
		{
		::visitInternals(in, *this);
		}

	template<class T>
	CPPMLVisitor<UnionVisitor<held_type, CPPMLStopVisitingVisitor<T> > > stopAt()
		{
		typedef UnionVisitor<held_type, CPPMLStopVisitingVisitor<T> > new_held_type;

		return CPPMLVisitor<new_held_type>(
			new_held_type(
				internalVisitor(),
				CPPMLStopVisitingVisitor<T>()
				)
			);
		}

	template<class A, class F>
	CPPMLVisitor<UnionVisitor<held_type, CPPMLFunctionProcessDownVisitor<A, F> > > down(const F& f)
		{
		typedef UnionVisitor<held_type, CPPMLFunctionProcessDownVisitor<A, F> > new_held_type;

		return CPPMLVisitor<new_held_type>(
			new_held_type(
				internalVisitor(),
				CPPMLFunctionProcessDownVisitor<A, F>(f)
				)
			);
		}

	template<class A, class F>
	CPPMLVisitor<UnionVisitor<held_type, CPPMLFunctionProcessUpVisitor<A, F> > > up(const F& f)
		{
		typedef UnionVisitor<held_type, CPPMLFunctionProcessUpVisitor<A, F> > new_held_type;

		return CPPMLVisitor<new_held_type>(
			new_held_type(
				internalVisitor(),
				CPPMLFunctionProcessUpVisitor<A, F>(f)
				)
			);
		}
};


