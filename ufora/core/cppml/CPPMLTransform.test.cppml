/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/
#include "CPPMLPrettyPrinter.hppml"
#include "CPPMLTransform.hppml"
#include "CPPMLEquality.hppml"
#include "../UnitTest.hpp"
#include "../math/Nullable.hpp"
#include <vector>

using namespace std;

namespace {


@type X =
		A of int a
	-|	B of int b, int c
	-|	Node of int a, X b
	with
		string common,
        int computedValue = (this->computeComputedValue())
    {
    public:
        int computeComputedValue(void) const
            {
            return 42;
            }
    }
	;

macro_defineCppmlComparisonOperators(X)

std::ostream&	operator<<(std::ostream& stream, const X& in)
	{
	return stream << prettyPrintString(in);
	}

class CommonDataTransformer {
public:

    template<class T>
    Nullable<T> processDown(const T& t, bool& b) const
        {
        return null();
        }

    template<class T>
    Nullable<T> processUp(const T& t) const
        {
        return null();
        }

    Nullable<X> processUp(const X& x) const
        {
        return null();
        }

    Nullable<X> processDown(const X& x, bool& ioContinue) const
        {
        return null() << CPPML::replaceCommonData(x, "BLA" + x.common());
        }

};

@type Y =
        A of int a
    -|  B of int b
    -|  C of int c, Y y
    -|  D of int d, Y y1, Y y2
    with
        int computedValue = (this->computeComputedValue())
    {
    public:
        int computeComputedValue(void) const
            {
            return 42;
            }
    }
    ;


macro_defineCppmlComparisonOperators(Y)

std::ostream&	operator<<(std::ostream& stream, const Y& in)
	{
	return stream << prettyPrintString(in);
	}

class NonCommonDataTransformer {
public:

    template<class T>
    Nullable<T> processDown(const T& t, bool& b) const
        {
        return null();
        }

    template<class T>
    Nullable<T> processUp(const T& t) const
        {
        return null();
        }

    Nullable<Y> processUp(const Y& y) const
        {
        @match Y(y)
            -|  A(a) ->> { return null() << Y::A(a + 1);}
            -|  C(c, y) ->> { return null() << Y::C(c + 1, y); }
            -|  _ ->> { return null(); }
        }

    Nullable<Y> processDown(const Y& y, bool& ioContinue) const
        {
        @match Y(y)
            -|  A(a) ->> { return null() << Y::A(2 * a); }
            -|  C(c, y) ->> { return null() << Y::C(2 * c, y); }
            -|  _ ->> { return null(); }
        }

};

class TransformerWithBaseInt {
private:
	int mBaseInt;
	mutable int mSumOfElts;
public:
	TransformerWithBaseInt(int baseInt)
			: mBaseInt(baseInt), mSumOfElts(0)
		{}

	int sumOfElts() const
		{
		return mSumOfElts;
		}

    template<class T>
    Nullable<T> processDown(const T& t, bool& b) const
        {
        return null();
        }

    template<class T>
    Nullable<T> processUp(const T& t) const
        {
        return null();
        }

    Nullable<Y> processUp(const Y& y) const
        {
        return null();
		}

    Nullable<Y> processDown(const Y& y, bool& ioContinue) const
        {
        @match Y(y)
			-|	A(a) ->> {
				mSumOfElts += a;
				return null() << Y::A(a + mBaseInt);
				}
			-|  B(b) ->> {
				mSumOfElts += b;
				return null() << Y::B(b + mBaseInt);
				}
			-|  C(c, y) ->> {
				mSumOfElts += c;
				return null() << Y::C(c + mBaseInt, y);
				}
			-|  D(d, y1, y2) ->> {
				mSumOfElts += d;
				return null() << Y::D(d + mBaseInt, y1, y2);
				}
        }

};

}

BOOST_AUTO_TEST_CASE( test_CPPMLTransform_on_common_data )
{
    X x0 = X::B("a",11,12);
    X x1 = X::Node("b", 13, x0);

	x1.computedValue();

    X x1_transformed = transform(x1, CommonDataTransformer());

    X supposed_x1_transformed =  X::Node("BLAb", 13, X::B("BLAa", 11, 12));

    BOOST_CHECK_EQUAL(x1_transformed, supposed_x1_transformed);
}

BOOST_AUTO_TEST_CASE( test_CPPMLTransform_on_noncommon_data )
{
    Y y = Y::C(1, Y::D(4, Y::C(2, Y::A(3)), Y::B(5)));

	y.computedValue();

    Y y_transformed = transform(y, NonCommonDataTransformer());

    Y supposed_y_transformed = Y::C(3, Y::D(4, Y::C(5, Y::A(7)), Y::B(5)));

    BOOST_CHECK_EQUAL(y_transformed, supposed_y_transformed);

    for (int i = 0; i < 100; i++)
        y_transformed = transform(y_transformed, NonCommonDataTransformer());
}

BOOST_AUTO_TEST_CASE( test_CPPMLTransform_with_base_int )
{
	Y y = Y::C(1, Y::D(4, Y::C(2, Y::A(3)), Y::B(5)));

	TransformerWithBaseInt transf(10);

	Y y_transformed = transform(y, transf);

	Y supposed_y_transformed = Y::C(11, Y::D(14, Y::C(12, Y::A(13)), Y::B(15)));

	BOOST_CHECK_EQUAL(y_transformed, supposed_y_transformed);

	BOOST_CHECK_EQUAL(transf.sumOfElts(), 15);
}

@type Tree =
        Nil of ()
    -|  Node of int data, Tree left, Tree right
    ;

class ReplaceDataWithNodeDepthTransformer {
private:
    int mDepth;
public:
    ReplaceDataWithNodeDepthTransformer(): mDepth(0) {}
    ReplaceDataWithNodeDepthTransformer(const int& in): mDepth(in) {}

    template<class T>
    Nullable<T> processDown(const T&, bool&) const
        {
        return null();
        }

    template<class T>
    Nullable<T> processUp(const T&) const
        {
        return null();
        }

    Nullable<Tree> processUp(const Tree&) const
        {
        return null();
        }

    Nullable<Tree> processDown(const Tree& tree, bool& ioContinue) const
        {
        @match Tree(tree)
            -|  Nil() ->> { return null(); }
            -|  Node(data, left, right) ->> {
                Tree leftTransformed =
                    transform(
                        left,
                        ReplaceDataWithNodeDepthTransformer(mDepth + 1)
                        );

                Tree rightTransformed =
                    transform(
                        right,
                        ReplaceDataWithNodeDepthTransformer(mDepth + 1)
                        );

                ioContinue = false;

                return null() << Tree::Node(mDepth, leftTransformed, rightTransformed);
            }
        }
    };

macro_defineCppmlComparisonOperators(Tree)

std::ostream&	operator<<(std::ostream& stream, const Tree& in)
	{
	return stream << prettyPrintString(in);
	}

BOOST_AUTO_TEST_CASE( test_CPPMLTransform_with_stack_variables )
    {
    Tree tree =
        Tree::Node(
            0,
            Tree::Node(
                0,
                Tree::Node(
                    0,
                    Tree::Nil(),
                    Tree::Node(
                        0,
                        Tree::Nil(),
                        Tree::Nil()
                        )
                    ),
                Tree::Nil()
                ),
            Tree::Node(
                0,
                Tree::Node(
                    0,
                    Tree::Nil(),
                    Tree::Nil()
                    ),
                Tree::Nil()
                )
        );

    Tree transformedTree =
        transform(tree, ReplaceDataWithNodeDepthTransformer());

    Tree expectedTransformedtree =
        Tree::Node(
            0,
            Tree::Node(
                1,
                Tree::Node(
                    2,
                    Tree::Nil(),
                    Tree::Node(
                        3,
                        Tree::Nil(),
                        Tree::Nil()
                        )
                    ),
                Tree::Nil()
                ),
            Tree::Node(
                1,
                Tree::Node(
                    2,
                    Tree::Nil(),
                    Tree::Nil()
                    ),
                Tree::Nil()
                )
        );

    BOOST_CHECK_EQUAL(expectedTransformedtree, transformedTree);
    };

