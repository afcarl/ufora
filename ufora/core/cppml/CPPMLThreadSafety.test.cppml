/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/
#include "CPPMLThreadSafety.hppml"
#include "../UnitTest.hpp"
#include <iostream>
#include "MemoizeByTagAndHash.hppml"

using namespace std;

namespace {

class TestType;

}

macro_memoizeCppmlClassByTagAndHash(TestType);

namespace {

@type TestType =
	A of int x
-|	B of double d
	;

void f(void)
	{
	for (long k = 0; k < 1000000;k++)
		TestType::A(k % 120);
	}

@type TestTypeWithMemos =
	-| Leaf of int value
	-| Branch of TestTypeWithMemos left, TestTypeWithMemos right
with
	int sum = (this->computeSum())
{
public:
	int computeSum() const;
};
}

int TestTypeWithMemos::computeSum() const
	{
	@match TestTypeWithMemos(*this)
		-| Leaf(value) ->> { return value; }
		-| Branch(l,r) ->> { return l.sum() + r.sum(); }
		;
	}

BOOST_AUTO_TEST_CASE( test_CPPMLThreadSafety_MemoizationFunctions )
	{
	TestType a1 = TestType::A(10);
	TestType a2 = TestType::A(11);
	TestType a3 = TestType::A(10);

	BOOST_CHECK(&a1.getA().x() != &a2.getA().x());
	BOOST_CHECK(&a1.getA().x() == &a3.getA().x());

	BOOST_CHECK_EQUAL(MemoizeByTagAndHash<TestType>::countInstances<TestType_AType>(), 2);
	BOOST_CHECK_EQUAL(MemoizeByTagAndHash<TestType>::countInstances<TestType_BType>(), 0);
	}

BOOST_AUTO_TEST_CASE( test_CPPMLThreadSafety_MultithreadedMemo )
	{
	boost::thread thread1(f);
	boost::thread thread2(f);
	boost::thread thread3(f);
	boost::thread thread4(f);

	thread1.join();
	thread2.join();
	thread3.join();
	thread4.join();

	BOOST_CHECK_EQUAL(MemoizeByTagAndHash<TestType>::countInstances<TestType_AType>(), 120);
	BOOST_CHECK_EQUAL(MemoizeByTagAndHash<TestType>::countInstances<TestType_BType>(), 0);
	}

BOOST_AUTO_TEST_CASE( test_CPPMLThreadSafety_ObjectMemo )
	{
	TestTypeWithMemos l1 = TestTypeWithMemos::Leaf(10);
	TestTypeWithMemos l2 = TestTypeWithMemos::Leaf(20);

	TestTypeWithMemos o1 = TestTypeWithMemos::Branch(l1, l1);
	TestTypeWithMemos o2 = TestTypeWithMemos::Branch(l1, l2);
	TestTypeWithMemos o3 = TestTypeWithMemos::Branch(l2, l2);

	TestTypeWithMemos o4 = TestTypeWithMemos::Branch(o1, o2);
	TestTypeWithMemos o5 = TestTypeWithMemos::Branch(o4, o3);

	BOOST_CHECK_EQUAL(o5.sum(), 90);
	}

















