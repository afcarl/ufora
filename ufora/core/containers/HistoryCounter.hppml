/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/
#pragma once

#include <boost/unordered_map.hpp>
#include <deque>

/***************

HistoryCounter

Keeps track of a sequence of elements, keeping the last N of them
and providing a histogram.

***************/

template<class T>
class HistoryCounter {
public:
	HistoryCounter(size_t inMaxSize) : mMaxSize(inMaxSize)
		{
		}

	void clear()
		{
		mHistory.clear();
		mCounts.clear();
		}

	void push_back(const T& in)
		{
		mHistory.push_back(in);
		mCounts[in]++;

		if (mHistory.size() > mMaxSize)
			{
			T backElt = mHistory.front();
			mHistory.pop_front();

			auto countIt = mCounts.find(backElt);
			countIt->second --;

			if (countIt->second == 0)
				mCounts.erase(countIt);
			}
		}

	bool isFull() const
		{
		return mHistory.size() == mMaxSize;
		}

	size_t size() const
		{
		return mHistory.size();
		}

	size_t maxSize() const
		{
		return mMaxSize;
		}

	size_t distinctItemCount() const
		{
		return mCounts.size();
		}

	bool fullAndAverageDensityExceeds(size_t density) const
		{
		return size() * density > maxSize() && distinctItemCount() * density < size();
		}

private:
	size_t mMaxSize;

	std::deque<T> mHistory;

	boost::unordered_map<T, size_t> mCounts;
};
