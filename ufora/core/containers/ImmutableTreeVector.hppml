/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/
#pragma once

#include <vector>
#include "../serialization/Serialization.hpp"
#include "../cppml/CPPMLEquality.hppml"
#include "../cppml/CPPMLPrettyPrinter.hppml"
#include "../math/Nullable.hpp"
#include "../lassert.hpp"
#include "../cppml/CPPMLTransform.fwd.hppml"
#include "../cppml/CPPMLVisit.fwd.hppml"
#include "../AtomicOps.hpp"
#include "../RefcountingPtr.hppml"
#include "../math/IntegerSequence.hppml"

class TreeVec {};

template<class T>
class ImmutableTreeVectorStorage {
public:
	static RefcountingPtr<ImmutableTreeVectorStorage<T> > allocate(AO_t count)
		{
		ImmutableTreeVectorStorage<T>* data =
			(ImmutableTreeVectorStorage<T>*)
				malloc(sizeof(ImmutableTreeVectorStorage<T>) + sizeof(T) * count);

		new (data)ImmutableTreeVectorStorage<T>(count);

		return RefcountingPtr<ImmutableTreeVectorStorage<T> >(data);
		}

	const T& getItem(int64_t index)
		{
		return mElements[index];
		}

	ImmutableTreeVectorStorage(AO_t allocatedCount) :
			mElementsAllocated(allocatedCount),
			mRefcount(0),
			mElementsUsed(0)
		{
		}

	void append(const T& in)
		{
		lassert(append(in, mElementsUsed));
		}

	bool append(const T& in, AO_t slot)
		{
		if (slot >= mElementsAllocated)
			return false;

		if (!AO_compare_and_swap_full(&mElementsUsed, slot, slot+1))
			return false;

		new (mElements + slot) T(in);

		return true;
		}

	void incrementRefcount()
		{
		AO_fetch_and_add_full(&mRefcount, 1);
		}

	void decrementRefcount()
		{
		if (AO_fetch_and_add_full(&mRefcount, -1) == 1)
			this->destroySelf();
		}

private:
	void destroySelf()
		{
		for (long k = 0; k < mElementsUsed; k++)
			mElements[k].~T();
		free(this);
		}

	AO_t mRefcount;
	AO_t mElementsUsed;
	AO_t mElementsAllocated;

	//we expect space for 'mElementsAllocated' to exist here
	T mElements[0];
};


template<class vector_type, uint32_t offset>
class ImmutableTreeVectorSlice {
public:
	typedef ImmutableTreeVectorSlice<vector_type, offset> self_type;

	uint32_t size(void) const
		{
		return ((vector_type*)this)->size() - offset;
		}
	const typename vector_type::element_type& operator[](uint32_t index) const
		{
		return ((vector_type*)this)[0][index + offset];
		}
	operator vector_type (void) const
		{
		return ((vector_type*)this)->slice(offset, ((vector_type*)this)->size());
		}
	vector_type operator*(void) const
		{
		return ((vector_type*)this)->slice(offset, ((vector_type*)this)->size());
		}

	typedef self_type EmptyType;
	bool isEmpty(void) const
		{
		return ((vector_type*)this)->size() <= offset;
		}

	typedef self_type LeafType;
	bool isLeaf(void) const
		{
		return ((vector_type*)this)->size() > offset;
		}
	const LeafType& getLeaf(void) const
		{
		return *((LeafType*)this);
		}

	typedef typename vector_type::element_type 					member_0_type;
	typedef ImmutableTreeVectorSlice<vector_type, offset+1>		member_1_type;

	const member_0_type& getM0(void) const
		{
		return (*this)[0];
		}
	const member_1_type& getM1(void) const
		{
		return *((member_1_type*)this);
		}
};

template<class vector_type>
class ImmutableTreeVectorSlice<vector_type, 3> {
public:
	const static uint32_t offset = 3;
	typedef ImmutableTreeVectorSlice<vector_type, offset> self_type;

	uint32_t size(void) const
		{
		return ((vector_type*)this)->size() - offset;
		}
	const typename vector_type::element_type& operator[](uint32_t index) const
		{
		return ((vector_type*)this)[0][index + offset];
		}
	operator vector_type (void) const
		{
		return ((vector_type*)this)->slice(offset, ((vector_type*)this)->size());
		}
	vector_type operator*(void) const
		{
		return ((vector_type*)this)->slice(offset, ((vector_type*)this)->size());
		}

	typedef self_type EmptyType;
	bool isEmpty(void) const
		{
		return ((vector_type*)this)->size() <= offset;
		}

	typedef typename vector_type::element_type 	member_0_type;
	typedef self_type 							member_1_type;
	const member_0_type& getM0(void) const
		{
		return (*this)[0];
		}
	const member_1_type& getM1(void) const
		{
		return *this;
		}
};

template<class T>
class ImmutableTreeVector {
	@type Range = int32_t count, int32_t offset {
	public:
		int32_t actualIndex(int32_t index) const
			{
			return offset() + index;
			}

		Range appended() const
			{
			return Range(count()+1, offset());
			}

		int32_t appendIndex() const
			{
			return count() + offset();
			}
	};

	static int32_t nextCountFor(int32_t count)
		{
		return (count+2) * 1.25;
		}

	typedef RefcountingPtr<ImmutableTreeVectorStorage<T> > storage_ptr_type;
public:
	typedef T	element_type;

	ImmutableTreeVector()
		{
		}

	ImmutableTreeVector(const TreeVec& in)
		{
		}

	explicit ImmutableTreeVector(const T& in)
		{
		mStorage = ImmutableTreeVectorStorage<T>::allocate(1);

		mStorage->append(in);

		mRange = Range(1,0);
		}

	template<class f_type>
	void foreach(const f_type& f) const
		{
		for (long k = 0; k < size(); k++)
			f((*this)[k]);
		}

	template<class iterator_type>
	ImmutableTreeVector(iterator_type left, iterator_type right)
		{
		ImmutableTreeVector tr;
		while (left != right)
			{
			tr = tr + *left;
			left++;
			}
		mStorage = tr.mStorage;
		mRange = tr.mRange;
		}

	template<class T2>
	explicit ImmutableTreeVector(const T2& in)
		{
		for (const auto& elt: in)
			*this = *this + elt;
		}

	class const_iterator;

	ImmutableTreeVector(const_iterator left, const_iterator right)
		{
		auto vec = left.tree()->slice(left.index(), right.index());

		mStorage = vec.mStorage;
		mRange = vec.mRange;
		}

	ImmutableTreeVector(const std::vector<T>& in)
		{
		ImmutableTreeVector<T> tr;
		for (uint32_t k = 0; k < in.size();k++)
			tr = tr + in[k];
		mStorage = tr.mStorage;
		mRange = tr.mRange;
		}

	ImmutableTreeVector(const ImmutableTreeVector& in) :
			mStorage(in.mStorage),
			mRange(in.mRange)
		{
		}

	uint32_t size(void) const
		{
		return mRange.count();
		}

	const T& operator[](uint32_t inIndex) const
		{
		lassert_dump(inIndex < size(), inIndex << " out of bounds. size is " << size());

		return mStorage->getItem(mRange.actualIndex(inIndex));
		}

	ImmutableTreeVector<T> operator[](ImmutableTreeVector<uint32_t> inIndex) const
		{
		ImmutableTreeVector<T> tr;
		for (uword_t k = 0; k < inIndex.size();k++)
			tr = tr + (*this)[inIndex[k]];
		return tr;
		}

	ImmutableTreeVector operator*(uint32_t count) const
		{
		ImmutableTreeVector tr;
		for (uword_t k = 0; k < count;k++)
			tr = tr + *this;
		return tr;
		}

	ImmutableTreeVector operator+(const T& in) const
		{
		if (!mStorage.isEmpty() && mStorage->append(in, mRange.appendIndex()))
			return ImmutableTreeVector(mStorage, mRange.appended());

		storage_ptr_type newPtr =
			ImmutableTreeVectorStorage<T>::allocate(nextCountFor(mRange.count()+1));

		for (long k = 0; k < size(); k++)
			newPtr->append((*this)[k]);

		newPtr->append(in);

		return ImmutableTreeVector(newPtr, Range(size()+1, 0));
		}

	ImmutableTreeVector operator+(const ImmutableTreeVector<T>& in) const
		{
		ImmutableTreeVector res = *this;

		for (long k = 0; k < in.size();k++)
			res = res + in[k];

		return res;
		}

	friend ImmutableTreeVector operator+(const T& in, const ImmutableTreeVector& r)
		{
		ImmutableTreeVector<T> res;
		res = res + in;
		return res + r;
		}

	ImmutableTreeVector& operator=(const ImmutableTreeVector& in)
		{
		mStorage = in.mStorage;
		mRange = in.mRange;

		return *this;
		}

	ImmutableTreeVector withElementReplaced(long index, const T& newValue) const
		{
		lassert(index >= 0 && index < size());

		if (index == 0)
			return newValue + slice(1);

		if (index + 1 == size())
			return slice(0, size()-1) + newValue;

		return slice(0, index) + newValue + slice(index + 1);
		}

	typedef const ImmutableTreeVector* immutable_tree_vector_ptr;

	@type const_iterator = immutable_tree_vector_ptr tree, uint32_t index {
	public:
			bool operator==(const const_iterator& in) const
				{
				return tree() == in.tree() && index() == in.index();
				}
			bool operator!=(const const_iterator& in) const
				{
				return !(*this == in);
				}
			bool operator<(const const_iterator& in) const
				{
				if (tree() < in.tree())
					return true;
				if (tree() > in.tree())
					return false;
				return index() < in.index();
				}
			const T& operator*(void) const
				{
				return (*tree())[index()];
				}
			const T* operator->(void) const
				{
				return &(*tree())[index()];
				}
			int32_t operator-(const const_iterator& in) const
				{
				return (int32_t)index() - (int32_t)in.index();
				}
			const_iterator operator+(int32_t offset) const
				{
				return const_iterator(tree(), index() + offset);
				}
			const_iterator operator-(int32_t offset) const
				{
				return const_iterator(tree(), index() - offset);
				}
			const_iterator& operator+=(int32_t offset)
				{
				index() += offset;
				return *this;
				}
			const_iterator& operator-=(int32_t offset)
				{
				index() -= offset;
				return *this;
				}
			const_iterator& operator++(void)
				{
				index() += 1;
				return *this;
				}
			const_iterator operator++(int)
				{
				const_iterator tr(tree(), index());
				index() += 1;
				return tr;
				}
			const_iterator& operator--(void)
				{
				index() -= 1;
				return *this;
				}
			const_iterator operator--(int)
				{
				const_iterator tr(tree(), index());
				index() -= 1;
				return tr;
				}

			typedef T value_type;
			typedef int32_t difference_type;
			typedef T* pointer;
			typedef T& reference;
			typedef std::random_access_iterator_tag iterator_category;
	};
	@type const_reverse_iterator = immutable_tree_vector_ptr tree, uint32_t index {
	public:
			bool operator==(const const_reverse_iterator& in) const
				{
				return tree() == in.tree() && index() == in.index();
				}
			bool operator!=(const const_reverse_iterator& in) const
				{
				return !(*this == in);
				}
			bool operator<(const const_reverse_iterator& in) const
				{
				if (tree() < in.tree())
					return true;
				if (tree() > in.tree())
					return false;
				//going in reverse, so swap them!
				return index() > in.index();
				}
			const T& operator*(void) const
				{
				return (*tree())[index()];
				}
			const T* operator->(void) const
				{
				return &(*tree())[index()];
				}
			int32_t operator-(const const_reverse_iterator& in) const
				{
				return -((int32_t)index() - (int32_t)in.index());
				}
			const_reverse_iterator operator+(int32_t offset) const
				{
				return const_reverse_iterator(tree(), index() - offset);
				}
			const_reverse_iterator operator-(int32_t offset) const
				{
				return const_reverse_iterator(tree(), index() + offset);
				}
			const_reverse_iterator& operator+=(int32_t offset)
				{
				index() -= offset;
				return *this;
				}
			const_reverse_iterator& operator-=(int32_t offset)
				{
				index() += offset;
				return *this;
				}
			const_reverse_iterator& operator++(void)
				{
				index() -= 1;
				return *this;
				}
			const_reverse_iterator operator++(int)
				{
				const_reverse_iterator tr(tree(), index());
				index() -= 1;
				return tr;
				}
			const_reverse_iterator& operator--(void)
				{
				index() += 1;
				return *this;
				}
			const_reverse_iterator operator--(int)
				{
				const_reverse_iterator tr(tree(), index());
				index() += 1;
				return tr;
				}

			typedef T value_type;
			typedef int32_t difference_type;
			typedef T* pointer;
			typedef T& reference;
			typedef std::random_access_iterator_tag iterator_category;
	};
	const_iterator begin(void) const
		{
		return const_iterator(this, 0);
		}
	const_iterator end(void) const
		{
		return const_iterator(this, size());
		}
	const_reverse_iterator rbegin(void) const
		{
		return const_reverse_iterator(this, ((long)size()) - 1);
		}
	const_reverse_iterator rend(void) const
		{
		return const_reverse_iterator(this, -1);
		}

	typedef const_iterator iterator;
	typedef const_reverse_iterator reverse_iterator;

	ImmutableTreeVector slice(int32_t left, int32_t right, int32_t step) const
		{
		if (left < 0)
			left += size();

		if (left >= size())
			left = size() - 1;
		if (left < 0)
			left = 0;

		if (right < 0)
			right += size();

		if (right >= 0 && right >= (int32_t)size())
			right = size();
		if (right < 0)
			right = -1;

		ImmutableTreeVector<T> res;

		if (step > 0)
			for (long k = left; k < right; k += step)
				res = res + (*this)[k];
			else
			for (long k = left; k > right; k += step)
				res = res + (*this)[k];

		return res;
		}
	ImmutableTreeVector slice(int32_t left, int32_t right) const
		{
		if (left < 0)
			left += size();
		if (right < 0)
			right += size();
		if (left < 0)
			left = 0;
		if (right >= 0 && right > (int32_t)size())
			right = size();
		if (left >= right)
			return ImmutableTreeVector();

		return ImmutableTreeVector(mStorage, Range(right - left, left + mRange.offset()));
		}

	ImmutableTreeVector slice(uint32_t left) const
		{
		return slice(left, size());
		}

	const T& back(void) const
		{
		return (*this)[size()-1];
		}

	ImmutableTreeVector reversed(void) const
		{
		ImmutableTreeVector<T> res;

		for (long k = ((long)size())-1; k>= 0; k--)
			res = res + (*this)[k];

		return res;
		}

	typedef ImmutableTreeVector<T> self_type;

	typedef self_type EmptyType;
	bool isEmpty(void) const
		{
		return size() == 0;
		}

	typedef ImmutableTreeVectorSlice<self_type, 0> LeafType;
	bool isLeaf(void) const
		{
		return size() > 0;
		}
	const LeafType& getLeaf(void) const
		{
		return *((LeafType*)this);
		}
private:
	ImmutableTreeVector(const storage_ptr_type& inStorage, const Range& inRange) :
			mStorage(inStorage),
			mRange(inRange)
		{
		}

	storage_ptr_type mStorage;

	Range mRange;
};

template<class T>
class CPPMLEquality<ImmutableTreeVector<T>, void> {
public:
		static char cmp(const ImmutableTreeVector<T>& lhs, const ImmutableTreeVector<T>& rhs)
			{
			if (lhs.size() < rhs.size())
				return -1;
			if (lhs.size() > rhs.size())
				return 1;
			for (uint32_t k = 0; k < lhs.size();k++)
				{
				char c = cppmlCmp(lhs[k], rhs[k]);
				if (c != 0)
					return c;
				}
			return 0;
			}
};

template<class T>
bool operator<(const ImmutableTreeVector<T>& lhs, const ImmutableTreeVector<T>& rhs)
	{
	return CPPMLEquality<ImmutableTreeVector<T>, void>::cmp(lhs, rhs) < 0;
	}
template<class T>
bool operator==(const ImmutableTreeVector<T>& lhs, const ImmutableTreeVector<T>& rhs)
	{
	return CPPMLEquality<ImmutableTreeVector<T>, void>::cmp(lhs, rhs) == 0;
	}
template<class T>
bool operator!=(const ImmutableTreeVector<T>& lhs, const ImmutableTreeVector<T>& rhs)
	{
	return CPPMLEquality<ImmutableTreeVector<T>, void>::cmp(lhs, rhs) != 0;
	}

template<class T, class storage_type>
class Serializer<ImmutableTreeVector<T>, storage_type> {
public:
		static void serialize(storage_type& s, const ImmutableTreeVector<T>& t)
			{
			s.serialize((uint32_t)t.size());
			for (uint32_t k = 0; k < t.size();k++)
				s.serialize(t[k]);
			}
};

template<class T, class storage_type>
class Deserializer<ImmutableTreeVector<T>, storage_type> {
public:
		static void deserialize(storage_type& s, ImmutableTreeVector<T>& t)
			{
			t = ImmutableTreeVector<T>();
			uint32_t sz;
			s.deserialize(sz);
			while (sz > 0)
				{
				T t2;
				s.deserialize(t2);
				t = t + t2;
				sz--;
				}
			}
};


template<class T>
class CPPMLPrettyPrint<ImmutableTreeVector<T> > {
public:
		static void prettyPrint(CPPMLPrettyPrintStream& s, const ImmutableTreeVector<T>& t)
			{
			s << "(";

				{
				CPPMLPrettyPrintStream s2 = s.group();

				for (int32_t k = 0; k < t.size();k++)
					{
					s2 << t[k];
					if (k + 1 < t.size())
						s2 << ", " << s2.sep;
					}
				}

			s << ")";
			}
};
template<class T>
ImmutableTreeVector<T> operator+(TreeVec v, const T& in)
	{
	return ImmutableTreeVector<T>(in);
	}

inline TreeVec emptyTreeVec(void)
	{
	return TreeVec();
	}

inline ImmutableTreeVector<uint32_t> rangeTreeVec(uint32_t low, uint32_t high)
	{
	ImmutableTreeVector<uint32_t> tr;

	for (uint32_t k = low; k < high; k++)
		tr = tr + k;
	return tr;
	}

template<class T>
class CPPMLTransform<ImmutableTreeVector<T>, void> {
public:
		template<class F>
		static Nullable<ImmutableTreeVector<T> > apply(const ImmutableTreeVector<T>& in, F& f)
			{
			for (uword_t k = 0; k < in.size();k++)
				{
				Nullable<T> t = transformNullable(in[k], f);
				if (t)
					{
					ImmutableTreeVector<T> tr;
					for (uword_t j = 0; j < k; j++)
						tr = tr + in[j];
					tr = tr + *t;
					for (uword_t j = k + 1; j < in.size();j++)
						{
						t = transformNullable(in[j], f);
						tr = tr + (t ? *t : in[j]);
						}
					return null () << tr;
					}
				}
			return null();
			}
};
template<class T>
class CPPMLTransformWithIndex<ImmutableTreeVector<T>, void> {
public:
		template<class F, class indices_type>
		static Nullable<ImmutableTreeVector<T> > apply(const ImmutableTreeVector<T>& in, F& f, const indices_type& inIndices)
			{
			for (uword_t k = 0; k < in.size();k++)
				{
				Nullable<T> t = transformNullable(in[k], f, inIndices + k);
				if (t)
					{
					ImmutableTreeVector<T> tr;
					for (uword_t j = 0; j < k; j++)
						tr = tr + in[j];
					tr = tr + *t;
					for (uword_t j = k + 1; j < in.size();j++)
						{
						t = transformNullable(in[j], f, inIndices + j);
						tr = tr + (t ? *t : in[j]);
						}
					return null () << tr;
					}
				}
			return null();
			}
};
template<class T>
class CPPMLVisit<ImmutableTreeVector<T>, void> {
public:
		template<class F>
		static void apply(const ImmutableTreeVector<T>& in, F& f)
			{
			for (uword_t k = 0; k < in.size();k++)
				visit(in[k], f);
			}
};

template<class T>
class CPPMLVisitWithIndex<ImmutableTreeVector<T>, void> {
public:
		template<class F, class indices_type>
		static void apply(const ImmutableTreeVector<T>& in, F& f, const indices_type& inIndices)
			{
			for (uword_t k = 0; k < in.size();k++)
				visit(in[k], f, inIndices + k);
			}
};

template<class T1,  class T2>
ImmutableTreeVector<T1> extractFirst(const ImmutableTreeVector<pair<T1, T2> >& in)
	{
	ImmutableTreeVector<T1> res;
	for (uword_t k = 0; k < in.size();k++)
		res = res + in[k].first;
	return res;
	}

template<class T1,  class T2>
ImmutableTreeVector<T2> extractSecond(const ImmutableTreeVector<pair<T1, T2> >& in)
	{
	ImmutableTreeVector<T2> res;
	for (uword_t k = 0; k < in.size();k++)
		res = res + in[k].second;
	return res;
	}

template<class T, class f_type>
auto mapITV(const T& in, const f_type& f) -> ImmutableTreeVector< decltype(f(*in.begin())) >
	{
	ImmutableTreeVector< decltype(f(*in.begin())) > tr;

	for (auto it = in.begin(), it_end = in.end(); it != it_end; ++it)
		tr = tr + f(*it);

	return tr;
	}

template<class f_type>
auto mapRange(long count, const f_type& f) -> ImmutableTreeVector< decltype(f(count)) >
	{
	ImmutableTreeVector< decltype(f(count)) > tr;

	for (long k = 0; k < count; k++)
		tr = tr + f(count);

	return tr;
	}

template<class T, class f_type>
ImmutableTreeVector<T> filterITV(const ImmutableTreeVector<T>& in, const f_type& f)
	{
	bool changed = false;
	ImmutableTreeVector<T> tr;

	for (long k = 0; k < in.size(); k++)
		if (!f(in[k]))
			{
			if (!changed)
				{
				changed = true;
				tr = in.slice(0, k);
				}
			}
			else
		if (changed)
			{
			tr = tr + in[k];
			}

	if (changed)
		return tr;
	else
		return in;
	}

template<class T, class f_type>
auto mapITVWithIndices(const T& in, const f_type& f) -> ImmutableTreeVector< decltype(f(*in.begin(), (long)0)) >
	{
	ImmutableTreeVector< decltype(f(*in.begin(), (long)0)) > tr;

	long index = 0;
	for (auto it = in.begin(), it_end = in.end(); it != it_end; ++it)
		{
		tr = tr + f(*it, index);
		index++;
		}

	return tr;
	}
template<class T, class f_type>
auto sumITV(const T& in, const f_type& f) -> decltype(f(*in.begin()) + f(*in.begin()))
	{
	decltype(f(*in.begin()) + f(*in.begin())) tr;

	for (auto it = in.begin(), it_end = in.end(); it != it_end; ++it)
		tr = tr + f(*it);

	return tr;
	}

