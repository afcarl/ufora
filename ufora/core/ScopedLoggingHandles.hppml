/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/
#include <string>
#include <map>
#include <vector>
#include "math/Nullable.hpp"
#include <boost/thread.hpp>
#include <boost/shared_ptr.hpp>
#include "cppml/CPPMLEquality.hppml"
#include "Logging.hpp"

namespace Ufora {

@type ScopedLoggingEntry = std::string scope, std::string file {
public:
	bool matchesPattern(const ScopedLoggingEntry& otherPattern) const;
};

macro_defineCppmlComparisonOperators(ScopedLoggingEntry);

class ScopedLoggingHandles {
public:
	ScopedLoggingHandles(LogLevel* defaultLogLevelPtr);

	LogLevel** getHandle(const ScopedLoggingEntry& entry);

	void addPattern(const ScopedLoggingEntry& entry, Nullable<LogLevel> level);

private:
	void resetPointersMatching_(const ScopedLoggingEntry& entry);

	void updatePointerForEntry_(const ScopedLoggingEntry& entry);

	void checkIfPatternIsDuplicated_(const ScopedLoggingEntry& entry);

	void dropUselessFrontPatterns_();

	void dropPatternInSlot_(long slot);

	bool frontPatternDoesNothing_() const;

private:
	boost::mutex mMutex;

	LogLevel* mDefaultLogLevelPtr;

	std::map<ScopedLoggingEntry, LogLevel*> mLogLevelPtrs;

	std::map<ScopedLoggingEntry, boost::shared_ptr<LogLevel> > mLogLevelPointerOverrides;

	std::vector<std::pair<ScopedLoggingEntry, Nullable<LogLevel> > > mPatterns;

	std::map<ScopedLoggingEntry, long> mPatternCount;
};

}
