/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/
#include "SimpleCallbackSchedulerFactory.hppml"
#include "SimpleCallbackScheduler.hppml"
#include "../threading/Queue.hpp"
#include "../math/Hash.hpp"
#include "../Logging.hpp"

SimpleCallbackSchedulerFactory::SimpleCallbackSchedulerFactory() :
		mSchedulersCreated(0)
	{
	}

SimpleCallbackSchedulerFactory::~SimpleCallbackSchedulerFactory()
	{
	}

PolymorphicSharedPtr<CallbackScheduler> SimpleCallbackSchedulerFactory::createScheduler(
												std::string metadata,
												uint32_t numThreads
												)
	{
	boost::mutex::scoped_lock lock(mMutex);

	PolymorphicSharedPtr<CallbackScheduler> result(
		new SimpleCallbackScheduler(
			polymorphicSharedPtrFromThis(),
			metadata,
			numThreads
			)
		);

	mSchedulers.push_back(PolymorphicSharedWeakPtr<CallbackScheduler>(result));

	return result;
	}


PolymorphicSharedPtr<CallbackScheduler> SimpleCallbackSchedulerFactory::singletonSchedulerForTesting()
	{
	static PolymorphicSharedPtr<CallbackSchedulerFactory> factory(
		new SimpleCallbackSchedulerFactory()
		);

	static PolymorphicSharedPtr<CallbackScheduler> singleton = factory->createScheduler();

	return singleton;
	}

bool SimpleCallbackSchedulerFactory::blockUntilPendingHaveExecuted()
	{
	std::vector<PolymorphicSharedPtr<CallbackScheduler> > schedulers;

	bool didAnything = false;

	while (true)
		{
		bool didAnythingThisPass = false;

		getLiveSchedulers(schedulers);

		for (auto ptr: schedulers)
			if (ptr->blockUntilPendingHaveExecuted())
				didAnythingThisPass = true;

		if (didAnythingThisPass)
			didAnything = true;
		else
			return didAnything;
		}
	}

void SimpleCallbackSchedulerFactory::getLiveSchedulers(std::vector<PolymorphicSharedPtr<CallbackScheduler> >& outSchedulers)
	{
	boost::mutex::scoped_lock lock(mMutex);

	for (long k = 0; k < mSchedulers.size(); k++)
		{
		auto ptr = mSchedulers[k].lock();

		if (ptr)
			outSchedulers.push_back(ptr);
		else
			{
			mSchedulers.erase(mSchedulers.begin() + k);
			k--;
			}
		}
	}

bool SimpleCallbackSchedulerFactory::blockUntilPendingHaveExecutedAndImmediateQueueIsEmpty()
	{
	std::vector<PolymorphicSharedPtr<CallbackScheduler> > schedulers;

	bool didAnything = false;

	while (true)
		{
		bool didAnythingThisPass = false;

		getLiveSchedulers(schedulers);

		for (auto ptr: schedulers)
			if (ptr->blockUntilPendingHaveExecutedAndImmediateQueueIsEmpty())
				didAnythingThisPass = true;

		if (didAnythingThisPass)
			didAnything = true;
		else
			return didAnything;
		}
	}

bool SimpleCallbackSchedulerFactory::blockUntilPendingHaveExecutedAndQueueIsEmpty(bool logDelays)
	{
	std::vector<PolymorphicSharedPtr<CallbackScheduler> > schedulers;

	bool didAnything = false;

	while (true)
		{
		bool didAnythingThisPass = false;

		getLiveSchedulers(schedulers);

		for (auto ptr: schedulers)
			if (ptr->blockUntilPendingHaveExecutedAndQueueIsEmpty(logDelays))
				didAnythingThisPass = true;

		if (didAnythingThisPass)
			didAnything = true;
		else
			return didAnything;
		}
	}

