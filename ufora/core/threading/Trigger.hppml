/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/
#pragma once

#include <boost/thread.hpp>
#include <boost/bind.hpp>
#include "../lassert.hpp"

namespace Ufora {
namespace threading {

/***************

Trigger

Models an object that can be triggered by a caller. The trigger can be set exactly once.
A client can subscribe a callback. If the trigger is triggered before the callback is installed,
the client is notified.

The callback, if fired, always runs from the triggering thread.

***************/

class Trigger {
public:
	Trigger() :
			mTriggered(false),
			mTriggersRunning(0)
		{
		}

	void triggerIfNotTriggered()
		{
		trigger_(false);

		boost::mutex::scoped_lock lock(mMutex);
		while (mTriggersRunning)
			mHasNoRunningTriggers.wait(lock);
		}

	void trigger()
		{
		trigger_(true);
		}

	//set the trigger. Return 'true' if the trigger is installed, or false if it has already
	//been triggered.
	bool setTrigger(boost::function0<void> inToCall)
		{
		boost::mutex::scoped_lock lock(mMutex);

		if (!mTriggered)
			{
			mTriggerFun = inToCall;
			return true;
			}

		return false;
		}

	bool isTriggered() const
		{
		boost::mutex::scoped_lock lock(mMutex);

		return mTriggered;
		}


private:
	void trigger_(bool insistNotTriggered = true)
		{
		boost::function0<void> toCall;

			{
			boost::mutex::scoped_lock lock(mMutex);

			if (insistNotTriggered)
				{
				lassert(!mTriggered);
				}
			else
				{
				if (mTriggered)
					return;
				}

			toCall = mTriggerFun;

			mTriggered = true;

			mTriggersRunning++;
			}

		if (toCall)
			toCall();

			{
			boost::mutex::scoped_lock lock(mMutex);

			mTriggersRunning--;

			mHasNoRunningTriggers.notify_all();
			}
		}

	mutable boost::mutex mMutex;

	boost::condition_variable mHasNoRunningTriggers;

	bool mTriggered;

	int64_t mTriggersRunning;

	boost::function0<void> mTriggerFun;
};

}
}
