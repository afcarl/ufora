/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/
#pragma once

#include <boost/bind.hpp>
#include "../Common.hppml"
#include "../PolymorphicSharedPtr.hpp"

@type CallbackSchedulerStack =
	-| None of ()
	-| Callback of std::string descriptor, CallbackSchedulerStack stack
	-| Maximum of CallbackSchedulerStack substack
with
	uint32_t depth = (this->computeDepth())
{
public:
	uint32_t computeDepth() const;

};

class CallbackSchedulerFactory;

class CallbackScheduler : public PolymorphicSharedPtrBase<CallbackScheduler> {
public:
	virtual CallbackSchedulerStack currentStack() = 0;

	virtual PolymorphicSharedPtr<CallbackSchedulerFactory> getFactory() = 0;

	virtual std::string getMetadata() = 0;

	virtual void schedule(
		boost::function0<void> inCallback,
		double inTime,
		std::string descriptor = ""
		) = 0;

	virtual void scheduleImmediately(
		boost::function0<void> inCallback,
		std::string descriptor = ""
		) = 0;

	virtual void blockOnAllPossibleCallbacks() = 0;

	virtual bool blockUntilPendingHaveExecuted() = 0;

	virtual void setCallbackWrapper(boost::function1<void, boost::function0<void> > wrapper) = 0;

	virtual bool blockUntilPendingHaveExecutedAndImmediateQueueIsEmpty() = 0;

	virtual bool blockUntilPendingHaveExecutedAndQueueIsEmpty(bool logDelays=true) = 0;

	virtual long currentlyExecuting() = 0;

	virtual long unhandledExceptionsSinceLastCheck() = 0;

	virtual long currentlyScheduled() = 0;

	static PolymorphicSharedPtr<CallbackScheduler> singletonForTesting();
};
