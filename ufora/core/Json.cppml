/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/
#include "Json.hppml"

namespace Ufora {

Json simpleParseToJson(const SimpleParseNode& node);

Json Json::operator+(const Json& inJson) const
	{
	@match Json(*this)
		-| Null() ->> {
			return inJson;
			}
		-| Array(e1) ->> {
			@match Json(inJson)
				-| Array(e2) ->> {
					return Json::Array(e1 + e2);
					}
				-| _ ->> {
					}
			}
		-| Object(e1) ->> {
			@match Json(inJson)
				-| Object(e2) ->> {
					return Json::Object(e1 + e2);
					}
				-| _ ->> {
					}
			}
		-| _ ->> {}

	@match Json(inJson)
		-| Null() ->> {
			return *this;
			}
		-| _ ->> {}

	throw std::logic_error("Can't add two json objects of type " +
		std::string(tagName()) + " and " + inJson.tagName()
		);
	}

pair<std::string, Json> simpleParseColonPairToJson(const SimpleParseNode& node)
	{
	@match SimpleParseNode(node)
		-| Sequence(Colon(), keyValSeq) ->> {
			if (keyValSeq.size() != 2 || !keyValSeq[0].isQuote())
				throw JsonParseError("Badly formatted object member", node);
			return make_pair(
				keyValSeq[0].getQuote().val(),
				simpleParseToJson(keyValSeq[1])
				);
			}
		-| _ ->> {
			throw JsonParseError("Badly formatted object member", node);
			}
	}

Json simpleParseToJson(const SimpleParseNode& node)
	{
	@match SimpleParseNode(node)
		-| Identifier(i) ->> {
			if (i == "null")
				return Json::Null();
			if (i == "true")
				return Json::Boolean(true);
			if (i == "false")
				return Json::Boolean(false);
			}
		-| Number(val) ->> {
			return Json::Number(boost::lexical_cast<double>(val));
			}
		-| Sequence(Concatenation(), elts) ->> {
			if (elts.size() == 2 && elts[0].isOperator() && elts[0].getOperator().val() == "-" &&
					elts[1].isNumber())
				return Json::Number(- boost::lexical_cast<double>(elts[1].getNumber().val()));
			}
		-| Quote(s) ->> {
			return Json::String(s);
			}
		-| Grouping(Brackets(), Empty()) ->> {
			return Json::Array(emptyTreeVec());
			}
		-| Grouping(Brackets(), Sequence(Comma(), elts)) ->> {
			return Json::Array(mapITV(elts, simpleParseToJson));
			}
		-| Grouping(Brackets(), elt) ->> {
			return Json::Array(emptyTreeVec() + simpleParseToJson(elt));
			}
		-| Grouping(Braces(), Empty()) ->> {
			return Json::Object(emptyTreeMap());
			}
		-| Grouping(Braces(), Sequence(Comma(), elts)) ->> {
			ImmutableTreeMap<std::string, Json> subElts;

			for (long k = 0; k < elts.size();k++)
				subElts = subElts + simpleParseColonPairToJson(elts[k]);

			return Json::Object(subElts);
			}
		-| Grouping(Braces(), elt) ->> {
			ImmutableTreeMap<std::string, Json> subElts;

			subElts = subElts + simpleParseColonPairToJson(elt);

			return Json::Object(subElts);
			}
		-| _ ->> {
			}

	throw JsonParseError("Badly formatted json", node);
	}

Json Json::parse(std::string inToParse)
	{
	SimpleParseNode node = parseStringToSimpleParse(inToParse);

	return simpleParseToJson(node);
	}

}; //namespace Ufora



void CPPMLPrettyPrint<Ufora::Json>::prettyPrint(CPPMLPrettyPrintStream& s, const Ufora::Json& t)
	{
	@match Ufora::Json(t)
		-|	Null() ->> {
				s << "null";
				}
		-|	Boolean(b) ->> {
				if (b)
					s << "true";
				else
					s << "false";
				}
		-|	String(val) ->> {
				s << stringToStringConstant(val, false);
				}
		-|	Number(x) ->> {
				s << x;
				}
		-|	Array(elements) ->> {
				s << "[";

					{
					CPPMLPrettyPrintStream s2 = s.group();

					for (long k = 0; k < elements.size(); k++)
						{
						if (k)
							s2 << ", " << s2.sep;

						s2 << elements[k];
						}
					}

				s << "]";
				}
		-|	Object(elements) ->> {
				s << "{";

					{
					CPPMLPrettyPrintStream s2 = s.group();

					for (long k = 0; k < elements.size(); k++)
						{
						if (k)
							s2 << ", " << s2.sep;

						s2 << stringToStringConstant(elements.pairAtPosition(k).first, false);
						s2 << ": ";
						s2 << elements.pairAtPosition(k).second;
						}
					}

				s << "}";
				}
		;
	}


//lexical comparison for Json arrays
char CPPMLEquality<Ufora::Json, void>::cmp(
				const Ufora::Json& lhs,
				const Ufora::Json& rhs)
	{
	@match Ufora::Json(lhs)
		-| Boolean(n1) ->> {
			@match Ufora::Json(rhs)
				-| Boolean(n2) ->> { return cppmlCmp(n1, n2); }
				-| _ ->> { return -1; }
			}
		-| Number(n1) ->> {
			@match Ufora::Json(rhs)
				-| Boolean() ->> { return 1; }
				-| Number(n2) ->> { return cppmlCmp(n1, n2); }
				-| _ ->> { return -1; }
			}
		-| String(n1) ->> {
			@match Ufora::Json(rhs)
				-| Number() ->> { return 1; }
				-| Boolean() ->> { return 1; }
				-| String(n2) ->> { return cppmlCmp(n1, n2); }
				-| _ ->> { return -1; }
			}
		-| Object(n1) ->> {
			@match Ufora::Json(rhs)
				-| Number() ->> { return 1; }
				-| Boolean() ->> { return 1; }
				-| String() ->> { return 1; }
				-| Object(n2) ->> { return cppmlCmp(n1, n2); }
				-| _ ->> { return -1; }
			}
		-| Array(n1) ->> {
			@match Ufora::Json(rhs)
				-| Number() ->> { return 1; }
				-| Boolean() ->> { return 1; }
				-| String() ->> { return 1; }
				-| Object() ->> { return 1; }
				-| Array(n2) ->> {
					for (long k = 0; k < n1.size() && k < n2.size();k++)
						{
						char c = cppmlCmp(n1[k], n2[k]);
						if (c < 0)
							return -1;
						if (c > 0)
							return 1;
						}

					if (n1.size() < n2.size())
						return -1;

					if (n1.size() > n2.size())
						return 1;

					return 0;
					}
				-| _ ->> { return -1; }
			}
		-| Null() ->> {
			if (rhs.isNull())
				return 0;
			return 1;
			}
	}

