/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/
#pragma once

#include "View.hppml"
#include "../../core/EventBroadcaster.hpp"

namespace SharedState {

class EventBroadcasterAdapter : public SharedState::Listener {
public:
	EventBroadcasterAdapter(PolymorphicSharedPtr<CallbackScheduler> scheduler) :
			mOnChanged(scheduler)
		{
		}

	void changed(const set<SharedState::Key>& inKeys)
		{
		boost::mutex::scoped_lock lock(mMutex);

		bool wasEmpty = mChanged.size() == 0;

		for (auto key: inKeys)
			mChanged.insert(key);

		if (mChanged.size() && wasEmpty)
			mOnChanged.broadcast(true);
		}

	void getChanged(set<SharedState::Key>& outKeys)
		{
		boost::mutex::scoped_lock lock(mMutex);

		outKeys.clear();

		std::swap(outKeys, mChanged);
		}

	void subscriptionLoadStarted(SharedState::subscription_ptr_type inSub)
		{
		}

	void subscriptionLoadFinished(SharedState::subscription_ptr_type inSub)
		{
		}

	void queryResponded(const uint32_t& inId)
		{
		}

	void disconnected(void)
		{
		}

	EventBroadcaster<bool>& onChanged()
		{
		return mOnChanged;
		}

private:
	boost::mutex mMutex;

	EventBroadcaster<bool> mOnChanged;

	std::set<SharedState::Key> mChanged;
};

}

