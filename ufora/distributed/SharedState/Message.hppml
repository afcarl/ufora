/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/
#pragma once


#include "Types.hppml"
#include "../../networking/Channel.hpp"
#include "../../networking/QueuelikeChannel.hppml"
#include "../../networking/SerializedChannel.hpp"
#include "../../core/serialization/JsonMemoSerializer.hppml"
#include "../../core/math/Nullable.hpp"
#include "RandomGenerator.hppml"

namespace SharedState {

@type MessageOut =
		Subscribe of KeyRange range
	-|	Unsubscribe of KeyRange range
	-|	PushEvent of PartialEvent event
	-|	MinimumIdResponse of uint64_t id
	-|	RequestSession of Nullable<uint32_t> clientId
	-|	FlushRequest of uint32_t flushId
	-|	Bundle of std::vector<MessageOut> messages
	;

@type MessageIn =
		KeyRangeLoaded of KeyRange range
	-|	BaseValue of Key key, ValueType value
	-|	Event of PartialEvent event
	-|	MinimumId of uint64_t id, uint64_t maxId
	-|	Initialize of uint32_t clientId, uint32_t masterId, Nullable<RandomGenerator> generator
	-|	FlushResponse of uint32_t flushId
		//channel tried to read a keyspace it doesn't have access to
	-|	InvalidKeyspaceRead of KeyRange keyspace
		//channel tried to write a keyspace it doesn't have access to
	-|	InvalidKeyspaceWrite of Keyspace keyspace
	-|	Bundle of std::vector<MessageIn> messages
	;


typedef QueuelikeChannel<MessageOut,  MessageIn> channel_type;

typedef SerializedChannel<
			MessageOut,
			MessageIn,
			JsonMemoSerializer<BinaryStreamSerializer>,
			JsonMemoDeserializer<BinaryStreamDeserializer>
		> serialized_channel_type;

typedef channel_type::pointer_type channel_ptr_type;

typedef QueuelikeChannel<MessageIn, MessageOut> manager_channel_type;

typedef manager_channel_type::pointer_type manager_channel_ptr_type;

typedef SerializedChannel<
			MessageIn,
			MessageOut,
			JsonMemoSerializer<BinaryStreamSerializer>,
			JsonMemoDeserializer<BinaryStreamDeserializer>
		> serialized_manager_channel_type;

typedef QueuelikeChannel<std::string, std::string> string_channel_type;

typedef string_channel_type::pointer_type string_channel_ptr_type;

}

