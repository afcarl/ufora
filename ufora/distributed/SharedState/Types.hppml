/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/
#pragma once

#include <vector>
#include <map>
#include <set>
#include <cmath>
#include <string>
#include <iostream>

#include "../../core/Common.hppml"
#include "../../core/math/Nullable.hpp"
#include "../../core/Json.hppml"

using namespace std;

namespace SharedState {

typedef Nullable<Ufora::Json>								UpdateType;
typedef Ufora::Json											KeyNameType;
typedef Ufora::Json											ValueData;
typedef uint64_t											EventIDType;


@type UniqueId = EventIDType eventId, uint32_t clientId {
	public:
	bool operator<(const UniqueId& other) const;
	bool operator<=(const UniqueId& other) const;
	bool operator==(const UniqueId& other) const;
	}
and
	ValueType = Nullable<ValueData> value, UniqueId id;

@type
	Keyspace = string type, Ufora::Json name, uint32_t dimension {
	public:
		bool operator==(const Keyspace& other) const;
		bool operator!=(const Keyspace& other) const;
		bool operator<(const Keyspace& other) const;
	}
and
	Key = Keyspace keyspace, vector<KeyNameType> id {
	public:
		Key(Keyspace inKeyspace, KeyNameType key)
			{
			keyspace() = inKeyspace;
			id().push_back(key);
			}

		inline uint32_t dimension(void) const
			{
			return keyspace().dimension();
			}

		inline size_t size(void) const
			{
			return id().size();
			}

		KeyNameType& operator[](size_t ix);
		const KeyNameType& operator[](size_t ix) const;
		bool operator==(const Key& other) const;
		bool operator!=(const Key& other) const;
		bool operator<(const Key& other) const;

	}
and
	KeyUpdate = Key key, UpdateType update
and
	EventSignature = set<Key> updated, UniqueId id {
	// will obviously just use the UniqueID in the future, but I want to make it
	// it a bit stricter for testing purposes...
	public:

		inline bool operator<(const EventSignature& other) const
			{
			return id() < other.id();
			}

		inline bool operator==(const EventSignature& other) const
			{
			return id() == other.id();
			}
	}
and
	Event =  UniqueId id, vector<KeyUpdate> updates {
	public:

		EventSignature signature(string meta = "") const;
		void split(map<Key, PartialEvent>& outSplits);
	}
and
	PartialEvent = KeyUpdate content, EventSignature signature {
	public:

		inline const Key& key(void) const
			{
			return content().key();
			}

		inline const Keyspace& keyspace(void) const
			{
			return key().keyspace();
			}

		inline const UpdateType& update(void) const
			{
			return content().update();
			}

		inline const UniqueId& id(void) const
			{
			return signature().id();
			}

		inline bool operator<(const PartialEvent& other) const
			{
			return signature() < other.signature();
			}
	}
and
	KeyBound = KeyNameType value, bool leftBound {
	public:
		bool operator<(const KeyBound& other) const;
		bool operator>(const KeyBound& other) const;
		bool operator==(const KeyBound& other) const;
		bool operator!=(const KeyBound& other) const;
		bool operator>=(const KeyBound& other) const;
		bool operator<=(const KeyBound& other) const;
		bool operator<(const KeyNameType& keyName) const;
		bool operator>(const KeyNameType& keyName) const;
		bool operator==(const Key& key) const;
	}

and
	// here the dimension means which of the dimensions is to be used....
	KeyRange = Keyspace keyspace, uint32_t index, Nullable<KeyBound> left, Nullable<KeyBound> right {
	public:
		bool operator==(const KeyRange& other) const;
		bool operator<(const KeyRange& other) const;
		bool contains(const KeyRange& other) const;
		bool overlaps(const KeyRange& other) const;
		bool sameKeyspaceAndDimension(const KeyRange& other) const;
		bool leftIsAdjacent(const KeyRange& other) const;
		bool contains(const Key& key) const;
	private:
		bool leftOf(const KeyRange& other) const;
	}
	;

ostream& operator<<(ostream& s, bool b);
ostream& operator<<(ostream& s, const Keyspace& k);
ostream& operator<<(ostream& s, const ValueType& v);
ostream& operator<<(ostream& s, const Key& k);
ostream& operator<<(ostream& s, const KeyUpdate& update);
ostream& operator<<(ostream& s, const EventSignature& signature);
ostream& operator<<(ostream& s, const PartialEvent e);
ostream& operator<<(ostream& s, const KeyRange& range);
ostream& operator<<(ostream& s, const UniqueId& id);
}; // shared_state
