/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/
#ifndef KeyRangeSet_HPPML
#define KeyRangeSet_HPPML
#include <set>
#include "Types.hppml"
#include "../../core/math/Nullable.hpp"

namespace SharedState {

// This is needed because the position of a keybound when it is either left or right of everything...
// Ideally one would write a custom Nullable<Keybound>::operator<() function but that has already been
bool boundLT(
		Nullable<KeyBound> first,
		bool firstIsNegativeInfinityIfNull,
		Nullable<KeyBound> second,
		bool secondIsNegativeInfinityIfNull);
bool boundEQ(
		Nullable<KeyBound> first,
		bool firstIsNegativeInfinityIfNull,
		Nullable<KeyBound> second,
		bool secondIsNegativeInfinityIfNull);

class KeyRangeSet {
public:
		typedef std::set<KeyRange>::iterator 		iterator;
		typedef std::set<KeyRange>::const_iterator	const_iterator;

		inline iterator begin(void)
			{
			return mRanges.begin();
			}
		inline const_iterator begin(void) const
			{
			return mRanges.begin();
			}
		inline iterator end(void)
			{
			return mRanges.end();
			}
		inline const_iterator end(void) const
			{
			return mRanges.end();
			}

		inline iterator lower_bound(const KeyRange& range)
			{
			return mRanges.lower_bound(range);
			}
		inline iterator upper_bound(const KeyRange& range)
			{
			return mRanges.upper_bound(range);
			}

		inline const_iterator lower_bound(const KeyRange& range) const
			{
			return mRanges.lower_bound(range);
			}
		inline const_iterator upper_bound(const KeyRange& range) const
			{
			return mRanges.upper_bound(range);
			}

		inline const_iterator find(const KeyRange& range) const
			{
			return mRanges.find(range);
			}

		inline size_t size(void) const
			{
			return mRanges.size();
			}

		void insert(const std::set<KeyRange>& ranges);
		std::pair<iterator, bool> insert(const KeyRange& range);

		std::set<KeyRange> difference(const KeyRange& range) const;
		std::set<KeyRange> intersection(const KeyRange& in) const;

                bool containsKeyspace(const Keyspace& inKeyspace) const;
		void erase(const KeyRange& in);
		void printRanges(void) const;
		void printFuncs(const KeyRange& in) const;

                bool containsKey(const Key& inKey);
		bool intersects(const KeyRange& inRange) const;
private:
		Nullable<std::pair<const_iterator, const_iterator> > overlaps(const KeyRange& in) const;

		std::pair<Nullable<KeyRange>, Nullable<KeyRange> > findAdjacent(const KeyRange& range) const;

		std::set<KeyRange>		mRanges;
};


}

#endif

