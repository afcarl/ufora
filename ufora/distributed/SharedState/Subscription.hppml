/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/
#pragma once

#include "../../core/lassert.hpp"
#include "Message.hppml"
#include "Types.hppml"

namespace SharedState {

class Subscription : public PolymorphicSharedPtrBase<Subscription> {
public:
		Subscription(	const set<KeyRange>& inRanges,
						const map<channel_ptr_type,
						set<KeyRange> >& inRemaining
						) : mRanges(inRanges), mRemaining(inRemaining), mWasSuccessful(true)
			{
			for(map<channel_ptr_type, set<KeyRange> >::iterator it = mRemaining.begin(); it != mRemaining.end(); ++it)
				for(set<KeyRange>::iterator it2 = it->second.begin(); it2 != it->second.end(); ++it2)
					it->first->write(MessageOut::Subscribe(*it2));
			}

		inline bool operator==(const Subscription& other) const
			{
			return mRanges == other.mRanges;
			}
		inline bool operator<(const Subscription& other) const
			{
			if (loaded() != other.loaded())
				return loaded();
			return mRanges < other.mRanges;
			}
		inline bool loaded(void) const
			{
			return !mRemaining.size();
			}
		bool keyRangeLoaded(channel_ptr_type inChannel, const KeyRange& inRange, bool successful)
			{
			mRemaining[inChannel].erase(inRange);

			if (!mRemaining[inChannel].size())
				mRemaining.erase(inChannel);

			if (!successful)
				mWasSuccessful = false;

			return loaded();
			}
		void addEvent(const PartialEvent& event)
			{
			mEvents.push_back(event);
			}
		void addValue(const pair<Key, ValueType>& value)
			{
			mValues.push_back(value);
			}
		bool contains(const Key& key) const
			{
			for(set<KeyRange>::iterator it = mRanges.begin(); it != mRanges.end(); ++it)
				if (it->contains(key))
					return true;
			return false;
			}
		bool contains(const KeyRange& range) const
			{
			for(set<KeyRange>::iterator it = mRanges.begin(); it != mRanges.end(); ++it)
				if (it->contains(range))
					return true;
			return false;
			}
		inline deque<PartialEvent>& events(void)
			{
			return mEvents;
			}
		inline deque<pair<Key, ValueType> >& values(void)
			{
			return mValues;
			}
		inline const set<KeyRange>& ranges(void) const
			{
			return mRanges;
			}
		bool wasSuccessful() const
			{
			lassert_dump(loaded(), "invalid to call 'wasSuccessful' before load has finished");
			return mWasSuccessful;
			}
private:
		set<KeyRange> 																mRanges;
		map<channel_ptr_type, set<KeyRange> > 										mRemaining;
		deque<PartialEvent> 														mEvents;
		deque<pair<Key, ValueType> >												mValues;
		bool 																		mWasSuccessful;

};

}; // SharedState

