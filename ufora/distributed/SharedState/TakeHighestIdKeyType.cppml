/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/
#include "TakeHighestIdKeyType.hppml"
#include "KeyState.hppml"

namespace SharedState {

Nullable<ValueType> TakeHighestIdKeyType::applyEventToValue(
							Nullable<ValueType> inPriorValue,
							UpdateType inUpdateType,
							UniqueId inEventId
							) const
	{
	if (inPriorValue && (*inPriorValue).id().eventId() > inEventId.eventId())
		return inPriorValue;
	else
		return null() << ValueType(inUpdateType, inEventId);
	}

void TakeHighestIdKeyType::compactKeyState(KeyState& ioKeyState, UniqueId upToId) const
	{
	//our baseValueId() could get behind upToId
	if (!ioKeyState.events().size())
		return;

	if (ioKeyState.events().rbegin()->second.id() < upToId)
		{
		//this event is now the base event
		ioKeyState.baseValue() = computeValueForKeyState(ioKeyState);
		ioKeyState.baseValueID() = ioKeyState.events().rbegin()->second.id();
		if (ioKeyState.baseValue() && !ioKeyState.baseValue()->value())
			{
			ioKeyState.baseValue() = null();
			ioKeyState.baseValueID() = null();
			}
		ioKeyState.events().clear();
		}
	}


bool TakeHighestIdKeyType::insertEventIntoKeyState(
							KeyState& ioKeyState,
							const SharedState::PartialEvent& event,
							bool eventMightBeDuplicate
							) const
	{
	if (ioKeyState.baseValueID())
		lassert_dump(*ioKeyState.baseValueID() <= event.id(),
			"Attempted to insert an eventID before the current base value."
			);

	lassert_dump(
		eventMightBeDuplicate || ioKeyState.events().find(event.id()) == ioKeyState.events().end(),
		"attempted to insert a duplicate event into the KeyState"
		);

	if (ioKeyState.events().size() && event.id() < ioKeyState.events().rbegin()->second.id())
		return false;

	ioKeyState.events().clear();
	ioKeyState.events()[event.id()] = event;

	return true;
	}

Nullable<ValueType> TakeHighestIdKeyType::computeValueForKeyState(const KeyState& inKeyState) const
	{
	Nullable<ValueType> tr = inKeyState.baseValue();

	if (inKeyState.events().size())
		{
		const PartialEvent& event(inKeyState.events().rbegin()->second);

		return null() <<
			ValueType(
				event.content().update(),
				event.signature().id()
				)
			;
		}

	return tr;
	}

void TakeHighestIdKeyType::updateBaseValueForKeyState(
						KeyState& ioKeyState,
						ValueType inValue,
						UniqueId inBaseValueId
						) const
	{
	ioKeyState.baseValue() = inValue;
	ioKeyState.baseValueID() = inBaseValueId;
	}

}

