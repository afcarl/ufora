/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/
#pragma once

#include "Types.hppml"
#include "KeyState.hppml"
#include "KeyRangeSet.hppml"
#include <ctime>
#include "Subscription.hppml"

namespace SharedState {

class View;
class AssembledEvent;

class FrozenView : public boost::enable_shared_from_this<FrozenView> {
public:
		friend class View;

		FrozenView(const KeyRangeSet& mRanges, bool debugPrint);
		~FrozenView();

		void compact(uint64_t id);

		Nullable<Key> nextKey(const Key& inKey);
		Nullable<Key> prevKey(const Key& inKey);
		Nullable<ValueType> getValue(const Key& inKey);
		void updateBaseValue(const Key& key, const ValueType& value, UniqueId baseValueId);

		void onSubscribe(PolymorphicSharedPtr<Subscription> inSub);

		void collectEventStats(const PartialEvent& inEvent, bool local);

		void applyEvent(const PartialEvent& inEvent, bool triggerChange = true);

		set<Key> getChanged(void);

private:
		mutable boost::recursive_mutex							mMutex;
		bool													mDebugPrint;
		map<Keyspace, pair<uint32_t, uint32_t> >				mEventCount;

		map<Key, KeyState>										mKeyStates;

		map<Key, Nullable<ValueType> > 							mValueCache;
		set<Key> 												mExistingKeys; //keys with base values or events

		set<Key>												mChanged;
		const KeyRangeSet&										mSubscribedRanges;
		map<EventSignature, AssembledEvent>						mAssembledEvents;
		string 													mName;
};


}


