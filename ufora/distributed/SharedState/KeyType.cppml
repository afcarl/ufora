/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/
#include "KeyType.hppml"
#include "KeyState.hppml"
#include "TakeHighestIdKeyType.hppml"

namespace SharedState {

void KeyType::compactKeyState(KeyState& ioKeyState, UniqueId upToId) const
	{
	Nullable<ValueType> newBaseValue = ioKeyState.baseValue();
	Nullable<UniqueId> newBaseID = ioKeyState.baseValueID();

	while(ioKeyState.events().size() && ioKeyState.events().begin()->first < upToId)
		{
		const KeyUpdate& update = ioKeyState.events().begin()->second.content();
		const EventSignature& signature = ioKeyState.events().begin()->second.signature();

		newBaseValue = this->applyEventToValue(
			newBaseValue,
			update.update(),
			signature.id()
			);

		newBaseID = signature.id();

		ioKeyState.events().erase(ioKeyState.events().begin());
		}

	ioKeyState.baseValue() = newBaseValue;
	ioKeyState.baseValueID() = newBaseID;
	}


bool KeyType::insertEventIntoKeyState(
							KeyState& ioKeyState,
							const SharedState::PartialEvent& event,
							bool eventMightBeDuplicate
							) const
	{
	lassert_dump(
		eventMightBeDuplicate || ioKeyState.events().find(event.id()) == ioKeyState.events().end(),
		"attempted to insert a duplicate event into the KeyState"
		);

	if (ioKeyState.baseValueID())
		lassert_dump(*ioKeyState.baseValueID() <= event.id(),
			"Attempted to insert an eventID before the current base value."
			);

	ioKeyState.events()[event.id()] = event;

	return true;
	}

Nullable<ValueType> KeyType::computeValueForKeyState(const KeyState& inKeyState) const
	{
	Nullable<ValueType> tr = inKeyState.baseValue();

	for(auto it = inKeyState.events().begin(); it != inKeyState.events().end(); ++it)
		tr = this->applyEventToValue(
			tr,
			it->second.update(),
			it->first
			);

	return tr;
	}

void KeyType::dropEventFromKeyState(KeyState& ioKeyState, UniqueId inIdToDrop) const
	{
	ioKeyState.events().erase(inIdToDrop);
	}

void KeyType::updateBaseValueForKeyState(
						KeyState& ioKeyState,
						ValueType inValue,
						UniqueId inBaseValueId
						) const
	{
	lassert_dump(
		!ioKeyState.events().size() || inBaseValueId < ioKeyState.events().begin()->first,
		"BaseID set after events that have been pushed in!"
		);

	ioKeyState.baseValue() = inValue;
	ioKeyState.baseValueID() = inBaseValueId;
	}

class NoType : public KeyType {
public:
	Nullable<ValueType> applyEventToValue(
								Nullable<ValueType> inPriorValue,
								UpdateType inUpdateType,
								UniqueId inEventId
								) const
		{
		lassert(false);
		return inPriorValue;
		}

	virtual bool alwaysOkToDiscardPriorEvents(void) const
		{
		return true;
		}
};

class ComparisonKeyType : public KeyType {
public:
	Nullable<ValueType> applyEventToValue(
								Nullable<ValueType> inPriorValue,
								UpdateType inUpdate,
								UniqueId inEventId
								) const
		{
		//"empty" trumps everything
		if (!inUpdate)
			return null();

		if (!inPriorValue || !inPriorValue->value())
			return null() << ValueType(inUpdate, inEventId);

		if (*inPriorValue->value() > *inUpdate)
			return inPriorValue;
		else
			return null() << ValueType(inUpdate, inEventId);
		}
};

const KeyType& KeyTypeFactory::getTypeFor(const string& type)
	{
	static TakeHighestIdKeyType	takeHighestIdKeyType;

	static ComparisonKeyType compType;

	if (type == "TakeHighestIdKeyType")
		return takeHighestIdKeyType;

	if (type == "ComparisonKeyType")
		return compType;

	lassert(false);
	}

} //end namespace SharedState

