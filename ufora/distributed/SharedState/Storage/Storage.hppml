/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/
#pragma once

#include <stdio.h>
#include <sstream>
#include <vector>
#include <set>
#include <map>

#include "../../../core/PolymorphicSharedPtr.hpp"

namespace SharedState {

using namespace std;

class LogEntry;
class StateCompressor;
class KeyspaceStorage;
class KeyState;
class Keyspace;
class KeyRange;
class Key;


/*
Abstract interface for long-term storage of SharedState data in a single keyspace.
*/
class KeyspaceStorage : public PolymorphicSharedPtrBase<KeyspaceStorage> {
public:
        // record an event to the store
        virtual void writeLogEntry(const LogEntry& entry) = 0;

        // read the entire contents of the store.
        virtual void readState(pair<map<SharedState::Key, KeyState>, vector<LogEntry> >& outState ) = 0;

        // write the entire contents of the store as a state file
        virtual void writeStateExternal(const map<SharedState::Key, KeyState>& inState ) = 0;

        virtual void flushPendingWrites() = 0;

        // intermitently called to check if the store state needs to be compressed.
        virtual void compress() = 0;

        virtual Keyspace getKeyspace(void) = 0;

        virtual int getDimension(void) = 0;

        void compressKeyStates(map<SharedState::Key, KeyState>& ioEntries, const vector<LogEntry>& logs);
};


}

