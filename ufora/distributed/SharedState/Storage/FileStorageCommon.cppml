/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/
#include "FileStorageCommon.hppml"
#include "../../../core/math/Hash.hpp"
#include <string>


namespace SharedState {
namespace FileStorageCommon {

static int kMaxFilenameSize = 255;

uint32_t hexToDec(string inHex)
	{
	uint32_t tr;
	sscanf(inHex.c_str(), "%x", &tr);
	return tr;
	}

string decToHex(uint32_t inDec)
	{
	char buffer [9];
	sprintf(buffer, "%08x", inDec);
	return string(buffer, 8);
	}


std::string pathSep()
	{
	return "/";
	}


std::string truncateWithHash(const std::string& inString, uint32_t length)
    {
    std::string hash = hashToString(Hash::SHA1(inString));
    int toKeep = length - hash.size();
    lassert(inString.size() && inString.size() > toKeep);
    return std::string(inString.begin(), inString.begin() + toKeep) + hash;
    }


std::string directoryNameForKeyspace(const Keyspace& inKeyspace)
    {
    std::string tr = inKeyspace.type() + "::" +
    boost::lexical_cast<string>(inKeyspace.dimension()) + "::" +
    prettyPrintString(inKeyspace.name());
    if (tr.size() > kMaxFilenameSize)
        return truncateWithHash(tr, kMaxFilenameSize);
    return tr;
    }

std::string filenameForKeyspace(const KeyRange& inKeyRange, const Keyspace& inKeyspace)
    {
    ostringstream rangeName;

    std::string leftBound = prettyPrintString(inKeyRange.left());
    std::string rightBound = prettyPrintString(inKeyRange.right());
    rangeName << leftBound << "-" << rightBound << "::dim(" << inKeyRange.index() << ")";

    return directoryNameForKeyspace(inKeyspace) + pathSep() + rangeName.str();
    }

} // SharedState
} // FileStorage


