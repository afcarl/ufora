/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/
#pragma once

#include "Types.hppml"

namespace SharedState {

class KeyState;
class PartialEvent;

class KeyType {
public:
	virtual Nullable<ValueType> applyEventToValue(
									Nullable<ValueType> inPriorValue,
									UpdateType inUpdateType,
									UniqueId inEventId
									) const = 0;

	//the base-class implementation of 'compactKeyState' just compacts all the events
	//before 'upToId' and discards them. Subclasses may override if there are
	//optimizations that can be applied to sets of keys (in particular, the UpdatingType)
	virtual void compactKeyState(KeyState& ioKeyState, UniqueId upToId) const;

	//add an event to the KeyState, returning whether the event might have changed the
	//key's value. Throws an exception if the event is a duplicate and 'eventMightBeDuplicate' is
	//false, or is before the current baseEventID
	virtual bool insertEventIntoKeyState(
								KeyState& ioKeyState,
								const PartialEvent& inEvent,
								bool eventMightBeDuplicate
								) const;

	virtual Nullable<ValueType> computeValueForKeyState(const KeyState& inKeyState) const;

	virtual void dropEventFromKeyState(KeyState& ioKeyState, UniqueId inIdToDrop) const;

	virtual void updateBaseValueForKeyState(
						KeyState& ioKeyState,
						ValueType inValue,
						UniqueId inBaseValueId
						) const;
};

class KeyTypeFactory {
public:
	static const KeyType& getTypeFor(const string& type);
};


}

