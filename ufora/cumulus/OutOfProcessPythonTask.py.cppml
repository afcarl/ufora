/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/
#include "OutOfProcessPythonTask.hppml"

#include <boost/python.hpp>

#include "../native/Registrar.hpp"
#include "../core/python/CPPMLWrapper.hpp"
#include "../core/python/CPPMLToSimple.hpp"
#include "../core/python/ScopedPyThreads.hpp"
#include "../core/serialization/OFileDescriptorProtocol.hpp"
#include "../core/serialization/IFileDescriptorProtocol.hpp"
#include "../FORA/python/PurePython/PythonParseResult.hppml"

using namespace Fora;

class OutOfProcessPythonTaskWrapper :
    public native::module::Exporter<OutOfProcessPythonTaskWrapper> {
public:
    std::string getModuleName(void)
        {
        return "FORA";
        }

    static void sendToFileDescriptor(
                    PolymorphicSharedPtr<Cumulus::OutOfProcessPythonTask> task,
                    int fd,
                    ImplValContainer pyforaBuiltins,
                    boost::python::object pythonToPyforaSingletonNamesPyDict
                    )
        {
        ImmutableTreeMap<string, string> pythonToPyforaSingletonNames;
        Ufora::python::toCPP(pythonToPyforaSingletonNamesPyDict, pythonToPyforaSingletonNames);

        ScopedPyThreads releaseTheGil;

        OFileDescriptorProtocol protocol(fd, 0, 0, OFileDescriptorProtocol::CloseOnDestroy::False);
        OBinaryStream stream(protocol);

        task->send(stream, pyforaBuiltins, pythonToPyforaSingletonNames);
        }

    static boost::function<PythonParseResult (std::string)> makePyAstParserFromPyObject(boost::python::object parser)
        {
        return boost::function<PythonParseResult (std::string)>(
            [=](std::string text) {
                ScopedPyThreadsReacquire reacquireTheGil;
        
                try{
                    boost::python::object result = parser(text);
                    
                    boost::python::extract<PythonAstModule> checkModule(result);
                    if (checkModule.check())
                        return PythonParseResult::Result(checkModule());

                    boost::python::extract<PythonParseError> checkErr(result);
                    if (checkErr.check())
                        return PythonParseResult::Error(checkErr());

                    LOG_ERROR << "makePyAstParserFromPyObject got an unexpected python result.";

                    return PythonParseResult::Error(PythonParseError::TypeError());
                    }
                catch(...) {
                    LOG_ERROR << "makePyAstParserFromPyObject got an unexpected exception.";
                    
                    return PythonParseResult::Error(PythonParseError::TypeError());
                    }
                }
            );
        }

    static void readFromFileDescriptor(
                    PolymorphicSharedPtr<Cumulus::OutOfProcessPythonTask> task,
                    int fd,
                    ImplValContainer pyforaBuiltins,
                    ImplValContainer foraBuiltins,
                    boost::python::object pythonToPyforaSingletonNamesPyDict,
                    boost::python::object pyAstConverter
                    )
        {
        ImmutableTreeMap<string, string> pythonToPyforaSingletonNames;
        Ufora::python::toCPP(pythonToPyforaSingletonNamesPyDict, pythonToPyforaSingletonNames);

        ScopedPyThreads releaseTheGil;

        IFileDescriptorProtocol protocol(fd, 0, 0, IFileDescriptorProtocol::CloseOnDestroy::False);
        IBinaryStream stream(protocol);

        task->read(
            stream, 
            pyforaBuiltins, 
            foraBuiltins, 
            pythonToPyforaSingletonNames, 
            makePyAstParserFromPyObject(pyAstConverter)
            );
        }

    void exportPythonWrapper()
        {
        using namespace boost::python;

        class_<PolymorphicSharedPtr<Cumulus::OutOfProcessPythonTask>>(
                "OutOfProcessPythonTask", no_init)
            .def("readFromFileDescriptor", readFromFileDescriptor)
            .def("sendToFileDescriptor", sendToFileDescriptor)
            ;
        }
};


//explicitly instantiating the registration element causes the linker to need
//this file
template<>
char native::module::Exporter<OutOfProcessPythonTaskWrapper>::mEnforceRegistration =
    native::module::ExportRegistrar<
        OutOfProcessPythonTaskWrapper>::registerWrapper();





