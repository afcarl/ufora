/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/
#pragma once

#include "../core/PolymorphicSharedPtr.hpp"
#include "LocalComputationPriorityAndStatusChanged.hppml"
#include "ComputationState.hppml"
#include "CumulusComponentMessage.hppml"
#include "CumulusComponentType.hppml"
#include "CumulusClientOrMachine.hppml"
#include "ExternalIoTask/ExternalIoTask.hppml"
#include "ExternalIoTask/ExternalIoTaskId.hppml"
#include "CreatedComputations.hppml"

namespace Cumulus {

/***********************

WorkerThreadPool

Responsible for checking out the highest priority threads, giving them
some compute time, and checking them back in after they're done computing.

This class is not responsible for understanding anything about the state of the
ExecutionContext.

************************/

template <class computation_state_type>
class WorkerThreadPoolImpl;

class WorkerThreadPool : public PolymorphicSharedPtrBase<WorkerThreadPool> {
public:
    WorkerThreadPool(
            unsigned int inThreadCount,
            boost::function<pair<PolymorphicSharedPtr<ComputationState>, hash_type> (ComputationId)> inCheckoutCommand,
            boost::function<void (ComputationId, CreatedComputations)> inCheckinCommand,
            MachineId inOwnMachineId
            );

    void teardown();

    void startComputations();

    void stopComputations();

    void handleCumulusComponentMessage(
                    const CumulusComponentMessage& message,
                    const CumulusClientOrMachine& source,
                    const CumulusComponentType& componentType
                    );

    long currentlyActiveWorkerThreads();

private:
    PolymorphicSharedPtr<WorkerThreadPoolImpl<PolymorphicSharedPtr<ComputationState> > >  mImpl;
};

};

