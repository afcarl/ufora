/***************************************************************************
    Copyright 2016 Ufora Inc.

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
****************************************************************************/

#pragma once

#include "../core/PolymorphicSharedPtr.hpp"
#include "OutOfProcessPythonTask.hppml"
#include <boost/thread.hpp>

class VectorDataManager;

namespace Cumulus {

class OutOfProcessPythonTasks : 
            public PolymorphicSharedPtrBase<OutOfProcessPythonTasks> {
public:
    OutOfProcessPythonTasks()
        {

        }

    void addTask(hash_type taskId,  PolymorphicSharedPtr<OutOfProcessPythonTask> task)
        {
        boost::mutex::scoped_lock lock(mMutex);

        lassert(mActiveTasks.find(taskId) == mActiveTasks.end());

        mActiveTasks[taskId] = task;
        }

    void completeTask(hash_type taskId)
        {
        boost::mutex::scoped_lock lock(mMutex);
        
        mActiveTasks.erase(taskId);
        }

    PolymorphicSharedPtr<OutOfProcessPythonTask> getTask(hash_type taskId) const
        {
        boost::mutex::scoped_lock lock(mMutex);
        
        auto it = mActiveTasks.find(taskId);

        if (it == mActiveTasks.end())
            return PolymorphicSharedPtr<OutOfProcessPythonTask>();

        return it->second;
        }

private:
    mutable boost::mutex mMutex;

    map<hash_type, PolymorphicSharedPtr<OutOfProcessPythonTask> > mActiveTasks;
};

}