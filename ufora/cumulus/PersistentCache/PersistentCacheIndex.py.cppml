/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/
#include "PersistentCacheIndex.hppml"
#include "PersistentCacheCalculations.hppml"

#include <stdint.h>
#include <boost/python.hpp>
#include "../../core/python/ValueLikeCPPMLWrapper.hppml"
#include "../../core/python/ScopedPyThreads.hpp"
#include "../../core/python/CPPMLWrapper.hpp"
#include "../../native/Registrar.hpp"
#include "../../core/PolymorphicSharedPtrBinder.hpp"
#include "../../core/PolymorphicSharedPtrFuncFromMemberFunc.hpp"

using namespace Cumulus::PersistentCache;

class PersistentCacheIndexWrapper :
		public native::module::Exporter<PersistentCacheIndexWrapper> {
public:
		std::string		getModuleName(void)
			{
			return "Cumulus";
			}

		void	getDefinedTypes(std::vector<std::string>& outTypes)
			{
			outTypes.push_back(typeid(PolymorphicSharedPtr<PersistentCacheIndex>).name());
			}

		static PolymorphicSharedPtr<PersistentCacheIndex>* constructPersistentCacheIndex(
						PolymorphicSharedPtr<SharedState::View> inView,
						PolymorphicSharedPtr<CallbackScheduler> inScheduler
						)
			{
			ScopedPyThreads py;

			return new PolymorphicSharedPtr<PersistentCacheIndex>(
				new PersistentCacheIndex(
					inView,
					inScheduler
					)
				);
			}

		static std::string PersistentCacheIndexSchemaVersion()
			{
			return PersistentCacheIndex::schemaVersion;
			}

		static boost::python::object computeInvalidObjects(PolymorphicSharedPtr<PersistentCacheIndex> index)
			{
			PersistentCacheCalculations calc(index);

			boost::python::list res;

			for (auto key: calc.invalidObjects())
				res.append(key);

			return res;
			}

		static boost::python::object getMaxBytesInCache(PolymorphicSharedPtr<PersistentCacheIndex> index)
			{
			Nullable<int64_t> res = index->maxBytesInCache();

			if (res)
				return boost::python::object(*res);
			else
				return boost::python::object();
			}

		static void setMaxBytesInCache(PolymorphicSharedPtr<PersistentCacheIndex> index, boost::python::object o)
			{
			boost::python::extract<int64_t> e(o);

			if (e.check())
				index->setMaxBytesInCache(null() << e());
			else
				index->setMaxBytesInCache(null());
			}

		static int32_t totalObjectsInCache(PolymorphicSharedPtr<PersistentCacheIndex> index)
			{
			return index->getAllObjects().size();
			}

		static int32_t totalComputationsInCache(PolymorphicSharedPtr<PersistentCacheIndex> index)
			{
			return index->allCheckpointedComputations().size();
			}

		static int32_t totalReachableComputationsInCache(PolymorphicSharedPtr<PersistentCacheIndex> index)
			{
			int32_t res = 0;

			for (auto c: index->allCheckpointedComputations())
				if (index->computationIsReachableFromAnyScript(c))
					res++;

			return res;
			}

		static boost::python::object computationMostRecentCheckpoint(
										PolymorphicSharedPtr<PersistentCacheIndex> index,
										Cumulus::ComputationId comp
										)
			{
			Nullable<Cumulus::CheckpointRequest> checkpoint = index->computationMostRecentCheckpoint(comp);

			if (!checkpoint)
				return boost::python::object();
			else
				return boost::python::object(*checkpoint);
			}

		static boost::python::object checkpointsForComputation(
										PolymorphicSharedPtr<PersistentCacheIndex> index,
										Cumulus::ComputationId comp
										)
			{
			boost::python::list l;

			for (auto c: index->checkpointsForComputation(comp))
				l.append(c);

			return l;
			}

		void exportPythonWrapper()
			{
			using namespace boost::python;

			class_<PolymorphicSharedPtr<PersistentCacheIndex> >("PersistentCacheIndex", no_init)
				.def("__init__", make_constructor(constructPersistentCacheIndex))
				.def("resetView",
						macro_polymorphicSharedPtrFuncFromMemberFunc(PersistentCacheIndex::resetView)
						)
				.def("hasConnectedView",
						macro_polymorphicSharedPtrFuncFromMemberFunc(PersistentCacheIndex::hasConnectedView)
						)
				.def("timesViewReconnected",
						macro_polymorphicSharedPtrFuncFromMemberFunc(PersistentCacheIndex::timesViewReconnected)
						)
				.def("pageExists",
						macro_polymorphicSharedPtrFuncFromMemberFunc(PersistentCacheIndex::pageExists)
						)
				.def("bigvecExists",
						macro_polymorphicSharedPtrFuncFromMemberFunc(PersistentCacheIndex::bigvecExists)
						)
				.def("pageBigvecReferences",
						macro_polymorphicSharedPtrFuncFromMemberFunc(PersistentCacheIndex::pageBigvecReferences)
						)
				.def("bigvecPageReferences",
						macro_polymorphicSharedPtrFuncFromMemberFunc(PersistentCacheIndex::bigvecPageReferences)
						)
				.def("pageBytecount",
						macro_polymorphicSharedPtrFuncFromMemberFunc(PersistentCacheIndex::pageBytecount)
						)
				.def("bigvecBytecount",
						macro_polymorphicSharedPtrFuncFromMemberFunc(PersistentCacheIndex::bigvecBytecount)
						)
				.def("totalBytesInCache",
						macro_polymorphicSharedPtrFuncFromMemberFunc(PersistentCacheIndex::totalBytesInCache)
						)
				.def("totalObjectsInCache", totalObjectsInCache)
				.def("totalComputationsInCache", totalComputationsInCache)
				.def("totalReachableComputationsInCache", totalReachableComputationsInCache)
				.def("getMaxBytesInCache", getMaxBytesInCache)
				.def("setMaxBytesInCache", setMaxBytesInCache)
				.def("addPage",
						macro_polymorphicSharedPtrFuncFromMemberFunc(PersistentCacheIndex::addPage)
					)
				.def("dropPage",
						macro_polymorphicSharedPtrFuncFromMemberFunc(PersistentCacheIndex::dropPage)
					)
				.def("addBigvec",
						macro_polymorphicSharedPtrFuncFromMemberFunc(PersistentCacheIndex::addBigvec)
						)
				.def("addCheckpoint",
						macro_polymorphicSharedPtrFuncFromMemberFunc(PersistentCacheIndex::addCheckpoint)
						)
				.def("addCheckpointFile",
						macro_polymorphicSharedPtrFuncFromMemberFunc(PersistentCacheIndex::addCheckpointFile)
						)
				.def("allCheckpointedComputationGuids",
						macro_polymorphicSharedPtrFuncFromMemberFunc(PersistentCacheIndex::allCheckpointedComputationGuids)
						)
				.def("allCheckpointedComputations",
						macro_polymorphicSharedPtrFuncFromMemberFunc(PersistentCacheIndex::allCheckpointedComputations)
						)
				.def("computationMostRecentCheckpoint", computationMostRecentCheckpoint)
				.def("checkpointsForComputation", checkpointsForComputation)
				.def("setScriptDependencies",
						macro_polymorphicSharedPtrFuncFromMemberFunc(PersistentCacheIndex::setScriptDependencies)
						)
				.def("computationHasScriptDependencies",
						macro_polymorphicSharedPtrFuncFromMemberFunc(PersistentCacheIndex::computationHasScriptDependencies)
						)
				.def("dropScriptDependencies",
						macro_polymorphicSharedPtrFuncFromMemberFunc(PersistentCacheIndex::dropScriptDependencies)
						)
				.def("scriptExists",
						macro_polymorphicSharedPtrFuncFromMemberFunc(PersistentCacheIndex::scriptExists)
						)
				.def("checkpointSecondsOfCompute",
						macro_polymorphicSharedPtrFuncFromMemberFunc(PersistentCacheIndex::checkpointSecondsOfCompute)
						)
				.def("isCheckpointForFinishedComputation",
						macro_polymorphicSharedPtrFuncFromMemberFunc(PersistentCacheIndex::isCheckpointForFinishedComputation)
						)
				.def("computeInvalidObjects", computeInvalidObjects)
				.add_static_property("schemaVersion", &PersistentCacheIndexSchemaVersion)
				;
			}
};

//explicitly instantiating the registration element causes the linker to need
//this file
template<>
char native::module::Exporter<PersistentCacheIndexWrapper>::mEnforceRegistration =
		native::module::ExportRegistrar<PersistentCacheIndexWrapper>::registerWrapper();

