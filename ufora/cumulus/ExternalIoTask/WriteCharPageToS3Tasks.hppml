/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/
#pragma once

#include "../../FORA/VectorDataManager/VectorDataManager.hppml"
#include "ExternalIoTaskCompleted.hppml"
#include "ExternalIoTaskCreated.hppml"
#include "../PersistentCache/PersistentCacheIndex.hppml"
#include "../SystemwidePageRefcountTracker.hppml"
#include "../../FORA/TypedFora/ABI/BigVectorLayouts.hppml"
#include "../PythonIoTaskRequest.hppml"
#include "../PythonIoTaskResponse.hppml"
#include "../../core/math/Random.hpp"
#include "../CumulusComponentMessageCreated.hppml"
#include "WriteCharPageToS3Task.hppml"

namespace Cumulus {

class WriteCharPageToS3Tasks {
public:
	WriteCharPageToS3Tasks(
				PolymorphicSharedPtr<VectorDataManager> inVDM,
				PolymorphicSharedPtr<SystemwidePageRefcountTracker> inSPRT,
				PolymorphicSharedPtr<OfflineCache> inOfflineCache,
				boost::function0<hash_type> inCreateNewHash,
				boost::function1<void, PythonIoTaskRequest> inBroadcastPythonTask,
				boost::function1<void, ExternalIoTaskCreated> inCreateNewIoTask,
				boost::function1<void, ExternalIoTaskCompleted> inOnExternalIoTaskCompleted,
				boost::function2<void, ExternalIoTaskCreated, Cumulus::MachineId> inCreateNewRemoteIoTask,
				boost::function1<void, CumulusComponentMessageCreated> inCumulusComponentMessageCreated,
				MachineId inOwnMachineId
				);

	void handleExternalIoTaskCompleted(ExternalIoTaskCompleted completed);

	void handleRemoteTaskCompleted(ExternalIoTaskCompleted completed);

	void handleNewWriteCharPageToS3Task(ExternalIoTaskId taskId, WriteCharPageToS3Task task);

	void checkDeferredTasks();

	void handlePythonIoTaskResponse(PythonIoTaskResponse response);

	void scheduleExtractDataAndWrite_(WriteCharPageToS3Task task);

	void schedulePageDumpOnAppropriateMachine(WriteCharPageToS3Task task);

	Nullable<Cumulus::MachineId> pickRemoteMachineForTask(WriteCharPageToS3Task task);

	void machinesContainingAllPages(std::set<Cumulus::MachineId>& outMachines, WriteCharPageToS3Task task);

	bool anyMachineContainsAllPages(WriteCharPageToS3Task task);

	void extractDataAndScheduleWrite(WriteCharPageToS3Task task);

	void deferTaskUntilPageLoaded(WriteCharPageToS3Task task);

	void handleWriteTaskComplete(WriteCharPageToS3Task pageId, ExternalIoTaskResult result);

	MachineId mOwnMachineId;

	MapWithIndex<ExternalIoTaskId, WriteCharPageToS3Task> mCurrentPersistenceTasks;

	MapWithIndex<ExternalIoTaskId, ExternalIoTaskId> mTasksPendingOnOtherMachines;

	map<WriteCharPageToS3Task, ImmutableTreeVector<boost::shared_ptr<VectorPage> > > mLockedVectorPages;

	map<hash_type, WriteCharPageToS3Task> mPythonIoTaskGuidToWriteTask;

	std::map<WriteCharPageToS3Task, hash_type> mTasksDeferredUntilPagesLoaded;

	boost::function0<hash_type> mCreateNewHash;

	boost::function1<void, PythonIoTaskRequest> mBroadcastPythonTask;

	boost::function1<void, ExternalIoTaskCreated> mCreateNewIoTask;

	boost::function2<void, ExternalIoTaskCreated, Cumulus::MachineId> mCreateNewRemoteIoTask;

	boost::function1<void, CumulusComponentMessageCreated> mCumulusComponentMessageCreated;

	boost::function1<void, ExternalIoTaskCompleted> mOnExternalIoTaskCompleted;

	PolymorphicSharedPtr<VectorDataManager> mVDM;

	PolymorphicSharedPtr<OfflineCache> mOfflineCache;

	PolymorphicSharedPtr<SystemwidePageRefcountTracker> mSPRT;

	Ufora::math::Random::Uniform<double> mRandomGenerator;
};

}

