/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/
#pragma once

#include "../../FORA/VectorDataManager/VectorDataManager.hppml"
#include "ExternalIoTaskCompleted.hppml"
#include "ExternalIoTaskCreated.hppml"
#include "../PersistentCache/PersistentCacheIndex.hppml"
#include "../SystemwidePageRefcountTracker.hppml"
#include "../../FORA/TypedFora/ABI/BigVectorLayouts.hppml"
#include "../PythonIoTaskRequest.hppml"
#include "../PythonIoTaskResponse.hppml"
#include "../../core/math/Random.hpp"

namespace Cumulus {

class ReadPersistedPageIntoRamTasks {
public:
	ReadPersistedPageIntoRamTasks(
				PolymorphicSharedPtr<VectorDataManager> inVDM,
				boost::function0<hash_type> inCreateNewHash,
				boost::function1<void, PythonIoTaskRequest> inBroadcastPythonTask,
				boost::function1<void, ExternalIoTaskCompleted> inOnExternalIoTaskCompleted
				);

	void handleNewReadPersistedPageIntoRamTask(ExternalIoTaskId taskId, Fora::PageId page);

	void handleExtractPersistObjectResponse(PythonIoTaskResponse response);

	void triggerActualPageLoad(Fora::PageId page);

private:
	void handlePersistedBigvecDefinitionLoaded(hash_type bigvecGuid, PythonIoTaskResponse response);

	void handlePersistedPageLoaded(Fora::PageId page, PythonIoTaskResponse response);

	PolymorphicSharedPtr<VectorDataManager> mVDM;

	map<Fora::PageId, map<hash_type, TypedFora::Abi::BigVectorPageLayout> > mDependentLayouts;

	map<hash_type, hash_type> mPythonIoTaskRequestGuidToBigvecGuid;

	map<hash_type, Fora::PageId> mPythonIoTaskRequestGuidToPageId;

	TwoWaySetMap<Fora::PageId, hash_type> mPendingBigvecReads;

	boost::function0<hash_type> mCreateNewHash;

	boost::function1<void, PythonIoTaskRequest> mBroadcastPythonTask;

	boost::function1<void, ExternalIoTaskCompleted> mOnExternalIoTaskCompleted;

	MapWithIndex<ExternalIoTaskId, Fora::PageId> mTasks;
};

}

