/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/
#pragma once

#include <boost/shared_ptr.hpp>
#include "../../core/PolymorphicSharedPtr.hpp"
#include "../../core/EventBroadcaster.hpp"
#include "../../FORA/VectorDataManager/OfflineCache.hpp"

#include "../MachineId.hppml"
#include "../SystemwidePageRefcountTracker.hppml"
#include "../PythonIoTaskResponse.hppml"
#include "../PythonIoTaskRequest.hppml"

#include "ExternalIoTasksEvent.hppml"
#include "ExternalIoTaskCreated.hppml"
#include "CrossIoTasksMessage.hppml"
#include "../CumulusComponentMessageCreated.hppml"
#include "../CumulusClientOrMachine.hppml"

class VectorDataManager;

/*****************************

ExternalIoTasks

Services requests for data to be loaded into the VDM. Data may
reside on other machines, or in the disk cache.

*****************************/

namespace Cumulus {

class ExternalIoTasksImpl;

class ExternalIoTasks : public PolymorphicSharedPtrBase<ExternalIoTasks> {
public:
	ExternalIoTasks(
			PolymorphicSharedPtr<VectorDataManager> inVDM,
			PolymorphicSharedPtr<OfflineCache> inOfflineCache,
			PolymorphicSharedPtr<SystemwidePageRefcountTracker> inSPRT,
			MachineId inOwnMachineId,
			PolymorphicSharedPtr<CallbackScheduler> inScheduler,
			boost::function1<void, ExternalIoTasksEvent> inEventHandler,
			int64_t inTaskThreadCount
			);

	void teardown();

	void addMachine(MachineId inMachine);

	MachineId getOwnMachineId() const;

	void handleCumulusComponentMessage(
                    const CumulusComponentMessage& message,
                    const CumulusClientOrMachine& source,
                    const CumulusComponentType& componentType
                    );

	EventBroadcaster<CumulusComponentMessageCreated>& onCumulusComponentMessageCreated();

private:
	PolymorphicSharedPtr<ExternalIoTasksImpl> mImpl;
};

}

