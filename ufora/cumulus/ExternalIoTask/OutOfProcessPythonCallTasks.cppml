/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/
#include "OutOfProcessPythonCallTasks.hppml"
#include "../../FORA/Core/ImplValContainerUtilities.hppml"
#include "../OutOfProcessPythonTasks.hppml"

namespace Cumulus {

OutOfProcessPythonCallTasks::OutOfProcessPythonCallTasks(
			PolymorphicSharedPtr<VectorDataManager> inVDM,
			PolymorphicSharedPtr<SystemwidePageRefcountTracker> inSPRT,
			boost::function0<hash_type> inCreateNewHash,
			boost::function1<void, PythonIoTaskRequest> inBroadcastPythonTask,
			boost::function1<void, ExternalIoTaskCreated> inCreateNewIoTask,
			boost::function1<void, ExternalIoTaskCompleted> inOnExternalIoTaskCompleted
			) :
		mVDM(inVDM),
		mSPRT(inSPRT),
		mCreateNewHash(inCreateNewHash),
		mBroadcastPythonTask(inBroadcastPythonTask),
		mCreateNewIoTask(inCreateNewIoTask),
		mOnExternalIoTaskCompleted(inOnExternalIoTaskCompleted)
	{
	}

void OutOfProcessPythonCallTasks::handleExternalIoTaskCompleted(ExternalIoTaskCompleted completed)
	{
	}

void OutOfProcessPythonCallTasks::handlePythonIoTaskResponse(PythonIoTaskResponse completed)
	{
	@match PythonIoTaskResponse(completed)
		-| OutOfProcessPythonCallResponse(guid, taskId) ->> {
			ExternalIoTaskId task = mPythonTaskToIoTask[guid];
			mPythonTaskToIoTask.erase(guid);
			mPythonTaskOutOfProcessPythonTaskId.erase(guid);

			mOnExternalIoTaskCompleted(
				ExternalIoTaskCompleted(
					task, 
					ExternalIoTaskResult::OutOfProcessPythonTaskFinished(taskId)
					)
				);
			}
		-| Failure(guid, reasonStr) ->> {
			mVDM->getOutOfProcessPythonTasks()->completeTask(
				mPythonTaskOutOfProcessPythonTaskId[guid]
				);
			mPythonTaskOutOfProcessPythonTaskId.erase(guid);

			ImplValContainer result = 
				ImplValContainerUtilities::createTuple(
					emptyTreeVec() + 
						ImplValContainerUtilities::createString(String(reasonStr, MemoryPool::getFreeStorePool())) + 
						ImplValContainer(CSTValue::blankOf(Type::StackTrace()))
					);

			ExternalIoTaskId task = mPythonTaskToIoTask[guid];
			mPythonTaskToIoTask.erase(guid);

			pair<hash_type, ImmutableTreeSet<Fora::BigVectorId> > moveGuidAndBigvecs =
				ImplValContainerUtilities::initiateValueSend(result, &*mVDM);

			mOnExternalIoTaskCompleted(
				ExternalIoTaskCompleted(
					task, 
					ExternalIoTaskResult::TaskResultAsForaValue(
						Fora::Interpreter::ComputationResult::Exception(
							result,
							ImplValContainer()
							),
						moveGuidAndBigvecs.second,
						moveGuidAndBigvecs.first
						)
					)
				);
			}
	}

void OutOfProcessPythonCallTasks::handleNewTask(ExternalIoTaskId taskId, hash_type pythonTaskId)
	{
	hash_type guid = mCreateNewHash();

	mBroadcastPythonTask(
		PythonIoTaskRequest::OutOfProcessPythonCall(guid, pythonTaskId)
		);

	mPythonTaskOutOfProcessPythonTaskId[guid] = pythonTaskId;
	mPythonTaskToIoTask[guid] = taskId;
	}

}
