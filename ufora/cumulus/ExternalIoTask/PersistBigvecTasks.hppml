/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/
#pragma once

#include "../../FORA/VectorDataManager/VectorDataManager.hppml"
#include "ExternalIoTaskCompleted.hppml"
#include "ExternalIoTaskCreated.hppml"
#include "../PersistentCache/PersistentCacheIndex.hppml"
#include "../SystemwidePageRefcountTracker.hppml"
#include "../../FORA/TypedFora/ABI/BigVectorLayouts.hppml"
#include "../PythonIoTaskRequest.hppml"
#include "../PythonIoTaskResponse.hppml"


namespace Cumulus {

class PersistBigvecTasks {
public:
	PersistBigvecTasks(
				PolymorphicSharedPtr<VectorDataManager> inVDM,
				PolymorphicSharedPtr<SystemwidePageRefcountTracker> inSPRT,
				boost::function0<hash_type> inCreateNewHash,
				boost::function1<void, PythonIoTaskRequest> inBroadcastPythonTask,
				boost::function1<void, ExternalIoTaskCreated> inCreateNewIoTask,
				boost::function1<void, ExternalIoTaskCompleted> inOnExternalIoTaskCompleted
				);

	void handleNewSaveBigvecToPersistentCache(ExternalIoTaskId taskId, hash_type guid);

	void handleExternalIoTaskCompleted(ExternalIoTaskCompleted completed);

	void handlePersistObjectResponse(
						PythonIoTaskResponse loaded
						);

private:
	void checkBigvecPersistenceTask_(hash_type bigvecGuid);

	bool pageHasBeenSentToPersistentCache_(Fora::PageId page);

	void requestSendPageToPersistentCache_(Fora::PageId page, hash_type bigvecGuid);

	void handleBigvecPageLoadCompleted_(
							hash_type bigvecGuid,
							Fora::PageId page,
							ExternalIoTaskResult result
							);

	void broadcastBigvecPersistenceTaskComplete_(hash_type guid, ExternalIoTaskResult result);

	//members for the bigvec state machine
	map<ExternalIoTaskId, Fora::PageId> mSavePageToPersistentCacheTasks;

	std::set<hash_type> mCurrentBigvecPersistenceTasksAllPresent;

	map<hash_type, TypedFora::Abi::BigVectorPageLayout> mUploadingLayoutsForBigvec;

	MapWithIndex<ExternalIoTaskId, hash_type> mCurrentBigvecPersistenceTasks;

	TwoWaySetMap<hash_type, Fora::PageId> mBigvecsRequestingPages;

	std::map<hash_type, pair<hash_type, hash_type> > mPythonIoTaskRequestGuidsToBigvecGuids;

	boost::function0<hash_type> mCreateNewHash;

	boost::function1<void, PythonIoTaskRequest> mBroadcastPythonTask;

	boost::function1<void, ExternalIoTaskCreated> mCreateNewIoTask;

	boost::function1<void, ExternalIoTaskCompleted> mOnExternalIoTaskCompleted;

	PolymorphicSharedPtr<VectorDataManager> mVDM;

	PolymorphicSharedPtr<SystemwidePageRefcountTracker> mSPRT;
};

}

