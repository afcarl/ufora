/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/
#pragma once

#include "../../FORA/VectorDataManager/VectorDataManager.hppml"
#include "ExternalIoTaskCompleted.hppml"
#include "ExternalIoTaskCreated.hppml"
#include "../PersistentCache/PersistentCacheIndex.hppml"
#include "../SystemwidePageRefcountTracker.hppml"
#include "../../FORA/TypedFora/ABI/BigVectorLayouts.hppml"
#include "../PythonIoTaskRequest.hppml"
#include "../PythonIoTaskResponse.hppml"


namespace Cumulus {

class WriteCharBigvecToS3Tasks {
public:
	WriteCharBigvecToS3Tasks(
				PolymorphicSharedPtr<VectorDataManager> inVDM,
				PolymorphicSharedPtr<SystemwidePageRefcountTracker> inSPRT,
				boost::function0<hash_type> inCreateNewHash,
				boost::function1<void, PythonIoTaskRequest> inBroadcastPythonTask,
				boost::function1<void, ExternalIoTaskCreated> inCreateNewIoTask,
				boost::function1<void, ExternalIoTaskCompleted> inOnExternalIoTaskCompleted
				);

	void handleNewWriteCharBigvecToS3Task(ExternalIoTaskId taskId, hash_type bigvecGuid, S3KeyAndCredentials credentials);

	void handleExternalIoTaskCompleted(ExternalIoTaskCompleted completed);

	void handlePythonIoTaskResponse(
						PythonIoTaskResponse loaded
						);

private:
	void rollTaskStateForward_(hash_type bigvecGuid, S3KeyAndCredentials credentials);

	void broadcastTaskComplete_(hash_type guid, S3KeyAndCredentials credentials, ExternalIoTaskResult result);

	@type PageWrite =
		hash_type bigvecGuid,
		S3KeyAndCredentials credentials,
		int64_t slot
		;

	map<ExternalIoTaskId, PageWrite> mSavePageToS3Tasks;

	MapWithIndex<ExternalIoTaskId, pair<hash_type, S3KeyAndCredentials> > mCurrentTasks;

	TwoWaySetMap<pair<hash_type, S3KeyAndCredentials>, int64_t> mPendingPageWrites;

	TwoWaySetMap<pair<hash_type, S3KeyAndCredentials>, int64_t> mCompletedPageWrites;

	map<pair<hash_type, S3KeyAndCredentials>, std::string> mUploadIds;

	map<pair<hash_type, S3KeyAndCredentials>, ExternalIoTaskResult> mFailedPageWriteReason;

	std::map<hash_type, pair<hash_type, S3KeyAndCredentials> > mInitiateUploadIoTasks;

	std::map<hash_type, pair<hash_type, S3KeyAndCredentials> > mCompleteUploadIoTasks;

	boost::function0<hash_type> mCreateNewHash;

	boost::function1<void, PythonIoTaskRequest> mBroadcastPythonTask;

	boost::function1<void, ExternalIoTaskCreated> mCreateNewIoTask;

	boost::function1<void, ExternalIoTaskCompleted> mOnExternalIoTaskCompleted;

	PolymorphicSharedPtr<VectorDataManager> mVDM;

	PolymorphicSharedPtr<SystemwidePageRefcountTracker> mSPRT;
};

}

