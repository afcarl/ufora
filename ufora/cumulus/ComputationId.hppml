/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/
#pragma once

#include "../core/cppml/CPPMLEquality.hppml"
#include "../core/math/Hash.hpp"
#include "MachineId.hppml"
#include "../core/math/RandomHashGenerator.hpp"

namespace Cumulus {

class ComputationDefinition;

@type ComputationId =
	//a root-level computation in the system
	-|	Root of
			//hash of the computation. two computations with the same
			//hash should produce the same result
			hash_type computationHash
	//an ephemeral 'split' computation.
	-| 	Split of
			//the original Root that produced this computation
			ComputationId rootComputation,

			hash_type guid,

			//how many splits down are we in the tree
			int32_t treeDepth,

			std::string splitPath
with
	hash_type hash = (hashValue(*this))
{
public:
	static ComputationId CreateIdForRootOnClient(
								const ComputationDefinition& inDefinition
								);

	static ComputationId CreateIdForRootOnWorker(
								const ComputationDefinition& inDefinition,
								hash_type guid
								);

	static ComputationId CreateIdForSplit(
								const ComputationDefinition& inDefinition,
								hash_type guid,
								int64_t splitCountWithinParent
								);

	static ComputationId CreateIdForTesting(hash_type hash);

	ComputationId rootComputation() const;

	hash_type guid() const;

	bool isTemporary() const
		{
		return isSplit();
		}

	Nullable<hash_type> computationHash() const;
};

macro_defineCppmlComparisonOperators(ComputationId);

}

namespace boost {

template<>
class hash<Cumulus::ComputationId> : public std::unary_function<Cumulus::ComputationId, std::size_t> {
public:
		std::size_t operator()(Cumulus::ComputationId const& in) const
			{
			return boost::hash<hash_type>()(in.guid());
			}
};

};



