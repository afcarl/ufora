#include "OutOfProcessPythonTaskPolicy.hppml"
#include "../core/Logging.hpp"
#include "../FORA/Core/ImplValContainer.hppml"
#include "../FORA/Core/ImplValContainerUtilities.hppml"

Nullable<OutOfProcessPythonTaskPolicy> 
			OutOfProcessPythonTaskPolicy::parsePolicyFromForaTuple(const ImplValContainer& value, OutOfProcessPythonTaskPolicy defaultPolicy)
	{
	OutOfProcessPythonTaskPolicy policy = defaultPolicy;

	for (long k = 1; k < *value.tupleGetSize(); k++)
		{
		Nullable<pair<Symbol, ImplValContainer> > alt =
			ImplValContainerUtilities::extractAsAlternative(*value.tupleGetItem(k));

		if (!alt)
			return null();

		if (alt->first == Symbol("MemoryLimitBytes") && alt->second.type() == Type::UnnamedTuple(emptyTreeVec() + Type::Integer(64, true)))
			{
			int64_t newBytes = alt->second.cast<int64_t>();

			//negative or zero limit is nonsensical
			if (newBytes <= 0)
				return null();

			policy.bytesOfExternalMemoryRequired() = alt->second.cast<int64_t>();
			}
		else
			return null();
		}

	return null() << policy;
	}
