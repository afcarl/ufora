/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/
#include "CumulusClient.hppml"
#include "CumulusClientImpl.hppml"
#include "CumulusWorkerToClientMessage.hppml"
#include "CumulusClientToWorkerMessage.hppml"
#include "ActiveComputations.hppml"
#include "../core/PolymorphicSharedPtrBinder.hpp"
#include "../core/containers/MapWithIndex.hpp"

using namespace PolymorphicSharedPtrBinder;

namespace Cumulus {

typedef PolymorphicSharedPtr<Channel<std::string, std::string> > string_channel_ptr;

CumulusClient::CumulusClient(
			PolymorphicSharedPtr<VectorDataManager> inVDM,
			CumulusClientId inOwnClientId,
                        PolymorphicSharedPtr<CallbackScheduler> inCallbackScheduler
			) :
		mImpl(new CumulusClientImpl(inVDM, inOwnClientId, inCallbackScheduler))
	{
	}

Ufora::Json CumulusClient::getJsonViewOfSystem()
	{
	return mImpl->getJsonViewOfSystem();
	}

void CumulusClient::triggerCheckpoint()
	{
	mImpl->triggerCheckpoint();
	}

void CumulusClient::triggerCheckpointGarbageCollection(bool completePurge)
	{
	mImpl->triggerCheckpointGarbageCollection(completePurge);
	}

void CumulusClient::addMachine(
			MachineId machine,
			client_to_worker_channel_ptr_type inChannel
			)
	{
	mImpl->addMachine(machine, inChannel);
	}

void CumulusClient::dropMachine(MachineId machine)
	{
	mImpl->dropMachine(machine);
	}

CumulusClientId CumulusClient::getOwnClientId()
	{
	return mImpl->getOwnClientId();
	}

hash_type CumulusClient::requestCheckpointStatus()
	{
	return mImpl->requestCheckpointStatus();
	}

EventBroadcaster<pair<hash_type, Ufora::Json> >& CumulusClient::onCheckpointStatusReturned()
	{
	return mImpl->mOnCheckpointStatusReturned;
	}

ExternalIoTaskId CumulusClient::createExternalIoTask(ExternalIoTask task)
	{
	return mImpl->createExternalIoTask(task);
	}

ComputationId CumulusClient::createComputation(ComputationDefinition inComputationDefinition)
	{
	return mImpl->createComputation(inComputationDefinition);
	}

bool CumulusClient::setComputationPriority(ComputationId computation, ComputationPriority inPriority)
	{
	return mImpl->setComputationPriority(computation, inPriority);
	}

void CumulusClient::requestVectorLoad(VectorLoadRequest inPageId)
	{
	mImpl->requestVectorLoad(inPageId);
	}

EventBroadcaster<ComputationStatusOnMachineChanged>& CumulusClient::onComputationStatusOnMachineChanged()
	{
	return mImpl->mOnComputationStatusOnMachineChanged;
	}

EventBroadcaster<ComputationResult>& CumulusClient::onComputationResultReceived()
	{
	return mImpl->mOnComputationResultReceived;
	}

EventBroadcaster<VectorLoadedResponse>& CumulusClient::onVectorLoadedResponse()
	{
	return mImpl->mOnVectorLoadResponse;
	}

EventBroadcaster<RootComputationComputeStatusChanged>& CumulusClient::onRootComputationComputeStatusChanged()
	{
	return mImpl->mOnRootComputationComputeStatusChanged;
	}

EventBroadcaster<MachineId>& CumulusClient::onWorkerAdd()
	{
	return mImpl->mOnWorkerAdd;
	}

EventBroadcaster<MachineId>& CumulusClient::onWorkerDrop()
	{
	return mImpl->mOnWorkerDrop;
	}

PolymorphicSharedPtr<SystemwidePageRefcountTracker> CumulusClient::getSystemwidePageRefcountTracker()
	{
	return mImpl->mSystemwidePageRefcountTracker;
	}

Nullable<ComputationStatus> CumulusClient::currentActiveStatus(const ComputationId& inComputation)
	{
	return mImpl->currentActiveStatus(inComputation);
	}

PolymorphicSharedPtr<VectorDataManager> CumulusClient::getVDM()
	{
	return mImpl->mVDM;
	}

EventBroadcaster<RootToRootDependencyCreated>& CumulusClient::onRootToRootDependencyCreated()
	{
	return mImpl->mOnRootToRootDependencyCreated;
	}

void CumulusClient::resetComputationState()
	{
	return mImpl->resetComputationState();
	}

EventBroadcaster<CheckpointStatusUpdateMessage>& CumulusClient::onCheckpointStatusUpdateMessage()
	{
	return mImpl->mOnCheckpointStatusUpdateMessage;
	}

void CumulusClient::requestComputationCheckpoint(ComputationId inComputation)
	{
	mImpl->requestComputationCheckpoint(inComputation);
	}

EventBroadcaster<GlobalUserFacingLogMessage>& CumulusClient::onGlobalUserFacingLogMessage()
	{
	return mImpl->mOnGlobalUserFacingLogMessage;
	}

EventBroadcaster<ComputationIsCurrentlyCheckpointing>& CumulusClient::onComputationIsCurrentlyCheckpointing()
	{
	return mImpl->mOnComputationIsCurrentlyCheckpointing;
	}

EventBroadcaster<ExternalIoTaskCompleted>& CumulusClient::onExternalIoTaskCompleted()
	{
	return mImpl->mOnExternalIoTaskCompleted;
	}
}


