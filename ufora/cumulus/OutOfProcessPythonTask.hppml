/***************************************************************************
    Copyright 2016 Ufora Inc.

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
****************************************************************************/

#pragma once

#include "../core/PolymorphicSharedPtr.hpp"
#include "../FORA/Core/ExecutionContext.hppml"
#include <boost/function.hpp>
#include <string>

namespace Fora {

class PythonParseResult;

}

namespace Cumulus {

class OutOfProcessPythonTask : public PolymorphicSharedPtrBase<OutOfProcessPythonTask> {
public:
    OutOfProcessPythonTask(PolymorphicSharedPtr<VectorDataManager> inVDM);

    ~OutOfProcessPythonTask();

    void setTaskObject(const ImplValContainer& inIVC);

    const Nullable<ImplValContainer>& getTaskResult() const;

    void send(  OBinaryStream& outStream, 
                ImplValContainer pyforaBuiltins,
                ImmutableTreeMap<string, string> pythonNameToPyforaName
                );

    void read(  IBinaryStream& outStream, 
                ImplValContainer pyforaBuiltins,
                ImplValContainer inForaBuiltins,
                ImmutableTreeMap<string, string> pythonNameToPyforaName,
                boost::function<Fora::PythonParseResult (std::string)> pyAstParser
                );

    void clear();

    //walk the object graph and find any pages we'll need in order to actually serialize
    //all the data. If this set is empty, then all pages are mapped
    ImmutableTreeSet<Fora::PageId> walkAndMapAllInputPages();

private:
    PolymorphicSharedPtr<Fora::Interpreter::ExecutionContext> mContext;

    PolymorphicSharedPtr<VectorDataManager> mVDM;

    Nullable<ImplValContainer> mInputTaskObject;

    Nullable<ImplValContainer> mTaskResult;

    bool mStreamFailureEncountered;
};

}