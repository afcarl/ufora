/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/
#include "ActiveComputations.hppml"

#include "ActiveComputationsImpl.hppml"
#include "RecordingActiveComputationsKernelInterface.hppml"

#include "../FORA/Core/ExecutionContextConfiguration.hppml"
#include "ComputationDependencyGraph.hpp"
#include "ComputationState.hppml"
#include "MachineComputationMap.hppml"

namespace Cumulus {

typedef PolymorphicSharedPtr<ComputationState> ComputationStatePtr;

ActiveComputations::ActiveComputations(
				PolymorphicSharedPtr<CallbackSchedulerFactory> inCallbackSchedulerFactory,
				PolymorphicSharedPtr<CallbackScheduler> inCallbackScheduler,
				PolymorphicSharedPtr<DataTransfers> inLargeMessageThrottler,
				PolymorphicSharedPtr<VectorDataManager> inVDM,
				uword_t inWorkerThreadCount,
				Fora::Interpreter::ExecutionContextConfiguration inConfig,
				MachineId inOwnMachineId,
				PolymorphicSharedPtr<SystemwidePageRefcountTracker> inPageTracker,
				RandomHashGenerator& guidGen,
				boost::function1<void, ActiveComputationsEvent> inEventHandler,
				MachineId inLeaderMachineId
				) :
			mImpl(
				new ActiveComputationsImpl(
					inCallbackSchedulerFactory,
					inCallbackScheduler,
					inLargeMessageThrottler,
					inVDM,
					inWorkerThreadCount,
					inConfig,
					inOwnMachineId,
					inPageTracker,
					guidGen,
					inEventHandler,
					inLeaderMachineId
					)
				)
	{
	}

bool ActiveComputations::isTornDown() const
	{
	return mImpl->isTornDown();
	}

void ActiveComputations::addMachine(MachineId machine)
	{
	mImpl->addMachine(machine);
	}

void ActiveComputations::dumpStateToLog()
	{
	mImpl->dumpStateToLog();
	}


EventBroadcaster<RequestComputationResultFromMachine>&
ActiveComputations::onRequestComputationResultFromMachine()
	{
	return mImpl->mExternalInterface->mOnRequestComputationResultFromMachine;
	}

void ActiveComputations::handleComputationResultFromMachine(
				ComputationResultFromMachine inResult
				)
	{
	mImpl->mCallbackScheduler->scheduleImmediately(
		boost::bind(
			PolymorphicSharedPtrBinder::memberFunctionToWeakPtrFunction(
				&ActiveComputationsImpl::handleComputationResultFromMachine
				),
			mImpl->polymorphicSharedWeakPtrFromThis(),
			inResult
			),
		"ActiveComputations::handleComputationResultFromMachine"
		);
	}

pair<ComputationStatePtr, hash_type> ActiveComputations::startComputation(ComputationId computation)
	{
	return mImpl->startComputation(computation);
	}

void ActiveComputations::stopComputation(ComputationId computation, CreatedComputations result)
	{
	mImpl->stopComputation(computation, result);
	}

void ActiveComputations::addCumulusClient(CumulusClientId inId)
	{
	mImpl->mCallbackScheduler->scheduleImmediately(
		boost::bind(
			PolymorphicSharedPtrBinder::memberFunctionToWeakPtrFunction(
				&ActiveComputationsImpl::addCumulusClient
				),
			mImpl->polymorphicSharedWeakPtrFromThis(),
			inId
			),
		"ActiveComputations::addCumulusClient"
		);
	}

void ActiveComputations::dropCumulusClient(CumulusClientId inId)
	{
	mImpl->mCallbackScheduler->scheduleImmediately(
		boost::bind(
			PolymorphicSharedPtrBinder::memberFunctionToWeakPtrFunction(
				&ActiveComputationsImpl::dropCumulusClient
				),
			mImpl->polymorphicSharedWeakPtrFromThis(),
			inId
			),
		"ActiveComputations::dropCumulusClient"
		);
	}

void ActiveComputations::handleInitiateComputationMove(InitiateComputationMove move)
	{
	mImpl->mCallbackScheduler->scheduleImmediately(
		boost::bind(
			PolymorphicSharedPtrBinder::memberFunctionToWeakPtrFunction(
				&ActiveComputationsImpl::handleInitiateComputationMove
				),
			mImpl->polymorphicSharedWeakPtrFromThis(),
			move
			),
		"ActiveComputations::handleInitiateComputationMove"
		);
	}

void ActiveComputations::handleRequestComputationResultFromMachine(
									RequestComputationResultFromMachine inRequest
									)
	{
	mImpl->mCallbackScheduler->scheduleImmediately(
		boost::bind(
			PolymorphicSharedPtrBinder::memberFunctionToWeakPtrFunction(
				&ActiveComputationsImpl::handleRequestComputationResultFromMachine
				),
			mImpl->polymorphicSharedWeakPtrFromThis(),
			inRequest
			),
		"ActiveComputations::handleRequestComputationResultFromMachine"
		);
	}

MachineId ActiveComputations::getMachineId() const
	{
	return mImpl->getMachineId();
	}

void ActiveComputations::teardown(void)
	{
	mImpl->teardown();
	}

void ActiveComputations::teardownButDontBlock(void)
	{
	mImpl->teardownButDontBlock();
	}

void ActiveComputations::extractStates(
				std::map<ComputationId, PolymorphicSharedPtr<ComputationState> > &outStates
				)
	{
	mImpl->extractStates(outStates);
	}

void ActiveComputations::sendCurrentStateToClient(CumulusClientId client)
	{
	mImpl->sendCurrentStateToClient(client);
	}

void ActiveComputations::setCheckInternalStateAfterAllOperations(bool inCheck)
	{
	mImpl->setCheckInternalStateAfterAllOperations(inCheck);
	}

EventBroadcaster<ComputationResultFromMachine>& ActiveComputations::onComputationResultFromMachine()
	{
	return mImpl->mExternalInterface->mOnComputationResultFromMachine;
	}

EventBroadcaster<CumulusComponentMessageCreated>& ActiveComputations::onCumulusComponentMessageCreated()
	{
	return mImpl->mExternalInterface->mOnCumulusComponentMessageCreated;
	}

void ActiveComputations::handleCumulusComponentMessage(
			const CumulusComponentMessage& message,
			const CumulusClientOrMachine& source,
			const CumulusComponentType& componentType
			)
	{
	mImpl->mCallbackScheduler->scheduleImmediately(
		boost::bind(
			PolymorphicSharedPtrBinder::memberFunctionToWeakPtrFunction(
				&ActiveComputationsImpl::handleCumulusComponentMessage
				),
			mImpl->polymorphicSharedWeakPtrFromThis(),
			message,
			source,
			componentType
			),
		"ActiveComputations::handleCumulusComponentMessage"
		);
	}

void ActiveComputations::handleLocalPageRefcountEvent(const Fora::PageRefcountEvent& event)
	{
	mImpl->mCallbackScheduler->scheduleImmediately(
		boost::bind(
			PolymorphicSharedPtrBinder::memberFunctionToWeakPtrFunction(
				&ActiveComputationsImpl::handleLocalPageRefcountEvent
				),
			mImpl->polymorphicSharedWeakPtrFromThis(),
			event
			),
		"ActiveComputations::handleLocalPageRefcountEvent"
		);
	}

void ActiveComputations::sendAddDropState(boost::function1<void, Cumulus::CumulusWorkerAddDropEvent> eventConsumer)
	{
	mImpl->sendAddDropState(eventConsumer);
	}

void ActiveComputations::initializeFromAddDropState(
			const std::map<ComputationId, PolymorphicSharedPtr<ComputationState> > &inStates,
			const Cumulus::AddDropFinalState& state
			)
	{
	mImpl->initializeFromAddDropState(inStates, state);
	}

void ActiveComputations::disableVectorPaging()
	{
	mImpl->disableVectorPaging();
	}

void ActiveComputations::enableVectorPaging()
	{
	mImpl->enableVectorPaging();
	}

void ActiveComputations::suspendAllBroadcasters()
	{
	mImpl->mExternalInterface->mOnRequestComputationResultFromMachine.suspend();
	mImpl->mExternalInterface->mOnComputationResultFromMachine.suspend();
	mImpl->mExternalInterface->mOnCumulusComponentMessageCreated.suspend();
	}

void ActiveComputations::resumeAllBroadcasters()
	{
	mImpl->mExternalInterface->mOnRequestComputationResultFromMachine.resume();
	mImpl->mExternalInterface->mOnComputationResultFromMachine.resume();
	mImpl->mExternalInterface->mOnCumulusComponentMessageCreated.resume();
	}
}

