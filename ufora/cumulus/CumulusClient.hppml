/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/
#pragma once

#include <boost/shared_ptr.hpp>
#include "../core/PolymorphicSharedPtr.hpp"
#include "../core/EventBroadcaster.hpp"

#include "../FORA/VectorDataManager/VectorDataManager.hppml"

#include "CumulusClientId.hppml"
#include "MachineId.hppml"
#include "ComputationDefinition.hppml"
#include "ComputationPriority.hppml"
#include "VectorLoadRequest.hppml"
#include "VectorLoadedResponse.hppml"
#include "ComputationResult.hppml"
#include "RootComputationComputeStatusChanged.hppml"
#include "ComputationStatusChanged.hppml"
#include "CumulusClientToWorkerMessage.hppml"
#include "CumulusWorkerToClientMessage.hppml"
#include "RootToRootDependencyCreated.hppml"
#include "GlobalUserFacingLogMessage.hppml"
#include "ExternalIoTask/ExternalIoTask.hppml"
#include "ExternalIoTask/ExternalIoTaskCompleted.hppml"
#include "../core/Json.hppml"

class SystemwidePageRefcountTracker;

namespace Cumulus {

class CumulusClientImpl;

typedef PolymorphicSharedPtr<Channel<std::string, std::string> > unknown_channel_ptr_type;

typedef Channel<CumulusClientToWorkerMessage, CumulusWorkerToClientMessage>
																client_to_worker_channel_type;


typedef PolymorphicSharedPtr<client_to_worker_channel_type>	client_to_worker_channel_ptr_type;

typedef Channel<CumulusWorkerToClientMessage, CumulusClientToWorkerMessage>
																worker_to_client_channel_type;

typedef PolymorphicSharedPtr<worker_to_client_channel_type>	worker_to_client_channel_ptr_type;



class CumulusClient :
				public PolymorphicSharedPtrBase<CumulusClient>,
				public InstanceCounter<CumulusClient> {
public:
	CumulusClient(
			PolymorphicSharedPtr<VectorDataManager> inVDM,
			CumulusClientId inOwnClientId,
			PolymorphicSharedPtr<CallbackScheduler> inCallbackScheduler
			);

	Ufora::Json getJsonViewOfSystem();

	CumulusClientId getOwnClientId();

	//this will be connected to a CumulusWorker
	void addMachine(MachineId machine, client_to_worker_channel_ptr_type inChannelPtr);

	void dropMachine(MachineId machine);

	Nullable<ComputationStatus> currentActiveStatus(const ComputationId& inComputation);

	ComputationId createComputation(ComputationDefinition inComputationDefinition);

	ExternalIoTaskId createExternalIoTask(ExternalIoTask task);

	void triggerCheckpoint();

	void triggerCheckpointGarbageCollection(bool completePurge);

	bool setComputationPriority(ComputationId computation, ComputationPriority inPriority);

	void requestVectorLoad(VectorLoadRequest inPageId);

	void requestComputationCheckpoint(ComputationId inComputation);

	void resetComputationState();

	hash_type requestCheckpointStatus();

	PolymorphicSharedPtr<SystemwidePageRefcountTracker> getSystemwidePageRefcountTracker();

	PolymorphicSharedPtr<VectorDataManager> getVDM();

	EventBroadcaster<MachineId>& onWorkerAdd();

	EventBroadcaster<MachineId>& onWorkerDrop();

	EventBroadcaster<GlobalUserFacingLogMessage>& onGlobalUserFacingLogMessage();

	EventBroadcaster<pair<hash_type, Ufora::Json> >& onCheckpointStatusReturned();

	EventBroadcaster<CheckpointStatusUpdateMessage>& onCheckpointStatusUpdateMessage();

	EventBroadcaster<ComputationStatusOnMachineChanged>& onComputationStatusOnMachineChanged();

	EventBroadcaster<ComputationIsCurrentlyCheckpointing>& onComputationIsCurrentlyCheckpointing();

	EventBroadcaster<ComputationResult>& onComputationResultReceived();

	EventBroadcaster<VectorLoadedResponse>& onVectorLoadedResponse();

	EventBroadcaster<RootComputationComputeStatusChanged>& onRootComputationComputeStatusChanged();

	EventBroadcaster<RootToRootDependencyCreated>& onRootToRootDependencyCreated();

	EventBroadcaster<ExternalIoTaskCompleted>& onExternalIoTaskCompleted();

protected:
	PolymorphicSharedPtr<CumulusClientImpl> mImpl;
};

}


