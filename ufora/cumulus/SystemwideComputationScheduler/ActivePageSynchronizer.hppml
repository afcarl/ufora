/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/
#pragma once

#include <boost/shared_ptr.hpp>

#include "../../core/PolymorphicSharedPtr.hpp"
#include "../../core/EventBroadcaster.hpp"
#include "../../core/math/Random.hpp"
#include "../SystemwidePageRefcountTracker.hppml"
#include "../ComputationId.hppml"
#include "../VectorLoadRequest.hppml"
#include "../VectorLoadedResponse.hppml"
#include "../../core/containers/TwoWaySetMap.hpp"
#include "../../core/containers/MapWithIndex.hpp"
#include "../../core/PolymorphicSharedPtrBinder.hpp"
#include "../ActivePageSynchronizerToSynchronizerMessage.hppml"
#include "SchedulerPageLoader.hppml"
#include "../../FORA/VectorDataManager/OfflineCache.hpp"
#include "../CumulusComponentMessageCreated.hppml"
#include "../CumulusClientOrMachine.hppml"

namespace Cumulus {

namespace SystemwideComputationScheduler {


/************

ActivePageSynchronizer

This class is responsible for making sure that a given machine holds the right pages. The
primary Scheduler recomputes the set of pages that each machine is supposed to hold. The
ActivePageSynchronizer is responsible for adding and dropping pages to reach that target,
managing loads from the paging system.

************/

class ActivePageSynchronizerImpl;

class ActivePageSynchronizer :
			public PolymorphicSharedPtrBase<ActivePageSynchronizer> {
public:
	ActivePageSynchronizer(
				PolymorphicSharedPtr<CallbackScheduler> inCallbackScheduler,
				PolymorphicSharedPtr<SystemwidePageRefcountTracker> inPageTracker,
				PolymorphicSharedPtr<VectorDataManager> inVDM,
				PolymorphicSharedPtr<OfflineCache> inOfflineCache,
				MachineId inOwnMachineId
				);

	void teardown();

	void initializeFromAddDropState(const AddDropFinalState& state);

	void consumePageEvent(const Fora::PageRefcountEvent& inEvent, Cumulus::MachineId onMachineId);

	void handleVectorLoadResponse(VectorLoadedResponse response);

	void pageNoLongerReferencedAcrossSystem(Fora::PageId page);

	EventBroadcaster<CumulusComponentMessageCreated>& onCumulusComponentMessageCreated();

	void blockUntilAllDiskWritesAreCompleted();

	void setAgressivelyPushPagesToDiskInBackground(bool pushPages);

    void handleCumulusComponentMessage(
                    const CumulusComponentMessage& message,
                    const CumulusClientOrMachine& source,
                    const CumulusComponentType& componentType
                    );

private:
	PolymorphicSharedPtr<ActivePageSynchronizerImpl> mImpl;
};
}
}

