/***************************************************************************
    Copyright 2015 Ufora Inc.

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
****************************************************************************/
#pragma once

#include "../MachineId.hppml"
#include "../ComputationId.hppml"
#include "../../core/StringUtil.hpp"

namespace Cumulus {

@type ThreadGroup =
    ComputationId rootComputation,
    std::string prefix,
    hash_type hash
{
public:
    ThreadGroup(ComputationId inRoot, std::string inPrefix)
        {
        rootComputation() = inRoot;
        prefix() = inPrefix;
        hash() = inRoot.hash() + hashValue(inPrefix);
        }

    bool isRoot() const
        {
        return prefix().size() == 0;
        }

    Nullable<ThreadGroup> parent() const
        {
        if (prefix().size() == 0)
            return null();

        for (long k = ((long)prefix().size()) - 1; k >= 0; k--)
            if (prefix()[k] == '_')
                return null() << ThreadGroup(rootComputation(), prefix().substr(0, k));

        return null() << ThreadGroup(rootComputation(), "");
        }

    static ThreadGroup groupFor(ComputationId comp)
        {
        @match ComputationId(comp)
            -| Root() ->> {
                return ThreadGroup(comp, "");
                }
            -| Split(root, _, _, prefix) ->> {
                return ThreadGroup(root, prefix);
                }
        }

    bool contains(ComputationId other) const
        {
        @match ComputationId(other)
            -| Root() ->> {
                return rootComputation() == other && prefix().size() == 0;
                }
            -| Split(root, _, _, otherprefix) ->> {
                return root == rootComputation() && Ufora::beginsWith(otherprefix, prefix());
                }
        }

	 bool contains(ThreadGroup other) const
        {
        return rootComputation() == other.rootComputation() &&
            Ufora::beginsWith(other.prefix(), prefix())
            ;
        }
};

macro_defineCppmlComparisonOperators(ThreadGroup);

}
