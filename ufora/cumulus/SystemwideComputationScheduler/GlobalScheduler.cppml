/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/
#include "GlobalScheduler.hppml"
#include "GlobalSchedulerImpl.hppml"
#include "../../core/PolymorphicSharedPtrBinder.hpp"

namespace Cumulus {
namespace SystemwideComputationScheduler {

GlobalScheduler::GlobalScheduler(
				PolymorphicSharedPtr<CallbackScheduler> inCallbackScheduler,
            	PolymorphicSharedPtr<VectorDataManager> inVDM,
            	MachineId inOwnMachineId,
				long inActiveThreadCount,
				CumulusCheckpointPolicy inCheckpointCommitPolicy,
				boost::function1<void, GlobalSchedulerEvent> inEventHandler
				) :
		mImpl(
			new GlobalSchedulerImpl(
				inCallbackScheduler,
				inVDM,
				inOwnMachineId,
				inActiveThreadCount,
				inCheckpointCommitPolicy,
				inEventHandler
				)
			)
	{
	}

void GlobalScheduler::teardown()
	{
	mImpl->teardown();
	}

void GlobalScheduler::pageNoLongerReferencedAcrossSystem(Fora::PageId page)
	{
	mImpl->mCallbackScheduler->scheduleImmediately(
		boost::bind(
			PolymorphicSharedPtrBinder::memberFunctionToWeakPtrFunction(
				&GlobalSchedulerImpl::pageNoLongerReferencedAcrossSystem
				),
			mImpl->polymorphicSharedWeakPtrFromThis(),
			page
			),
		"GlobalScheduler::pageNoLongerReferencedAcrossSystem"
		);
	}

void GlobalScheduler::consumePageEvent(
								const Fora::PageRefcountEvent& inEvent,
								Cumulus::MachineId onMachineId
								)
	{
	mImpl->mCallbackScheduler->scheduleImmediately(
		boost::bind(
			PolymorphicSharedPtrBinder::memberFunctionToWeakPtrFunction(
				&GlobalSchedulerImpl::consumePageEvent
				),
			mImpl->polymorphicSharedWeakPtrFromThis(),
			inEvent,
			onMachineId
			),
		"GlobalScheduler::consumePageEvent"
		);
	}

void GlobalScheduler::addMachine(MachineId inMachine)
	{
	mImpl->addMachine(inMachine);
	}

void GlobalScheduler::initializeFromAddDropState(const AddDropFinalState& state)
	{
	mImpl->initializeFromAddDropState(state);
	}

void GlobalScheduler::setDiagnosticLogfilePath(std::string inLogfilePath)
	{
	mImpl->setDiagnosticLogfilePath(inLogfilePath);
	}

Nullable<std::string> GlobalScheduler::getDiagnosticLogfilePath()
	{
	return mImpl->getDiagnosticLogfilePath();
	}

EventBroadcaster<CumulusComponentMessageCreated>& GlobalScheduler::onCumulusComponentMessageCreated()
	{
	return mImpl->mOnCumulusComponentMessageCreated;
	}

ImmutableTreeMap<ComputationId, pair<CheckpointStatus, CheckpointRequest>>
GlobalScheduler::currentOutstandingCheckpointStatuses(bool onlyUnfinished, bool onlyCommitted)
	{
	return mImpl->currentOutstandingCheckpointStatuses(onlyUnfinished, onlyCommitted);
	}

void GlobalScheduler::setCheckpointStatusInterval(double inInterval)
	{
	mImpl->setCheckpointStatusInterval(inInterval);
	}

void GlobalScheduler::triggerFullCheckpointsOnOutstandingComputations()
	{
	mImpl->triggerFullCheckpointsOnOutstandingComputations();
	}

void GlobalScheduler::handleCumulusComponentMessage(
                    const CumulusComponentMessage& message,
                    const CumulusClientOrMachine& source,
                    const CumulusComponentType& componentType
                    )
	{
	mImpl->handleCumulusComponentMessage(message, source, componentType);
	}

bool GlobalScheduler::anyOutstandingTriggeredCheckpoints()
	{
	return mImpl->anyOutstandingTriggeredCheckpoints();
	}

}
}

