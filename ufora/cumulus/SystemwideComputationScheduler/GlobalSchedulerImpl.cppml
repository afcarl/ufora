/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/
#include "GlobalSchedulerImpl.hppml"
#include "GlobalSchedulerEvent.hppml"

#include "../AddDropFinalState.hppml"
#include "../PersistentCache/PersistentCacheIndex.hppml"
#include "../SystemwidePageRefcountTracker.hppml"

#include "../../core/Memory.hpp"
#include "../../core/PolymorphicSharedPtrBinder.hpp"
#include "../../core/threading/CallbackSchedulerFactory.hppml"
#include "../../core/threading/CallbackScheduler.hppml"
#include "../../core/threading/LimitToTime.hpp"
#include "../../core/threading/Queue.hpp"
#include "../../core/threading/TimedLock.hpp"
#include "../../core/StringUtil.hpp"
#include "../../FORA/VectorDataManager/VectorDataManager.hppml"
#include "../../FORA/TypedFora/ABI/BigVectorLayouts.hppml"

#include <iomanip>
#include <fstream>

namespace Cumulus {
namespace SystemwideComputationScheduler {

const double kMaxSplitFrequency = 400;
const double kRecomputePageLayoutInterval = .2;
const double kDefaultCheckpointUpdateInterval = 1.0;

GlobalSchedulerImpl::GlobalSchedulerImpl(
			PolymorphicSharedPtr<CallbackScheduler> inCallbackScheduler,
			PolymorphicSharedPtr<VectorDataManager> inVDM,
        	MachineId inOwnMachineId,
			long inActiveThreadCount,
			CumulusCheckpointPolicy inCheckpointCommitPolicy,
			boost::function1<void, GlobalSchedulerEvent> inEventHandler
			) :
		mCheckpointUpdateInterval(kDefaultCheckpointUpdateInterval),
		mOnCumulusComponentMessageCreated(inCallbackScheduler),
		mEventHandler(inEventHandler),
		mKernel(
			inVDM->maxPageSizeInBytes(),
			inVDM->getMemoryLimit(),
			inOwnMachineId,
			inActiveThreadCount,
			inCheckpointCommitPolicy,
			boost::bind(
				&GlobalSchedulerImpl::onKernelTriggerRecomputePageLayoutIfNecessary,
				this
				),
			boost::bind(
				&GlobalSchedulerImpl::onKernelTriggerComputationStatusUpdate,
				this,
				boost::arg<1>(),
				boost::arg<2>()
				),
			boost::bind(
				&GlobalSchedulerImpl::onKernelCumulusComponentMessageCreated,
				this,
				boost::arg<1>()
				)
			),
		mPendingRecomputeChecks(0),
		mCallbackScheduler(inCallbackScheduler->getFactory()->createScheduler("GlobalSchedulerImpl")),
		mRebalanceCallbackScheduler(inCallbackScheduler->getFactory()->createScheduler("GlobalSchedulerImpl::Rebalance")),
		mNextRecomputeTime(curClock() + 1000000),
		mSoonestRecomputeTime(0),
		mIsTornDown(false),
		mVDM(inVDM)
	{
	if (mEventHandler)
		mEventHandler(
			GlobalSchedulerEvent::Initialized(
				SchedulerInitializationParameters(
					inVDM->maxPageSizeInBytes(),
					inVDM->getMemoryLimit(),
					inOwnMachineId,
					inActiveThreadCount
					)
				)
			);

	mKernel.setCheckpointStatusInterval(kDefaultCheckpointUpdateInterval);
	}

void GlobalSchedulerImpl::polymorphicSharedPtrBaseInitialized()
	{
	TimedLock lock(mMutex, "GlobalSchedulerImpl");

	setNextRecomputeTime(curClock());

	mCallbackScheduler->scheduleImmediately(
		boost::bind(
			PolymorphicSharedPtrBinder::memberFunctionToWeakPtrFunction(
				&GlobalSchedulerImpl::checkCheckpointsAndStatusesAndReschedule
				),
			polymorphicSharedWeakPtrFromThis()
			),
		"checkCheckpointsAndStatusesAndReschedule"
		);
	}

void GlobalSchedulerImpl::setCheckpointStatusInterval(double inInterval)
	{
	TimedLock lock(mMutex, "GlobalSchedulerImpl");

	mCheckpointUpdateInterval = inInterval;

	mKernel.setCheckpointStatusInterval(inInterval);
	}

void GlobalSchedulerImpl::triggerFullCheckpointsOnOutstandingComputations()
	{
	TimedLock lock(mMutex, "GlobalSchedulerImpl");

	double curTime = curClock();

	if (mEventHandler)
		mEventHandler(GlobalSchedulerEvent::InTriggerFullCheckpointsOnOutstandingComputations(curTime));

	mKernel.triggerFullCheckpointsOnOutstandingComputations(curTime);
	}


void GlobalSchedulerImpl::checkCheckpointsAndStatusesAndReschedule()
	{
	TimedLock lock(mMutex, "GlobalSchedulerImpl");

	double curTime = curClock();

	if (mEventHandler)
		mEventHandler(GlobalSchedulerEvent::InCheckCheckpointsAndStatuses(curTime));

	mKernel.checkCheckpointsAndStatuses(curTime);

	mCallbackScheduler->schedule(
		boost::bind(
			PolymorphicSharedPtrBinder::memberFunctionToWeakPtrFunction(
				&GlobalSchedulerImpl::checkCheckpointsAndStatusesAndReschedule
				),
			polymorphicSharedWeakPtrFromThis()
			),
		curClock() + mCheckpointUpdateInterval,
		"checkCheckpointsAndStatusesAndReschedule"
		);
	}

void GlobalSchedulerImpl::onKernelCumulusComponentMessageCreated(CumulusComponentMessageCreated msg)
	{
	if (mEventHandler)
		mEventHandler(GlobalSchedulerEvent::OutCumulusComponentMessageCreated(msg));

	mOnCumulusComponentMessageCreated.broadcast(msg);
	}

void GlobalSchedulerImpl::onKernelTriggerComputationStatusUpdate(ComputationId computation, CheckpointRequest timestamp)
	{
	if (mEventHandler)
		mEventHandler(GlobalSchedulerEvent::OutTriggerComputationStatusUpdate(computation, timestamp));

	mOnCumulusComponentMessageCreated.broadcast(
		CumulusComponentMessageCreated(
			CumulusComponentMessage::GlobalSchedulerToActiveComputations(
				GlobalSchedulerToActiveComputationsMessage::TriggerCheckpoint(computation, timestamp)
				),
			CumulusComponentEndpointSet::AllWorkers(),
			CumulusComponentType::ActiveComputations()
			)
		);
	}

void GlobalSchedulerImpl::onKernelTriggerRecomputePageLayoutIfNecessary()
	{
	setNextRecomputeTime(curClock());
	}

void GlobalSchedulerImpl::teardown()
	{
	TimedLock lock(mMutex, "GlobalSchedulerImpl");

	mIsTornDown = true;
	}

void GlobalSchedulerImpl::initializeFromAddDropState(const AddDropFinalState& state)
	{
	TimedLock lock(mMutex, "GlobalSchedulerImpl");

	mKernel.initializeFromAddDropState(state);

	state.recreatePageRefcountEventSequence(
		boost::bind(
			&GlobalSchedulerImpl::consumePageEvent,
			this,
			boost::arg<1>(),
			boost::arg<2>()
			)
		);

	auto& calc = mKernel.mActiveNeighborhoods;

	LOG_DEBUG << "Layout after initializing Scheduler on " << mKernel.mOwnMachineId << "\n"
			<< mKernel.mSystemwidePageRefcountTracker->getViewOfSystem()
			<< "\n"
			;
	}

void GlobalSchedulerImpl::consumePageEvent(
								const Fora::PageRefcountEvent& inEvent,
								Cumulus::MachineId onMachineId
								)
	{
	TimedLock lock(mMutex, "GlobalSchedulerImpl");

	if (mIsTornDown)
		return;

	if (mEventHandler)
		mEventHandler(GlobalSchedulerEvent::InPageEvent(inEvent, onMachineId));

	mKernel.consumePageEvent(inEvent, onMachineId);
	}

void GlobalSchedulerImpl::pageNoLongerReferencedAcrossSystem(Fora::PageId page)
	{
	TimedLock lock(mMutex, "GlobalSchedulerImpl");

	if (mIsTornDown)
		return;

	if (mEventHandler)
		mEventHandler(GlobalSchedulerEvent::InPageNoLongerReferencedAcrossEntireSystem(page));

	mKernel.pageNoLongerReferencedAcrossSystem(page);
	}

void GlobalSchedulerImpl::addMachine(MachineId inMachine)
	{
	TimedLock lock(mMutex, "GlobalSchedulerImpl");

	if (mIsTornDown)
		return;

	if (mEventHandler)
		mEventHandler(GlobalSchedulerEvent::InAddMachine(inMachine));

	mKernel.addMachine(inMachine);
	}
void GlobalSchedulerImpl::recomputePageLayoutAndReschedule()
	{
	TimedLock lock(mMutex, "GlobalSchedulerImpl");

	mPendingRecomputeChecks--;

	if (mIsTornDown)
		return;

	if (curClock() < mNextRecomputeTime)
		return;

	recomputePageLayoutAndReschedule_();

	lassert(mPendingRecomputeChecks);
	}

void GlobalSchedulerImpl::recomputePageLayoutAndReschedule_()
	{
	if (mEventHandler)
		mEventHandler(GlobalSchedulerEvent::RecomputePageLayout());

	double t0 = curClock();

	std::string response = mKernel.recomputePageLayout();

	if (response.size() && mLogfilePath)
		{
		std::ofstream outfile;

		outfile.open(mLogfilePath->c_str(), std::ofstream::out | std::ofstream::app);

		outfile << response << "\n\n";

		outfile.close();
		}

	mNextRecomputeTime = curClock() + 1000000;

	setSoonestRecomputeTime(curClock() + std::min<double>(5.0, (curClock() - t0) * 2));
	setNextRecomputeTime(curClock() + kRecomputePageLayoutInterval);
	}

void GlobalSchedulerImpl::setSoonestRecomputeTime(double nextTime)
	{
	TimedLock lock(mMutex, "GlobalSchedulerImpl");

	if (nextTime < mSoonestRecomputeTime)
		return;

	mSoonestRecomputeTime = nextTime;

	if (mNextRecomputeTime < mSoonestRecomputeTime)
		{
		mNextRecomputeTime = mSoonestRecomputeTime;

		mCallbackScheduler->schedule(
			boost::bind(
				PolymorphicSharedPtrBinder::memberFunctionToWeakPtrFunction(
					&GlobalSchedulerImpl::recomputePageLayoutAndReschedule
					),
				polymorphicSharedWeakPtrFromThis()
				),
			mNextRecomputeTime + 0.0000001,
			"recomputePageLayoutAndReschedule"
			);

		mPendingRecomputeChecks++;
		}
	}

void GlobalSchedulerImpl::setNextRecomputeTime(double nextTime)
	{
	TimedLock lock(mMutex, "GlobalSchedulerImpl");

	if (nextTime < mSoonestRecomputeTime)
		nextTime = mSoonestRecomputeTime;

	if (nextTime > mNextRecomputeTime)
		//don't do anything
		return;

	mNextRecomputeTime = nextTime;

	mCallbackScheduler->schedule(
		boost::bind(
			PolymorphicSharedPtrBinder::memberFunctionToWeakPtrFunction(
				&GlobalSchedulerImpl::recomputePageLayoutAndReschedule
				),
			polymorphicSharedWeakPtrFromThis()
			),
		mNextRecomputeTime + 0.0000001,
		"recomputePageLayoutAndReschedule"
		);

	mPendingRecomputeChecks++;
	}

void GlobalSchedulerImpl::setDiagnosticLogfilePath(std::string inLogfilePath)
	{
	TimedLock lock(mMutex, "GlobalSchedulerImpl");

	mLogfilePath = inLogfilePath;
	}

Nullable<std::string> GlobalSchedulerImpl::getDiagnosticLogfilePath()
	{
	TimedLock lock(mMutex, "GlobalSchedulerImpl");

	return mLogfilePath;
	}

ImmutableTreeMap<ComputationId, pair<CheckpointStatus, CheckpointRequest> >
			GlobalSchedulerImpl::currentOutstandingCheckpointStatuses(bool onlyUnfinished, bool onlyCommitted)
	{
	TimedLock lock(mMutex, "GlobalSchedulerImpl");

	return mKernel.currentOutstandingCheckpointStatuses(onlyUnfinished, onlyCommitted);
	}

void GlobalSchedulerImpl::handleCumulusComponentMessage(
                    const CumulusComponentMessage& message,
                    const CumulusClientOrMachine& source,
                    const CumulusComponentType& componentType
                    )
	{
	TimedLock lock(mMutex, "GlobalSchedulerImpl");

	double curTime = curClock();

	if (mEventHandler)
		mEventHandler(
			GlobalSchedulerEvent::InCumulusComponentMessage(message, source, componentType, curTime)
			);

	mKernel.handleCumulusComponentMessage(message, source, componentType, curTime);
	}

bool GlobalSchedulerImpl::anyOutstandingTriggeredCheckpoints()
	{
	TimedLock lock(mMutex, "GlobalSchedulerImpl");

	return mKernel.anyOutstandingTriggeredCheckpoints();
	}

}
}


