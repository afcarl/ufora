/***************************************************************************
    Copyright 2016 Ufora Inc.

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
****************************************************************************/
#pragma once

#include "../../ComputationId.hppml"
#include "../../ComputationDefinition.hppml"
#include "../../../FORA/Judgment/JudgmentOnValue.hppml"

namespace Cumulus {

class RuntimePredictionValue;

@type RuntimePredictionFilterTerm =
    -| Anything of () //matches anything
    -| IsLeaf of Nullable<hash_type> eltType //matches a leaf of type eltType (or any leaf if null)
    -| IsInteger of () //matches integers
    -| IsFloat of () //matches floats
    -| IsString of () //matches strings
    -| IsVector of Nullable<hash_type> vecType //matches vectors, with optional result
    -| IsTuple of Nullable<int64_t> size //matches tuples with an optional size
    -| IsClass of Nullable<hash_type> cls //matches classes with an optional specified classBody
{
public:
    bool matches(const RuntimePredictionValue& value) const;
};

@type RuntimePredictionFilter =
    //match each term, and then take the 'int64_t'th sub element and then match against
    //the final filter
    ImmutableTreeVector<pair<RuntimePredictionFilterTerm, int64_t> > filtersAndTerms,
    RuntimePredictionFilterTerm finalFilter
{
public:
    bool matches(const RuntimePredictionValue& value, long index = 0) const;

    RuntimePredictionFilter withTail(RuntimePredictionFilterTerm final) const
        {
        return RuntimePredictionFilter(filtersAndTerms(), final);
        }

    RuntimePredictionFilter withPathElement(int64_t ix) const
        {
        return RuntimePredictionFilter(
            filtersAndTerms() + make_pair(finalFilter(), ix),
            RuntimePredictionFilterTerm()
            );
        }
};

macro_defineCppmlComparisonOperators(RuntimePredictionFilter);

}

