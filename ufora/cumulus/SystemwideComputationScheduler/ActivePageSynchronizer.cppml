/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/
#include "ActivePageSynchronizer.hppml"
#include "ActivePageSynchronizerImpl.hppml"

namespace Cumulus {
namespace SystemwideComputationScheduler {

ActivePageSynchronizer::ActivePageSynchronizer(
			PolymorphicSharedPtr<CallbackScheduler> inCallbackScheduler,
			PolymorphicSharedPtr<SystemwidePageRefcountTracker> inSystemwidePageRefcountTracker,
			PolymorphicSharedPtr<VectorDataManager> inVDM,
			PolymorphicSharedPtr<OfflineCache> inOfflineCache,
			MachineId inOwnMachineId
			) :
		mImpl(
			new ActivePageSynchronizerImpl(
				inCallbackScheduler,
				inSystemwidePageRefcountTracker,
				inVDM,
				inOfflineCache,
				inOwnMachineId
				)
			)
	{
	}


void ActivePageSynchronizer::teardown()
	{
	mImpl->teardown();
	}

void ActivePageSynchronizer::initializeFromAddDropState(const AddDropFinalState& state)
	{
	mImpl->initializeFromAddDropState(state);
	}

void ActivePageSynchronizer::blockUntilAllDiskWritesAreCompleted()
	{
	mImpl->blockUntilAllDiskWritesAreCompleted();
	}

void ActivePageSynchronizer::consumePageEvent(const Fora::PageRefcountEvent& inEvent, Cumulus::MachineId onMachineId)
	{
	mImpl->getPrivateCallbackScheduler()->scheduleImmediately(
		boost::bind(
			PolymorphicSharedPtrBinder::memberFunctionToWeakPtrFunction(
				&ActivePageSynchronizerImpl::consumePageEvent
				),
			mImpl->polymorphicSharedWeakPtrFromThis(),
			inEvent,
			onMachineId
			),
		"ActivePageSynchronizerImpl::consumePageEvent"
		);
	}

void ActivePageSynchronizer::handleVectorLoadResponse(VectorLoadedResponse response)
	{
	mImpl->getPrivateCallbackScheduler()->scheduleImmediately(
		boost::bind(
			PolymorphicSharedPtrBinder::memberFunctionToWeakPtrFunction(
				&ActivePageSynchronizerImpl::handleVectorLoadResponse
				),
			mImpl->polymorphicSharedWeakPtrFromThis(),
			response
			),
		"ActivePageSynchronizerImpl::handleVectorLoadResponse"
		);
	}

void ActivePageSynchronizer::pageNoLongerReferencedAcrossSystem(Fora::PageId page)
	{
	mImpl->getPrivateCallbackScheduler()->scheduleImmediately(
		boost::bind(
			PolymorphicSharedPtrBinder::memberFunctionToWeakPtrFunction(
				&ActivePageSynchronizerImpl::pageNoLongerReferencedAcrossSystem
				),
			mImpl->polymorphicSharedWeakPtrFromThis(),
			page
			),
		"ActivePageSynchronizerImpl::pageNoLongerReferencedAcrossSystem"
		);
	}

EventBroadcaster<CumulusComponentMessageCreated>&
						ActivePageSynchronizer::onCumulusComponentMessageCreated()
	{
	return mImpl->onCumulusComponentMessageCreated();
	}

void ActivePageSynchronizer::setAgressivelyPushPagesToDiskInBackground(bool pushPages)
	{
	mImpl->setAgressivelyPushPagesToDiskInBackground(pushPages);
	}

void ActivePageSynchronizer::handleCumulusComponentMessage(
                    const CumulusComponentMessage& message,
                    const CumulusClientOrMachine& source,
                    const CumulusComponentType& componentType
                    )
	{
	mImpl->getPrivateCallbackScheduler()->scheduleImmediately(
		boost::bind(
			PolymorphicSharedPtrBinder::memberFunctionToWeakPtrFunction(
				&ActivePageSynchronizerImpl::handleCumulusComponentMessage
				),
			mImpl->polymorphicSharedWeakPtrFromThis(),
			message,
			source,
			componentType
			),
		"ActivePageSynchronizerImpl::handleCumulusComponentMessage"
		);
	}

}
}


