/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/
#pragma once

#include <boost/shared_ptr.hpp>
#include "../../core/PolymorphicSharedPtr.hpp"
#include "../../core/EventBroadcaster.hpp"

#include "../ComputationId.hppml"
#include "../VectorLoadRequest.hppml"
#include "../VectorLoadedResponse.hppml"
#include "../CumulusCheckpointPolicy.hppml"

#include "../InitiateComputationMove.hppml"
#include "../SchedulerToComputationMessage.hppml"
#include "../SystemwidePageRefcountTracker.hppml"
#include "../CumulusComponentMessageCreated.hppml"
#include "../CumulusClientOrMachine.hppml"
#include "../CumulusCheckpointPolicy.hppml"

namespace Cumulus {

class AddDropFinalState;

namespace SystemwideComputationScheduler {

class GlobalSchedulerEvent;
class GlobalSchedulerInitializationParameters;

class GlobalSchedulerImpl;

class GlobalScheduler : public PolymorphicSharedPtrBase<GlobalScheduler> {
public:
	GlobalScheduler(
			PolymorphicSharedPtr<CallbackScheduler> inCallbackScheduler,
            PolymorphicSharedPtr<VectorDataManager> inVDM,
            MachineId inOwnMachineId,
            long inActiveThreadCount,
			CumulusCheckpointPolicy inCheckpointCommitPolicy,
            boost::function1<void, GlobalSchedulerEvent> inEventHandler
			);

    void teardown();

    void addMachine(MachineId inMachine);

    void setCheckpointStatusInterval(double interval);

    void consumePageEvent(const Fora::PageRefcountEvent& inEvent, Cumulus::MachineId onMachineId);

    void pageNoLongerReferencedAcrossSystem(Fora::PageId page);

    void initializeFromAddDropState(const AddDropFinalState& state);

    void handleCumulusComponentMessage(
                    const CumulusComponentMessage& message,
                    const CumulusClientOrMachine& source,
                    const CumulusComponentType& componentType
                    );

    void triggerFullCheckpointsOnOutstandingComputations();

    bool anyOutstandingTriggeredCheckpoints();

    EventBroadcaster<CumulusComponentMessageCreated>& onCumulusComponentMessageCreated();

    void setDiagnosticLogfilePath(std::string inLogfilePath);

    Nullable<std::string> getDiagnosticLogfilePath();

    ImmutableTreeMap<ComputationId, pair<CheckpointStatus, CheckpointRequest> >
            currentOutstandingCheckpointStatuses(bool onlyUnfinished, bool onlyCommitted);

protected:
	PolymorphicSharedPtr<GlobalSchedulerImpl> mImpl;
};
}
};

