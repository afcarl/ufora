/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/
#pragma once

#include "../core/math/Nullable.hpp"

namespace Cumulus {

@type ComputationPriority = uint64_t prioritySource, Nullable<uint64_t> priorityLevel, uint64_t treeDepth, uint64_t splitDepth {
public:
	explicit ComputationPriority(Nullable<uint64_t> val)
		{
		prioritySource() = 0;
		priorityLevel() = val;
		treeDepth() = 0;
		splitDepth() = 0;
		}

	explicit ComputationPriority(uint64_t val)
		{
		prioritySource() = 0;
		priorityLevel() = val;
		treeDepth() = 0;
		splitDepth() = 0;
		}

	explicit ComputationPriority(Nullable<uint64_t> val, uint64_t depth)
		{
		prioritySource() = 0;
		priorityLevel() = val;
		treeDepth() = depth;
		splitDepth() = 0;
		}

	explicit ComputationPriority(uint64_t val, uint64_t depth)
		{
		prioritySource() = 0;
		priorityLevel() = val;
		treeDepth() = depth;
		splitDepth() = 0;
		}

	bool isCircular() const
		{
		return treeDepth() == std::numeric_limits<uint64_t>::max();
		}

	ComputationPriority makeCircular() const
		{
		return ComputationPriority(prioritySource(), priorityLevel(), std::numeric_limits<uint64_t>::max(), 0);
		}

	ComputationPriority withPrioritySource(uint64_t source) const
		{
		ComputationPriority tr = *this;

		tr.prioritySource() = source;

		return tr;
		}

	ComputationPriority priorityForDependentComputation() const
		{
		if (isCircular())
			return *this;

		if (priorityLevel())
			return ComputationPriority(prioritySource(), priorityLevel(), treeDepth() + 1, 0);

		return *this;
		}

	ComputationPriority priorityForSplitComputation(long depth) const
		{
		if (isCircular())
			return *this;

		if (priorityLevel())
			return ComputationPriority(prioritySource(), priorityLevel(), treeDepth(), depth);

		return *this;
		}

	bool isNull() const
		{
		return priorityLevel() ? false : true;
		}

	bool operator<(const ComputationPriority& inOther) const
		{
		if (prioritySource() < inOther.prioritySource())
			return true;

		if (prioritySource() > inOther.prioritySource())
			return false;

		if (!priorityLevel() && inOther.priorityLevel())
			return true;
		if (!priorityLevel() && !inOther.priorityLevel())
			return false;

		if (!inOther.priorityLevel())
			return false;

		if (*priorityLevel() < *inOther.priorityLevel())
			return true;

		if (*priorityLevel() > *inOther.priorityLevel())
			return false;

		//higher tree depth is _lower_ priority
		if (treeDepth() > inOther.treeDepth())
			return true;

		if (treeDepth() < inOther.treeDepth())
			return false;

		return splitDepth() > inOther.splitDepth();
		}

	bool isShallower(const ComputationPriority& inOther) const
		{
		if (prioritySource() < inOther.prioritySource())
			return true;

		if (prioritySource() > inOther.prioritySource())
			return false;

		if (!priorityLevel() && inOther.priorityLevel())
			return true;
		if (!priorityLevel() && !inOther.priorityLevel())
			return false;

		if (!inOther.priorityLevel())
			return false;

		if (*priorityLevel() < *inOther.priorityLevel())
			return true;

		if (*priorityLevel() > *inOther.priorityLevel())
			return false;

		return treeDepth() < inOther.treeDepth();
		}

	bool operator==(const ComputationPriority& inOther) const
		{
		return !(*this < inOther) && !(inOther < *this);
		}

	bool operator!=(const ComputationPriority& inOther) const
		{
		return (*this < inOther) || (inOther < *this);
		}
};

}

