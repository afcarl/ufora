/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/
#pragma once

#include <set>
#include "MachineId.hppml"
#include "LeaderQuorumMessage.hppml"
#include "../core/containers/MapWithIndex.hpp"
#include "../core/PolymorphicSharedPtr.hpp"
#include "../core/EventBroadcaster.hpp"
#include "../core/threading/CallbackScheduler.hppml"
#include "Regime.hppml"

namespace Cumulus {

class LeaderQuorum : public PolymorphicSharedPtrBase<LeaderQuorum> {
public:
	LeaderQuorum(const MachineId& inOwnMachine, PolymorphicSharedPtr<CallbackScheduler> inCallbackScheduler);

	//add a machine. This will fire a broadcast which should update that machine as well.
	void addMachine(const MachineId& inMachine);

	void dropMachine(const MachineId& inMachine);

	//trigger a regime change by bumping the event index
	void forceRegimeChange();

	void handleLeaderQuorumMessage(LeaderQuorumMessage inMessage);

	EventBroadcaster<LeaderQuorumMessage>& onLeaderQuorumMessage();

	EventBroadcaster<Nullable<Regime> >& onRegimeChanged();

	Nullable<Regime> currentRegime() const;

private:
	mutable boost::mutex mMutex;

	Nullable<Regime> currentRegime_() const;

	void checkTimestampAndBroadcast(double timestamp);

	hash_type curHash_() const;

	bool consensusExists_() const;

	void checkForNewConsensus();

	void broadcastCurrentState_();

	MachineId mOwnMachineId;

	std::set<MachineId> mMachines;

	std::set<MachineId> mMachinesEverSeen;

	std::map<MachineId, long> mMachineEventIds;

	MapWithIndex<MachineId, hash_type> mMachineSetHashes;

	EventBroadcaster<LeaderQuorumMessage> mOnLeaderQuorumMessage;

	EventBroadcaster<Nullable<Regime> > mOnRegimeChanged;

	bool mDoWeThinkWeAreTheLeader;

	Nullable<Regime> mLastBroadcastRegime;

	long mEventIndex;

	double mNextBroadcastTimestamp;

	PolymorphicSharedPtr<CallbackScheduler> mCallbackScheduler;
};


}

