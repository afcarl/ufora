/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/
#pragma once

#include "ComputationState.hppml"
#include "CumulusComponentMessageCreated.hppml"
#include "CumulusClientOrMachine.hppml"
#include "../FORA/VectorDataManager/VectorDataManager.hppml"
#include "PersistentCache/PersistentCacheIndex.hppml"
#include "../FORA/Core/ExecutionContextConfiguration.hppml"

namespace Cumulus {

class AddDropRecoveryCoordinatorImpl;

class AddDropFinalState;

/****************************

AddDropRecoveryCoordinator

A class used by Cumulus to coordinate rebuilding its state after a machine
has been added or dropped.

This class is implemented sychronously - you can think of it really as a part of Cumulus,
rather than a traditional "component", mostly because all the "components" are disabled.

*****************************/

class AddDropRecoveryCoordinator {
public:
	AddDropRecoveryCoordinator(
				PolymorphicSharedPtr<VectorDataManager> inVDM,
				boost::function1<void, CumulusComponentMessageCreated> inOnCumulusComponentMessageCreated,
				boost::function0<void> inOnAddDropExchangeComplete,
				boost::function0<void> inOnAllWorkersReadyToCompute,
				MachineId ownMachineId,
				hash_type inRegime,
				bool inIsTheLeader,
				Fora::Interpreter::ExecutionContextConfiguration inEcConfig,
				PolymorphicSharedPtr<CallbackScheduler> inCallbackScheduler
				);

	void addMachine(MachineId inMachine);

	void handleCumulusComponentMessage(
						CumulusComponentMessage message,
						CumulusClientOrMachine source,
						CumulusComponentType component
						);

	void handleLocalStateEvent(const CumulusWorkerAddDropEvent& inEvent);

	void allLocalStateIsProvided();

	const AddDropFinalState& getAddDropState() const;

	void setComputationStates(std::map<ComputationId, PolymorphicSharedPtr<ComputationState> >& states);

	const std::map<ComputationId, PolymorphicSharedPtr<ComputationState> >& getComputationStates();

	void clearComputationStates();

	const std::set<ComputationId>& computationsLostOnLocalMachine() const;

private:
	boost::shared_ptr<AddDropRecoveryCoordinatorImpl> mImpl;
};


}
