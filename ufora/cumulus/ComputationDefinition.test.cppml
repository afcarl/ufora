/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/
#include "ComputationDefinition.hppml"
#include "../FORA/Serialization/SerializedObjectFlattener.hpp"
#include "../core/UnitTest.hpp"
#include "../core/lassert.hpp"

using namespace Cumulus;

namespace {

ComputationDefinitionTerm chainTerm(int depth)
	{
	lassert(depth >= 0);

	if (depth == 0)
		return ComputationDefinitionTerm::Subcomputation(emptyTreeVec());

	ComputationDefinitionTerm sub = chainTerm(depth - 1);

	return ComputationDefinitionTerm::Subcomputation(
		emptyTreeVec() + sub + sub + sub + sub
		);
	}

ComputationDefinition chain(int depth)
	{
	return ComputationDefinition::Root(emptyTreeVec() + chainTerm(depth));
	}

uint64_t chainSerializedBytecount(int depth)
	{
	return SerializedObjectFlattener::serializeEntireObjectGraph(chain(depth))->totalByteCount();
	}

void checkSerializationIsOK(int depth)
	{
	ComputationDefinition def = chain(depth);
	ComputationDefinition def2;

	SerializedObjectInflater::deserializeEntireObjectGraph(
		SerializedObjectFlattener::serializeEntireObjectGraph(def),
		def2
		);

	lassert_dump(def.hash() == def2.hash(), "check failed for depth of " << depth);
	}

}


BOOST_AUTO_TEST_CASE( test_ComputationDefinitionSerializationSize )
	{
	//verify that bytecount is linear.
	BOOST_CHECK_EQUAL(
		chainSerializedBytecount(4) - chainSerializedBytecount(1),
		chainSerializedBytecount(7) - chainSerializedBytecount(4)
		);
	}

BOOST_AUTO_TEST_CASE( test_ComputationDefinitionSerializationWorks )
	{
	checkSerializationIsOK(0);
	checkSerializationIsOK(1);
	checkSerializationIsOK(2);
	checkSerializationIsOK(3);
	}

