/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/
#include "DataTransfers.hppml"
#include "DataTransfersKernel.hppml"
#include "../core/Logging.hpp"

namespace Cumulus {

typedef DataTransferTokenId DataTransferTokenId;

DataTransfers::DataTransfers(
				PolymorphicSharedPtr<CallbackScheduler> inScheduler,
				CumulusClientOrMachine inOwnEndpointId,
				boost::function1<void, DataTransferEvent> inDataTransferEventHandler,
				int64_t maxBytecountOutstanding
				) :
			mCallbackScheduler(inScheduler),
			mKernel(
				new DataTransfersKernel(
					inOwnEndpointId,
					maxBytecountOutstanding,
					boost::bind(
						&DataTransfers::callbackIsNotGoingToBeSent_,
						this,
						boost::arg<1>()
						),
					boost::bind(
						&DataTransfers::callbackSent_,
						this,
						boost::arg<1>()
						),
					boost::bind(
						&DataTransfers::triggerOnTokenReceived_,
						this,
						boost::arg<1>()
						)
					)
				),
			mCurTransferIdBase(1),
			mDataTransferEventHandler(inDataTransferEventHandler)
	{
	if (mDataTransferEventHandler)
		mDataTransferEventHandler(
			DataTransferEvent::Initialized(
				inOwnEndpointId,
				maxBytecountOutstanding
				)
			);
	}

void DataTransfers::triggerOnTokenReceived_(boost::function0<void> inCallback)
	{
	mCallbackScheduler->scheduleImmediately(inCallback, "DataTransfers::triggerOnTokenReceived_");
	}

void DataTransfers::callbackIsNotGoingToBeSent_(const DataTransfersQueuedCallback& callbackRecord)
	{
	if (mDataTransferEventHandler)
		mDataTransferEventHandler(
			DataTransferEvent::TransferAborted(callbackRecord.token())
			);

 	mCallbackScheduler->scheduleImmediately(
		callbackRecord.messageNotGoingToBeSent(),
		"callbackRecord.messageNotGoingToBeSent"
		);
	}

void DataTransfers::callbackSent_(const DataTransfersQueuedCallback& callbackRecord)
	{
	if (mDataTransferEventHandler)
		mDataTransferEventHandler(
			DataTransferEvent::TransferInitiated(callbackRecord.token())
			);

	mCallbackScheduler->scheduleImmediately(
		boost::bind(
			callbackRecord.messageSender(),
			polymorphicSharedPtrFromThis(),
			callbackRecord.token()
			),
		"callbackRecord.messageSender"
		);
	}

void DataTransfers::scheduleLargeMessage(
			boost::function2<void, PolymorphicSharedPtr<DataTransfers>, DataTransferTokenId> messageSender,
			boost::function0<void> onMessageCompleted,
			boost::function0<void> messageNotGoingToBeSent,
			CumulusClientOrMachine target,
			int64_t expectedByteSize,
			int64_t priority
			)
	{
	boost::mutex::scoped_lock lock(mMutex);

	DataTransfersQueuedCallback callback(
		target,
		messageSender,
		messageNotGoingToBeSent,
		onMessageCompleted,
		allocateTransferId_(target, expectedByteSize),
		priority
		);

	if (mDataTransferEventHandler)
		mDataTransferEventHandler(
			DataTransferEvent::CreateTransfer(callback.token(), expectedByteSize, target, priority)
			);

	mKernel->scheduleLargeMessage(callback);
	}

void DataTransfers::addEndpoint(CumulusClientOrMachine endpoint)
	{
	boost::mutex::scoped_lock lock(mMutex);

	if (mDataTransferEventHandler)
		mDataTransferEventHandler(
			DataTransferEvent::AddEndpoint(endpoint)
			);

	mKernel->addEndpoint(endpoint);
	}

void DataTransfers::dropEndpoint(CumulusClientOrMachine endpoint)
	{
	boost::mutex::scoped_lock lock(mMutex);

	if (mDataTransferEventHandler)
		mDataTransferEventHandler(
			DataTransferEvent::DropEndpoint(endpoint)
			);

	mKernel->dropEndpoint(endpoint);
	}

void DataTransfers::tokenReceived(DataTransferTokenId inTransferId)
	{
	boost::mutex::scoped_lock lock(mMutex);

	if (mDataTransferEventHandler)
		mDataTransferEventHandler(
			DataTransferEvent::TransferCompleted(inTransferId)
			);

	mKernel->tokenReceived(inTransferId);
	}

DataTransferTokenId DataTransfers::allocateTransferId_(
						CumulusClientOrMachine targetMachine,
						int64_t expectedByteSize
						)
	{
	DataTransferTokenId token(mCurTransferIdBase++, mKernel->getOwnEndpointId(), targetMachine);

	mKernel->allocateTransferId(token, expectedByteSize);

	return token;
	}

void DataTransfers::updateBytecount(DataTransferTokenId token, int64_t newBytecount)
	{
	boost::mutex::scoped_lock lock(mMutex);

	if (mDataTransferEventHandler)
		mDataTransferEventHandler(
			DataTransferEvent::TransferSizeUpdated(token, newBytecount)
			);

	mKernel->updateBytecount(token, newBytecount);
	}

int64_t DataTransfers::totalBytesOutstanding()
	{
	boost::mutex::scoped_lock lock(mMutex);

	return mKernel->totalBytesOutstanding();
	}

void DataTransfers::setThreshold(int64_t newByteThreshold)
	{
	boost::mutex::scoped_lock lock(mMutex);

	if (mDataTransferEventHandler)
		mDataTransferEventHandler(
			DataTransferEvent::ThresholdChanged(newByteThreshold)
			);

	mKernel->setThreshold(newByteThreshold);
	}

};

