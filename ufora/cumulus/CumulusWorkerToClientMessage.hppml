/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/
#pragma once

#include "RemotePageLoadResponse.hppml"
#include "ComputationResultFromMachine.hppml"
#include "ComputationStatusOnMachineChanged.hppml"
#include "../networking/OrderedMessage.hppml"
#include "../FORA/VectorDataManager/PageRefcountTracker.hppml"
#include "StripMessageOfLargeValues.hppml"
#include "RootComputationComputeStatusChanged.hppml"
#include "GlobalSchedulerToCumulusClientMessage.hppml"
#include "CumulusComponentMessage.hppml"
#include "CumulusComponentType.hppml"
#include "Regime.hppml"

namespace Cumulus {

@type CumulusWorkerToClientMessage =
	-|	RegimeChanged of Nullable<Regime> newRegime
	-|	ComputationResumed of hash_type regime
	-|	ComputationResult of ComputationResultFromMachine msg, hash_type regime
	-|	PageEvent of Fora::PageRefcountEvent event, hash_type regime
	-|  CrossComponent of
			CumulusComponentMessage message,
			ImmutableTreeSet<CumulusComponentType> targetComponents,
			CumulusComponentType sourceComponent,
			hash_type regime
with
	uint32_t priority = (this->computePriority())
{
public:
	Nullable<DataTransferTokenId> extractToken() const;

	Nullable<hash_type> regime() const;

private:
	uint32_t computePriority() const;
}
;

macro_defineCppmlComparisonOperators(CumulusWorkerToClientMessage);
macro_defineCppmlComparisonOperators(OrderedMessage<CumulusWorkerToClientMessage>);
}



