/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/
#pragma once

#include "SchedulerToActivePageSynchronizerMessage.hppml"
#include "ActivePageSynchronizerToSynchronizerMessage.hppml"
#include "RemotePageLoadRequest.hppml"
#include "RemotePageLoadResponse.hppml"
#include "ComputationMoveResponse.hppml"
#include "RequestComputationResultFromMachine.hppml"
#include "ComputationResultFromMachine.hppml"
#include "LeaderQuorumMessage.hppml"
#include "../networking/OrderedMessage.hppml"
#include "../FORA/VectorDataManager/PageRefcountTracker.hppml"
#include "CumulusWorkerAddDropEvent.hppml"
#include "DataTransfers.hppml"
#include "CumulusComponentMessage.hppml"
#include "CumulusComponentType.hppml"

namespace Cumulus {


@type CumulusWorkerToWorkerMessage =
	//low priority messages
	-| MoveResponse of ComputationMoveResponse msg, hash_type regime
	-| ComputationResultRequest of RequestComputationResultFromMachine msg, hash_type regime
	-| ComputationResultResponse of ComputationResultFromMachine msg, hash_type regime


	//high priority messages
	-| PageEvent of Fora::PageRefcountEvent event, hash_type regime
	-| TokenReceived of DataTransferTokenId token, hash_type regime
	-| InitializedWithNewRegime of hash_type regimeId
	-| LeaderQuorum of LeaderQuorumMessage message
	-| CrossComponent of
			CumulusComponentMessage message,
			ImmutableTreeSet<CumulusComponentType> targetComponents,
			CumulusComponentType sourceComponent,
			hash_type regime
with
	uint32_t priority = (this->computePriority())
{
public:
	Nullable<DataTransferTokenId> extractToken() const;

	Nullable<hash_type> currentRegime() const;

private:
	uint32_t computePriority() const;
}
;

macro_defineCppmlComparisonOperators(CumulusWorkerToWorkerMessage);
macro_defineCppmlComparisonOperators(OrderedMessage<CumulusWorkerToWorkerMessage>);
}



