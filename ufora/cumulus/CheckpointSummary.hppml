/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/
#pragma once

#include "../core/cppml/CPPMLEquality.hppml"
#include "../FORA/VectorDataManager/PageId.hppml"
#include "CheckpointFileSummary.hppml"

namespace Cumulus {

@type CheckpointSummary =
	ImmutableTreeMap<hash_type, CheckpointFileSummary> perFileSummaries,
	ImmutableTreeSet<hash_type> bigvecsReferenced,
	//these two fields summarize the page-bigvec graph that we touch
	ImmutableTreeMap<hash_type, ImmutableTreeSet<Fora::PageId> > bigvecsReferencedToPages,
	ImmutableTreeMap<Fora::PageId, ImmutableTreeSet<hash_type> > pagesReferencedToBigvecs,
	//total bytes in all subcomputations
	uint64_t totalBytes,
	double totalSecondsOfCompute,
	bool isRootComputationFinished,
	ImmutableTreeSet<hash_type> rootComputationsReferenced
{
public:
	bool isValid() const;

	ImmutableTreeSet<hash_type> filesReferenced() const
		{
		ImmutableTreeSet<hash_type> files;

		for (auto hashAndSummary: perFileSummaries())
			files = files + hashAndSummary.first;

		return files;
		}

	static CheckpointSummary merge(const CheckpointSummary& inLHS, const CheckpointSummary& inRHS)
		{
		CheckpointSummary result(
			inLHS.perFileSummaries() + inRHS.perFileSummaries(),
			inLHS.bigvecsReferenced() + inRHS.bigvecsReferenced(),
			inLHS.bigvecsReferencedToPages() + inRHS.bigvecsReferencedToPages(),
			inLHS.pagesReferencedToBigvecs() + inRHS.pagesReferencedToBigvecs(),
			inLHS.totalBytes() + inRHS.totalBytes(),
			inLHS.totalSecondsOfCompute() + inRHS.totalSecondsOfCompute(),
			inLHS.isRootComputationFinished() || inRHS.isRootComputationFinished(),
			inLHS.rootComputationsReferenced() + inRHS.rootComputationsReferenced()
			);

		//verify that the files describe are unique
		lassert(result.perFileSummaries().size() == inLHS.perFileSummaries().size() + inRHS.perFileSummaries().size());

		return result;
		}
};

}

