/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/
#pragma once

#include "DistributedDataTaskDefinition.hppml"
#include "../../FORA/TypedFora/ABI/ScatteredForaValues.hppml"
#include "../../FORA/Core/DataTasksMemoryPool.hppml"
#include "../../FORA/VectorDataManager/VectorDataManager.hppml"
#include "DataTaskMemoryFootprint.hppml"

class ImplValContainer;

namespace Cumulus {

/************************

Container class to store a set of message objects (as a vector of FORA values)
for use in DistributedDataTasks

*************************/

class DistributedDataTaskMessages {
public:
	DistributedDataTaskMessages(
				PolymorphicSharedPtr<VectorDataManager> inVDM
				);

	~DistributedDataTaskMessages();

	void writeMessages(TypedFora::Abi::ForaValueArray* inMessages);

	void writeMessagesWithIndices(TypedFora::Abi::ForaValueArray* inMessages, int64_t indexToAdd);

	void writeMessage(TypedFora::Abi::ForaValueArray* inMessages, int32_t index);

	void writeMessages(boost::function1<void, TypedFora::Abi::ForaValueArray*> callbackWithAppend);

	ImplValContainer importImplValContainer(ImplValContainer value);

	ImplValContainer exportImplValContainer(ImplValContainer value);

	ImplValContainer extractValue(int32_t index);

	TypedFora::Abi::ForaValueArray* getValues();

	//footprint is null if this is populated, unchanged otherwise
	PolymorphicSharedPtr<SerializedObject> extractSerializedStateAndBroadcastBigvecsInFlight(void);

	void acceptSerializedState(PolymorphicSharedPtr<SerializedObject> object);

	DataTaskMemoryFootprint currentMemoryFootprint();

	void sortLexicallyAndDropRightTupleElement();

	void sortLexically(bool dropRightTupleElement = false);

private:
	void reset();

	PolymorphicSharedPtr<VectorDataManager> mVDM;

	TypedFora::Abi::ForaValueArray* mValueArray;

	DataTasksMemoryPool* mMemoryPool;
};

}
