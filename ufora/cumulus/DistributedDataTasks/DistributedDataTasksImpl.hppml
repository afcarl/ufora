/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/
#pragma once

#include "../../FORA/VectorDataManager/VectorDataManager.hppml"
#include "../ExternalIoTask/ExternalIoTaskCompleted.hppml"
#include "../ExternalIoTask/ExternalIoTaskCreated.hppml"
#include "DistributedDataOperation.hppml"
#include "CrossDistributedDataTasksMessageCreated.hppml"
#include "DistributedDataTaskDefinition.hppml"
#include "../SystemwidePageRefcountTracker.hppml"
#include "../../FORA/TypedFora/ABI/BigVectorLayouts.hppml"
#include "MachineHashTable.hppml"
#include "DataTasksToGlobalSchedulerMessage.hppml"
#include "../SystemwideComputationScheduler/GlobalSchedulerToDataTasksMessage.hppml"
#include "MessagePipeline.hppml"
#include "../../core/math/Random.hpp"
#include "DataTaskGlobalScheduler.hppml"
#include "PlacePageInSortingQueueTask.hppml"

namespace Cumulus {

class DistributedDataTasksImpl : public PolymorphicSharedPtrBase<DistributedDataTasksImpl> {
public:
	DistributedDataTasksImpl(
				PolymorphicSharedPtr<CallbackScheduler> inCallbackScheduler,
				PolymorphicSharedPtr<VectorDataManager> inVDM,
				PolymorphicSharedPtr<SystemwidePageRefcountTracker> inSPRT,
				PolymorphicSharedPtr<OfflineCache> inOfflineCache,
				MachineId inOwnMachineId,
				int64_t inTaskThreadCount
				);

	~DistributedDataTasksImpl();

	void teardown();

	void addMachine(MachineId inMachineId);

	void handleNewTask(ExternalIoTaskId taskId, DistributedDataOperation dataOperation);

	void handleCrossDistributedDataTasksMessage(CrossDistributedDataTasksMessage msg);

	void broadcastMessageToAllMachines_(CrossDistributedDataTasksMessage msg, bool includeSelf);

	void onTaskFinished_(hash_type taskGuid, ImplValContainer finalResult, hash_type moveGuid);

	void handlePageEvent(pair<Fora::PageRefcountEvent, long> event);

	void polymorphicSharedPtrBaseInitialized();

	void onBroadcastDataTasksToGlobalSchedulerMessage_(
						DataTasksToGlobalSchedulerMessage message
						);

	void sendTaskSchedulerToGlobalSchedulerMessage_(DataTasksToGlobalSchedulerMessage msg);

	void handleMessagePipelineProducedSchedulerMessage(PipelineToSchedulerMessage msg);

	void handleGlobalSchedulerToDataTasksMessage(GlobalSchedulerToDataTasksMessage msg);

	void handleCrossPipelineMessageCreated(CrossPipelineMessageCreated created);

	void logState();

	void logLoop();

	void schedulePageToBePushedIntoPipeline_(hash_type guid, PlacePageInSortingQueueTask page);

	void sendSchedulerToPipelineMessage_(SchedulerToPipelineMessageCreated msg);

	void messagePipelineHeartbeat();

	void tryToQueuePageInPipeline_(hash_type taskId, PlacePageInSortingQueueTask page, MachineId sourceMachine);

	void cannotAcquireLockOnPage(hash_type task, PlacePageInSortingQueueTask page);

	void pageNotFoundInVDM_(hash_type task, PlacePageInSortingQueueTask page);

	void handleTaskCreatedOnLeader_(hash_type taskId, DistributedDataOperation op, MachineId origMachine);

	mutable boost::recursive_mutex mMutex;

	EventBroadcaster<CrossDistributedDataTasksMessageCreated> mOnCrossDistributedDataTasksMessage;

	EventBroadcaster<ExternalIoTaskCompleted> mOnExternalIoTaskCompleted;

	EventBroadcaster<DataTasksToGlobalSchedulerMessage> mOnDataTasksToGlobalSchedulerMessage;

	map<hash_type, std::vector<pair<hash_type, PlacePageInSortingQueueTask> > > mTaskPageRequestGuids;

	DataTaskGlobalScheduler mTasksGlobalScheduler;

	MapWithIndex<hash_type, MachineId> mTaskRoots;

	PolymorphicSharedPtr<CallbackScheduler> mMainScheduler;

	MachineId mOwnMachineId;

	PolymorphicSharedPtr<VectorDataManager> mVDM;

	PolymorphicSharedPtr<SystemwidePageRefcountTracker> mSPRT;

	PolymorphicSharedPtr<MessagePipeline> mMessagePipeline;

	std::vector<pair<hash_type, PlacePageInSortingQueueTask> > mPagesToPushIntoMessagePipeline;

	std::set<MachineId> mAllMachines;

	bool mIsTornDown;

	int64_t mTaskThreadCount;

	Ufora::math::Random::Uniform<float> mRandom;
};

}

