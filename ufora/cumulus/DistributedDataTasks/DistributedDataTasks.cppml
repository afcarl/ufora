/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/
#include "DistributedDataTasks.hppml"
#include "DistributedDataTasksImpl.hppml"

namespace Cumulus {

DistributedDataTasks::DistributedDataTasks(
				PolymorphicSharedPtr<CallbackScheduler> inCallbackScheduler,
				PolymorphicSharedPtr<VectorDataManager> inVDM,
				PolymorphicSharedPtr<SystemwidePageRefcountTracker> inSPRT,
				PolymorphicSharedPtr<OfflineCache> inOfflineCache,
				MachineId inOwnMachineId,
				int64_t inTaskThreadCount
				) :
		mImpl(
			new DistributedDataTasksImpl(
				inCallbackScheduler,
				inVDM,
				inSPRT,
				inOfflineCache,
				inOwnMachineId,
				inTaskThreadCount
				)
			)
	{
	}

void DistributedDataTasks::addMachine(MachineId inMachine)
	{
	mImpl->addMachine(inMachine);
	}

void DistributedDataTasks::teardown()
	{
	mImpl->teardown();
	}

void DistributedDataTasks::handleNewTask(ExternalIoTaskId taskId, DistributedDataOperation dataOperation)
	{
	mImpl->handleNewTask(taskId, dataOperation);
	}

void DistributedDataTasks::handleCrossDistributedDataTasksMessage(CrossDistributedDataTasksMessage msg)
	{
	mImpl->handleCrossDistributedDataTasksMessage(msg);
	}

void DistributedDataTasks::handleGlobalSchedulerToDataTasksMessage(GlobalSchedulerToDataTasksMessage msg)
	{
	mImpl->handleGlobalSchedulerToDataTasksMessage(msg);
	}

EventBroadcaster<DataTasksToGlobalSchedulerMessage>& DistributedDataTasks::onDataTasksToGlobalSchedulerMessage()
	{
	return mImpl->mOnDataTasksToGlobalSchedulerMessage;
	}

EventBroadcaster<CrossDistributedDataTasksMessageCreated>& DistributedDataTasks::onCrossDistributedDataTasksMessage()
	{
	return mImpl->mOnCrossDistributedDataTasksMessage;
	}

EventBroadcaster<ExternalIoTaskCompleted>& DistributedDataTasks::onExternalIoTaskCompleted()
	{
	return mImpl->mOnExternalIoTaskCompleted;
	}

}

