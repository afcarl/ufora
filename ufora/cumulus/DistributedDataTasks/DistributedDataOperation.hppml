/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/
#pragma once

#include "../../core/containers/ImmutableTreeVector.hppml"
#include "../../core/math/Hash.hpp"

class ImplValContainer;

namespace Cumulus {

@type DistributedDataOperation =
	/*****************************************************************
	given a big vector 'indices' and a vector 'elements', efficiently compute
		indices.apply(fun(value) {
			try {
				match(value) with
					({Integer} index) {
						elements[0][index]
						}
					(({Integer} vecIndex, {Integer} elementIndex)) {
						elements[vecIndex][elementIndex]
						}
				}
			catch(...)
				{
				nothing
				}
			})

	which is essentially equivalent to the numpy 'take' operation, but which
	allows for multiplexing
	***********************************************************************/
	-| Take of hash_type indices, ImmutableTreeVector<hash_type> elements
	/***********************************************************************
	Sort a vector according to the canonical FORA value ordering.
	************************************************************************/
	-| Sort of hash_type values
with
	hash_type hash = (hashCPPMLDirect(*this))
{
public:
	static Nullable<DistributedDataOperation>
					fromImplValContainer(const ImplValContainer& inRepresentation);
};

macro_defineCppmlComparisonOperators(DistributedDataOperation);

}

macro_defineMemberHashFunction(Cumulus::DistributedDataOperation);

template<>
class CPPMLEquality<Cumulus::DistributedDataOperation, void> {
public:
		static char cmp(
						const Cumulus::DistributedDataOperation& lhs,
						const Cumulus::DistributedDataOperation& rhs
						)
			{
			return lhs.hash().cmp(rhs.hash());
			}
};


