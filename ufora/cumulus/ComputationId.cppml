/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/
#include "ComputationId.hppml"
#include "ComputationDefinition.hppml"
#include "../core/math/RandomHashGenerator.hpp"
#include "../core/Clock.hpp"

namespace Cumulus {

Nullable<hash_type> ComputationId::computationHash() const
	{
	@match ComputationId(*this)
		-| Root(hash) ->> {
			return null() << hash;
			}
		-| _ ->> {
			return null();
			}
	}

ComputationId ComputationId::CreateIdForRootOnClient(
							const ComputationDefinition& inDefinition
							)
	{
	lassert(inDefinition.isRoot());

	return ComputationId::Root(inDefinition.hash());
	}

namespace {

ComputationId getRootId(ComputationId id)
	{
	@match ComputationId(id)
		-| Root() ->> {
			return id;
			}
		-| Split(parent) ->> {
			return parent;
			}
	}

long treeDepthOfId(ComputationId id)
	{
	@match ComputationId(id)
		-| Root() ->> {
			return 0;
			}
		-| Split(parent, _, treeDepth) ->> {
			return treeDepth;
			}
	}

std::string splitpathOfId(ComputationId id)
	{
	@match ComputationId(id)
		-| Root() ->> {
			return "";
			}
		-| Split(parent, _, _, splitpath) ->> {
			return splitpath;
			}
	}

}

hash_type ComputationId::guid() const
	{
	@match ComputationId(*this)
		-| Root(h) ->> {
			return h;
			}
		-| Split(_, g) ->> {
			return g;
			}
	}

ComputationId ComputationId::CreateIdForRootOnWorker(
							const ComputationDefinition& inDefinition,
							hash_type guid
							)
	{
	@match ComputationDefinition(inDefinition)
		-| Root() ->> {
			return ComputationId::Root(
				inDefinition.hash()
				);
			}
		-| _ ->> {
			lassert_dump(
				false,
				"Use CreateIdForSplit to create new computation ids for splits."
				);
			}
	}

ComputationId ComputationId::CreateIdForSplit(
							const ComputationDefinition& inDefinition,
							hash_type guid,
							int64_t splitCountWithinParent
							)
	{
	@match ComputationDefinition(inDefinition)
		-| Root() ->> {
			lassert_dump(
				false,
				"Use CreateIdForSplit to create new computation ids for splits."
				);
			}
		-| Split(parentId) ->> {
			return ComputationId::Split(
				getRootId(parentId),
				guid,
				treeDepthOfId(parentId) + 1,
				splitpathOfId(parentId) + "_" + boost::lexical_cast<std::string>(splitCountWithinParent)
				);
			}
		-| OutOfProcessCall(parentId) ->> {
			return ComputationId::Split(
				getRootId(parentId),
				guid,
				treeDepthOfId(parentId) + 1,
				splitpathOfId(parentId) + "_" + boost::lexical_cast<std::string>(splitCountWithinParent)
				);
			}
		-| GpuCall(parentId) ->> {
			return ComputationId::Split(
				getRootId(parentId),
				guid,
				treeDepthOfId(parentId) + 1,
				splitpathOfId(parentId) + "_" + boost::lexical_cast<std::string>(splitCountWithinParent)
				);
			}
	}

ComputationId ComputationId::CreateIdForTesting(hash_type hash)
	{
	return ComputationId::Root(hash);
	}

ComputationId ComputationId::rootComputation() const
	{
	@match ComputationId(*this)
		-| Root() ->> {
			return *this;
			}
		-| Split(root) ->> {
			return root;
			}
	}
};


