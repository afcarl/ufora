/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/
#include "ComputationStatusOnMachine.hppml"

namespace Cumulus {

bool ComputationStatusOnMachine::isActiveAndComputable() const
	{
	@match ComputationStatusOnMachine(*this)
		-| Active(ComputableWithSubcomputations()) ->> {
			return true;
			}
		-| _ ->> {
			return false;
			}
	}

bool ComputationStatusOnMachine::isActiveAndFinished() const
	{
	@match ComputationStatusOnMachine(*this)
		-| Active(Finished()) ->> {
			return true;
			}
		-| _ ->> {
			return false;
			}
	}

bool ComputationStatusOnMachine::equalExceptForStatistics(
								const ComputationStatusOnMachine& inOther
								) const
	{
	@match ComputationStatusOnMachine(*this)
		-| Active(status, stats) ->> {
			@match ComputationStatusOnMachine(inOther)
				-| Active(status2, stats) ->> {
					return status == status2;
					}
				-| _ ->> {
					return false;
					}
			}
		-| _ ->> {
			return *this == inOther;
			}
	}

Nullable<ComputationStatistics> ComputationStatusOnMachine::getStatistics() const
	{
	@match ComputationStatusOnMachine(*this)
		-| Active(_, stats) ->> {
			return null() << stats;
			}
		-| Moving(_,_,stats) ->> {
			return null() << stats;
			}
		-| ReceivedFrom(_,_,stats) ->> {
			return null() << stats;
			}
		-| _ ->> {
			return null();
			}
	}

namespace {

long getLevel(const ComputationStatusOnMachine& status)
	{
	@match ComputationStatusOnMachine(status)
		-| Active() ->> {
			return 3;
			}
		-| Moving() ->> {
			return 1;
			}
		-| ReceivedFrom() ->> {
			return 2;
			}
		-| Inactive() ->> {
			return 0;
			}
	}

}

bool ComputationStatusOnMachine::isFartherAheadThan(
													const ComputationStatusOnMachine& inOther
													) const
	{
	if (getStatistics() && inOther.getStatistics())
		{
		if (getStatistics()->isFartherAheadThan(*inOther.getStatistics()))
			return true;

		if (inOther.getStatistics()->isFartherAheadThan(*getStatistics()))
			return false;
		}

	if (getLevel(*this) > getLevel(inOther))
		return true;

	if (getLevel(*this) < getLevel(inOther))
		return false;

	return false;
	}

}
