/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/
#pragma once

#include "../../FORA/VectorDataManager/PageId.hppml"
#include "../../core/containers/ImmutableTreeSet.hppml"

/***********************

Neighborhood

A set of pages, tracked with a guid and a bytecount.

***********************/

namespace Cumulus {

namespace PageLayoutCalculator {

@type Neighborhood = ImmutableTreeSet<Fora::PageId> pages, hash_type guid, uint64_t bytecount {
public:
	Neighborhood(const Fora::PageId& inPage)
		{
		pages() = emptyTreeSet() + inPage;

		initialize();
		}

	Neighborhood(const ImmutableTreeSet<Fora::PageId>& inPages)
		{
		pages() = inPages;

		initialize();
		}

	bool completelyContains(const Neighborhood& other) const
		{
		if (other.bytecount() > bytecount())
			return false;

		for (auto page: other.pages())
			if (!pages().contains(page))
				return false;

		return true;
		}

	Neighborhood operator-(Fora::PageId other) const
		{
		return Neighborhood(pages() - other);
		}

	Neighborhood operator-(Neighborhood other) const
		{
		ImmutableTreeSet<Fora::PageId> res;

		if (pages().size() < other.pages().size())
			{
			for (auto p: pages())
				if (!other.pages().contains(p))
					res = res + p;
			}
		else
			{
			res = pages();
			for (auto p: other.pages())
				res = res - p;
			}

		return Neighborhood(res);
		}

	Neighborhood operator+(Fora::PageId other) const
		{
		return Neighborhood(pages() + other);
		}

	Neighborhood operator+(const Neighborhood& other) const
		{
		return Neighborhood(pages() + other.pages());
		}

	bool operator<(const Neighborhood& inOther) const
		{
		return guid() < inOther.guid();
		}

	bool operator==(const Neighborhood& inOther) const
		{
		return guid() == inOther.guid();
		}

	bool operator!=(const Neighborhood& inOther) const
		{
		return guid() != inOther.guid();
		}

	bool isEmpty() const
		{
		return pages().size() == 0;
		}

private:
	void initialize()
		{
		guid() = hashValue(pages());

		bytecount() = 0;

		for (auto page: pages())
			bytecount() += page.bytecount();
		}
};
}

}


namespace boost {

template<>
class hash<Cumulus::PageLayoutCalculator::Neighborhood> :
					public std::unary_function<Cumulus::PageLayoutCalculator::Neighborhood, std::size_t> {
public:
		std::size_t operator()(Cumulus::PageLayoutCalculator::Neighborhood const& in) const
			{
			return boost::hash<hash_type>()(in.guid());
			}
};

};

