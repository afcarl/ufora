/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/
#pragma once

#include "GenericCumulusComponentKernel.hppml"

/*****************************

PersistentCacheManager

Handles the state associated with loading a checkpointed computation from
the persistent store into a running Cumulus.

*****************************/

namespace Cumulus {

class PersistentCacheManager : public GenericCumulusComponentKernel {
public:
	PersistentCacheManager(
						PolymorphicSharedPtr<VectorDataManager> vdm
						);

	void handleCumulusComponentMessage(
					const CumulusComponentMessage& message,
					const CumulusClientOrMachine& source,
					const CumulusComponentType& componentType
					);

	void consumePageEvent(const Fora::PageRefcountEvent& inEvent, Cumulus::MachineId onMachineId);

	void initializeFromAddDropState(const AddDropFinalState& state);

private:
	void sendSchedulerToComputationMessage(SchedulerToComputationMessage msg);

	void sendTriggerGcMessage();

	void startGcCycle();

	void pushStateForward();

	void handleShouldCreateRootComputationQuery(ComputationId computation, MachineId machine);

	void triggerCheckpointLoad(CheckpointRequest checkpoint, bool isFinished);

	void broadcastShouldCreateComputation(ComputationId comp, MachineId machine, bool shouldCreate);

	void handleLiveCheckpointFinishedLoading(CheckpointRequest checkpoint, bool successfully);

	Nullable<pair<CheckpointRequest, bool> > getMostRecentCheckpointForComputation(ComputationId comp);

	std::map<CheckpointRequest, std::vector<std::pair<ComputationId, MachineId> > > mComputationsToCreateOnCheckpoint;

	std::set<CheckpointRequest> mTriggeredCheckpointLoads;

	std::set<CheckpointRequest> mCompletedCheckpointLoads;

	std::set<ComputationId> mUniqueRootComputationsSeen;

	std::set<PersistentCacheKey> mKeysToDelete;

	std::map<hash_type, PersistentCacheKey> mOutstandingKeyDeletions;

	std::set<std::string> mPathsToDelete;

	std::map<hash_type, std::string> mOutstandingPathDeletions;

	PolymorphicSharedPtr<VectorDataManager> mVDM;

	bool mIsCheckpointingPaused;

	bool mHasSentCheckpointingPauseMessage;

	bool mIsGcRunning;

	bool mIsGcScheduled;

	bool mHasStartedToDrop;

	bool mHasRequestedFileList;

	Nullable<hash_type> mOutstandingFileListRequestGuid;

	ImmutableTreeVector<std::string> mOutstandingObjectPaths;

	bool mNextGcIsCompletePurge;
};

}

