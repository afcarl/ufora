/***************************************************************************
    Copyright 2016 Ufora Inc.

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
****************************************************************************/

#include "OutOfProcessPythonTask.hppml"
#include "../FORA/Core/ValueDeepcopier.hppml"
#include "../FORA/python/PurePython/PythonBinaryStreamToImplval.hppml"
#include "../FORA/python/PurePython/PythonBinaryStreamFromImplval.hppml"
#include "../FORA/TypedFora/ABI/FindAllReachableVectorPages.hppml"

namespace Cumulus {

OutOfProcessPythonTask::OutOfProcessPythonTask(PolymorphicSharedPtr<VectorDataManager> inVDM) :
        mVDM(inVDM),
        mContext(new Fora::Interpreter::ExecutionContext(inVDM)),
        mStreamFailureEncountered(false)
    {
    }

OutOfProcessPythonTask::~OutOfProcessPythonTask()
    {
    clear();
    }

void OutOfProcessPythonTask::setTaskObject(const ImplValContainer& inIVC)
    {
    clear();

    ValueDeepcopierState state;

    ValueDeepcopier deepcopier(
        state,
        false,
        mContext->getMemoryPool(),
        false,
        false
        );

    mInputTaskObject = deepcopier.duplicate(inIVC);
    }

const Nullable<ImplValContainer>& OutOfProcessPythonTask::getTaskResult() const
    {
    return mTaskResult;
    }

//walk the object graph and find any pages we'll need in order to actually serialize
//all the data. If this set is empty, then all pages are mapped
ImmutableTreeSet<Fora::PageId> OutOfProcessPythonTask::walkAndMapAllInputPages()
    {
    TypedFora::Abi::FindAllReachableVectorPages reachable(mVDM, mContext->getMemoryPool());

    reachable.visit(*mInputTaskObject);

    return reachable.getMissedPages();
    }

void OutOfProcessPythonTask::clear()
    {
    mTaskResult = null();
    mInputTaskObject = null();
    
    if (mContext)
        mContext->teardown();
    
    mContext.reset(new Fora::Interpreter::ExecutionContext(mVDM));
    }

void OutOfProcessPythonTask::send(
                OBinaryStream& outStream, 
                ImplValContainer pyforaBuiltins,
                ImmutableTreeMap<string, string> pythonNameToPyforaName
                )
    {
    lassert(mInputTaskObject);

        {
        PolymorphicSharedPtr<Fora::PythonBinaryStreamFromImplval> converter(
            new Fora::PythonBinaryStreamFromImplval(
                mVDM,
                pyforaBuiltins,
                pythonNameToPyforaName
                )
            );

        int64_t id = converter->write(outStream, *mInputTaskObject);
        converter->writeTerminator(outStream);
        outStream.write(sizeof(id), &id);
        }
    
    clear();
    }

void OutOfProcessPythonTask::read(
                IBinaryStream& inStream, 
                ImplValContainer pyforaBuiltins,
                ImplValContainer inForaBuiltins,
                ImmutableTreeMap<string, string> pythonNameToPyforaName,
                boost::function<Fora::PythonParseResult (std::string)> pyAstParser
                )
    {
    clear();

    PolymorphicSharedPtr<Fora::PythonBinaryStreamToImplval> converter(
        new Fora::PythonBinaryStreamToImplval(
            mVDM,
            pyforaBuiltins,
            inForaBuiltins,
            pythonNameToPyforaName,
            pyAstParser
            )
        );

    converter->read(inStream);

    int64_t id;
    
    inStream.read(sizeof(id), &id);

    mTaskResult = converter->getObjectById(id);

    lassert_dump(mTaskResult, "object of id " << id << " not found in converter");
    }

}
