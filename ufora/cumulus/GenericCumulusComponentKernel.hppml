/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/
#pragma once

#include <boost/shared_ptr.hpp>
#include "../core/PolymorphicSharedPtr.hpp"
#include "../core/EventBroadcaster.hpp"

#include "CumulusComponentMessageCreated.hppml"
#include "CumulusClientOrMachine.hppml"
#include "AddDropFinalState.hppml"
#include "../core/math/RandomHashGenerator.hpp"

namespace Cumulus {

/*******************

Base class for single-threaded cumulus components.

********************/

class GenericCumulusComponentKernel {
public:
	GenericCumulusComponentKernel(
				CumulusComponentType inType
				) :
			mComponentType(inType),
			mIsTheLeader(false)
		{
		}

	virtual ~GenericCumulusComponentKernel() {};

	CumulusComponentType componentType()
		{
		return mComponentType;
		}

	void setOwnEndpoint(CumulusClientOrMachine endpoint, bool isTheLeader)
		{
		@match CumulusClientOrMachine(endpoint)
			-| Machine(m) ->> {
				mMachines.insert(m);
				}
			-| Client(c) ->> {
				mClients.insert(c);
				}

		mOwnEndpointId = endpoint;
		mIsTheLeader = isTheLeader;
		}

	void setMessageCallback(boost::function2<void, CumulusComponentMessageCreated, Nullable<double> > callback)
		{
		mSendCumulusComponentMessage = callback;
		}

	void addMachine(MachineId inMachine)
		{
		mMachines.insert(inMachine);
		addMachine_(inMachine);
		}

	void addCumulusClient(CumulusClientId id)
		{
		mClients.insert(id);
		addCumulusClient_(id);
		}

	void dropCumulusClient(CumulusClientId id)
		{
		mClients.erase(id);
		dropCumulusClient_(id);
		}

	virtual void consumePageEvent(const Fora::PageRefcountEvent& inEvent, Cumulus::MachineId onMachineId)
		{
		}

	virtual void pageNoLongerReferencedAcrossSystem(Fora::PageId page)
		{
		}

	virtual void initializeFromAddDropState(const AddDropFinalState& state)
		{
		}

	virtual void handleCumulusComponentMessage(
					const CumulusComponentMessage& message,
					const CumulusClientOrMachine& source,
					const CumulusComponentType& componentType
					) = 0;

protected:
	virtual void addMachine_(MachineId inMachine)
		{
		}

	virtual void addCumulusClient_(CumulusClientId id)
		{
		}

	virtual void dropCumulusClient_(CumulusClientId id)
		{
		}

	void sendCumulusComponentMessage(CumulusComponentMessageCreated msg)
		{
		mSendCumulusComponentMessage(msg, null());
		}

	void sendCumulusComponentMessageWithDelay(CumulusComponentMessageCreated msg, double delay)
		{
		mSendCumulusComponentMessage(msg, null() << delay);
		}

	hash_type generateRandomHash()
		{
		return mRandomHashGenerator.generateRandomHash();
		}

	std::set<MachineId> mMachines;

	std::set<CumulusClientId> mClients;

	CumulusComponentType mComponentType;

	CumulusClientOrMachine mOwnEndpointId;

	bool mIsTheLeader;

private:
	boost::function2<void, CumulusComponentMessageCreated, Nullable<double> > mSendCumulusComponentMessage;

	RandomHashGenerator mRandomHashGenerator;
};

}

