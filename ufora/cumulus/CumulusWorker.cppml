/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/
#include "CumulusWorker.hppml"
#include "CumulusWorkerImpl.hppml"
#include "../FORA/Core/ExecutionContextConfiguration.hppml"

#include <fstream>

namespace Cumulus {

CumulusWorker::CumulusWorker(
				PolymorphicSharedPtr<CallbackSchedulerFactory> inCallbackSchedulerFactory,
				PolymorphicSharedPtr<CallbackScheduler> inCallbackScheduler,
				CumulusWorkerConfiguration inWorkerConfiguration,
				PolymorphicSharedPtr<VectorDataManager> inVDM,
				PolymorphicSharedPtr<OfflineCache> inOfflineCache,
				boost::function1<void, CumulusWorkerEvent> inEventHandler
				) :
		mImpl(
			new CumulusWorkerImpl(
				inCallbackSchedulerFactory,
				inCallbackScheduler,
				inWorkerConfiguration,
				inVDM,
				inOfflineCache,
				inEventHandler
				)
			)
	{
	}

PolymorphicSharedPtr<CumulusWorkerImpl> CumulusWorker::getImplPtr()
	{
	boost::mutex::scoped_lock lock(mImplPtrMutex);

	return mImpl;
	}

void CumulusWorker::dumpStateToLog()
	{
	getImplPtr()->dumpStateToLog();
	}

void CumulusWorker::startComputations()
	{
	getImplPtr()->startComputations();
	}

void CumulusWorker::teardown()
	{
	getImplPtr()->teardown();

	boost::mutex::scoped_lock lock(mImplPtrMutex);
	mImpl.reset();
	}

void CumulusWorker::addMachine(
				MachineId machine,
				worker_to_worker_channel_ptr_type inChannel
				)
	{
	getImplPtr()->addMachine(machine, inChannel);
	}

void CumulusWorker::addCumulusClient(
				CumulusClientId client,
				worker_to_client_channel_ptr_type inChannel
				)
	{
	getImplPtr()->addCumulusClient(client, inChannel);
	}

void CumulusWorker::dropMachine(MachineId machine)
	{
	getImplPtr()->dropMachine(machine);
	}

void CumulusWorker::dropCumulusClient(CumulusClientId client)
	{
	getImplPtr()->dropCumulusClient(client);
	}

EventBroadcaster<PythonIoTaskRequest>& CumulusWorker::onPythonIoTaskRequest()
	{
	return getImplPtr()->mOnPythonIoTaskRequest;
	}

void CumulusWorker::handlePythonIoTaskResponse(PythonIoTaskResponse descriptor)
	{
	auto impl = getImplPtr();

	if (impl)
		impl->handlePythonIoTaskResponse(descriptor);
	}

bool CumulusWorker::hasEstablishedHandshakeWithExistingMachines()
	{
	return getImplPtr()->hasEstablishedHandshakeWithExistingMachines();
	}

long CumulusWorker::currentlyActiveWorkerThreads()
	{
	return getImplPtr()->currentlyActiveWorkerThreads();
	}

PolymorphicSharedPtr<SystemwidePageRefcountTracker>
CumulusWorker::getSystemwidePageRefcountTracker()
	{
	return getImplPtr()->mSystemwidePageRefcountTracker;
	}

PolymorphicSharedPtr<VectorDataManager>  CumulusWorker::getVDM()
	{
	return getImplPtr()->mVDM;
	}

PolymorphicSharedPtr<SystemwideComputationScheduler::LocalScheduler>
							CumulusWorker::getLocalScheduler()
	{
	return getImplPtr()->mLocalScheduler;
	}

PolymorphicSharedPtr<SystemwideComputationScheduler::GlobalScheduler>
							CumulusWorker::getGlobalScheduler()
	{
	return getImplPtr()->mGlobalScheduler;
	}

void CumulusWorker::triggerRegimeChange()
	{
	return getImplPtr()->triggerRegimeChange();
	}

Nullable<hash_type> CumulusWorker::currentRegimeHash()
	{
	return getImplPtr()->currentRegimeHash();
	}

}


