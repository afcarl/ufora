/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/
#include "PageLoader.hppml"
#include "PageLoaderImpl.hppml"
#include "../core/PolymorphicSharedPtrBinder.hpp"

using namespace PolymorphicSharedPtrBinder;

namespace Cumulus {



PageLoader::PageLoader(
				PolymorphicSharedPtr<VectorDataManager> inVDM,
				PolymorphicSharedPtr<DataTransfers> inLargeMessageThrottler,
				PolymorphicSharedPtr<SystemwidePageRefcountTracker> inSprt,
				PolymorphicSharedPtr<OfflineCache> inOfflineCache,
				CumulusClientOrMachine inOwnEndpointId,
				PolymorphicSharedPtr<CallbackScheduler> inCallbackScheduler
				) :
		mImpl(
			new PageLoaderImpl(
				inVDM,
				inLargeMessageThrottler,
				inSprt,
				inOfflineCache,
				inOwnEndpointId,
				inCallbackScheduler
				)
			)
	{
	}

void PageLoader::teardown()
	{
	mImpl->teardown();
	}

void PageLoader::addMachine(MachineId inMachine)
	{
	mImpl->addMachine(inMachine);
	}

void PageLoader::dropMachine(MachineId inMachine)
	{
	mImpl->dropMachine(inMachine);
	}

void PageLoader::addCumulusClient(CumulusClientId inClient)
	{
	mImpl->addCumulusClient(inClient);
	}

void PageLoader::dropCumulusClient(CumulusClientId inClient)
	{
	mImpl->dropCumulusClient(inClient);
	}

CumulusClientOrMachine PageLoader::getOwnEndpointId() const
	{
	return mImpl->getOwnEndpointId();
	}

EventBroadcaster<VectorLoadedResponse>& PageLoader::onVectorLoadedResponse()
	{
	return mImpl->mOnVectorLoadedResponse;
	}

void PageLoader::requestVectorLoad(VectorLoadRequest inPageId)
	{
	mImpl->requestVectorLoad(inPageId);
	}

void PageLoader::blockUntilCurrentBackgroundProcessesHaveCleared()
	{
	mImpl->blockUntilCurrentBackgroundProcessesHaveCleared();
	}

PolymorphicSharedPtr<SystemwidePageRefcountTracker> PageLoader::getSystemwidePageRefcountTracker()
	{
	return mImpl->mSystemwidePageRefcountTracker;
	}

void PageLoader::handleCumulusComponentMessage(
					const CumulusComponentMessage& message,
					const CumulusClientOrMachine& source,
					const CumulusComponentType& componentType
					)
	{
	mImpl->handleCumulusComponentMessage(message, source, componentType);
	}

EventBroadcaster<CumulusComponentMessageCreated>& PageLoader::onCumulusComponentMessageCreated()
	{
	return mImpl->mOnCumulusComponentMessageCreated;
	}

}

