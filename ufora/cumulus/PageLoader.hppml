/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/
#pragma once

#include <boost/shared_ptr.hpp>
#include "../core/PolymorphicSharedPtr.hpp"
#include "../core/EventBroadcaster.hpp"
#include "ComputationId.hppml"
#include "../FORA/VectorDataManager/OfflineCache.hpp"

#include "RemotePageLoadRequest.hppml"
#include "RemotePageLoadResponse.hppml"
#include "VectorLoadedResponse.hppml"
#include "VectorLoadRequest.hppml"
#include "VectorLoadRequest.hppml"

#include "ExternalIoTask/ExternalIoTaskCreated.hppml"
#include "ExternalIoTask/ExternalIoTaskCompleted.hppml"


#include "CumulusComponentMessageCreated.hppml"
#include "CumulusClientOrMachine.hppml"

class VectorDataManager;
class SystemwidePageRefcountTracker;

/*****************************

PageLoader

Services requests for data to be loaded into the VDM. Data may
reside on other machines, or in the disk cache.

*****************************/

namespace Cumulus {

class DataTransfers;

class PageLoaderImpl;

class PageLoader : public PolymorphicSharedPtrBase<PageLoader> {
public:
	PageLoader(
			PolymorphicSharedPtr<VectorDataManager> inVDM,
			PolymorphicSharedPtr<DataTransfers> inLargeMessageThrottler,
			PolymorphicSharedPtr<SystemwidePageRefcountTracker> inSprt,
			PolymorphicSharedPtr<OfflineCache> inOfflineCache,
			CumulusClientOrMachine ownEndpointId,
			PolymorphicSharedPtr<CallbackScheduler> inScheduler
			);

	void teardown();

	void addCumulusClient(CumulusClientId inClient);

	void dropCumulusClient(CumulusClientId inClient);

	void addMachine(MachineId inMachine);

	void dropMachine(MachineId inMachine);

	void handleCumulusComponentMessage(
					const CumulusComponentMessage& message,
					const CumulusClientOrMachine& source,
					const CumulusComponentType& componentType
					);

	CumulusClientOrMachine getOwnEndpointId() const;

	EventBroadcaster<VectorLoadedResponse>& onVectorLoadedResponse();

	EventBroadcaster<CumulusComponentMessageCreated>& onCumulusComponentMessageCreated();

	void requestVectorLoad(VectorLoadRequest inPageId);

	void blockUntilCurrentBackgroundProcessesHaveCleared();

	PolymorphicSharedPtr<SystemwidePageRefcountTracker> getSystemwidePageRefcountTracker();

private:
	PolymorphicSharedPtr<PageLoaderImpl> mImpl;
};

}

