/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/
#pragma once

#include "CumulusClientId.hppml"
#include "MachineId.hppml"

namespace Cumulus {

@type CumulusClientOrMachine =
	-|	Client of CumulusClientId client
	-|	Machine of MachineId machine
{
public:
	bool operator==(const CumulusClientId& inClient) const;
	bool operator==(const MachineId& inMachine) const;

	hash_type vdmHash() const;
};

macro_defineCppmlComparisonOperators(CumulusClientOrMachine);

inline hash_type CumulusClientOrMachine::vdmHash() const
	{
	@match CumulusClientOrMachine(*this)
		-| Client(c) ->> { return c.guid(); }
		-| Machine(m) ->> { return m.guid(); }
		;
	}

inline bool CumulusClientOrMachine::operator==(const CumulusClientId& inClient) const
	{
	@match CumulusClientOrMachine(*this)
		-| Client(c) ->> {
			return c == inClient;
			}
		-| _ ->> {
			return false;
			}
	}

inline bool CumulusClientOrMachine::operator==(const MachineId& inMachine) const
	{
	@match CumulusClientOrMachine(*this)
		-| Machine(m) ->> {
			return m == inMachine;
			}
		-| _ ->> {
			return false;
			}
	}

}


namespace boost {

template<>
class hash<Cumulus::CumulusClientOrMachine> :
				public std::unary_function<Cumulus::CumulusClientOrMachine, std::size_t> {
public:
		std::size_t operator()(Cumulus::CumulusClientOrMachine const& in) const;
};

};


