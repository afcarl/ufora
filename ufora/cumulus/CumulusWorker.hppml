/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/
#pragma once

#include <boost/shared_ptr.hpp>
#include <string>
#include "../core/PolymorphicSharedPtr.hpp"
#include "../networking/Channel.hpp"

#include "../FORA/VectorDataManager/VectorDataManager.hppml"
#include "../FORA/VectorDataManager/OfflineCache.hpp"

#include "CumulusWorkerConfiguration.hppml"
#include "CumulusClientId.hppml"
#include "WorkerThreadPool.hppml"
#include "CumulusClient.hppml"
#include "CumulusWorkerToWorkerMessage.hppml"
#include "PythonIoTaskResponse.hppml"
#include "PythonIoTaskRequest.hppml"
#include "CumulusWorkerEvent.hppml"

/*****************************

CumulusWorker

A single worker in the cumulus system.

*****************************/

class SystemwidePageRefcountTracker;

namespace Cumulus {

class CumulusWorkerImpl;

namespace SystemwideComputationScheduler {

class LocalScheduler;
class GlobalScheduler;

}

typedef PolymorphicSharedPtr<Channel<std::string, std::string> > unknown_channel_ptr_type;


typedef Channel<CumulusWorkerToWorkerMessage, CumulusWorkerToWorkerMessage>
																worker_to_worker_channel_type;


typedef PolymorphicSharedPtr<worker_to_worker_channel_type>	worker_to_worker_channel_ptr_type;


class CumulusWorker :
		public PolymorphicSharedPtrBase<CumulusWorker>,
		public InstanceCounter<CumulusWorker>
{
public:
	CumulusWorker(
			PolymorphicSharedPtr<CallbackSchedulerFactory> inCallbackSchedulerFactory,
			PolymorphicSharedPtr<CallbackScheduler> inCallbackScheduler,
			CumulusWorkerConfiguration inWorkerConfiguration,
			PolymorphicSharedPtr<VectorDataManager> inVDM,
			PolymorphicSharedPtr<OfflineCache> inOfflineCache,
			boost::function1<void, CumulusWorkerEvent> inEventHandler
			);

	void startComputations();

	void teardown();

	//add a machine. This channel will carry traffic between two CumulusWorker objects
	void addMachine(
			MachineId machine,
			worker_to_worker_channel_ptr_type inChannel
			);

	void dropMachine(
			MachineId machine
			);

	//add a machine. The other side of this channel should be connected to an CumulusClient
	//object
	void addCumulusClient(
			CumulusClientId client,
			worker_to_client_channel_ptr_type inChannel
			);

	void dropCumulusClient(
			CumulusClientId client
			);

	void dumpStateToLog();

	void triggerRegimeChange();

	Nullable<hash_type> currentRegimeHash();

	EventBroadcaster<PythonIoTaskRequest>& onPythonIoTaskRequest();

	void handlePythonIoTaskResponse(PythonIoTaskResponse descriptor);

	PolymorphicSharedPtr<SystemwidePageRefcountTracker> getSystemwidePageRefcountTracker();

	PolymorphicSharedPtr<SystemwideComputationScheduler::LocalScheduler> getLocalScheduler();

	PolymorphicSharedPtr<SystemwideComputationScheduler::GlobalScheduler> getGlobalScheduler();

	bool hasEstablishedHandshakeWithExistingMachines();

	long currentlyActiveWorkerThreads();

	PolymorphicSharedPtr<VectorDataManager> getVDM();

protected:
	boost::mutex mImplPtrMutex;

	PolymorphicSharedPtr<CumulusWorkerImpl> getImplPtr();

	PolymorphicSharedPtr<CumulusWorkerImpl> mImpl;
};

}

