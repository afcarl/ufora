/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/
#pragma once

#include "CumulusClientOrMachine.hppml"
#include "../core/PolymorphicSharedPtr.hpp"
#include "../core/threading/CallbackScheduler.hppml"
#include "../core/containers/MapWithIndex.hpp"
#include "../core/cppml/CPPMLPrettyPrinter.hppml"
#include "DataTransferTokenId.hppml"
#include "DataTransfersQueuedCallback.hppml"
#include "DataTransferEvent.hppml"
#include <deque>
#include <set>

namespace Cumulus {

/****************

DataTransfers

Implements a common mechanism across all services in a given CumulusWorker to prevent the worker
from sending too much data on the wire at once.  Clients are required to allocate a token
representing their desire to place a certain amount of data on the wire.  If enough space is
available, the message can be enqueued - if not, a callback must be scheduled.

Other workers receiving a message containing a token must send the token back to the original
worker that produced it. When that worker receives the message, any remaining callbacks may proceed.

*****************/

class DataTransfersKernel;

class DataTransfers : public PolymorphicSharedPtrBase<DataTransfers> {
public:
	DataTransfers(	PolymorphicSharedPtr<CallbackScheduler> inScheduler,
					CumulusClientOrMachine inOwnEndpointId,
					boost::function1<void, DataTransferEvent> inDataTransferEventHandler,
					int64_t maxBytecountOutstanding = 100 * 1024 * 1024
					);

	//schedule a message. 'messageSender' should actually fire the message off (including the
	//token) and should return the actual number of bytes that should be reserved for the message.
	void scheduleLargeMessage(
				boost::function2<void, PolymorphicSharedPtr<DataTransfers>, DataTransferTokenId> messageSender,
				boost::function0<void> messageTransferComplete,
				boost::function0<void> messageNotGoingToBeSent,
				CumulusClientOrMachine target,
				int64_t expectedByteSize,
				int64_t priority
				);

	//schedule a message. 'messageSender' should actually fire the message off (including the
	//token) and should return the actual number of bytes that should be reserved for the message.
	void scheduleLargeMessage(
				boost::function2<void, PolymorphicSharedPtr<DataTransfers>, DataTransferTokenId> messageSender,
				boost::function0<void> messageNotGoingToBeSent,
				CumulusClientOrMachine target,
				int64_t expectedByteSize,
				int64_t priority
				)
		{
		scheduleLargeMessage(
			messageSender,
			messageNotGoingToBeSent,
			[]() {},
			target,
			expectedByteSize,
			priority
			);
		}

	template<class T1, class T2>
	void scheduleLargeMessage(
				T1 messageSender,
				T2 messageNotGoingToBeSent,
				CumulusClientOrMachine target,
				int64_t expectedByteSize,
				int64_t priority
				)
		{
		scheduleLargeMessage(
			boost::function2<void, PolymorphicSharedPtr<DataTransfers>, DataTransferTokenId>(messageSender),
			boost::function0<void>(messageNotGoingToBeSent),
			target,
			expectedByteSize,
			priority
			);
		}

	void addEndpoint(CumulusClientOrMachine endpoint);

	void dropEndpoint(CumulusClientOrMachine endpoint);

	void tokenReceived(DataTransferTokenId inTransferId);

	int64_t totalBytesOutstanding();

	void updateBytecount(DataTransferTokenId token, int64_t newBytecount);

	void setThreshold(int64_t newByteThreshold);

private:
	void triggerOnTokenReceived_(boost::function0<void> inCallback);

	void callbackIsNotGoingToBeSent_(const DataTransfersQueuedCallback& callbackRecord);

	void callbackSent_(const DataTransfersQueuedCallback& callbackRecord);

	DataTransferTokenId allocateTransferId_(CumulusClientOrMachine targetMachine, int64_t expectedByteSize);

	void removeTransferId_(DataTransferTokenId token);

	void sendIfAppropriate_();

	boost::mutex mMutex;

	boost::function1<void, DataTransferEvent> mDataTransferEventHandler;

	boost::shared_ptr<DataTransfersKernel> mKernel;

	int64_t mCurTransferIdBase;

	PolymorphicSharedPtr<CallbackScheduler> mCallbackScheduler;
};

}


