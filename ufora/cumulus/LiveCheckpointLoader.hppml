/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/
#pragma once

#include "GenericCumulusComponentKernel.hppml"

/*****************************

LiveCheckpointLoader

Handles the state associated with loading a checkpointed computation from
the persistent store into a running Cumulus.

*****************************/

namespace Cumulus {

class LiveCheckpointLoader : public GenericCumulusComponentKernel {
public:
	LiveCheckpointLoader(
						PolymorphicSharedPtr<VectorDataManager> vdm
						) :
			GenericCumulusComponentKernel(
				CumulusComponentType::LiveCheckpointLoader()
				),
			mVDM(vdm)
		{
		}

	void handleCumulusComponentMessage(
					const CumulusComponentMessage& message,
					const CumulusClientOrMachine& source,
					const CumulusComponentType& componentType
					);

	void consumePageEvent(const Fora::PageRefcountEvent& inEvent, Cumulus::MachineId onMachineId);

	void initializeFromAddDropState(const AddDropFinalState& state);

private:
	void loadFromSummary(const CheckpointRequest& checkpoint, const CheckpointSummary& summary);

	void handleLoadCheckpointFileIntoMemory(CheckpointRequest checkpoint, hash_type filename);

	void handleCheckpointFileContents(
						CheckpointRequest checkpoint,
						hash_type filename,
						const std::map<ComputationId, PolymorphicSharedPtr<SerializedObject> >& states
						);

	void handleCheckpointFileLoaded(CheckpointRequest checkpoint, hash_type filename);

	void handleComputationMoveResponse(ComputationMoveResponse moveResponse);

	void handleCheckpointLocationsCalculated(
									CheckpointRequest checkpoint,
									ImmutableTreeMap<ComputationId, MachineId> locations
									);

	void handleSendComputationsToActiveComputations(CheckpointRequest checkpoint, ImmutableTreeSet<ComputationId> computations, bool areTheseTheLeafComputations);

	void handleComputationsSentToActiveMachines(CheckpointRequest checkpoint, MachineId machine, bool areTheseTheLeafComputations);

	void handleCheckpointLoadCompleted(CheckpointRequest checkpoint);

	void handleBigvecDefinition(CheckpointRequest checkpoint, TypedFora::Abi::BigVectorPageLayout layout);

	void triggerCheckpointLoadingIfPossible(CheckpointRequest checkpoint);

	ImmutableTreeSet<Fora::BigVectorId> bigvecHashesToIds(ImmutableTreeSet<hash_type> hashes);

	void sendBigvecsForCheckpoint(CheckpointRequest checkpoint, MachineId machine);

	void handleBigvecsForCheckpoint(CheckpointRequest checkpoint, ImmutableTreeSet<hash_type> bigvecs, hash_type moveGuid);

	void sendLeafComputationsToMachinesIfNecessary(CheckpointRequest checkpoint);

	void completeCheckpointIfPossible(CheckpointRequest checkpoint);

	map<MachineId, Fora::MemoryUsage> mMachineMemoryUsage;

	PolymorphicSharedPtr<VectorDataManager> mVDM;

	map<hash_type, CheckpointRequest> mGuidToCheckpoint;

	map<hash_type, pair<CheckpointRequest, hash_type> > mGuidToCheckpointFile;

	MapWithIndex<ComputationId, pair<CheckpointRequest, bool> > mComputationsSentToActiveMachines;

	MapWithIndex<hash_type, CheckpointRequest> mPendingBigvecDefinitionsForCheckpoint;

	MapWithIndex<hash_type, hash_type> mPendingBigvecDefinitionGuids;

	map<CheckpointRequest, CheckpointSummary> mInProgressCheckpointSummaries;

	std::set<CheckpointRequest> mCheckpointMachineLeafComputationsSent;

	map<CheckpointRequest, map<hash_type, Fora::BigVectorId> > mCheckpointBigvecIds;

	map<CheckpointRequest, map<hash_type, MachineId> > mInProgressCheckpointFiles;

	map<CheckpointRequest, map<hash_type, MachineId> > mLoadedCheckpointFiles;

	map<CheckpointRequest, std::map<MachineId, std::set<ComputationId> > > mCheckpointMachineNonleafComputations;

	map<CheckpointRequest, std::map<MachineId, std::set<ComputationId> > > mCheckpointMachineLeafComputations;

	map<CheckpointRequest, ImmutableTreeSet<hash_type> > mBigvecHashesToDecrefOnCompletion;

	std::map<CheckpointRequest, std::map<ComputationId, PolymorphicSharedPtr<SerializedObject> > >
				mPendingComputationStates;

	std::map<CheckpointRequest, std::map<ComputationId, MachineId> >
				mPendingComputationParentMachineIds;
};

}

