/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/
#pragma once

#include "../core/PolymorphicSharedPtr.hpp"
#include "../core/containers/TwoWaySetMap.hpp"
#include "../FORA/VectorDataManager/PageRefcountEvent.hppml"

#include "MachineId.hppml"

/*********************
PagesOnMachines

Single-threaded class to track what pages are on what machines.
**********************/

class PagesOnMachines {
public:
	PagesOnMachines();

	void consumePageEvent(const Fora::PageRefcountEvent& inEvent, Cumulus::MachineId onMachineId);

	bool pageIsInRam(const Fora::PageId& inPageId, const Cumulus::MachineId& inMachineId);

	bool pageIsInRamAndPinned(const Fora::PageId& inPageId, const Cumulus::MachineId& inMachineId);

	bool pageIsOnDisk(const Fora::PageId& inPageId, const Cumulus::MachineId& inMachineId);

	void addMachine(const Cumulus::MachineId& inMachineId);

	void dropMachine(const Cumulus::MachineId& inMachineId);

	bool hasMachine(const Cumulus::MachineId& inMachineId) const
		{
		return mMachineIdSet.find(inMachineId) != mMachineIdSet.end();
		}

	const std::set<Cumulus::MachineId>& getMachinesHoldingPageInRam(Fora::PageId page) const;

	bool isExecutionBlockedOnMachine(const Cumulus::MachineId& inMachineId);

	bool isMachineMemoryFull(const Cumulus::MachineId& inMachineId);

	Fora::MemoryUsage getMachineMemoryUsage(const Cumulus::MachineId& inMachine);

	int32_t getMachineCount();

	bool isPageAnywhereOnDisk(const Fora::PageId& inPageId);

	bool isPageAnywhereInRam(const Fora::PageId& inPageId);

	const std::set<Fora::PageId>& getPagesOnlyInRam() const;

	const std::set<Fora::PageId>& getPagesOnlyOnDisk() const;

	const std::set<Fora::PageId>& getPagesInRam() const;

	const std::set<Fora::PageId>& getPagesOnDisk() const;

	const std::map<Cumulus::MachineId, int64_t>& getMachineToBytesOnDisk() const;

	const std::map<Cumulus::MachineId, int64_t>& getMachineToBytesInRam() const;

	void machinesWithPageInRam(const Fora::PageId& inPageId, std::set<Cumulus::MachineId>& outMachineIds);

	void machinesWithPageInRamAndPinned(const Fora::PageId& inPageId, std::set<Cumulus::MachineId>& outMachineIds);

	void machinesWithPageOnDisk(const Fora::PageId& inPageId, std::set<Cumulus::MachineId>& outMachineIds);

	void machineRamContents(const Cumulus::MachineId& inId, std::set<Fora::PageId>& outPages);

	void getAllPages(std::set<Fora::PageId>& outPages);

	const std::set<Cumulus::MachineId>& getAllMachineIds() const;

	bool hasPageBeenDroppedAcrossEntireSystem(Fora::PageId inPage);

	bool doesPageAppearDroppedAcrossSystem(Fora::PageId inPage);

	void markInternalPageDropped(Fora::PageId page);

	bool isPageNotLoadable(Fora::PageId pageId);

	Nullable<ImmutableTreeSet<Fora::BigVectorId> > bigvecsReferencedByPage(Fora::PageId page);

	bool isBigvecReferencedByPage(Fora::BigVectorId page) const;

private:
	void decrementPhysicalInstantiations(const Fora::PageId& page);

	void incrementPhysicalInstantiations(const Fora::PageId& page);

	std::map<Cumulus::MachineId, int64_t> mMachineToBytesOnDisk;

	std::map<Cumulus::MachineId, int64_t> mMachineToBytesInRam;

	std::set<Cumulus::MachineId> mMachineIdSet;

	long mTotalPagesAllocated;

	std::set<Fora::PageId> mAllPagesInRam;

	std::set<Fora::PageId> mAllPagesOnDisk;

	std::set<Fora::PageId> mAllPagesOnlyInRam;

	std::set<Fora::PageId> mAllPagesOnlyOnDisk;

	TwoWaySetMap<Fora::PageId, Cumulus::MachineId> mPagesInRam;

	TwoWaySetMap<Fora::PageId, Cumulus::MachineId> mPagesPinned;

	TwoWaySetMap<Fora::PageId, Cumulus::MachineId> mPagesOnDisk;

	std::set<Cumulus::MachineId> mMachinesWhereExecutionIsBlocked;

	std::map<Cumulus::MachineId, Fora::MemoryUsage> mMachineMemoryUsage;

	std::set<Fora::PageId> mDroppedInternalPages;

	std::set<Fora::PageId> mPagesMarkedNotLoadable;

	std::map<Fora::PageId, ImmutableTreeSet<Fora::BigVectorId> > mPageBigvecs;

	TwoWaySetMap<Fora::PageId, Fora::BigVectorId> mPageBigvecSetMap;

	Nullable<Cumulus::MachineId> mMachineId;
};

