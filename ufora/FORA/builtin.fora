/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/
#Markdown("""
## builtin.fora

#### Description

This is the Fora `builtin` module.
""");

all:
#Markdown("""
#### Usage

    all(iterable)

#### Description

Returns `true` if all elements of the iterable `iterable` are true. 
If the iterable is empty, returns `true`.

#### Examples

    all((1,2,3,4)) is true
    all([false, true]) is false

""")
fun(iterable) {
    for val in iterable {
        if (not val)
            return false
        }
    true
    };

any:
#Markdown("""
#### Usage

    any(iterable)

#### Description

Returns `true` if any elements of the iterable `iterable` is true. 
If the iterable is empty, returns `false`.

#### Examples

    any((false,1,2,3,4)) is true
    any([false, nothing, []]) is false

""")
fun(iterable) {
    for elt in iterable {
        if (elt) return true;
        }
    false
    };

identity:
#Markdown("""
#### Usage

    identity(x)

#### Description

The identity function, which satisfies `identity(x) is x`.

Equivalent to:

    fun(x) { x }
""")
fun(x) { x };

eval:
#Markdown("""
#### Usage

    eval(foraCodeString)

#### Description

Evaluates the given string as Fora code.
""")
fun(str) { `Function(str)() };

repr:
#Markdown("""
#### Usage

    repr(obj)
    repr(obj, varBindingDict)

#### Description

Computes a parsable representation of the given object.

The result is a string containing valid Fora code that evaluates to (a copy of) the same object.

For "most" FORA objects, x, 

    eval(repr(x)) is x

holds. There are certain exceptions, including vectors.

The second form of `repr` takes a dictionary mapping symbols to values and
blocks the printing of those variables/values where they are bound in the
surrounding lexical context.
""")
fun
    (obj)      { `ParsableRepresentation(obj) }
    (obj, dict) { `ParsableRepresentation(obj, dict) }
    ;

iterator:
#Markdown("""
#### Usage

    iterator(iterable)

#### Description

Returns the iterator of the given iterable object.

Note that iterators are themselves considered iterables; they have themselves as iterators.
""")
fun (iterable) { iterable`(`Iter) };

hasNext:
#Markdown("""
#### Usage

    hasNext(iterator)
    hasNext(iterator, continuationArgument)

#### Description

States whether the given iterator has another element to yield.
""")
fun(it, contArg = nothing) {
    it`(`Next, contArg) is not nothing
    };

getNext:
#Markdown("""
#### Usage

    getNext(iterator)
    getNext(iterator, continuationArgument)

Returns the 'next' value for a given iterator, or throws an exception.
""")
fun(it, contArg = nothing)

{
    let res = it`(`Next, contArg);

    if (res is nothing)
        throw "iterator was empty"
    return res[0]
    };

getMember:
#Markdown("""
#### Usage

    getMember(obj, memberNameSymbol)
    getMember(obj, memberNameString)

#### Description

Performs member selection on the given object, returning the value of the
member whose name is that specified. Similar to Python's `getattr`.

#### Examples

The following expressions have the same result:

    person.age
    getMember(person, `age)
    getMember(person, 'age')

""")
fun
    (obj, {String} name) { obj`(`Member, `StringToSymbol(name)) }
    (obj, {Symbol} name) { obj`(`Member, name) }
    ; 


`hidden chunk: fun(*args) { `CreateChunk(args) };

`hidden
sumRec: {
    let s = fun(a,b,f = fun(z){z}) {
        if (a >= b)
            return nothing;
            
        if (a + 1 >= b)
            return f(a);
            
        if (a + 2 >= b)
            return f(a) + f(a+1);
            
        let mid = a + Int64((a+b)/2 - a);
        
        return s(a, mid, f) + s(mid,b,f)
        };
    s
    };

range:
#Markdown("""
#### Usage

    range(ct)
    range(ct, f)

#### Description

Create a vector with a given range

Returns a vector of `ct` elements with `f` applied to the integers from zero to `ct - 1`. The identity function is used if `f` is not given, resulting in a vector of the integers from zero to `ct - 1`.
not given

#### Arguments

* `ct` -- Integer. The number of elements in the returned vector.
* `f` -- Function (optional). A function applied to each element of the vector.

#### Return Value

The return value type depends on `f`. By default, `f` is the identity function, so the return value will be a vector of integers. Otherwise, the return type of `f` determines the type of elements in the returned vector.

#### Example

    range(5) -> [0, 1, 2, 3, 4, 5]
    range(5, fun(x) { x**2 }) -> [0, 1, 4, 9, 16]
""")
fun(ct, f = identity)
    {
    return Vector.range(ct, f)
    };

sum:
#Markdown("""
#### Usage

    sum(start, stop)
    sum(start, stop, f)

#### Description

Sum a range of numbers.

Returns the sum of the numbers between `start` and `stop` (counting by 1) with `f` applied to each
one, if given. If extra parallel resources are available, they will be used. As a result, this
function should only be used when the + operator is associative.

#### Arguments

* `start` -- Integer or Float. The lower bound (inclusive) of the range to sum.
* `stop` -- Integer or Float. The upper bound (exclusive) of the range to sum.
* `f` -- Function (optional). A function applied to each element of the range. The result is summed.

#### Return Value

The return value type depends on `f`. By default, `f` is the identity function, so the return value
will match the type of `start`. Otherwise, the return type of `f` will determine the return value
of the result of the application of `f`.

#### Example

    sum(1, 10**9) -> 499999999500000000
    sum(1.0, 10.0, fun(x){x / 3.0}) -> 15.0
    sum(0, 10, String) -> "0123456789"
""")
fun(a, b, f = identity, add = fun(x,y){x+y}, depth = 0)
    {
    if (a >= b)
        return nothing
    if (a+1 >= b)
        return f(a)

    if (depth > 10)
        {
        let res = nothing;
        
        while (a < b)
            {
            res = add(res, f(a))
            a = a + `TypeJOV(a)(1)
            }

        return res
        }

    let mid = `TypeJOV(a)(Int64((a+b)/2));
    
    return add(sum(a,mid,f,add,depth+1),sum(mid,b,f,add,depth+1))
    }
(filters.IsVector(...) vec, f=identity) {
    vec.sum(f)
    }
(VectorContainer(vector) v, f=identity) {
    vector.sum(f)
    };

flatten:
#Markdown("""
#### Usage

    flatten(v)

#### Description

Given an interator of iterators (or a vector of vectors) flatten one level.

#### Arguments

* `v` -- Vector. Containing vectors or tuples.

#### Return Value

Vector with the same elements as the original Vector `v`, flattened one level.

#### Examples

    flatten([[1, 2, 3], [4, 5, 6]]) == [1, 2, 3, 4, 5, 6]

""")
fun(v)
    {
    [x for x in y for y in v]
    }
;

sequence:
#Markdown("""
#### Usage

    sequence(start, stop, step)
    sequence(start, stop)
    sequence(stop)
    sequence()

#### Description

Produces an iterator that counts by `step` over the range `[start, stop)`.

`sequence` behaves much like the `range()` function in Python. It's typical usage is for
for-loops.

#### Arguments

* `start` -- Integer or Float. The starting value. To iterate over the interval [start, stop).
* `stop` -- Integer or Float. To iterate over the interval [start, stop) or when alone, [0, stop).
* `step` -- Integer or Float. The value used to increment through the interval. Defaults to 1.

When no arguments are given, `sequence` produces an infinite iterator over the non-negative integers.

#### Return Value

Iterator.

#### Examples

`sequence` is the most basic way to count through a loop:

    let tr = ()
    for i in sequence(10)
        {
        tr = tr + (i,)
        }
    tr
""")
fun (start, stop, step)
    {
    while (start < stop) {
        yield start
        start = start + step
        }
    }
(start, stop)
    { 
    sequence(start, stop, 1)
    }
(top)
    {
    sequence( `TypeJOV(top)(0 + 0), top, `TypeJOV(top)(1))
    }
(range: (low, high), samples: ct)
    { 
    let stepSize = (high - low) / (ct - 1);
    sequence(low, high + stepSize / 2, stepSize) 
    }
() {
    let ix = 0;
    while (true) {
        yield ix
        ix = ix+ 1
        }
    }
;

// Plotting aliases

linePlot: plot.linePlot;
scatterPlot: plot.scatterPlot;
histogram: plot.histogram;
surfacePlot: plot.surfacePlot;
barPlot: plot.barPlot;

`hidden
minMaxFunc: 
"""min(val)

Iterates to find the minimum value. Val should support a GetItem operation.
"""
fun(vals, isMax=false)
    {
    let tr = vals[0]; 
    let cmp = if (isMax) fun(a, b) { a >>> b } else fun(a, b) { a <<< b };

    let numValues = size(vals);

    for ix in sequence(1, numValues)
        {
        tr = cmp(tr, vals[ix])
        }
    
    tr
    };

min:
#Markdown("""
#### Usage

    min(arg0, arg1, *args)
    min(x)

#### Description

Calculates the minimum value of a given set of arguments, or of those contained 
in an iterable object `x`.

`min` (and `max`) works for collections containing elements having comparison operators `>>>` and
`<<<` defined.

#### Arguments

* `*args` -- Floats or Ints. Given as a set of arguments to the function.

* `x` -- Tuple or Vector.

#### Return Value

Matches the type of the minimum value.

#### Examples

    min(1, 2, 3) is 1
    min((1, 2, 3)) is 1
    min([1, 2, 3]) is 1
""")
fun 
(arg0, arg1, *args)
    {
    minMaxFunc((arg0, arg1) + args, false)
    }
(otherwise)
    {
    minMaxFunc(otherwise, false)
    }
    ;

max:
#Markdown("""
#### Usage

    max(*args)
    max(x)

#### Description

Calculates the maximum value of a given set of arguments, or of those contained 
in an iterable object `x`.

`max` (and `min`) works for collections containing elements having comparison operators `>>>` and
`<<<` defined.

#### Arguments

    *args - Floats or Ints. Given as a set of arguments to the function.
    x - Tuple or Vector.

#### Return Value

Matches the type of the maximum value.

#### Examples

    max(1, 2, 3) is 3
    max((1, 2, 3)) is 3
    max([1, 2, 3]) is 3
""")
fun 
(arg0, arg1, *args)
    {
    minMaxFunc((arg0, arg1) + args, true)
    }
(otherwise)
    {
    minMaxFunc(otherwise, true)
    }
    ;

sort: sorting.sort;

argmax:
#Markdown("""
#### Usage

    argmax(vec)

#### Description

Compute an index of a largest element of `vec`.
""")
fun(vec)
    {
    let curMax = vec[0];
    let curMaxIx = 0;

    for ix in sequence(size(vec))
        {
        if (vec[ix] > curMax)
            {
            curMax = vec[ix]
            curMaxIx = ix
            }
        }

    return curMaxIx
    };

argmin:
#Markdown("""
#### Usage

    argmin(vec)

#### Description

Compute an index of a smallest element of `vec`.
""")
fun(vec)
    {
    let curMin = vec[0];
    let curMinIx = 0;

    for ix in sequence(size(vec))
        {
        if (vec[ix] < curMin)
            {
            curMin = vec[ix]
            curMinIx = ix
            }
        }

    return curMinIx
    };


classOf:
#Markdown("""
#### Usage

    classOf(x)
    
#### Description
    
Return the class object that created a given instance.

#### Arguments

    x - A Fora instance.

#### Return Value

The class object that is the parent class if the given object.

#### Examples

    let C =
    class
        {
        member x;
        member y:
        s: x + y;
        };
    let instanceOfC = C(1, 2);
    classOf(instanceOfC) -> <eval>.C
""")
fun (x)
    { 
    x`(`Class)
    };

`hidden
createInstance:
#Markdown("""
#### Usage

createInstance(cls, *args)

#### Description

Create an instance of `cls`.
""")
fun(cls, *args)
    { 
    cls `( `CreateInstance, *args )
    };


`hidden
Plottable:
class {};

`hidden
Streamable:
class {
    static operator filter (dataframe.Support.IsVectorOfTuples(v)) {
        (streaming.VectorOfTuplesStream(v),)
        };
};

`hidden getStream: fun(Streamable(s)) { s };
`hidden isStreamable: fun(Streamable(s)) {true} (...) {false};

`hidden
Stream: class {
    streamType: (
        throw "Base class is reached. Must override."
        );
    
    operator match (builtin.Visualizable) { ("Stream for: %s".format(self.streamType),) };
    
    operator match(Stream _) { () };
    };


`hidden
VectorContainer:
#Markdown("""
Used to match classes that wrap a vector, like dataframe.Series.
""")
class {};

Visualizable:
#Markdown("""
#### Description

A tag-matcher which allows one to define custom visual representations of class-instances.

The general form of usage is the following:

    class {

        /* members, functions, matchers, etc ... */

        operator match (builtin.Visualizable)
            {
            /* a user-defined visualization of this class */
            };

        /* further members, matchers ... */

        };

The user-defined visualization of the class should, in general, return a tuple of size one
containing the desired visualization.

If a code-block returns an instance of such a class, its visual display (for example in the results
window) is given by the visualization of the value inside the tuple returned by the shown `match`
statement.

For example, consider the following not-so-interesting class:

    let VisualizableVector = 
    class {
          member mVector;
          operator match (builtin.Visualizable) 
              {
              (scatterPlot(mVector),)
              }
          };

If in a code block we return for example `VisualizableVector([1,2,3])`, our result would be rendered
as the scatter-plot of `[1,2,3]`.
""")
class {};

`hidden
visualize:
fun (Visualizable(value)) {
    visualize(value)
    }
(#Visualizable(value)) {
    visualize(value)
    }
(value) {
    value
    };


help:
#Markdown("""
#### Usage

    help(value)

#### Description

Displays information about the given value.
""")
fun (value)
    {
    match (value) with
        (filters.IsString(...))     { #Help(type: "String",   value: String) }
        (filters.IsTag(...))        { #Help(type: "Tag",      value: Tag) }
        (filters.IsSymbol(...))     { #Help(type: "Symbol",   value: Symbol) }
        (filters.IsDictionary(...)) { #Help(type: "Dictionary", value: Dictionary) }
        (filters.IsDateTime(...))   { #Help(type: "DateTime", value: DateTime) }
        (filters.IsTimeDuration(...))  { #Help(type: "TimeDuration",  value: TimeDuration) }
        (filters.IsMutableVector(...)) { #Help(type: "MutableVector", value: MutableVector) }
        (filters.IsFloat(...))      { #Help(type: "Float",    value: Float64) }
        (filters.IsInteger(...))    { #Help(type: "Integer",  value: Integer) }
        (filters.IsAlternative(...))    { #Help(type: "Alternative", value: Alternative) }
        (filters.IsVector(...))     { #Help(type: "Vector",   value: Vector) }
        (filters.IsTuple(...))      { #Help(type: "Tuple",    value: Tuple) }

        (filters.IsClass(...))      { #Help(type: "Class",    value: value) }
        (filters.IsObject(...))     { #Help(type: "Object",   value: value) }
        (filters.IsInstance(...))   { #Help(type: "Instance", value: classOf(value)) }
        (filters.IsModule(...))     { #Help(type: "Module",   value: value) }
        (filters.IsFunction(...))   { #Help(type: "Function", value: value) }

        (nothing) { #Help(type: "Nothing", value: Nothing) }

        (...) { #Help(type: String(`TypeJOV(value)), value: value) }
    };


isConst:
#Markdown("""
#### Usage

    isConst(x)

#### Description

Determine if a value `x` is a constant.

Currently, the only non-constant Fora values are `MutableVectors` and containers holding
non-constant values.

#### Examples

    > isConst(10)
    > isConst(MutableVector.create(10,10))
""")
fun (x) { `IsCST(x) };

`hidden 
Exception: `Exception`();

zipWith:
#Markdown(
"""
#### Usage

    zipWith(applyFun, *vecs)

#### Description

For a tuple of vectors `vecs`, equivalent to calling

    iter.toVector(iter.map(applyFun, *vecs))

#### Example

To form the pairwise sum of of two vectors `v1` and `v2`, we could write 

    zipWith(fun(x, y) { x + y }, v1, v2)

As a more complete example, 

    let v1 = [1,2,3];
    let v2 = [4,5,6];
    zipWith(fun(x, y) { x + y }, v1, v2) == [5,7,9];

Note that the vectors in `vecs` need not all have the same size. For instance,

    zipWith(fun(*args){ args }, [1,2], [1,2,3], [1,2,3,4]) == [(1,1,1)]
    
"""
)
fun(applyFun, *vecs)
    {
    let len = min(vecs..apply({ size(_) }))
    
    let res = [];
    for ix in sequence(len) 
        res = res :: applyFun(
            *vecs..apply({ _[ix] })
            )

    res
    };

`hidden
sliceMutableVector:
fun (mutableVector, start, stop) {

    if (start is nothing)
        start = 0;

    if (stop is nothing)
        stop = size(mutableVector);

    let low = Int64(start);
    let high = Int64(stop);

    let res = MutableVector(Anything).create(high - low, nothing);

    while (low < high) {
        res[low - start] = mutableVector[low];
        low = low + 1;
        }

    res
    };

Javascript:
class {
    member jsFunctionName;
    member jsText;

    operator () (*args) {
        #Javascript(self.jsFunctionName, self.jsText, *args)
        };
    };

reverse: 
#Markdown("""
#### Usage

    reverse(vector)
    reverse(tuple)
    reverse(something)

#### Description

Reverse an object. 

Gives an implementation for vectors and tuples. Otherwise defers to the object 
by calling `something.reverse()`

""")
fun(filters.IsVector(vec)) {
    _vectorReverse(vec)
    }
(filters.IsTuple(tup)) {
    _tupleReverse(tup)
    }
(otherwise) {
    otherwise.reverse()
    }
;

`hidden
_tupleReverse: fun
(()) { 
    () 
    }
((x, *args)) {
    (*_tupleReverse(args), x)
    };

`hidden
_vectorReverse: fun(vec, low := 0, high := size(vec), depth := 10) {
    if (depth > 10) {
        let tr = [];

        let ix = high - 1;
        while (ix >= low) 
            {
            tr = tr :: vec[ix]
            ix = ix - 1;
            }

        return tr
        };

    let mid = Int64((low + high) / 2);
    let nextDepth = depth + 1
    return _vectorReverse(vec, low: mid, high: high, depth: nextDepth) +
        _vectorReverse(vec, low: low, high: mid, depth: nextDepth)
    };

drawGrid:
#Markdown("""
#### Usage

    drawGrid(
        fun(rowObj, columnIndex) { },
        fun(rowIndex) { },
        10,
        10
        )

#### Description

Produces a String representation of grid-like data structures, e.g. DataFrames and Matrices.

This is a general function that draws truncated versions of grids that look like this:

              0      1      2      3            9
        0   0.0  100.0  200.0  300.0   ...  900.0
        1   1.0  101.0  201.0  301.0   ...  901.0
        2   2.0  102.0  202.0  302.0   ...  902.0
        3   3.0  103.0  203.0  303.0   ...  903.0
        4   4.0  104.0  204.0  304.0   ...  904.0
        5   5.0  105.0  205.0  305.0   ...  905.0
        6   6.0  106.0  206.0  306.0   ...  906.0
        7   7.0  107.0  207.0  307.0   ...  907.0
            ...    ...    ...    ...   ...    ...
       99  99.0  199.0  299.0  399.0   ...  999.0

To produce these, you have to provide several pieces of information:

    elementGetter -- a Function, produces an element given an object that represents a row and 
        the index of the column. This should also be able to handle a Vector of column names in
        addition to a row object.

    rowGetter -- a Function, given an index of a row, produce an object that represents the row

    numRows -- Integer, the number of rows in the entire data structure

    numColumns -- Integer, the number of columns in the entire data structure

`drawGrid` tries to be as general as possible by not dictating what the row objects should be.

Additional arguments determine how the grid is rendered:

    numRowsToShow -- Integer, the number of rows in the representation

    numColumnsToShow -- Integer, the number of columns in the representation

    columnNames -- Vector of Strings. The names to include as headers.

`drawGrid` will automatically truncate the data structure if there are more rows or columns than
there are slots.

#### Example

This comes from the implementation inside `math.Matrix`:

    let grid = builtin.drawGrid(
        fun(rowObj, column) {
            rowObj[column]
            },
        fun(row) { self[row] },
        self.dim[0],
        self.dim[1]
        );

Note how the function passed for `elementGetter` can also handle the Vector of Strings generated
for the `columnNames` argument, if it happens to be passed for `rowObj`.
""")
fun (elementGetter, rowGetter, numRows, numColumns, 
        numRowsToShow:=10, numColumnsToShow:=5, columnNames:=nothing) {

    if (columnNames is nothing)
        columnNames = Vector.range(numColumns, String);

    let maxElementWidthAsString =
    fun (columnIndex, numElements=10) {
        let m = 0;
        for r in sequence(0, min(numElements, numRows)) {
            let row = rowGetter(r);
            let el = String(elementGetter(row, columnIndex));
            m = builtin.max(m, size(el), 3)  // 3 = size of ellipsis
            }

        // Include the last row.
        let lastRow = rowGetter(numRows - 1);
        m = builtin.max(m, size(String(elementGetter(lastRow, columnIndex))));

        // Include the column headers.
        builtin.max(m, size(columnNames[columnIndex]))
        };

    let columnWidths =
        Vector.range(numColumns, maxElementWidthAsString);

    let tr = "";
    let rowsToShow = min(numRowsToShow, numRows);
    let truncateRows = numRows > numRowsToShow;
    for r in sequence(-1, rowsToShow) {
        let row = 
            if (r == -1) columnNames
            else if (truncateRows and r == rowsToShow - 1) rowGetter(numRows - 1)
            else rowGetter(r);

        let columnsToShow = min(numColumns, numColumnsToShow);
        let truncateColumns = numColumns > numColumnsToShow;
        for c in sequence(-1, columnsToShow) {
            let element =
            if (c == -1 and r == -1) " "
            else if (truncateColumns and r == -1 and c == columnsToShow - 2) " "
            else if (c == -1 and r == rowsToShow - 1) String(numRows - 1)
            else if (c == -1 and (not truncateRows or (truncateRows and r != rowsToShow - 2))) String(r)
            else if (c == -1 and (truncateRows and r == rowsToShow - 2)) " "
            else if (truncateRows and r == rowsToShow - 2) "..."
            else if (truncateColumns and c == columnsToShow - 1) String(elementGetter(row, numColumns-1))
            else if (truncateColumns and c == columnsToShow - 2) "..."
            else String(elementGetter(row, c));

            let columnWidth = columnWidths[c];

            let padding = "";
            let ellipsisWidth = 4;
            columnWidth = 
                if (c == -1) size(String(numRows))
                else if (truncateColumns and c == columnsToShow - 2) ellipsisWidth
                else columnWidth

            padding = " " * (columnWidth - size(element))

            tr = tr + "  " + padding + element
            }
        tr = tr + "\n"
        }

    return "\n" + tr
    };

`hidden
getExceptionMessage:
fun(Exception(message)) {
    message
    }
(...) {
    nothing
    };


runTests: 
#Markdown("""#### Usage

    runTests(objectToTest, regex=".*")

#### Description

Given a Fora object `objectToTest` and regex `regex`, `runTests` 
evaluates all members in `objectToTest` having metadata ```test``. The result 
of each such evaluation is a named tuple `(name:, isPass:, isThrow:, value:)`. A test is 
considered passed if its value is (exactly) true. Any other value, including 
thrown exceptions, are considered not passed. The value reported is either the 
value of the member (in the case no exception is thrown), or the value of the 
exception thrown. The collection of test results is aggregated into a vector.

#### Examples

    let objectToTest = object {
        `test shouldPass: true;
        `test shouldFail: false;
        `test shouldFailWithThrow: f(0);
        `notATest f: fun(x) { 1 / x };
        };

    runTests(objectToTest)

    // should return ``[
    //     (name: `shouldPass, isPass: true, isThrow: false, value: true),
    //     (name: `shouldFail, isPass: false, isThrow: false, value: false),
    //     (name: `shouldFailWithThrow, isPass: false, isThrow: false, value: "Attempted division by zero")]``
    runTests(objectToTest)

""")
fun(objectToTest, regex=".*") {
    let names = `ExtractMemberNames(objectToTest);
    let metadata = `ExtractMetadata(objectToTest);

    let matchesRegex = fun(testName, regex) {
        let fullTestName = String(objectToTest) + "." + String(testName)[1,];
        return fullTestName.matchesRegex(regex);
    };
    
    // Filter for all the `test-annotated object members.
    let toTest = [];
    for i in sequence(size(names)) {
        let isTest = metadata.members[i].outer == `test;
        if (isTest and matchesRegex(names[i], regex)) {
            toTest = toTest :: names[i];
        }
    }
    
    toTest.apply(fun(name){
        let isPass = true;
		let isThrow = false;

		// first check if we throw an exception
        let value = try {
            objectToTest.(name)
        } catch (e) {
			isPass = false
			isThrow = true
            e
            };

		// even if we didn't throw an exception, we insist on the value being _identically_ true to pass
		if (isPass)
			{
			try {
				match (value) with (true) {}
				}
			catch (...)
				{
				isPass = false;
				}
			}
        
        return (name: name, isPass: isPass, isThrow: isThrow, value: value)
        })
};

LazyVector: lazy.LazyVector;

