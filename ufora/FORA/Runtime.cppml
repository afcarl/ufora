/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/
#include "../core/Platform.hpp"

#include "Axioms/Axiom.hppml"
#include "Axioms/AxiomGroup.hppml"
#include "CompilerCache/CompilerCache.hpp"
#include "Core/CSTValue.hppml"
#include "Core/ImplVal.hppml"
#include "Core/StackFrame.hpp"
#include "Core/Type.hppml"
#include "Interpreter/AxiomCache.hppml"
#include "Interpreter/InstructionGraph.hppml"
#include "Interpreter/RuntimeConfig.hppml"
#include "Language/FunctionToCFG.hppml"
#include "Reasoner/ReasoningInterpreterObserver.hppml"
#include "Runtime.hppml"
#include "TypedFora/JitCompiler/Compiler.hppml"
#include "TypedCfg/TypedCfgStats.hppml"
#include "../core/StringUtil.hpp"
#include "../core/Clock.hpp"
#include "../core/math/Hash.hpp"

#define BOOST_FILESYSTEM_NO_DEPRECATED
#include <boost/filesystem.hpp>
#include <boost/lexical_cast.hpp>
#include <iomanip>

namespace {
Runtime* sRuntime = 0;
}

Runtime::Runtime(string inAxiomsString, const RuntimeConfig& inConfig) :
				mConfig(new RuntimeConfig(inConfig))
	{
	mAxiomCache = 0;
	mTracing = 0;

	mTypedForaCompiler.reset(new TypedFora::Compiler(*mConfig));
	mTypedCfgStats.reset(new TypedCfgStats(mTypedForaCompiler));
	mAxioms.reset(new Axioms(inAxiomsString));

	// Set-up the compiler cache
	boost::filesystem::path ccDir(mConfig->compilerDiskCacheDir());
	if (!boost::filesystem::exists(ccDir))
		boost::filesystem::create_directories(ccDir);
	mCompilerCache.reset(new OnDiskCompilerCacheTest(ccDir));

	mFunctionToCFGConverter.reset(new Fora::Language::FunctionToCFG(*mCompilerCache));
	}

Runtime&	Runtime::getRuntime()
	{
	lassert_dump(sRuntime, "Runtime isn't initialized yet!");
	return *sRuntime;
	}

void Runtime::initializeRuntime(
			string inAxiomsString,
			const RuntimeConfig& inConfig
			)
	{
	lassert(!sRuntime);
	//DELIBERATELY leak a shared ptr to prevent the runtime from being destroyed
	//since we can't tear it down properly.
	sRuntime = new Runtime(inAxiomsString, inConfig);
	}

RuntimeConfig& Runtime::getConfig()
	{
	return *mConfig;
	}

CompilerCache& Runtime::getCompilerCache()
	{
	return *mCompilerCache;
	}

Fora::Language::FunctionToCFG& Runtime::getFunctionToCFGConverter()
	{
	return *mFunctionToCFGConverter;
	}

PolymorphicSharedPtr<TypedFora::Compiler> Runtime::getTypedForaCompiler() const
	{
	return mTypedForaCompiler;
	}

PolymorphicSharedPtr<TypedCfgStats> Runtime::getTypedCfgStats()
	{
	return mTypedCfgStats;
	}

PolymorphicSharedPtr<Fora::Interpreter::InstructionGraph> Runtime::getInstructionGraph()
	{
	if (!mInstructionGraph)
		ensureMembersInitialized_();

	return mInstructionGraph;
	}

void Runtime::ensureMembersInitialized_()
	{
	boost::recursive_mutex::scoped_lock lock(mMutex);

	if (!mAxiomCache)
		{
		mAxiomCache = new Fora::Interpreter::AxiomCache(&*mTypedForaCompiler, mAxioms);

		mInstructionGraph.reset(
			new Fora::Interpreter::InstructionGraph(
				mAxioms,
				mTypedForaCompiler
				)
			);

		mInterpreterTraceHandler.reset(
			new Fora::Interpreter::ReasoningInterpreterObserver(
				mTypedForaCompiler,
				mTypedCfgStats,
				mInstructionGraph,
				mAxioms
				)
			);
		}
	}

Fora::Interpreter::AxiomCache* Runtime::getAxiomCache()
	{
	if (!mAxiomCache)
		ensureMembersInitialized_();

	return mAxiomCache;
	}

PolymorphicSharedPtr<Fora::Compiler::InterpreterObserver> Runtime::getInterpreterTraceHandler()
	{
	if (!mInterpreterTraceHandler)
		ensureMembersInitialized_();

	return mInterpreterTraceHandler;
	}

PolymorphicSharedPtr<Axioms> Runtime::getAxioms()
	{
	return mAxioms;
	}


