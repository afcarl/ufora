/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/
#ifndef ClassMediator_hppml_
#define ClassMediator_hppml_


#include "ClassMediator.fwd.hppml"
#include "../Language/Function.hppml"
#include "../../core/containers/ImmutableTreeSet.hppml"
#include "../../core/containers/ImmutableTreeVector.hppml"
#include "../Primitives/Symbol.hpp"
#include "../Primitives/CodeLocation.hppml"

typedef Function function_type;

@type
	//how to get a particular value out of an object.
	LexicalBinding =
		-| Member of
			ImmutableTreeVector<uint32_t> unbindIndexSequence,
			Nullable<Symbol> member
		-| Constant of
			CSTValue value
and
	//LexicalBindingMap - these tell a ClassMediator how to access its free variables as a
	//function of its 'self' objects.
	LexicalBindingMap = ImmutableTreeMap<Symbol, LexicalBinding> bindings
	{
	public:
		ImmutableTreeSet<Symbol> boundVariables() const;
	}
and
	//the two different ways something can be an instance of a class
	//in both cases, we explicitly note the order in which bound variables
	//must be listed.  When we unpack a class or function,
	//the first argument is always 'self', and the remaining arguments are
	//always the actual bound variables. If they haven't been bound yet,
	//they're considered 'free' and must be provided as arguments in the
	//given order
	ClassMediator =
			//it's a function, written as 'fun' originally
			//the 'fun' has no 'self' notion
			Function of
				function_type fun,
				LexicalBindingMap lexicalSurroundings,
				CSTValue objectMetadata
			//it's a Lambda expression, written as { expr }
		-|	Lambda of
				Expression fun,
				LexicalBindingMap lexicalSurroundings
			//it's an object, written as 'object { ... }'
		-|	Object of
				ObjectDefinition obj,
				LexicalBindingMap lexicalSurroundings,
				CSTValue objectMetadata
			//a class, written as 'class { ... }'
		-|	Class of
				ClassDefinition obj,
				LexicalBindingMap lexicalSurroundings,
				CSTValue objectMetadata

			//expand this directly into the given function without 'self' or
			//'call'.
		-|	Axiom of
				function_type axiomFun
	with
		std::string name,
		hash_type hash = (hashCPPMLDirect(*this))
	{
	public:
		LexicalBindingMap lexicalSurroundings() const;
	}
	;

macro_defineCppmlComparisonOperators(ClassMediator)



#endif

