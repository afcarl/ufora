/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/
#pragma once

#include <boost/python.hpp>
#include <deque>
#include "../../core/AtomicOps.hpp"

class MemoryPool;
class ImplVal;
class String;
class PooledString;
class Type;
class ForaStackTrace;
class JudgmentOnValue;
class Dictionary;
class MutableVectorRecord;
class ExternalFunctionDescriptor;

namespace TypedFora {
namespace Abi {
class VectorRecord;
class PooledVectorRecord;
}}

namespace Fora {
namespace Interpreter {

class RefcountPoolState;

class RefcountPool {
	RefcountPool(const RefcountPool& in);
	RefcountPool& operator=(const RefcountPool& in);
public:
	RefcountPool(MemoryPool* inPool);
	~RefcountPool();

	void transferRefcountsTo(RefcountPool& otherPool);

	void clear(void);

	//add the individual elements of this object
	//used to distinguish between holding an impl val itself (which might
	//have a pointer refcount of its own) and holding an object as a packed
	//structure
	void addPieces(void* data, const Type& t);

	void visitAllStrings(boost::function1<void, String&> inFunc);
	void visitAllVectorRecords(boost::function1<void, TypedFora::Abi::VectorRecord&> inFunc);
	void visitAllMutableVectorRecords(
		boost::function1<void, MutableVectorRecord&> inFunc
		);
	void visitAllImplVals(boost::function1<void, ImplVal&> inFunc);

	ImplVal add(ImplVal inImplval);
	void add(const Type& t);
	PooledString add(const String& t);
	void add(const ForaStackTrace& t);
	void add(const JudgmentOnValue& t);
	void add(const Dictionary& t);
	TypedFora::Abi::PooledVectorRecord add(const TypedFora::Abi::VectorRecord& t);
	void add(const MutableVectorRecord& t);
	void add(const ExternalFunctionDescriptor& t);

	//add a value that we already have refcounted
	ImplVal addAlreadyRefcounted(ImplVal inImplval);
	void addAlreadyRefcounted(const Type& t);
	void addAlreadyRefcounted(const String& t);
	void addAlreadyRefcounted(const ForaStackTrace& t);
	void addAlreadyRefcounted(const JudgmentOnValue& t);
	void addAlreadyRefcounted(const Dictionary& t);
	void addAlreadyRefcounted(const TypedFora::Abi::VectorRecord& t);
	void addAlreadyRefcounted(const MutableVectorRecord& t);
	void addAlreadyRefcounted(const ExternalFunctionDescriptor& t);

private:
	RefcountPoolState* mState;
};


}
}

