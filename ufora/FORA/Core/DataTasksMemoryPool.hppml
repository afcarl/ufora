/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/
#pragma once

#include <boost/bind.hpp>
#include <boost/unordered_map.hpp>
#include "ShareableMemoryBlocks.hppml"
#include "../../core/containers/MapWithIndex.hpp"
#include "../VectorDataManager/VectorDataMemoryManagerHeap.hppml"
#include "../Core/MemoryPool.hpp"
#include "../../core/PolymorphicSharedPtr.hpp"

class VectorDataManager;

class ImplValContainer;

class DataTasksMemoryPool :
				public MemoryPool,
				public boost::enable_shared_from_this<DataTasksMemoryPool>
{
public:
	DataTasksMemoryPool(
					PolymorphicSharedPtr<VectorDataManager> inVDM
					);

	~DataTasksMemoryPool();

	std::string stringRepresentation();

	size_t totalBytesAllocated() const;

	size_t totalBytesAllocatedFromOS() const;

	size_t totalBytesAllocatedFromOSExcludingPagelets() const;

	size_t totalBytesFromOSHeldInPagelets() const;

	uint8_t* allocate(size_t inBytes);

	void free(uint8_t* inBytes);

	uint8_t* realloc(uint8_t* inBytes, uword_t inNewBytes);

	//throws if the pool is nonempty
	void setPageSize(size_t pageSize);

	bool permitAllocation(size_t inBytes);

	long incrementBigVectorRefcount(Fora::BigVectorId inBigVectorId);

	long decrementBigVectorRefcount(Fora::BigVectorId inBigVectorId);

	Fora::ShareableMemoryBlockHandle convertPointerToShareableMemoryBlock(uint8_t* inBytes, int64_t bytes);

	uint8_t* importShareableMemoryBlock(const Fora::ShareableMemoryBlockHandle& inHandle);

	void pageletIsHeld(boost::shared_ptr<Fora::Pagelet> inPagelet);

	void pageletIsNoLongerHeld(boost::shared_ptr<Fora::Pagelet> inPagelet);

	void vectorPageMapped(
						boost::shared_ptr<VectorPage> mappedPage,
						boost::shared_ptr<Ufora::threading::Trigger> mappedPageWantsUnmapped
						);

	bool isVectorPageMapped(
						boost::shared_ptr<VectorPage> mappedPage
						);

	void incrementBigVectorRefcount(const Fora::BigVectorId& identity);

	void decrementBigVectorRefcount(const Fora::BigVectorId& identity);

	const std::map<Fora::BigVectorId, int64_t>& getBigvecRefcounts() const
		{
		return mBigvecRefcounts;
		}

private:
	PolymorphicSharedPtr<VectorDataManager> mVDM;

	PolymorphicSharedPtr<VectorDataMemoryManager> mMemoryManager;

	boost::shared_ptr<VectorDataMemoryManagerHeap> mHeap;

	Fora::ShareableMemoryBlocks mShareableMemoryBlocks;

	std::map<boost::shared_ptr<Fora::Pagelet>, long> mHeldPagelets;

	int64_t mBytesInHeldPagelets;

	int64_t mBytesFromOSInHeldPagelets;

	std::map<Fora::BigVectorId, int64_t> mBigvecRefcounts;
};




