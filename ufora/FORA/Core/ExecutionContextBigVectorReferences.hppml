/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/
#pragma once

#include "../VectorDataManager/VectorDataManager.hppml"

namespace Fora {
namespace Interpreter {

class ExecutionContextImpl;

class ExecutionContextBigVectorReferences {
public:
	ExecutionContextBigVectorReferences(
				PolymorphicSharedPtr<VectorDataManager> inVDM,
				ExecutionContextImpl* inExecutionContextPtr
				);

	long currentBigVectorRefcount(Fora::BigVectorId inBigVectorId);

	long incrementBigVectorRefcount(Fora::BigVectorId inBigVectorId);

	long decrementBigVectorRefcount(Fora::BigVectorId inBigVectorId);

	void teardown();

	ImmutableTreeSet<Fora::BigVectorId> getReferencedBigVectors();

	//if we decrement, will it take place immediately or will it be postponed
	//until we call 'enableVectorDecrements'?
	bool areDecrementsEnabled();

	//don't allow decrements to take effect until we call 'enableVectorDecrements'
	void disableVectorDecrements();

	ImmutableTreeSet<Fora::BigVectorId> flushPendingDecrements();

	//enable vector decrements and return any bigvecs whose refcount has gone
	//to zero.
	ImmutableTreeSet<Fora::BigVectorId> enableVectorDecrements();

	//get any bigvec decrements that are pending but haven't posted yet
	//because decrements are not enabled
	ImmutableTreeSet<Fora::BigVectorId> getPendingVectorDecrements();

private:
	ImmutableTreeSet<Fora::BigVectorId> flushPendingDecrements_();

	boost::mutex mMutex;

	bool mVectorDecrementsEnabled;

	PolymorphicSharedPtr<VectorDataManager> mVectorDataManager;

	boost::unordered_map<Fora::BigVectorId, long> mBigVectorRefcounts;

	boost::unordered_map<Fora::BigVectorId, long> mPendingBigVectorDecrements;

	ExecutionContextImpl* mContextPtr;
};

}
}
