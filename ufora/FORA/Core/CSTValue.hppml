/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/
#pragma once

#include "../../core/Common.hppml"
#include <stdint.h>
#include <string>
#include "../../core/math/Hash.hpp"
#include "../../core/math/Nullable.hpp"
#include "../../core/containers/ImmutableTreeVector.hppml"
#include "ImplVal.hppml"
#include "ImplValContainer.hppml"
#include "../../core/serialization/Serialization.fwd.hpp"
#include "../../core/cppml/CPPMLPrettyPrinter.hppml"

class String;
typedef String string_type;

class Symbol;
class Type;
class JudgmentOnValue;
class ForaStackTrace;
class DateTime;
class TimeDuration;

class CSTValueRecord;

class CSTValue {
public:
		CSTValue();

		//construct a CSTValue from a copy of the value in ref. Ref must be CST
		CSTValue(ImplVal ref);

		//construct a CSTValue from a copy of the value in ref. Ref must be CST
		CSTValue(const ImplValContainer& ref);

		//construct a CSTValue from the data in other, but don't increment the refcount.
		//as a result, we now transfer ownership of the data from 'other' to the resulting CSTValue
		static CSTValue	assumeOwnershipOf(ImplVal other);

		CSTValue(Type const& t, std::string data);

		explicit CSTValue(bool in);
		explicit CSTValue(int8_t in);
		explicit CSTValue(unsigned char in);
		explicit CSTValue(int16_t in);
		explicit CSTValue(uint16_t in);
		explicit CSTValue(int32_t in);
		explicit CSTValue(uint32_t in);
		explicit CSTValue(int64_t in);
		explicit CSTValue(uint64_t in);
		explicit CSTValue(float in);
		explicit CSTValue(double in);
		explicit CSTValue(const JudgmentOnValue& in);
		explicit CSTValue(const Symbol& in);
		explicit CSTValue(const ForaStackTrace& in);

		explicit CSTValue(const std::string& in);
		explicit CSTValue(const string_type& in);
		explicit CSTValue(const DateTime& in);
		explicit CSTValue(const TimeDuration& in);
		explicit CSTValue(const char* c);

		CSTValue(const CSTValue& in);

		CSTValue& operator=(const CSTValue& in);

		~CSTValue();

		static	CSTValue	Tag(const Symbol& in);

		static	CSTValue	Tuple();

		static	CSTValue	Alternative(Symbol symbol, const CSTValue& inAlternativePayload);

		static	CSTValue	Tuple(const ImmutableTreeVector<CSTValue>& inValues);

		static	CSTValue	Tuple(const ImmutableTreeVector<CSTValue>& inValues,
								  const ImmutableTreeVector<Nullable<Symbol> > &inNames);

		static	CSTValue	Tuple(const ImmutableTreeVector<pair<Nullable<Symbol>, CSTValue> >&
																						inValues);

		std::string toString(void) const;

		void		toString(CPPMLPrettyPrintStream& s) const;

		Nullable<uword_t> 	tupleGetSize(void) const;

		Nullable<CSTValue>	tupleGetItem(uword_t inIndex) const;

		Nullable<Symbol>	tupleGetName(uword_t inIndex) const;

		CSTValue tupleAppend(	const Nullable<Symbol>& inSym,
								const CSTValue& inValue
								) const;

		CSTValue tupleInsert(	const Nullable<Symbol>& inSym,
								const CSTValue& inValue,
								uword_t index
								) const;

		CSTValue tupleReplaceItem(	const Nullable<Symbol>& inSym,
									const CSTValue& inValue,
									uword_t index
									) const;

		CSTValue tupleConcatenate(	const CSTValue& inTuple) const;

		CSTValue bindClassMembers( const ImmutableTreeVector<CSTValue>& classMembers) const;

		ImplVal getReference(void) const;

		const Type&				type(void) const;

		const hash_type&		hash(void) const;

		int32_t cmp(const CSTValue& other) const;

		int32_t cmp(const ImplVal& other) const;

		bool operator<(const CSTValue& other) const
			{
			return cmp(other) < 0;
			}
		bool operator==(const CSTValue& other) const
			{
			return cmp(other) == 0;
			}
		bool operator>(const CSTValue& other) const
			{
			return cmp(other) > 0;
			}

		static CSTValue  blankOf(Type t);

		template<class T>
		const T& cast(void) const
			{
			return ((const T*)basePtr())[0];
			}

		template<class T>
		T& cast(void)
			{
			return ((T*)basePtr())[0];
			}

		Nullable<uint64_t> getUInt64(void) const;

		Nullable<int64_t> getInt64(void) const;

		void* 				getData(void) const;

		void printMetadata(CPPMLPrettyPrintStream& s) const;
private:
		static CSTValueRecord* allocValueRecord(const Type& t);

		static void destroyCSTValueRecord(CSTValueRecord* tr);

		void* basePtr(void) const;

		void free(void);

		CSTValueRecord*		mData;

		template<class T>
		CSTValueRecord* cstAlloc(const T& in, Type const& type);

		static void destroy(ImplVal ref);
};

template<class T, class kind>
class CPPMLEquality;

template<>
class CPPMLEquality<CSTValue, void> {
public:
		static char cmp(const CSTValue& lhs, const CSTValue& rhs)
			{
			return lhs.cmp(rhs);
			}
};

macro_defineMemberHashFunction(CSTValue)

template<class T, class T2>
class CPPMLTransform;

template<>
class CPPMLTransform<CSTValue, void> {
public:
		template<class F>
		static Nullable<CSTValue> apply(const CSTValue& in, const F& f)
			{
			return null();
			}
};

template<class T, class T2>
class CPPMLTransformWithIndex;

template<>
class CPPMLTransformWithIndex<CSTValue, void> {
public:
		template<class F, class F2>
		static Nullable<CSTValue> apply(const CSTValue& in, const F& f, const F2& f2)
			{
			return null();
			}
};

template<class T, class T2>
class CPPMLVisit;

template<>
class CPPMLVisit<CSTValue, void> {
public:
		template<class F>
		static void apply(const CSTValue& in, F& f)
			{
			}
};


template<class T, class T2>
class CPPMLVisitWithIndex;

template<>
class CPPMLVisitWithIndex<CSTValue, void> {
public:
		template<class F, class indices_type>
		static void apply(const CSTValue& in, const F& f, const indices_type& inIndices)
			{
			}
};

std::ostream& operator<<(std::ostream& in, const CSTValue& v);

template<>
class CPPMLPrettyPrint<CSTValue> {
public:
	static void prettyPrint(CPPMLPrettyPrintStream& s,
							const CSTValue& t);
};

