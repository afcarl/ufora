/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/
#ifndef FORA_Integers_hppml
#define FORA_Integers_hppml

#include "../../core/math/Nullable.hpp"
inline uint8_t bitmaskForTopByte(uint8_t bits)
	{
	unsigned char masks[] = { 255, 1,3,7,15,31,63,127 };
	return masks[bits % 8];
	}
inline void clearUnusedIntegerBits(void* data, uword_t bits)
	{
	unsigned char masks[] = { 1,3,7,15,31,63,127 };
	if ((bits % 8) != 0)
		((unsigned char*)data)[bits / 8] &= masks[bits % 8 - 1];
	}
inline void promoteSignBit(void* data, uword_t bits)
	{
	if (bits % 8)
		return;
	//move the sign bit to the right place
	unsigned char* dat = (unsigned char*)data;
	uword_t topByte = (bits + 7) / 8;
	uword_t bitMod = bits % 8;
	uword_t signBit = dat[topByte] & (1 << (bitMod-1));
	dat[topByte] = dat[topByte] - signBit + (signBit ? 255 : 0);
	}
inline bool getSignBit(void* data, uword_t bits)
	{
	//move the sign bit to the right place
	unsigned char* dat = (unsigned char*)data;
	uword_t topByte = (bits + 7) / 8;
	uword_t bitMod = (bits + 1) % 8;
	return dat[topByte] & (1 << (bitMod));
	}
inline Nullable<uint64_t> castToUInt64(void* data, uword_t bits)
	{
	if (bits <= 64)
		{
		if (bits == 8)
			return null() << (uint64_t)((uint8_t*)data)[0];
		if (bits == 16)
			return null() << (uint64_t)((uint16_t*)data)[0];
		if (bits == 32)
			return null() << (uint64_t)((uint32_t*)data)[0];
		if (bits == 64)
			return null() << (uint64_t)((uint64_t*)data)[0];

		uint64_t tr;
		memcpy(&tr, data, (bits + 7)/8);
		clearUnusedIntegerBits(&tr, bits);
		return null() << tr;
		}
	//it might be bigger. We have to ensure that the top bits are clear
	uword_t bytes = (bits + 7)/8;
	for (uword_t ix = 8; ix <= bytes; ix++)
		{
		if (ix < bytes)
			{
			if ( ((unsigned char*)data)[ix] )
				return null();
			}
			else
			{
			if ( ((unsigned char*)data)[ix] & bitmaskForTopByte(bits) )
				return null();
			}
		}
	return null() << ((uint64_t*)data)[0];
	}
inline Nullable<int64_t> castToInt64(void* data, uword_t bits)
	{
	if (bits <= 64)
		{
		if (bits == 8)
			return null() << (int64_t)((int8_t*)data)[0];
		if (bits == 16)
			return null() << (int64_t)((int16_t*)data)[0];
		if (bits == 32)
			return null() << (int64_t)((int32_t*)data)[0];
		if (bits == 64)
			return null() << (int64_t)((int64_t*)data)[0];

		uint64_t tr;
		memcpy(&tr, data, (bits + 7)/8);

		clearUnusedIntegerBits(&tr, bits);

		promoteSignBit(&tr, bits);

		return null() << *((int64_t*)&tr);
		}
	//it might be bigger. We have to ensure that the top bits are clear
	uword_t bytes = (bits -1 + 7)/8;
	for (uword_t ix = 8; ix <= bytes; ix++)
		{
		if (ix < bytes)
			{
			if ( ((unsigned char*)data)[ix] )
				return null();
			}
			else
			{
			if ( ((unsigned char*)data)[ix] & bitmaskForTopByte(bits-1) )
				return null();
			}
		}

	uint64_t tr = ((uint64_t*)data)[0];

	tr = tr & 0x7FFFFFFFFFFFFFFFull; //drop the sign bit
	tr = tr + (getSignBit(data, bits) ? 0x8FFFFFFFFFFFFFFFull : 0);

	return null() << *((int64_t*)&tr);
	}


#endif

