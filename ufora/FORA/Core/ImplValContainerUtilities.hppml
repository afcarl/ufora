/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/
#pragma once

#include "ImplValContainer.hppml"
#include "Type.hppml"
#include <boost/python.hpp>

/************

A collection of helper functions which produce ImplValContainers with rc = 1 (ie "owned" values).

 ************/

class ClassMediator;
class ExternalFunctionDescriptor;
class String;
class VectorDataManager;

namespace Fora {

class BigVectorId;

}

namespace TypedFora {
namespace Abi {
class VectorRecord;
}}

extern "C" {

bool FORA_clib_IVCsAreIdentical(const ImplValContainer& i1, const ImplValContainer& i2);

}

namespace ImplValContainerUtilities	{

//might want some subclasses, but for now info is passed in what() calls
class IVCException : public std::logic_error {
public:
	explicit IVCException(const std::string& err) :
		std::logic_error(err) {}
	};

//create an Alternative holding value `val` with symbol `sym`. The type is taken from `val`
ImplValContainer createAlternative(const Symbol& sym, const ImplValContainer& val);

//if `v` is an Alternative with symbol `sym`, extract its "held" value. else
//raise an IVCException
ImplValContainer extractAlternative(const ImplValContainer& v, const Symbol& sym);

//if `v` isn an Alternative with _any_ symbol, extract its "held" value, else
//raise an IVCException
ImplValContainer extractAnyAlternative(const ImplValContainer& v);

Nullable<pair<Symbol, ImplValContainer> > extractAsAlternative(const ImplValContainer& v);

void toParsableString(CPPMLPrettyPrintStream& str, const ImplValContainer& v);

void toParsableString(
	CPPMLPrettyPrintStream& str,
	const ImplValContainer& v,
	const ImplValContainer& dict
	);

//generic iterator pattern to scan over the elements of a FORA tuple
//hands each one in succession to 'inFun'
template<class F>
void iterateTupleContents(const ImplValContainer& val, const F& inFun)
	{
	if (!val.type().isTuple())
		throw IVCException("arguments is not a tuple");

	char* data = (char*)val.data();
	const ImmutableTreeVector<Type>& types = val.type().getTuple().types();

	for (long k = 0; k < types.size(); k++)
		{
		inFun( ImplValContainer( types[k], data ) );
		data += types[k].size();
		}
	}

ImmutableTreeVector<pair<Nullable<Symbol>, ImplValContainer> >
								extractTupleContents(const ImplValContainer& val);

template<class F>
void iterateTupleContentsWithIndices(const ImplValContainer& val, const F& inFun)
	{
	if (!val.type().isTuple())
		throw IVCException("arguments is not a tuple");

	char* data = (char*)val.data();
	const ImmutableTreeVector<Type>& types = val.type().getTuple().types();

	for (long k = 0; k < types.size(); k++)
		{
		inFun( ImplValContainer( types[k], data ), k);
		data += types[k].size();
		}
	}

ImplValContainer createClass(const ClassMediator& classMediator);

template<class F>
void iterateTupleContentsWithNames(const ImplValContainer& val, const F& inFun)
	{
	if (!val.type().isTuple())
		throw IVCException("arguments is not a tuple");

	char* data = (char*)val.data();
	const ImmutableTreeVector<Type>& types = val.type().getTuple().types();
	const ImmutableTreeVector<Nullable<Symbol> >& names = val.type().getTuple().names();

	for (long k = 0; k < types.size(); k++)
		{
		inFun( ImplValContainer( types[k], data ), names[k] );
		data += types[k].size();
		}
	}

//assumes that `val` is indeed a tuple, else asserts
ImplValContainer tupleGetItem(const ImplValContainer& val, int64_t ix);

//assumes that `val` is indeed a tuple, else asserts
ImplValContainer tupleMember(const ImplValContainer& val, const Symbol& sym);

//assumes that `val` is indeed a tuple, else asserts
ImplValContainer tupleGetSlice(
	const ImplValContainer& val,
	int64_t ixLow,
	int64_t ixHigh
	);

ImplValContainer vectorGetSlice(
	const ImplValContainer& val,
	int64_t ixLow,
	int64_t ixHigh,
	int64_t stride = 1
	);

Nullable<ImmutableTreeVector<std::string> > extractListOfStringsFromTuple(const ImplValContainer& tupleOfStrings);

Nullable<std::string> extractString(const ImplValContainer& string);

uword_t tupleSize(const ImplValContainer& val);

ImplValContainer createClass(const ClassMediator& classMediator);

ImplValContainer createVector(const TypedFora::Abi::VectorRecord& val);

ImplValContainer createSymbol(const Symbol& val);

ImplValContainer createString(const String& val);

ImplValContainer createStackTrace(const ForaStackTrace& val);

//assumes that cls is a class, and that index is valid, else asserts
ImplValContainer classGetItem(const ImplValContainer& cls, uword_t index);

//extract the named element 'val' as if it were referred to in 'object's inner closure
//if it's a calculated field (say, on itself or a bound member) then the second element of the
//pair will be populated.
Nullable<pair<ImplValContainer, Nullable<Symbol> > >
		objectGetMember(const ImplValContainer& object, Symbol val);

//creates a tuple of containing the members of class `cls`. If `cls` is not
//a class, this function asserts.
ImplValContainer classMemberUnbind(const ImplValContainer& cls);

ClassMediator	bindClassMediatorMeta(ClassMediator mediator, CSTValue meta);

ImplValContainer classMemberBind(
	const ImplValContainer& cls,
	const ImplValContainer& args
	);

ImplValContainer bindMixin(
	const ImplValContainer& toUpdateImplVal,
	const ImplValContainer& toMixInImplVal
	);

ImplValContainer createExternalFunction(
	const ExternalFunctionDescriptor& efd,
	bool isCST = true
	);

ImplValContainer createFloat(float val);

ImplValContainer createDouble(double val);

ImplValContainer createUnsignedInteger(uint64_t val);

ImplValContainer createSignedInteger(int64_t val);

ImplValContainer createBool(uint8_t val);

ImplValContainer createTuple(const ImmutableTreeVector<ImplValContainer>& tupleElements);

ImplValContainer createDict(
	const ImmutableTreeMap<ImplValContainer, ImplValContainer>& keysAndValues
	);

ImplValContainer createDict(
	const ImmutableTreeVector<ImplValContainer>& keys,
	const ImmutableTreeVector<ImplValContainer>& values
	);

ImplValContainer createEmptyTuple();

ImplValContainer createTuple(
	const ImmutableTreeVector<ImplValContainer> & inValues,
	const ImmutableTreeVector<Nullable<Symbol> > & inNames
	);

template<class implval_func_type, class name_func_type>
ImplValContainer createTuple(
		uword_t count,
		const implval_func_type& inImplValFunc,
		const name_func_type& inNameFunc
		)
	{
	ImmutableTreeVector<Type> types;
	ImmutableTreeVector<Nullable<Symbol> > symbols;

	for (uword_t index = 0; index < count; index++)
		{
		types = types + inImplValFunc(index).type();
		symbols = symbols + inNameFunc(index);
		}

	ImplVal tr = ImplVal::introduce(Type::Tuple(types, symbols));
	char* data = (char*)tr.data();

	for (uword_t index = 0; index < count; index++)
		{
		ImplValContainer implval = inImplValFunc(index);
		implval.type().initialize(
			data,
			implval.data()
			);
		data += implval.type().size();
		}

	return ImplValContainer::assumeOwnershipOf(tr);
	}

ImplValContainer implValFor(const pair<Nullable<Symbol>, ImplValContainer>& v);

Nullable<Symbol> symbolValFor(const pair<Nullable<Symbol>, ImplValContainer>& v);

template<class iterator_type>
static ImplValContainer createNewTuple(iterator_type left, iterator_type right)
	{
	ImmutableTreeVector<Type> types;
	ImmutableTreeVector<Nullable<Symbol> > symbols;

	for (iterator_type it = left; it != right; it++)
		{
		types = types + implValFor(*it).type();
		symbols = symbols + symbolValFor(*it);
		}

	ImplVal tr = ImplVal::introduce(Type::Tuple(types, symbols));
	char* data = (char*)tr.data();

	for (iterator_type it = left; it != right; it++)
		{
		implValFor(*it).type().initialize(
			data,
			implValFor(*it).data()
			);
		data += implValFor(*it).type().size();
		}

	return ImplValContainer::assumeOwnershipOf(tr);
	}


ImplValContainer implValFor(const pair<Nullable<Symbol>, ImplValContainer>& v);

Nullable<Symbol> symbolValFor(const pair<Nullable<Symbol>, ImplValContainer>& v);

ImplValContainer implValFor(const ImplValContainer& v);

Nullable<ImplValContainer> concatenateVectors(
								const ImplValContainer& left,
								const ImplValContainer& right,
								MemoryPool* inPool,
								VectorDataManager* inVDM,
								hash_type newVectorHash
								);

pair<hash_type, ImmutableTreeSet<Fora::BigVectorId> > initiateValueSend(ImplValContainer toSend, VectorDataManager* inVDM);

void finalizeValueSend(ImplValContainer toSend, VectorDataManager* inVDM, hash_type moveGuid);

Nullable<ImplValContainer> appendToVector(
								const ImplValContainer& left,
								const ImplValContainer& right,
								MemoryPool* inPool,
								VectorDataManager* inVDM,
								hash_type newVectorHash
								);

Nullable<Symbol> symbolValFor(const ImplValContainer& v);

template<class iterator_type>
ImplValContainer createTupleFromIterators(iterator_type left, iterator_type right)
	{
	ImmutableTreeVector<Type> types;
	ImmutableTreeVector<Nullable<Symbol> > symbols;

	for (iterator_type it = left; it != right; it++)
		{
		types = types + implValFor(*it).type();
		symbols = symbols + symbolValFor(*it);
		}

	ImplVal tr = ImplVal::introduce(Type::Tuple(types, symbols));
	char* data = (char*)tr.data();

	for (iterator_type it = left; it != right; it++)
		{
		implValFor(*it).type().initialize(
			data,
			implValFor(*it).data()
			);
		data += implValFor(*it).type().size();
		}

	return ImplValContainer::assumeOwnershipOf(tr);
	}

class tuple_iterator {
public:
	tuple_iterator(const tuple_iterator& inTuple_Iterator);

	static tuple_iterator begin(const ImplValContainer& inValue);
	static tuple_iterator end(const ImplValContainer& inValue);

	bool operator==(const tuple_iterator& inTuple_Iterator) const;
	bool operator!=(const tuple_iterator& inTuple_Iterator) const;
	bool operator<(const tuple_iterator& inTuple_Iterator) const;

	tuple_iterator& operator++(void);
	tuple_iterator operator++(int);
	tuple_iterator operator+(int i) const;

	sword_t operator-(const tuple_iterator& inTuple_Iterator) const;

	ImplValContainer operator*() const;

	const Nullable<Symbol>&	name(void);
private:
	tuple_iterator(
		const ImplValContainer& inImplValContainer,
		uword_t inIndex,
		uword_t inByteOffset
		);

	ImplValContainer mTupleToIterate;
	uword_t mCurrentTupleIndex;
	uword_t mCurrentTupleByteOffset; //for 'end', this may contain -1
};



}

