/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/
#pragma once

#include "../../core/containers/ImmutableTreeVector.hppml"
#include "../Primitives/Symbol.hpp"
#include "ImplVal.hppml"
#include "Type.hppml"

class ImplValContainer;

class TupleCategory {
public:
	//an iterator over a FORA tuple. Note that the tuple being iterated must stay alive for the
	//duration of the lifetime of the iterators, since the returned tuples retain references
	//into the original object's data
	class iterator {
	public:
		iterator(const iterator& inIterator);

		static iterator begin(ImplVal inValue);
		static iterator end(ImplVal inValue);

		bool operator==(const iterator& inIterator) const;
		bool operator!=(const iterator& inIterator) const;
		bool operator<(const iterator& inIterator) const;

		iterator& operator++(void);
		iterator operator++(int);
		iterator operator+(int i) const;

		sword_t operator-(const iterator& inIterator) const;

		ImplVal operator*() const;

		const Nullable<Symbol>&	name(void);
	private:
		iterator(ImplVal inImplVal, uword_t inIndex, uword_t inByteOffset);

		ImplVal mTupleToIterate;
		uword_t mCurrentTupleIndex;
		uword_t mCurrentTupleByteOffset; //for 'end', this may contain -1
	};

	//an iterator over a FORA tuple. Note that the tuple being iterated must stay alive for the
	//duration of the lifetime of the iterators, since the returned tuples retain references
	//into the original object's data
	class iteratorWithNames {
	public:
		iteratorWithNames(const iteratorWithNames& inIterator);

		static iteratorWithNames begin(ImplVal inValue);
		static iteratorWithNames end(ImplVal inValue);

		bool operator==(const iteratorWithNames& inIterator) const;
		bool operator!=(const iteratorWithNames& inIterator) const;
		bool operator<(const iteratorWithNames& inIterator) const;

		iteratorWithNames& operator++(void);
		iteratorWithNames operator++(int);
		iteratorWithNames operator+(int i) const;

		sword_t operator-(const iteratorWithNames& inIterator) const;

		pair<ImplVal, Nullable<Symbol> > operator*() const;

	private:
		iteratorWithNames(ImplVal inImplVal, uword_t inIndex, uword_t inByteOffset);

		ImplVal mTupleToIterate;
		uword_t mCurrentTupleIndex;
		uword_t mCurrentTupleByteOffset; //for 'end', this may contain -1
	};

	static ImplVal getItem(const ImplVal& inImplVal, uword_t inIndex);

	static ImplVal getSliceReturnsOwned(const ImplVal& inImplVal, uword_t inIndexLow);

	//generic iterator pattern to scan over the elements of a FORA tuple
	//hands each one in succession to 'inFun'
	template<class F>
	static void tupleIterateContents(const ImplVal& val, const F& inFun)
		{
		lassert(val.type().isTuple());

		char* data = (char*)val.data();
		const ImmutableTreeVector<Type>& types = val.type().getTuple().types();

		for (long k = 0; k < types.size(); k++)
			{
			inFun( ImplVal( types[k], data ) );
			data += types[k].size();
			}
		}
	template<class F>
	static void tupleIterateContentsWithNames(const ImplVal& val, const F& inFun)
		{
		lassert(val.type().isTuple());

		char* data = (char*)val.data();
		const ImmutableTreeVector<Type>& types = val.type().getTuple().types();
		const ImmutableTreeVector<Nullable<Symbol> >& names = val.type().getTuple().names();

		for (long k = 0; k < types.size(); k++)
			{
			inFun( ImplVal( types[k], data ), names[k] );
			data += types[k].size();
			}
		}
	template<class F>
	static void tupleIterateContentsWithNamesAndIndices(const ImplVal& val, const F& inFun)
		{
		lassert(val.type().isTuple());

		char* data = (char*)val.data();
		const ImmutableTreeVector<Type>& types = val.type().getTuple().types();
		const ImmutableTreeVector<Nullable<Symbol> >& names = val.type().getTuple().names();

		for (long k = 0; k < types.size(); k++)
			{
			inFun( ImplVal( types[k], data ), names[k], k);
			data += types[k].size();
			}
		}
	template<class F>
	static void tupleIterateContentsWithIndices(const ImplVal& val, const F& inFun)
		{
		lassert(val.type().isTuple());

		char* data = (char*)val.data();
		const ImmutableTreeVector<Type>& types = val.type().getTuple().types();

		for (long k = 0; k < types.size(); k++)
			{
			inFun( ImplVal( types[k], data ), k);
			data += types[k].size();
			}
		}
	static ImplVal tupleExtractElementNoIncref(const ImplVal& val, uword_t inIndex)
		{
		lassert(val.type().isTuple());

		char* data = (char*)val.data();
		const ImmutableTreeVector<Type>& types = val.type().getTuple().types();

		lassert(inIndex < types.size());

		for (long k = 0; k < inIndex; k++)
			data += types[k].size();

		return ImplVal( types[inIndex], data );
		}
	static bool isTuple(const ImplVal& val)
		{
		return val.type().isTuple();
		}
	static uword_t tupleSize(const ImplVal& val)
		{
		return val.type().getTuple().types().size();
		}
	static ImmutableTreeVector<Nullable<Symbol> > tupleNames(const ImplVal& val)
		{
		return val.type().getTuple().names();
		}
	static ImmutableTreeVector<Type> tupleElementType(const ImplVal& val)
		{
		return val.type().getTuple().types();
		}

	static const ImplVal& implValFor(const ImplVal& v)
		{
		return v;
		}
	static const ImplVal& implValFor(const ImplValContainer& ivc)
		{
		return ivc.getReference();
		}
	static const ImplVal& implValFor(const pair<ImplVal, Nullable<Symbol> >& v)
		{
		return v.first;
		}
	static const ImplVal& implValFor(const pair<Nullable<Symbol>, ImplVal>& v)
		{
		return v.second;
		}
	static const ImplVal& implValFor(const pair<ImplValContainer, Nullable<Symbol> >& v)
		{
		return v.first.getReference();
		}
	static const ImplVal& implValFor(const pair<Nullable<Symbol>, ImplValContainer>& v)
		{
		return v.second.getReference();
		}
	static Nullable<Symbol> symbolValFor(const ImplVal& v)
		{
		return null();
		}
	static Nullable<Symbol> symbolValFor(const ImplValContainer& ivc)
		{
		return null();
		}
	static const Nullable<Symbol>& symbolValFor(const pair<ImplVal, Nullable<Symbol> >& v)
		{
		return v.second;
		}
	static const Nullable<Symbol>& symbolValFor(const pair<Nullable<Symbol>, ImplVal>& v)
		{
		return v.first;
		}
	static const Nullable<Symbol>& symbolValFor(const pair<ImplValContainer, Nullable<Symbol> >& v)
		{
		return v.second;
		}
	static const Nullable<Symbol>& symbolValFor(const pair<Nullable<Symbol>, ImplValContainer>& v)
		{
		return v.first;
		}

	static ImplVal createEmptyTuple()
		{
		ImmutableTreeVector<Type> types;
		ImmutableTreeVector<Nullable<Symbol> > symbols;
		return ImplVal::introduce(Type::Tuple(types, symbols));
		}

	//given a pair of iterators to an ImplVal or a a pair<Nullable<Symbol>, ImplVal>, (or the
	//reverse order) produce a new tuple with refcount of 1.
	template<class iterator_type>
	static ImplVal createNewTuple(iterator_type left, iterator_type right)
		{
		ImmutableTreeVector<Type> types;
		ImmutableTreeVector<Nullable<Symbol> > symbols;

		for (iterator_type it = left; it != right; it++)
			{
			types = types + implValFor(*it).type();
			symbols = symbols + symbolValFor(*it);
			}

		ImplVal tr = ImplVal::introduce(Type::Tuple(types, symbols));
		char* data = (char*)tr.data();

		for (iterator_type it = left; it != right; it++)
			{
			implValFor(*it).type().initialize(
				data,
				implValFor(*it).data()
				);
			data += implValFor(*it).type().size();
			}

		return tr;
		}

	template<class implval_func_type, class name_func_type>
	static ImplVal createNewTuple(	uword_t count,
									const implval_func_type& inImplvalFunc,
									const name_func_type& inNameFunc
									)
		{
		ImmutableTreeVector<Type> types;
		ImmutableTreeVector<Nullable<Symbol> > symbols;

		for (uword_t index = 0; index < count; index++)
			{
			types = types + inImplvalFunc(index).type();
			symbols = symbols + inNameFunc(index);
			}

		ImplVal tr = ImplVal::introduce(Type::Tuple(types, symbols));
		char* data = (char*)tr.data();

		for (uword_t index = 0; index < count; index++)
			{
			ImplVal implval = inImplvalFunc(index);
			implval.type().initialize(
				data,
				implval.data()
				);
			data += implval.type().size();
			}

		return tr;
		}

	template<class implval_func_type, class name_func_type>
	static ImplVal createNewTupleWithoutIncrefArgs(
									uword_t count,
									const implval_func_type& inImplvalFunc,
									const name_func_type& inNameFunc
									)
		{
		ImmutableTreeVector<Type> types;
		ImmutableTreeVector<Nullable<Symbol> > symbols;

		for (uword_t index = 0; index < count; index++)
			{
			types = types + inImplvalFunc(index).type();
			symbols = symbols + inNameFunc(index);
			}

		ImplVal tr = ImplVal::introduce(Type::Tuple(types, symbols));
		char* data = (char*)tr.data();

		for (uword_t index = 0; index < count; index++)
			{
			ImplVal implval = inImplvalFunc(index);
			memcpy(data, implval.data(), implval.type().size());
			data += implval.type().size();
			}

		return tr;
		}

	template<class implval_func_type, class name_func_type, class is_tuplecall_func>
	static ImplVal createNewTupleWithTupleCalling(
									uword_t count,
									const implval_func_type& inImplvalFunc,
									const name_func_type& inNameFunc,
									const is_tuplecall_func& inTCFunc
									)
		{
		ImmutableTreeVector<Type> types;
		ImmutableTreeVector<Nullable<Symbol> > symbols;

		for (uword_t index = 0; index < count; index++)
			{
			Type t = inImplvalFunc(index).type();
			if (inTCFunc(index))
				{
				if (t.isTuple())
					{
					types = types + t.getTuple().types();
					symbols = symbols + t.getTuple().names();
					}
				else
					{
					types = types + t;
					symbols = symbols + null();
					}
				}
			else
				{
				types = types + t;
				symbols = symbols + inNameFunc(index);
				}
			}

		ImplVal tr = ImplVal::introduce(Type::Tuple(types, symbols));
		char* data = (char*)tr.data();

		for (uword_t index = 0; index < count; index++)
			{
			ImplVal implval = inImplvalFunc(index);

			implval.type().initialize(
				data,
				implval.data()
				);
			data += implval.type().size();
			}

		return tr;
		}

	// Creates a new tuple without incrementing the refcount of the given elements.
	template<class iterator_type>
	static ImplVal createNewTupleWithoutIncrefArgs(iterator_type left, iterator_type right)
		{
		ImmutableTreeVector<Type> types;
		ImmutableTreeVector<Nullable<Symbol> > symbols;

		for (iterator_type it = left; it != right; it++)
			{
			types = types + implValFor(*it).type();
			symbols = symbols + symbolValFor(*it);
			}

		ImplVal tr = ImplVal::introduce(Type::Tuple(types, symbols));
		char* data = (char*)tr.data();

		for (iterator_type it = left; it != right; it++)
			{
			memcpy(data, implValFor(*it).data(), implValFor(*it).type().size());
			data += implValFor(*it).type().size();
			}

		return tr;
		}
};

