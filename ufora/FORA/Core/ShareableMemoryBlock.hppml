/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/
#pragma once

#include <string>
#include "../../core/AtomicOps.hpp"
#include "../../core/lassert.hpp"

/********************

ShareableMemoryBlock

Models a block of memory that may be shared across multiple MemoryPools. The memory will count
against each memory pool equally.

MemoryPools are responsible for optionally converting allocated regions into shareable regions
(usually because they're just mmapped memory blocks), and for importing regions produced by
other memory pools.

********************/

class MemoryPool;

namespace Fora {

class ShareableMemoryBlockHandle;

class ShareableMemoryBlock {
public:
	ShareableMemoryBlock() :
			mRefcount(0)
		{
		}

	virtual ~ShareableMemoryBlock() {};

	virtual void destroySelf() = 0;

	void incrementRefcount()
		{
		AO_fetch_and_add_full(&mRefcount, 1);
		}

	void decrementRefcount()
		{
		if (AO_fetch_and_add_full(&mRefcount, -1) == 1)
			this->destroySelf();
		}

	virtual uint8_t* getBaseAddress() const = 0;

	virtual size_t getSize() const = 0;

	virtual std::string descriptor() const = 0;

	const static size_t kRequiredAlignment = 4096;

	static bool isValidBaseAddress(uint8_t* addr)
		{
		return ((size_t)addr) % kRequiredAlignment == 0;
		}

private:
	AO_t mRefcount;
};

class ShareableMemoryBlockHandle {
public:
	ShareableMemoryBlockHandle() : mPtr(0)
		{
		}

	ShareableMemoryBlockHandle(ShareableMemoryBlock* ptr) : mPtr(ptr)
		{
		if (mPtr)
			{
			lassert(
				Fora::ShareableMemoryBlock::isValidBaseAddress(ptr->getBaseAddress())
				);
			mPtr->incrementRefcount();
			}
		}

	ShareableMemoryBlockHandle(const ShareableMemoryBlockHandle& in) : mPtr(in.mPtr)
		{
		if (mPtr)
			mPtr->incrementRefcount();
		}

	~ShareableMemoryBlockHandle()
		{
		if (mPtr)
			mPtr->decrementRefcount();
		}

	ShareableMemoryBlockHandle& operator=(const ShareableMemoryBlockHandle& in)
		{
		if (in.mPtr)
			in.mPtr->incrementRefcount();
		if (mPtr)
			mPtr->decrementRefcount();

		mPtr = in.mPtr;

		return *this;
		}

	bool isEmpty() const
		{
		return mPtr == 0;
		}

	uint8_t* getBaseAddress() const
		{
		if (!mPtr)
			return nullptr;

		return mPtr->getBaseAddress();
		}

	size_t getSize() const
		{
		if (!mPtr)
			return 0;

		return mPtr->getSize();
		}

	const ShareableMemoryBlock* getPtr() const
		{
		return mPtr;
		}

	ShareableMemoryBlock* getPtr()
		{
		return mPtr;
		}

	std::string descriptor() const
		{
		if (!mPtr)
			return "<empty>";
		return mPtr->descriptor();
		}

	bool operator<(const ShareableMemoryBlockHandle& other) const
		{
		return mPtr < other.mPtr;
		}

private:
	ShareableMemoryBlock* mPtr;
};


}
