/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/
#pragma once

#include "../TypedFora/ABI/StackFrameVisitor.hppml"
#include "../TypedFora/ABI/LiveValue.hppml"
#include "../TypedFora/TypedFora.hppml"
#include "../Interpreter/Instruction.hppml"

namespace Fora {

class IsSplittable : public TypedFora::Abi::StackFrameVisitor {
public:
	long mFrameIndex;
	Nullable<long> mSplittableFrameIndex;

	IsSplittable() :
			mFrameIndex(-1)
		{
		}

	bool isCST(NativeContinuationVarMetadataSerialized varMetadata, void* data) const
		{
		std::vector<char> tempData;

		TypedFora::Abi::LiveValue value =
			TypedFora::Abi::NativeStackFrameWrapper::readStackFrameLayoutToLiveValue(tempData, varMetadata, data);

		return value.isCST();
		}

	virtual bool visitNativeStackFrame(
					TypedFora::Abi::NativeStackFrameWrapper& stackFrame
					)
		{
		ImmutableTreeVector<NativeContinuationMetadataSerialized> meta = stackFrame.getMetadata();
		ImmutableTreeVector<NativeType> slotTypes = stackFrame.getSlotTypes();

		for (long k = ((long)meta.size()-1); k >= 0; k--)
			{
			@match NativeContinuationMetadataInstruction(meta[k].node())
				-| TypedForaInstruction(tfMetadata) ->> {
					@match TypedFora::MetadataInstruction(*tfMetadata)
						-| Node((graph, label)) ->> {
							mFrameIndex++;

							bool isThisFrameCst = true;

							for (long j = 0; j < meta[k].vars().size() && isThisFrameCst;j++)
								if (!isCST(meta[k].vars()[j], stackFrame.getSlotData()))
									isThisFrameCst = false;

							if (!isThisFrameCst)
								mSplittableFrameIndex = null();
							else
								{
								if (ControlFlowGraphSplitter::computeSplitResult(graph, label))
									mSplittableFrameIndex = mFrameIndex;
								}
							}
						-| NodeWithResult((graph, label), index) ->> {
							mFrameIndex++;
							}
						}
				-| _ ->> {};
			}

		return true;
		}

	virtual bool visitInterpreterStackFrame(
					Fora::Interpreter::EvalFrame* stackFrame
					)
		{
		mFrameIndex++;

		const auto& args = stackFrame->evalFrameArgList();

		for (long k = 0; k < args.size(); k++)
			if (!args[k].isCST())
				{
				mSplittableFrameIndex = null();
				return true;
				}

		//now see if we can split this frame
		if (ControlFlowGraphSplitter::computeSplitResult(
					stackFrame->instructionPtr->getGraph(),
					stackFrame->instructionPtr->getLabel()
					))
			mSplittableFrameIndex = mFrameIndex;

		return true;
		}

	virtual bool visitResultSignatureAdapterStackFrame(
					TypedFora::Abi::ResultSignatureAdapterFrame* stackFrame
					)
		{
		return true;
		}

	virtual bool visitHeldImplvalTeardownFrame(
					TypedFora::Abi::InterpreterUniqueIdHolderFrame* stackFrame
					)
		{
		return true;
		}

	virtual bool visitCppCallbackFrame(
					TypedFora::NativeCppCallbackStackframe* cppCallbackFrame
					)
		{
		return true;
		}
};

}
