/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/
#ifndef ImplValContainer_hppml_
#define ImplValContainer_hppml_

#include "../Primitives/Symbol.hpp"
#include "../../core/math/Hash.hpp"
#include "ImplVal.hppml"

namespace TypedFora {
namespace Abi {
class VectorRecord;
}}

//maintains an implVal with duplicate/destroy semantics (e.g. safe refcounting)
class ImplValContainer {
	class IsOwned{};

	ImplValContainer(ImplVal val, IsOwned isOwned);
public:
	ImplValContainer();
	ImplValContainer(ImplVal val);
	ImplValContainer(const ImplValContainer& other);
	ImplValContainer(const CSTValue& val);
	ImplValContainer(const Type& t, void* data);
	ImplValContainer(const ImmutableTreeVector<ImplValContainer>& tupleElements);
	ImplValContainer(
		const ImmutableTreeVector<std::pair<ImplValContainer, Nullable<Symbol>>>& tupleElements
		);
	ImplValContainer(const Dictionary& dictionary, bool isCST);
	ImplValContainer(const TypedFora::Abi::VectorRecord& vector);

	static ImplValContainer assumeOwnershipOf(ImplVal val);

	~ImplValContainer()
		{
		mVal.destroy();
		}
	ImplValContainer& operator=(const ImplValContainer& in)
		{
		ImplVal nv = in.mVal.duplicate();
		mVal.destroy();
		mVal = nv;

		return *this;
		}
	string toString(void) const
		{
		return prettyPrintString(getReference());
		}
	void toString(CPPMLPrettyPrintStream  str) const
		{
		str << getReference();
		}
	const ImplVal&	getReference(void) const
		{
		return mVal;
		}
	const Type& type(void) const
		{
		return mVal.type();
		}
	bool isCST(void) const
		{
		return mVal.isCST();
		}

	hash_type hash(void) const;

	char cmp(const ImplValContainer& other) const;

	void* data(void) const
		{
		return mVal.data();
		}
	template<class T>
	T& cast(void) const
		{
		return mVal.cast<T>();
		}

	bool convertToBoolean() const;

	Nullable<uint64_t> getUInt64(void) const;

	Nullable<int64_t> getInt64(void) const;

	Nullable<uword_t> 	tupleGetSize(void) const;

	Nullable<ImplValContainer>	tupleGetItem(uword_t inIndex) const;

	Nullable<ImplValContainer>	classGetItem(uword_t inIndex) const;

	Nullable<Symbol>	tupleGetName(uword_t inIndex) const;

protected:
	ImplVal mVal;
};


template<class T, class kind>
class CPPMLEquality;

template<>
class CPPMLEquality<ImplValContainer, void> {
public:
	static char cmp(const ImplValContainer& lhs, const ImplValContainer& rhs)
		{
		return lhs.cmp(rhs);
		}
};

macro_defineCppmlComparisonOperators(ImplValContainer)
macro_defineMemberHashFunction(ImplValContainer);

template<>
class CPPMLPrettyPrint<ImplValContainer> {
public:
	static void prettyPrint(CPPMLPrettyPrintStream& s, const ImplValContainer& t)
		{
		t.toString(s);
		}
};


template<class T, class T2>
class CPPMLTransform;

template<>
class CPPMLTransform<ImplValContainer, void> {
public:
		template<class F>
		static Nullable<ImplValContainer> apply(const ImplValContainer& in, const F& f)
			{
			return null();
			}
};

template<class T, class T2>
class CPPMLVisit;

template<>
class CPPMLVisit<ImplValContainer, void> {
public:
		template<class F>
		static void apply(const ImplValContainer& in, F& f)
			{
			}
};

#endif

