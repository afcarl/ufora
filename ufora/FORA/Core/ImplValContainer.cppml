/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/
#include "ImplValContainer.hppml"
#include "CSTValue.hppml"
#include "Type.hppml"
#include "TupleCategory.hppml"
#include "../TypedFora/ABI/VectorRecord.hpp"
#include "Integers.hppml"



ImplValContainer::ImplValContainer(ImplVal val, ImplValContainer::IsOwned)
	{
	mVal = val;
	}
ImplValContainer::ImplValContainer(ImplVal val)
	{
	mVal = val.duplicate();
	}
ImplValContainer::ImplValContainer(const ImplValContainer& other)
	{
	mVal = other.mVal.duplicate();
	}
ImplValContainer::ImplValContainer()
	{
	static Type nothingType = Type::Nothing();
	mVal = ImplVal::introduce(nothingType);
	}

ImplValContainer::ImplValContainer(const TypedFora::Abi::VectorRecord& vector)
	{
	static Type vectorType = Type::Vector();

	mVal = ImplVal::introduce(vectorType);

	new (&mVal.cast<TypedFora::Abi::VectorRecord>()) TypedFora::Abi::VectorRecord(vector);
	}

ImplValContainer::ImplValContainer(const Type& t, void* data)
	{
	mVal = ImplVal(t, data).duplicate();
	}

ImplValContainer::ImplValContainer(const CSTValue& val)
	{
	mVal = val.getReference().duplicate();
	}

ImplValContainer::ImplValContainer(const ImmutableTreeVector<ImplValContainer>& args)
	{
	mVal = TupleCategory::createNewTuple(args.begin(), args.end());
	}

ImplValContainer::ImplValContainer(
		const ImmutableTreeVector<std::pair<ImplValContainer, Nullable<Symbol>>>& tupleElements
		)
	{
	mVal = TupleCategory::createNewTuple(tupleElements.begin(), tupleElements.end());
	}

ImplValContainer::ImplValContainer(const Dictionary& dictionary, bool isCST)
	{
	mVal = ImplVal::introduce(Type::Dictionary(isCST));
	mVal.type().initialize(mVal.data(), &dictionary);
	}

ImplValContainer ImplValContainer::assumeOwnershipOf(ImplVal val)
	{
	return ImplValContainer(val, IsOwned());
	}

hash_type ImplValContainer::hash(void) const
	{
	return mVal.type().hashObject(mVal.data()) + mVal.type().hash();
	}

char ImplValContainer::cmp(const ImplValContainer& other) const
	{
	if (type() < other.type())
		return -1;
	if (type() > other.type())
		return 1;

	return type().cmp(mVal.data(), other.data());
	}

bool ImplValContainer::convertToBoolean() const
	{
	return getReference().convertToBoolean();
	}


Nullable<uword_t> 	ImplValContainer::tupleGetSize(void) const
	{
	if (!type().isTuple())
		return null();
	return null() << TupleCategory::tupleSize(getReference());
	}

Nullable<ImplValContainer>	ImplValContainer::tupleGetItem(uword_t inIndex) const
	{
	if (!type().isTuple())
		return null();

	if (inIndex >= *tupleGetSize())
		return null();

	return null() << ImplValContainer(TupleCategory::getItem(getReference(), inIndex));
	}

Nullable<ImplValContainer>	ImplValContainer::classGetItem(uword_t inIndex) const
	{
	if (!type().isClass())
		return null();

	if (inIndex >= type().getClass().elements().size())
		return null();

	Type t = type().getClass().elements()[inIndex];
	uint64_t offset = type().byteOffsets()[inIndex];

	char* dataPtr = reinterpret_cast<char*>(data()) + offset;

	return null() << ImplValContainer(ImplVal(t, dataPtr));
	}

Nullable<Symbol>	ImplValContainer::tupleGetName(uword_t inIndex) const
	{
	lassert(type().isTuple());

	if (type().getTuple().names().size() > inIndex)
		return type().getTuple().names()[inIndex];

	lassert_dump(false, inIndex << " is out of range");
	}

Nullable<uint64_t> ImplValContainer::getUInt64(void) const
	{
	if (!type().isInteger())
		return null();
	return castToUInt64((void*)&(this->cast<char>()), type().getInteger().bits());
	}
Nullable<int64_t> ImplValContainer::getInt64(void) const
	{
	if (!type().isInteger())
		return null();
	return castToInt64((void*)&(this->cast<char>()), type().getInteger().bits());
	}

