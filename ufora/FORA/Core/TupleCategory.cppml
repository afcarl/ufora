/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/
#include "TupleCategory.hppml"

//an iterator over a FORA tuple
TupleCategory::iterator::iterator(const iterator& inIterator) :
			mTupleToIterate(inIterator.mTupleToIterate),
			mCurrentTupleIndex(inIterator.mCurrentTupleIndex),
			mCurrentTupleByteOffset(inIterator.mCurrentTupleByteOffset)
	{
	}

TupleCategory::iterator::iterator(ImplVal inImplVal, uword_t inIndex, uword_t inByteOffset) :
			mTupleToIterate(inImplVal),
			mCurrentTupleIndex(inIndex),
			mCurrentTupleByteOffset(inByteOffset)
	{
	}

TupleCategory::iterator TupleCategory::iterator::begin(ImplVal inValue)
	{
	return TupleCategory::iterator(inValue, 0, 0);
	}

TupleCategory::iterator TupleCategory::iterator::end(ImplVal inValue)
	{
	return TupleCategory::iterator(inValue, inValue.type().getTuple().types().size(), -1);
	}

sword_t TupleCategory::iterator::operator-(const iterator& inIterator) const
	{
	return mCurrentTupleIndex - inIterator.mCurrentTupleIndex;
	}

bool TupleCategory::iterator::operator==(const TupleCategory::iterator& inIterator) const
	{
	return mCurrentTupleIndex == inIterator.mCurrentTupleIndex;
	}
bool TupleCategory::iterator::operator!=(const TupleCategory::iterator& inIterator) const
	{
	return mCurrentTupleIndex != inIterator.mCurrentTupleIndex;
	}
bool TupleCategory::iterator::operator<(const TupleCategory::iterator& inIterator) const
	{
	return mCurrentTupleIndex < inIterator.mCurrentTupleIndex;
	}
TupleCategory::iterator TupleCategory::iterator::operator+(int i) const
	{
	int newTupleOffset = mCurrentTupleIndex + i;
	int newByteOffest;
	if (newTupleOffset < 0)
		newByteOffest = 0;
		else
	if (newTupleOffset >= mTupleToIterate.type().getTuple().types().size())
		newByteOffest = 0;
	else
		newByteOffest = mTupleToIterate.type().byteOffsets()[newTupleOffset];

	return TupleCategory::iterator(
		mTupleToIterate,
		newTupleOffset,
		newByteOffest
		);
	}

TupleCategory::iterator& TupleCategory::iterator::operator++(void)
	{
	mCurrentTupleByteOffset += mTupleToIterate.type().getTuple().types()[mCurrentTupleIndex].size();
	mCurrentTupleIndex++;
	return *this;
	}

TupleCategory::iterator TupleCategory::iterator::operator++(int)
	{
	iterator tr = *this;
	++ *this;
	return tr;
	}

ImplVal TupleCategory::iterator::operator*() const
	{
	const Type& t = mTupleToIterate.type().getTuple().types()[mCurrentTupleIndex];
	char* dataPtr = reinterpret_cast<char*>(mTupleToIterate.data()) + mCurrentTupleByteOffset;

	if (ImplVal::typeIsPassByValue(t))
		return ImplVal::unincrementedInline(t, dataPtr);

	return ImplVal(t, dataPtr);
	}

const Nullable<Symbol>&	TupleCategory::iterator::name(void)
	{
	return mTupleToIterate.type().getTuple().names()[mCurrentTupleIndex];
	}


TupleCategory::iteratorWithNames::iteratorWithNames(const iteratorWithNames& inIterator) :
			mTupleToIterate(inIterator.mTupleToIterate),
			mCurrentTupleIndex(inIterator.mCurrentTupleIndex),
			mCurrentTupleByteOffset(inIterator.mCurrentTupleByteOffset)
	{
	}

TupleCategory::iteratorWithNames::iteratorWithNames(ImplVal inImplVal, uword_t inIndex, uword_t inByteOffset) :
			mTupleToIterate(inImplVal),
			mCurrentTupleIndex(inIndex),
			mCurrentTupleByteOffset(inByteOffset)
	{
	}

TupleCategory::iteratorWithNames TupleCategory::iteratorWithNames::begin(ImplVal inValue)
	{
	return TupleCategory::iteratorWithNames(inValue, 0, 0);
	}

TupleCategory::iteratorWithNames TupleCategory::iteratorWithNames::end(ImplVal inValue)
	{
	return TupleCategory::iteratorWithNames(inValue, inValue.type().getTuple().types().size(), -1);
	}

sword_t TupleCategory::iteratorWithNames::operator-(const iteratorWithNames& inIterator) const
	{
	return mCurrentTupleIndex - inIterator.mCurrentTupleIndex;
	}

bool TupleCategory::iteratorWithNames::operator==(const TupleCategory::iteratorWithNames& inIterator) const
	{
	return mCurrentTupleIndex == inIterator.mCurrentTupleIndex;
	}
bool TupleCategory::iteratorWithNames::operator!=(const TupleCategory::iteratorWithNames& inIterator) const
	{
	return mCurrentTupleIndex != inIterator.mCurrentTupleIndex;
	}
bool TupleCategory::iteratorWithNames::operator<(const TupleCategory::iteratorWithNames& inIterator) const
	{
	return mCurrentTupleIndex < inIterator.mCurrentTupleIndex;
	}
TupleCategory::iteratorWithNames TupleCategory::iteratorWithNames::operator+(int i) const
	{
	int newTupleOffset = mCurrentTupleIndex + i;
	int newByteOffest;
	if (newTupleOffset < 0)
		newByteOffest = 0;
		else
	if (newTupleOffset >= mTupleToIterate.type().getTuple().types().size())
		newByteOffest = 0;
	else
		newByteOffest = mTupleToIterate.type().byteOffsets()[newTupleOffset];

	return TupleCategory::iteratorWithNames(
		mTupleToIterate,
		newTupleOffset,
		newByteOffest
		);
	}

TupleCategory::iteratorWithNames& TupleCategory::iteratorWithNames::operator++(void)
	{
	mCurrentTupleByteOffset += mTupleToIterate.type().getTuple().types()[mCurrentTupleIndex].size();
	mCurrentTupleIndex++;
	return *this;
	}

TupleCategory::iteratorWithNames TupleCategory::iteratorWithNames::operator++(int)
	{
	iteratorWithNames tr = *this;
	++ *this;
	return tr;
	}

pair<ImplVal, Nullable<Symbol> > TupleCategory::iteratorWithNames::operator*() const
	{
	const Type& t = mTupleToIterate.type().getTuple().types()[mCurrentTupleIndex];
	char* dataPtr = reinterpret_cast<char*>(mTupleToIterate.data()) + mCurrentTupleByteOffset;

	if (ImplVal::typeIsPassByValue(t))
		return make_pair(
			ImplVal::unincrementedInline(t, dataPtr),
			mTupleToIterate.type().getTuple().names()[mCurrentTupleIndex]
			);

	return make_pair(
			ImplVal(t, dataPtr),
			mTupleToIterate.type().getTuple().names()[mCurrentTupleIndex]
			);
	}

ImplVal TupleCategory::getItem(const ImplVal& inImplVal, uword_t inIndex)
	{
	TupleCategory::iterator it = TupleCategory::iterator::begin(inImplVal);
	TupleCategory::iterator it_end = TupleCategory::iterator::end(inImplVal);

	it = it + inIndex;
	lassert(it < it_end);

	return *it;
	}

ImplVal TupleCategory::getSliceReturnsOwned(const ImplVal& inImplVal, uword_t inIndexLow)
	{
	TupleCategory::iteratorWithNames it = TupleCategory::iteratorWithNames::begin(inImplVal) + inIndexLow;
	TupleCategory::iteratorWithNames it_end = TupleCategory::iteratorWithNames::end(inImplVal);

	if (it_end < it)
		it = it_end;

	return createNewTuple(it, it_end);
	}


