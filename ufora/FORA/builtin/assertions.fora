/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/
#Markdown("""
### Assertions

#### Description

The assertions module provides a mechanism for coders to assert various truths about their code,
primarily in the contexts of module code and unit tests.

For example, one can assert that values the come out of a function call are of an expected
type or in an expected range.

    let result = my_math_module.sqrt(10.0);
    assertions.assertGreaterEqual(result, 0.0)
""");


assertEqual: 
#Markdown("""
#### Usage

    assertions.assertEqual(x, y)
    assertions.assertEqual(x, y, msg:"x didn't equal y, but should have!")

#### Description

Asserts that two values satisfy equality (typically `==`).

#### Return Value

Returns `true` if the values are equal. Otherwise, throws an `AssertionError` exception.

#### Example

    let v1 = Vector.range(4)
    let v2 = [0, 1, 2, 3]
    assertions.assertEqual(v1, v2)

""")
fun(a, b, msg:=nothing)
    {
    if (msg is nothing)
        msg = "assertion " + String(a) + " == " + String(b) + " failed"

    if (not(a == b))
        throw Exception.AssertionError(msg)

    true
    }
(a, b, msg)
    {
    assertEqual(a, b, msg:msg)
    };

assertIs: 
#Markdown("""
#### Usage

    assertions.assertIs(x, y)
    assertions.assertIs(x, y, msg:"x wasn't identical to y, but should be!")

#### Description

Asserts that two values are identical (i.e. the `is` operator returns `true`).

#### Return Value

Returns `true` if the values are identical, otherwise, throws an `AssertionError` exception.

#### Example

    let v1 = Vector.range(5);
    let v2 = v1;
    assertions.assertIs(v1, v2)

""")
fun(a, b, msg:=nothing)
    {
    if (msg is nothing)
        msg = "assertion " + String(a) + " is " + String(b) + " failed"

    if (not(a is b))
        throw Exception.AssertionError(msg)

    true
    }
(a, b, msg)
    {
    assertIs(a, b, msg:msg);
    };

assertNotEqual: 
#Markdown("""
#### Usage

    assertions.assertNotEqual(x, y)
    assertions.assertNotEqual(x, y, msg: "x was equal to y, but shouldn't be!")

#### Description

Asserts that two values are not equal (typically equivalent to `!=`).

Effectively the inverse of `assertions.assertEqual`.

#### Return Value

Returns `true` if the values are not equal, otherwise throws an `AssertionError` exception.

#### Example

    assertions.assertNotEqual(math.pi, 3.14)

""")
fun(a, b, msg:=nothing)
    {
    if (msg is nothing)
        msg = "assertion " + String(a) + " != " + String(b) + " failed";

    if (a == b)
        throw Exception.AssertionError(msg)

    true
    }
(a, b, c)
    {
    assertNotEqual(a, b, msg:c)
    };

assertIsNot: 
#Markdown("""
#### Usage

    assertions.assertIsNot(x, y)
    assertions.assertIsNot(x, y, msg:"x and y were identical, but shouldn't be!")

#### Description

Asserts that two values are not identical (i.e. the operator `is not` returns `false`).

#### Return Value

Returns `true` if the assert succeeds, otherwise throws an `AssertionError` exception.

#### Example

    let v1 = Vector.range(10.0);
    let v2 = Vector.range(10.0);
    assertions.assertIsNot(v1, v2)

""")
fun(a, b, msg:=nothing)
    {
    if (msg is nothing)
        msg = "assertion " + String(a) + " is not " + String(b) + " failed"

    if (a is b)
        throw Exception.AssertionError(msg)

    true
    }
(a, b, c)
    {
    assertIsNot(a, b, msg:c)
    };

assertTrue: 
#Markdown("""
#### Usage

    assertions.assertTrue(x)
    assertions.assertTrue(x, msg: "Expected x to be true, but it wasn't!")

#### Description

Asserts that the given value is a truism.

Currently, the only values that are truism in Fora (those values which are considered `true` in an
`if` expression) are `true` and non-zero integers.

#### Return Value

Returns `true` if the value is equivalent to `true`, otherwise throws an `AssertionError` exception.

#### Example

    let x = 10;
    assertions.assertTrue(isConst(x))

""")
fun(a, msg:=nothing)
    {
    if (msg is nothing)
        msg = "Value " + String(a) + " unexpectedly false"

    if (not a)
        throw Exception.AssertionError(msg)

    true
    }
(a, msg)
    {
    assertTrue(a, msg:msg);
    };

assertFalse: 
#Markdown("""
#### Usage

    assertions.assertFalse(x)
    assertions.assertFalse(x, msg:"x is true, but should have been false.")

#### Description

Asserts that the given value is a falsism. 

All values that are not truisms (`true` and non-zero integers) are considered falsisms (values that
are considered `false` in `if` expressions).

#### Return Value

Returns `true` if the value is equivalent to `false`, otherwise throws an `AssertionError` 
exception.

#### Example

    let numElements = 10;
    let mVec = MutableVector(Float64).create(numElements, 0.0);
    let mutableObject = object { data: mVec; };

    assertions.assertFalse(isConst(mutableObject))

""")
fun(a, msg:=nothing)
    {
    if (msg is nothing)
        msg = "Value " + String(a) + " unexpectedly true"

    if (a)
        throw Exception.AssertionError(msg)

    true
    }
(a, msg)
    {
    assertTrue(a, msg:msg);
    };

assertIsNothing: 
#Markdown("""
#### Usage

    assertions.isNothing(x)
    assertions.isNothing(x, msg: "x was expected to be nothing, but wasn't.")

#### Description

Asserts that the given value is `nothing`.

#### Return Value

Returns `true` if the value is `nothing`, otherwise throws an `AssertionError` exception.

#### Example

    let f = fun() {
        yield 1;
        yield nothing;
        };
    let it = f();
    let one = pull it;
    assertions.assertIsNothing(pull it)

""")
fun(a, msg:=nothing)
    {
    if (msg is nothing)
        msg = "Value " + String(a) + " unexpectedly not nothing"

    if (a is not nothing)
        throw Exception.AssertionError(msg)

    true
    }
(a, msg)
    {
    assertIsNothing(a, msg:msg)
    };

assertIsNotNothing: 
#Markdown("""
#### Usage

    assertions.assertIsNotNothing(x)
    assertions.assertIsNotNothing(x, msg: "x was nothing, but should not have been!")

#### Description

Asserts that the given value is not `nothing`.

#### Return Value

Returns `true` if the value is something other than `nothing`, otherwise throws an `AssertionError`
exception.

#### Example

    let f = fun() {
        yield 1;
        yield nothing;
        };
    let it = f();
    let one = pull it;
    assertions.assertIsNotNothing(one)

""")
fun(a, msg:=nothing)
    {
    if (msg is nothing)
        msg = "Value " + String(a) + " unexpectedly nothing"
        
    if (a is nothing)
        throw Exception.AssertionError(msg)

    true
    }
(a, msg) 
    {
    assertIsNotNothing(a, msg:msg)
    };

assertIn: 
#Markdown("""
#### Usage

    assertions.assertIn(value, container)
    assertions.assertIn(value, container, msg: "Expected to see value in container, but it wasn't there!")

#### Description

Asserts that the given Fora `value` is contained in the given `container` value, or in other words,
the operator `in` returns `true`.

#### Return Value

Returns `true` if `value` is found in `container` (or the `in` operator returns `true`), otherwise
throws an `AssertionError` exception.

#### Example

    let v = Vector.range(10);
    assertions.assertIn(5, v)

Or, otherwise using the `in` operator in an object:

    let evens = object {
        operator in (x) {
            x % 2 == 0
            };
        };

    assertions.assertIn(2, evens)

""")
fun(a, b, msg:=nothing)
    {
    if (msg is nothing)
        msg = "Assertion " + String(a) + " in " + String(b) + " failed"

    if (a not in b)
        throw Exception.AssertionError(msg)

    true
    }
(a, b, msg)
    {
    assertIn(a, b, msg:msg)
    };

assertNotIn: 
#Markdown("""
#### Usage

    assertions.assertNotIn(value, container)
    assertions.assertNotIn(value, container, msg: "Didn't expect to see `value` in `container`, but it was there.")

#### Description

Asserts that `value` is not contained in `container`, or rather, that the `in` operator returns
`false`.

#### Return Value

Returns `true` if the assertion passes, otherwise throws an `AssertionError` exception.

#### Example

    let evens = object {
        operator in (x) {
            x % 2 == 0
            };
        };

    assertions.assertNotIn(3, evens)

""")
fun(a, b, msg:=nothing)
    {
    if (msg is nothing)
        msg = "Assertion " + String(a) + " not in " + String(b) + " failed"

    if (a in b)
        throw Exception.AssertionError(msg)

    true
    }
(a, b, msg)
    {
    assertNotIn(a, b, msg:msg)
    };

assertThrows: 
#Markdown("""
#### Usage

    assertions.assertThrows(f)
    assertions.assertThrows(f, x, y, z)
    assertions.assertThrows(f, x, msg: "f should have thrown an exception with value x, but it didn't.")

#### Description

Asserts that the given callable object `f` throws an exception when called.

You can provide an arbitrary number of arguments to call `f` with as well. So the following:

    assertions.assertThrows(f, x, y)

will call:

    f(x, y)

and test for an exception.

#### Return Value

Returns `true` if the assertion passes, otherwise throws an `AssertionError` exception.

#### Example

    let realSquareRoot =
    fun (math.Complex(...) complex) {
        throw "realSquareRoot doesn't support complex numbers."
        }
    (real) {
        if (real < 0) {
            throw "Can't take the square root of a negative number with realSquareRoot."
            }
        else {
            return math.sqrt(real);
            }
        };

    assertions.assertThrows(realSquareRoot, -1)

""")
fun(callable, *args, msg:=nothing)
    {
    try {
        callable(*args);
        } 
    catch (...) 
        {
        return true;
        }

    if (msg is nothing)
        msg = "expression " + String(callable) + "`(`Call, *" + String(args) + ")" +
            "unexpectedly did not throw "

    throw Exception.AssertionError(msg)
    };


assertRaises: 
#Markdown("""
#### Usage

    assertions.assertRaises(exceptionType, f)
    assertions.assertRaises(exceptionType, f, msg:"Expected f to throw a particular exception, but it didn't.")

#### Description

Asserts that the given callable value `f` will throw an exception of a particular type, `exceptionType`.

#### Return Value

Returns `true` if the assertion passes, otherwise throws an `AssertionError` exception.

After the exception type and the callable, you can specify an arbitrary number of arguments to
call `f` with:

    assertions.assertRaises(exceptionType, f, x, y)

will call:

    f(x, y)

and test for exception `exceptionType`.

#### Example

Here, we can write a custom assertion function and test to see that it works:

    let assertEvenNumber = fun(x) {
        if (x % 2 != 0) {
            throw Exception.AssertionError("Didn't get an even number: " + String(x))
            }
        true
        };

    assertions.assertRaises(Exception.AssertionError, assertEvenNumber, 3)

""")
fun(exception, callable, *args, msg:=nothing)
    {
    try {
        callable(*args)
        } 
    catch ((exception)(...)) 
        {
        return true;
        }
    (...) { }

    if (msg is nothing)
        msg = "expression " + String(callable) + "`(`Call, *" + String(args) + ")" +
            "unexpectedly did not raise a " + String(exception)

    throw Exception.AssertionError(msg)
    };

assertGreater: 
#Markdown("""
#### Usage

    assertions.assertGreater(x, y)
    assertions.assertGreater(x, y, msg: "x was expected to be greater than y, but wasn't.")

#### Description

Asserts that value `x` is greater than `y`, satisfying an operator `>` comparison.

#### Return Value

Returns `true` if the assertion passes, otherwise throws an `AssertionError` exception.

#### Example

    let sq = fun(x) {
        x * x
        };
    assertions.assertGreater(sq(4), 4)

""")
fun(a, b, msg:=nothing)
    {
    if (msg is nothing)
        msg = "Assertion " + String(a) + " > " + String(b) + " failed"

    if (not (a > b))
        throw Exception.AssertionError(msg)

    true
    }
(a, b, msg)
    {
    assertGreater(a, b, msg:msg)
    };

assertGreaterEqual: 
#Markdown("""
#### Usage

    assertions.assertGreaterEqual(x, y)
    assertions.assertGreaterEqual(x, y, msg: "x was expected to be greater than or equal to y, but wasn't.")

#### Description

Asserts that value `x` is greater than or equal to `y`, satisfying an operator `>=` comparison.

#### Return Value

Returns `true` if the assertion passes, otherwise throws an `AssertionError` exception.

#### Example

    let sq = fun(x) {
        x * x
        };
    assertions.assertGreaterEqual(sq(1), 1)

""")
fun(a, b, msg:=nothing)
    {
    if (msg is nothing)
        msg = "Assertion " + String(a) + " >= " + String(b) + " failed"

    if (not (a >= b))
        throw Exception.AssertionError(msg)

    true
    }
(a, b, msg)
    {
    assertGreaterEqual(a, b, msg:msg)
    };

assertLess: 
#Markdown("""
#### Usage

    assertions.assertLess(x, y)
    assertions.assertLess(x, y, msg: "x was expected to be less than y, but wasn't.")

#### Description

Asserts that value `x` is less than `y`, satisfying an operator `<` comparison.

#### Return Value

Returns `true` if the assertion passes, otherwise throws an `AssertionError` exception.

#### Example

    let sq = fun(x) {
        x * x
        };
    assertions.assertLess(sq(0.5), 0.5)

""")
fun(a, b, msg:=nothing)
    {
    if (msg is nothing)
        msg = "Assertion " + String(a) + " < " + String(b) + " failed"

    if (not (a < b))
        throw Exception.AssertionError(msg)

    true
    }
(a, b, msg)
    {
    assertLess(a, b, msg:msg)
    };

assertLessEqual: 
#Markdown("""
#### Usage

    assertions.assertLessEqual(x, y)
    assertions.assertLessEqual(x, y, msg: "x was expected to be less than or equal to y, but wasn't.")

#### Description

Asserts that value `x` is less than or equal to `y`, satisfying an operator `<=` comparison.

#### Return Value

Returns `true` if the assertion passes, otherwise throws an `AssertionError` exception.

#### Example

    let sq = fun(x) {
        x * x
        };
    assertions.assertLess(sq(1), 1)

""")
fun(a, b, msg:=nothing)
    {
    if (msg is nothing)
        msg = "Assertion " + String(a) + " <= " + String(b) + " failed"

    if (not (a <= b))
        throw Exception.AssertionError(msg)

    true
    }
(a, b, msg)
    {
    assertLessEqual(a, b, msg:msg)
    };


assertClose: 
#Markdown("""
#### Usage

    assertions.assertClose(x, y)
    assertions.assertClose(
        x, y,
        rtol:1e-2,
        atol:0.0,
        msg:="x and y were expected to be close withing hundredths tolerance, but weren't."
        )

#### Description

Asserts that two values, `x` and `y`, are close to each other within a specified tolerance.

Used to compare floating point numbers and values that need to be guaranteed within a particular 
precision.

Tolerances are specified by two arguments, `rtol` and `atol`, related by the following equation:

    |actual - desired| <= atol + rtol x |actual|

#### Return Value

Returns `true` if the given values are close enough within tolerance, otherwise throws an
`AssertionError` exception.

#### Example

    assertions.assertClose(math.log_10(12.0), 1.0, atol:0.1)

""")
fun(math.Complex(a,b), math.Complex(c,d), rtol:=1e-7, atol:=0.0, msg:=nothing)
    {
    assertClose(a, c, rtol:rtol, atol:atol, msg:msg);
    assertClose(b, d, rtol:rtol, atol:atol, msg:msg);    
    }
(actual, desired, rtol:=1e-7, atol:=0.0, msg:=nothing)
    {
    if (msg is nothing)
        msg = "Assertion math.abs(actual - desired) " + 
            "<= atol + rtol * math.abs(desired) failed with " +
            "actual = " + String(actual) + ", desired = " + String(desired) + 
            ", rtol = " + String(rtol) + ", atol = " + String(atol)

    if (not (math.abs(actual - desired) <= atol + rtol * math.abs(desired)))
        throw Exception.AssertionError(msg)

    true
    };

assertAllClose: 
#Markdown("""
#### Usage

    assertions.assertAllClose(vector1, vector2)
    assertions.assertAllClose(matrix1, matrix2)
    assertions.assertAllClose(value1, value2, msg:"Contained values were all expected to be close, but weren't.")

#### Description

Asserts that the two given containers (typically Vectors, Tuples, and Matrices) contain values
that are all close to each other in a pairwise comparison within a given tolerance.

Like `assertClose`, tolerances are specified with arguments `rtol` and `atol`. This assertion
method acts values from the two given arguments in pairwise fashion and asserts that they all satisfy
`assertClose`.

#### Return Value

Returns `true` if all pairwise values are close within the given tolerance, otherwise throws an
`AssertionError` exception.

#### Example

    let v1 = [math.log_10(10.0), math.log_10(11.0), math.log_10(12.0)]
    let v2 = [1.0, 1.0, 1.0];
    assertions.assertAllClose(v1, v2, atol:0.1)

""")
fun(filters.IsVector(actual) or (*actual), filters.IsVector(desired) or (*desired), 
rtol:=1e-7, atol:=0.0, msg:=nothing)
    {
    let msgToUse = 
        if (msg is nothing)
            {
            "Assertion assertAllClose(" + String(actual) + ", " + String(desired) + 
            " failed since size(" + String(actual) + ") = " String(size(actual)) + 
            " != " + String(size(desired)) + " = size(" + String(desired) + ")"
            }
        else
            {
            msg
            }
        ;

    if (size(actual) != size(desired))
        throw Exception.AssertionError(msgToUse)

    zipWith(
        fun(x, y, ix)
            {
            if (not (math.abs(x - y) <= atol + rtol * math.abs(y)))
                {
                let msgToUse = 
                    if (msg is nothing)
                        {
                        "Assertion math.abs(actual[ix] - desired[ix]) " +
                        "<= atol + rtol * math.abs(desired[ix]) failed with " +
                        "actual = " + String(actual) + 
                        ", desired = " + String(desired) + 
                        ", rtol = " + String(rtol) + 
                        ", atol = " + String(atol) + ", ix = " + String(ix) +
                        "\nvalues at ix are " + String(x) + " and " + 
                        String(y) + ", respecfully"
                        }
                    else { msg };

                throw Exception.AssertionError(msgToUse)
                }
            },
        actual, desired, Vector.range(size(actual))
        )

    true
    }
(math.Matrix(...) m1, math.Matrix(...) m2, rtol:=1e-7, atol:=0.0, msg:=nothing)
    {
    assertAllClose(m1.columnMajorData(), m2.columnMajorData(), rtol:rtol, atol:atol, msg:msg)
    };

assertAllEqual: 
#Markdown("""
#### Usage

    assertions.assertAllEqual(vector1, vector2)
    assertions.assertAllEqual(matrix1, matrix2)
    assertions.assertAllEqual(value1, value2, msg: msg)

#### Description

Asserts that the two given containers (typically Vectors, Tuples, and Matrices) contain values
that are all equal to each other in a pairwise comparison.

#### Return Value

Returns `true` if all pairwise values are equal, otherwise throws an
`AssertionError` exception.

#### Example

    let v1 = [1,2,3,4]
    let v2 = [1,2,3,5]
    assertions.assertAllEqual(v1, v2) // throws an Exception

""")
fun(filters.IsVector(actual) or (*actual), filters.IsVector(desired) or (*desired),
    msg:=nothing)
    {
    let msgToUse = 
        if (msg is nothing)
            {
            "Assertion assertAllEqual(" + String(actual) + ", " + String(desired) + 
            " failed since size(" + String(actual) + ") = " String(size(actual)) + 
            " != " + String(size(desired)) + " = size(" + String(desired) + ")"
            }
        else
            {
            msg
            }
        ;

    if (size(actual) != size(desired))
        throw Exception.AssertionError(msgToUse)

    zipWith(
        fun(x, y, ix)
            {
            if (not (x == y))
                {
                let msgToUse = 
                    if (msg is nothing)
                        {
                        "Assertion actual[ix] == desired[ix]) " +
                        "failed with " +
                        "actual = " + String(actual) + 
                        ", desired = " + String(desired) + 
                        ", ix = " + String(ix) +
                        "\nvalues at ix are " + String(x) + " and " + 
                        String(y) + ", respecfully"
                        }
                    else { msg };

                throw Exception.AssertionError(msgToUse)
                }
            },
        actual, desired, Vector.range(size(actual))
        )

    true
    }
(math.Matrix(...) m1, math.Matrix(...) m2, msg:=nothing)
    {
    assertAllEqual(m1.columnMajorData(), m2.columnMajorData(), msg:msg)
    };

assertMatches:
#Markdown("""
#### Usage

    assertions.assertMatches(value, matcher)
    assertions.assertMatches(value, matcher, msg:"matcher was expected to match value, but it didn't.")

#### Description

Asserts that the given `value` is matched by a matching object `matcher`.

Used to check for types and other patterns that matching and filters enables. This is equivalent
to the expression:

    match (value) with
        (matcher(...)) { true }
        (matcher _) { true }
        (...) { throw Exception.AssertionError("fail") }

#### Return Value

Returns `true` if the value is matched, otherwise throws an `AssertionError` exception.

#### Example

    assertions.assertMatches(12, filters.IsInteger)
    assertions.assertMatches(nothing, nothing)

""")
fun (a, m, msg:=nothing)
    {
    if (msg is nothing)
        msg = "Assertion " + String(a) + " should match " + String(m) + " failed";

    match (a) with
        (m(...)) {
            true
            }
        (m _) {
            true
            }
        (...) {
            throw Exception.AssertionError(msg)
            }
    }
(a, m, msg)
    {
    assertMatches(a, m, msg:msg)
    };

assertDoesNotMatch:
#Markdown("""
#### Usage

    assertions.assertDoesNotMatch(value, matcher)
    assertions.assertDoesNotMatch(value, matcher, msg:"matcher was not expected to match value, but it did anyway")

#### Description

Asserts that the specified `matcher` does not in fact match the given `value`.

This is equivalent to the expression:

    match (value) with
        (matcher(...)) { throw Exception.AssertionError("fail") }
        (matcher _) { throw Exception.AssertionError("fail") }
        (...) { true }

#### Return Value

Returns `true` if the value is not matched, otherwise throws an `AssertionError` exception.

#### Example

    assertions.assertDoesNotMatch(nothing, filters.IsString)
    assertions.assertDoesNotMatch(12, 13)

""")
fun (a, m, msg:=nothing)
    {
    if (msg is nothing)
        msg = "Assertion " + String(a) + 
            " should not match " + String(m) + " failed"

    match (a) with
        (m(...)) {
            throw Exception.AssertionError(msg)
            }
        (m _) {
            throw Exception.AssertionError(msg)
            }
        (...) {
            true
            }
    }
(a, m, msg)
    {
    assertDoesNotMatch(a, m, msg:msg)
    };


