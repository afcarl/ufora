/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/
#Markdown("""
### dataframe

#### Description

Data structures for doing data analysis in Fora.

""");

#Markdown("""
#### Usage

    dataframe.assertFramesEqual(DataFrame(df1), DataFrame(df2), checkNames:=true)

#### Description

Assert that two `DataFrame`s are equal. Two dataframes `df1` and `df2` 
are considered equal if they have the same number of columns, the same 
number of rows, and for each index `0 <= i < df1.numColumns`, we have
`dataframe.assertSeriesEqual(df1[i], df2[i])`. Note that in 
`dataframe.assertSeriesEqual`, NaNs are _considered equal_. Furthermore, 
if `checkNames == true`, then we further impose that 
`df1.columnNames == df2.columnNames`. 
""")
assertFramesEqual:
fun(DataFrame(df1), DataFrame(df2), checkNames:=true)
    {
    if (checkNames)
        assertions.assertEqual(df1.columnNames, df2.columnNames);

    assertions.assertEqual(
        df1.numRows, df2.numRows,
        "dataframes have different number of rows: " + String(df1.numRows) + " vs " + String(df2.numRows)
        );

    assertions.assertEqual(
        df1.numColumns, df2.numColumns,
        "dataframes have different number of columns: "
         + String(df1.numColumns) + " vs " + String(df2.numColumns)
        );

    // we're not imagining a huge number of elements here
    for columnIx in sequence(df1.numColumns)
        {
        try {
            assertSeriesEqual(
                df1.getColumn(columnIx), df2.getColumn(columnIx)
                )
            }
        catch (Exception.AssertionError(msg:e)) {
            throw Exception.AssertionError(
                "dataframes differ at column " + String(columnIx) +
                ": " + String(e)
                );
            }
        }

    true
    };

#Markdown("""
#### Usage

     dataframe.assertSeriesEqual(dataframe.Series(s1), dataframe.Series(s2))

#### Description

Assert that two `Series` objects are equal. Two series `s1` and `s2` are 
considered equal if and only if `size(s1) == size(s2)` and for each 
integer `0 <= i < size(s1)` we have `s1[i] == s2[i]` _OR_ if 
`s1[i].isNan and s2[i].isNan`. 

In other words, two series are considered 
equal if they have the same size and corresponding elements are equal, 
with the caveat that `NaN`s are considered equal for this case.
""")    
assertSeriesEqual:
fun(Series(s1), Series(s2))
    {
    assertions.assertEqual(
        size(s1), size(s2), msg:
        "series have differing lengths (" + String(s1) + " vs " + String(s2) + "), hence are not equal"
        )

    sum(0, size(s1), 
        fun(ix) { 
            if (filters.IsFloat(s1[ix]) and filters.IsFloat(s1[ix]))
                {
                assertions.assertTrue(
                    s1[ix] == s2[ix] or (s1[ix].isNan and s2[ix].isNan),
                    msg: "series differ at element " + String(ix) + " (" + String(s1[ix]) + " vs " + String(s2[ix]) + ")"
                    );
                }
            else {
                assertions.assertEqual(
                    s1[ix], s2[ix], 
                    msg: "series differ at element " + String(ix) + " (" + String(s1[ix]) + " vs " + String(s2[ix]) + ")"
                    ) 
                }
            }
       );

    true
    };

assertRowsEqual: fun(DataFrameRow(row1), DataFrameRow(row2)) {
    assertions.assertEqual(row1.toVector(), row2.toVector())
    assertions.assertEqual(row1.columnNames(), row2.columnNames())
    };

