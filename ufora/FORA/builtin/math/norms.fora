/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/
#Markdown(
"""### distances

#### Description

Some common mathmatical norms. 

These are all currently single-threaded versions, though it's simple to turn them
into distributed versions (in a manner similar to `builtin.sum`).

""");

l_infinity:
#Markdown(
"""#### Usage

    math.norms.l_infinity(vec)

#### Description

Returns the l-infinity norm of vector (or indexable) `vec`. 
""")
fun(v) {
    let res = 0.0;
    let ix = 0;
    let top = size(v);

    while (ix < top) {
        res = res >>> math.abs(v[ix])
        ix = ix + 1
        }
    res
    };

lp:
#Markdown(
"""#### Usage

    math.norms.lp(vec)

#### Description

Returns the l-p (aka norm of vector (or indexable) `vec`. 
""")
fun(v, p:) {
    let res = 0.0;
    let ix = 0;
    let top = size(v)

    while (ix < top) {
        let diff = math.abs(v[ix]);
        res = res + diff ** p
        ix = ix + 1;
        }
    res ** (1.0 / p)
    };    

l2:
#Markdown(
"""#### Usage

    math.norms.l2(vec)

#### Description

Returns the l2 (aka Euclidean) norm of vector (or indexable) `vec`. 
""")
fun(v) {
    math.sqrt(l2_squared(v))
    };

l2_squared:
#Markdown(
"""#### Usage

    math.norms.l2_squared(vec)

#### Description

Returns the squared l2 (aka Euclidean) norm of vector (or indexable) `vec`. 
""")
fun(v) {
    let res = 0.0;
    let ix = 0;
    let top = size(v)

    while (ix < top) {
        let diff = v[ix];
        res = res + diff * diff
        ix = ix + 1;
        }
    res
    };


l1: 
#Markdown(
"""#### Usage

    math.norms.l1(vec)

#### Description

Returns the l1 (aka Manhattan, or taxicab) norm of vector (or indexable) `vec`. 
""")
fun(v) {
    let res = 0.0;
    let ix = 0;
    let top = size(v)

    while (ix < top) {
        let diff = v[ix];
        res = res + math.abs(diff)
        ix = ix + 1;
        }
    res
    };

