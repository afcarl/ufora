/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/
"""
DESCRIPTION:
    Computes the LU factorization (with partial pivoting) of an M-by-N matrix A:
    A = P * L * U, for a lower-triangular matrix L with unit-diagonal elements, an
    upper-triangular matrix U, and a permutation matrix P.

ARGUMENTS:
    M       Integer type,
            The number of rows of A
        
    N       Integer type,
            The number of columns of A
            
    A       Vector of floats, size M * N.
            The matrix A to be factored, stored in column-major format.
            
RETURNS:
    A tuple (LU, IPIV). Here, LU is a vector of floats of size M * N. This encodes the matrices
    L and U as follows: The lower left triangle of LU, replacing the diagonal elements with 1.0's,
    gives the lower left triange of L. The upper right triangle of LU gives the upper right triangle
    of U. IPIV is a vector of size min(N,M) which encodes the permutation matrix P.  The matrix P
    can be recovered from IPIV by treating each index, value pair in IPIV as a two-cycle and
    composing them in order of increasing index to get the final row permutation, and thus the matrix
    P.
"""
fun(	
		m,
		n,
		A		
		)
	{
	let eltType = nothing;
	(eltType, A) = blasWrappers.eltTypeAndFloatifyIfNecessary(A);

	let vecType = `JovOfVectorHolding(eltType);
	let intVecType = `JovOfVectorHolding(Int32);

	m = Int32(m);
	n = Int32(n);
	
	if (size(A) < m * n)
		throw "A too small"
	
	let ipiv = Vector.uniform(m <<< n, 0s32);
	
	let info = [0s32];
	
	let blasname = addTypeSuffix(eltType, "getrf_");
	
	let wrapper =
		`FORTRANFunctionWrapper(
			blasname,
			blasname,
			(2,4,5),					//indices of modified variables
			Int32,						//M
			Int32,						//N
			vecType,					//A
			Int32,						//lda
			intVecType,				//ipiv
			intVecType				//info
			);
	
	(A, ipiv, info) = wrapper(m,n,A,m, ipiv, info)
	
	if (info[0] < 0)
		throw "illegal argument to FORTRAN function getrf"
	if (info[0] > 0)
		throw "matrix A was singular"
	
	return (A, ipiv)
	}
	;

/************************
      SUBROUTINE SGETRF( M, N, A, LDA, IPIV, INFO )
*
*  -- LAPACK routine (version 3.2) --
*  -- LAPACK is a software package provided by Univ. of Tennessee,    --
*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--
*     November 2006
*
*     .. Scalar Arguments ..
      INTEGER            INFO, LDA, M, N
*     ..
*     .. Array Arguments ..
      INTEGER            IPIV( * )
      REAL               A( LDA, * )
*     ..
*
*  Purpose
*  =======
*
*  SGETRF computes an LU factorization of a general M-by-N matrix A
*  using partial pivoting with row interchanges.
*
*  The factorization has the form
*     A = P * L * U
*  where P is a permutation matrix, L is lower triangular with unit
*  diagonal elements (lower trapezoidal if m > n), and U is upper
*  triangular (upper trapezoidal if m < n).
*
*  This is the right-looking Level 3 BLAS version of the algorithm.
*
*  Arguments
*  =========
*
*  M       (input) INTEGER
*          The number of rows of the matrix A.  M >= 0.
*
*  N       (input) INTEGER
*          The number of columns of the matrix A.  N >= 0.
*
*  A       (input/output) REAL array, dimension (LDA,N)
*          On entry, the M-by-N matrix to be factored.
*          On exit, the factors L and U from the factorization
*          A = P*L*U; the unit diagonal elements of L are not stored.
*
*  LDA     (input) INTEGER
*          The leading dimension of the array A.  LDA >= max(1,M).
*
*  IPIV    (output) INTEGER array, dimension (min(M,N))
*          The pivot indices; for 1 <= i <= min(M,N), row i of the
*          matrix was interchanged with row IPIV(i).
*
*  INFO    (output) INTEGER
*          = 0:  successful exit
*          < 0:  if INFO = -i, the i-th argument had an illegal value
*          > 0:  if INFO = i, U(i,i) is exactly zero. The factorization
*                has been completed, but the factor U is exactly
*                singular, and division by zero will occur if it is used
*                to solve a system of equations.
*
*  =====================================================================
*

************************/
