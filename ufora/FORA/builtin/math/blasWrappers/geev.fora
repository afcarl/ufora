/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/
"""
DESCRIPTION:
    DGEEV computes for an N-by-N real nonsymmetric matrix A, the
    eigenvalues and, optionally, the left and/or right eigenvectors.
    
    The right eigenvector v(j) of A satisfies
                     A * v(j) = lambda(j) * v(j)
    where lambda(j) is its eigenvalue.
    The left eigenvector u(j) of A satisfies
                  u(j)**T * A = lambda(j) * u(j)**T
    where u(j)**T denotes the transpose of u(j).
    
    The computed eigenvectors are normalized to have Euclidean norm
    equal to 1 and largest component real.

ARGUMENTS:
    JOBVL       String or UInt8.
                If 'N', does not compute the left eigenvectors of A.
                If 'V', computes the left eigenvectors of A.
                
    JOBVR       String or UInt8.
                If 'N', does not compute the right eigenvectors of A.
                If 'V', computes the right eigenvectors of A.
                
    N           Integer type.
                The number of rows (== number of columns) of the matrix A.
                
    A           Vector of Float, size N * N.
                The matrix A, stored in column-major format.
                
RETURNS:
    If JOBVL and JOBVR are both 'N': returns a pair (wr, wi). wr is a vector of floats (having size
    N)consisting of the real parts of the eigenvalues of A. wi is a vector of floats consisting of
    the imaginary parts of the eigenvalues of A (and, of course, for each i = 0 ... N - 1, wr[i] and
    wi[i] form the real and imaginary parts, respectfully of an eigenvalue of A).
    
    If JOBVL is 'N' and JOBVR is 'V', then we get a tuple: (wr, wi, vr). Here, wr and wi are as
    above. vr is a vector of floats (size N ** 2) that encodes a collection of right
    eigenvectors of A as follows: view vr as a column-major matrix. If the i-th eigenvalue of A is
    real, then a corresponding eigenvector for that eigenvalue is the i-th column of A. If the i-th
    eigenvalue of A has non-zero imaginary part then, letting A[:k] be the the k-th column of A,
    A[:i] + sqrt(-1) * A[:i + 1] and A[:i] - sqrt(-1) * A[:i + 1] are eigenvectors for the eigenvalues
    wr[i] + sqrt(-1) * wi[i] and wr[i] + sqrt(-1) * wi[i], respectfully.
    
    If JOBVL is 'V' and JOBVR is 'N', then we get a tuple (wr, wi, vl). Here, wr and wi are as
    above, and vl encodes a collection of left eigenvectors of A in a similar fashion as for vr
    above
    
    Finally, if both JOBVL and JOBVR and 'V', then we get a tuple (wr, wi, vl, vr). Notation follows
    above.

"""
fun(    
        jobvlIn,
        jobvrIn,
        n,
        A
        )
    {
    let jobvl = match (jobvlIn) with
        ('N')   { 'N'[0] }
        ('V')   { 'V'[0] }
        ;
    let jobvr = match (jobvrIn) with
        ('N')   { 'N'[0] }
        ('V')   { 'V'[0] }
        ;
    n = Int32(n);
    
    if (size(A) < n * n)
        throw "size of matrix A too small"
    A = A;

	let elementType = nothing;
	(elementType, A) = blasWrappers.eltTypeAndFloatifyIfNecessary(A);

	let vecType = `JovOfVectorHolding(elementType);    
	let intVecType = `JovOfVectorHolding(Int32);

    let wr = Vector.uniform(n, elementType());
    let wi = Vector.uniform(n, elementType());
    let vl = match (jobvlIn) with
        ('N')   { [] :: elementType() }
        ('V')   { Vector.uniform(n * n, elementType()); }
        ;
    let vr = match (jobvrIn) with
        ('N')   { [] :: elementType() }
        ('V')   { Vector.uniform(n * n, elementType()); }
        ;
    let work = [] :: elementType();
    let lwork = -1s32;
    let info = [0s32];
    
    let blasname = addTypeSuffix(elementType, "geev_");
    
    let wrapper =
        `FORTRANFunctionWrapper(
            blasname,
            blasname,
            (3,5,6,7,9,11,13),  //arguments that are modified by the function
            UInt8,              //0  JOBVL   (input) CHARACTER*1
            UInt8,              //1  JOBVR   (input) CHARACTER*1
            Int32,              //2  N       (input) INTEGER
            vecType,           //3  A       (input/output) DOUBLE PRECISION array, dimension (LDA,N)
            Int32,              //4  LDA     (input) INTEGER
            vecType,           //5  WR      (output) DOUBLE PRECISION array, dimension (N)
            vecType,           //6  WI      (output) DOUBLE PRECISION array, dimension (N)
            vecType,           //7  VL      (output) DOUBLE PRECISION array, dimension (LDVL,N)
            Int32,              //8  LDVL    (input) INTEGER
            vecType,           //9  VR      (output) DOUBLE PRECISION array, dimension (LDVR,N)
            Int32,              //10  LDVR    (input) INTEGER
            vecType,           //11  WORK    (workspace/output) DOUBLE PRECISION array, dimension (MAX(1,LWORK))
            Int32,              //12  LWORK   (input) INTEGER
            intVecType	    //13  INFO    (output) INTEGER
        );
        
    (A, wr, wi, vl, vr, work, info) = wrapper(
                                        jobvl,
                                        jobvr,
                                        n,
                                        A,
                                        n,
                                        wr,
                                        wi,
                                        vl,
                                        n,
                                        vr,
                                        n,
                                        work,
                                        lwork,
                                        info
                                        );
                                
    if (info[0] != 0s32)
        throw "error calling FORTRAN function xGEEV";

    lwork = Int32(
            match (work[0]) with
            ((re,im)) { re }
            (x) { x }
        );
    
    work = Vector.uniform(lwork >>> 1, elementType());
    
    (A, wr, wi, vl, vr, work, info) = wrapper(
                                        jobvl,
                                        jobvr,
                                        n,
                                        A,
                                        n,
                                        wr,
                                        wi,
                                        vl,
                                        n,
                                        vr,
                                        n,
                                        work,
                                        lwork,
                                        info
                                        );
    
    if (info[0] < 0s32)
        throw "illegal input to FORTRAN function xGEEV: argument " + String(-info[0]);
    
    if (info[0] > 0s32)
        throw "The QR algorithm failed to compute all eigenvalues.";

    if (jobvl == 'N'[0] and jobvr == 'N'[0])
        return (wr, wi);    
        
    if (jobvl == 'N'[0] and jobvr == 'V'[0])
        return (wr, wi, vr);
        
    if (jobvl == 'V'[0] and jobvr == 'N'[0])
        return (wr, wi, vl);
        
    return (wr, wi, vl, vr);
    }
    ;

/*
SUBROUTINE DGEEV( JOBVL, JOBVR, N, A, LDA, WR, WI, VL, LDVL, VR,
     $                  LDVR, WORK, LWORK, INFO )
*
*  -- LAPACK driver routine (version 3.3.1) --
*  -- LAPACK is a software package provided by Univ. of Tennessee,    --
*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--
*  -- April 2011                                                      --
*
*     .. Scalar Arguments ..
      CHARACTER          JOBVL, JOBVR
      INTEGER            INFO, LDA, LDVL, LDVR, LWORK, N
*     ..
*     .. Array Arguments ..
      DOUBLE PRECISION   A( LDA, * ), VL( LDVL, * ), VR( LDVR, * ),
     $                   WI( * ), WORK( * ), WR( * )
*     ..
*
*  Purpose
*  =======
*
*  DGEEV computes for an N-by-N real nonsymmetric matrix A, the
*  eigenvalues and, optionally, the left and/or right eigenvectors.
*
*  The right eigenvector v(j) of A satisfies
*                   A * v(j) = lambda(j) * v(j)
*  where lambda(j) is its eigenvalue.
*  The left eigenvector u(j) of A satisfies
*                u(j)**T * A = lambda(j) * u(j)**T
*  where u(j)**T denotes the transpose of u(j).
*
*  The computed eigenvectors are normalized to have Euclidean norm
*  equal to 1 and largest component real.
*
*  Arguments
*  =========
*
*0  JOBVL   (input) CHARACTER*1
*          = 'N': left eigenvectors of A are not computed;
*          = 'V': left eigenvectors of A are computed.
*
*1  JOBVR   (input) CHARACTER*1
*          = 'N': right eigenvectors of A are not computed;
*          = 'V': right eigenvectors of A are computed.
*
*2  N       (input) INTEGER
*          The order of the matrix A. N >= 0.
*
*3  A       (input/output) DOUBLE PRECISION array, dimension (LDA,N)
*          On entry, the N-by-N matrix A.
*          On exit, A has been overwritten.
*
*4  LDA     (input) INTEGER
*          The leading dimension of the array A.  LDA >= max(1,N).
*
*5  WR      (output) DOUBLE PRECISION array, dimension (N)
*6  WI      (output) DOUBLE PRECISION array, dimension (N)
*          WR and WI contain the real and imaginary parts,
*          respectively, of the computed eigenvalues.  Complex
*          conjugate pairs of eigenvalues appear consecutively
*          with the eigenvalue having the positive imaginary part
*          first.
*
*7  VL      (output) DOUBLE PRECISION array, dimension (LDVL,N)
*          If JOBVL = 'V', the left eigenvectors u(j) are stored one
*          after another in the columns of VL, in the same order
*          as their eigenvalues.
*          If JOBVL = 'N', VL is not referenced.
*          If the j-th eigenvalue is real, then u(j) = VL(:,j),
*          the j-th column of VL.
*          If the j-th and (j+1)-st eigenvalues form a complex
*          conjugate pair, then u(j) = VL(:,j) + i*VL(:,j+1) and
*          u(j+1) = VL(:,j) - i*VL(:,j+1).
*
*8  LDVL    (input) INTEGER
*          The leading dimension of the array VL.  LDVL >= 1; if
*          JOBVL = 'V', LDVL >= N.
*
*9  VR      (output) DOUBLE PRECISION array, dimension (LDVR,N)
*          If JOBVR = 'V', the right eigenvectors v(j) are stored one
*          after another in the columns of VR, in the same order
*          as their eigenvalues.
*          If JOBVR = 'N', VR is not referenced.
*          If the j-th eigenvalue is real, then v(j) = VR(:,j),
*          the j-th column of VR.
*          If the j-th and (j+1)-st eigenvalues form a complex
*          conjugate pair, then v(j) = VR(:,j) + i*VR(:,j+1) and
*          v(j+1) = VR(:,j) - i*VR(:,j+1).
*
*10  LDVR    (input) INTEGER
*          The leading dimension of the array VR.  LDVR >= 1; if
*          JOBVR = 'V', LDVR >= N.
*
*11  WORK    (workspace/output) DOUBLE PRECISION array, dimension (MAX(1,LWORK))
*          On exit, if INFO = 0, WORK(1) returns the optimal LWORK.
*
*12  LWORK   (input) INTEGER
*          The dimension of the array WORK.  LWORK >= max(1,3*N), and
*          if JOBVL = 'V' or JOBVR = 'V', LWORK >= 4*N.  For good
*          performance, LWORK must generally be larger.
*
*          If LWORK = -1, then a workspace query is assumed; the routine
*          only calculates the optimal size of the WORK array, returns
*          this value as the first entry of the WORK array, and no error
*          message related to LWORK is issued by XERBLA.
*
*13  INFO    (output) INTEGER
*          = 0:  successful exit
*          < 0:  if INFO = -i, the i-th argument had an illegal value.
*          > 0:  if INFO = i, the QR algorithm failed to compute all the
*                eigenvalues, and no eigenvectors have been computed;
*                elements i+1:N of WR and WI contain eigenvalues which
*                have converged.
*
*  =====================================================================
*/
