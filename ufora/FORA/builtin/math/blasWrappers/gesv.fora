/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/
"""
DESCRIPTION:
	DGESV computes the solution to a real system of linear equations A * X
	= B, where A is an N-by-N matrix and X and B are  N-by-NRHS matrices.
	The LU decomposition with partial pivoting and row interchanges is
	used to factor A as A = P * L * U, where P is a permutation matrix, L
	is unit lower triangular, and U is upper triangular.  The factored
	form of A is then used to solve the system of equations A * X = B.

ARGUMENTS:
  N       INTEGER
          The number of linear equations, i.e., the order of the
          matrix A.  N >= 0.

  NRHS    INTEGER
          The number of right hand sides, i.e., the number of columns
          of the matrix B.  NRHS >= 0.

  A       DOUBLE PRECISION array, dimension (LDA,N)
          The N-by-N coefficient matrix A.

  B       DOUBLE PRECISION array, dimension (LDB,NRHS)
          The N-by-NRHS right hand side matrix B.

RETURNS:
	Returns the N-by-NRHS solution matrix X.
"""
fun( 
	 N,
	 NRHS,
	 A,
	 B
	)
	{
	N = Int32(N);
	NRHS = Int32(NRHS);

	let elementType = nothing;
	(elementType, A, B) = blasWrappers.eltTypeAndFloatifyIfNecessary(A, B);

	let vecType = `JovOfVectorHolding(elementType);
	let intVecType = `JovOfVectorHolding(Int32);

	let blasname = addTypeSuffix(elementType, "gesv_");
    
    let wrapper =
        `FORTRANFunctionWrapper(
            blasname,
            blasname,
            (2,4,5,7),			//arguments that are modified by the function
            Int32,              //0  N    	 (input) INTEGER
            Int32,              //1  NRHS 	 (input) INTEGER
            vecType,           //2  A       (input/output) DOUBLE PRECISION array, dimension (LDA,N)
            Int32,              //3  LDA     (input) INTEGER
            intVecType,   	//4  IPIV    (output) INTEGER
            vecType,           //5  B       (input/output) DOUBLE PRECISION array, dimension (LDA,N)
            Int32,              //6  LDB     (input) INTEGER
            intVecType	    //7  INFO    (output) INTEGER
        );

    let info = [0s32];
    let ipiv = Vector.uniform(N, 0s32);

	(A,ipiv,B,info) = wrapper(N,NRHS,A,N,ipiv,B,N,info);
	
	if (info[0] < 0)
		throw ("the " + String(-info[0]) + "-th argument had an illegal value")
	if (info[0] > 0)
		throw "A is singular - there does not exist a unique solution to the system."
	
	B
	};

/*
* SUBROUTINE DGESV( N, NRHS, A, LDA, IPIV, B, LDB, INFO )
*
*  -- LAPACK driver routine (version 3.2) --
*  -- LAPACK is a software package provided by Univ. of Tennessee,    --
*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--
*     November 2006
*
*     .. Scalar Arguments ..
      INTEGER            INFO, LDA, LDB, N, NRHS
*     ..
*     .. Array Arguments ..
      INTEGER            IPIV( * )
      DOUBLE PRECISION   A( LDA, * ), B( LDB, * )
*     ..
*
*  Purpose
*  =======
*
*  DGESV computes the solution to a real system of linear equations
*     A * X = B,
*  where A is an N-by-N matrix and X and B are N-by-NRHS matrices.
*
*  The LU decomposition with partial pivoting and row interchanges is
*  used to factor A as
*     A = P * L * U,
*  where P is a permutation matrix, L is unit lower triangular, and U is
*  upper triangular.  The factored form of A is then used to solve the
*  system of equations A * X = B.
*
*  Arguments
*  =========
*
*  N       (input) INTEGER
*          The number of linear equations, i.e., the order of the
*          matrix A.  N >= 0.
*
*  NRHS    (input) INTEGER
*          The number of right hand sides, i.e., the number of columns
*          of the matrix B.  NRHS >= 0.
*
*  A       (input/output) DOUBLE PRECISION array, dimension (LDA,N)
*          On entry, the N-by-N coefficient matrix A.
*          On exit, the factors L and U from the factorization
*          A = P*L*U; the unit diagonal elements of L are not stored.
*
*  LDA     (input) INTEGER
*          The leading dimension of the array A.  LDA >= max(1,N).
*
*  IPIV    (output) INTEGER array, dimension (N)
*          The pivot indices that define the permutation matrix P;
*          row i of the matrix was interchanged with row IPIV(i).
*
*  B       (input/output) DOUBLE PRECISION array, dimension (LDB,NRHS)
*          On entry, the N-by-NRHS matrix of right hand side matrix B.
*          On exit, if INFO = 0, the N-by-NRHS solution matrix X.
*
*  LDB     (input) INTEGER
*          The leading dimension of the array B.  LDB >= max(1,N).
*
*  INFO    (output) INTEGER
*          = 0:  successful exit
*          < 0:  if INFO = -i, the i-th argument had an illegal value
*          > 0:  if INFO = i, U(i,i) is exactly zero.  The factorization
*                has been completed, but the factor U is exactly
*                singular, so the solution could not be computed.
*
*  =====================================================================
*/
