/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/
"""gemm.fora - computes a matrix times a matrix

This function is a wrapper around SGEMM, DGEMM, CGEMM, and ZGEMM.

In general, this function performs one of the matrix-matrix operations

     C := alpha*op( A )*op( B ) + beta*C,

  where  op( X ) is one of 

  
     op( X ) = X   or   op( X ) = X**T   or   op( X ) = X**H,


  alpha and beta are scalars, and A, B and C are matrices, with op( A )
  an m by k matrix,  op( B )  a  k by n matrix and  C an m by n matrix.

Arguments:
  transA = one of 'false', `transpose, or `conjugate
  transB = one of 'false', `transpose, or `conjugate
  M = the number of rows of op (A) and C
  N = the number of columns of op(B) and C
  K = the number of columns of the matrix op(A) and number of rows of op(B)
  alpha = the scalar multiple for 'A * B'
  A = the matrix A, in column-major form.
  lda = the first dimension of 'A' (e.g. the actual number of rows in
    A, which might be different from M)
  B = the matrix B.
  ldb = the first dimension of 'B'
  beta = the scalar multiple for 'C'
  C = the matrix C, or nothing, in which case we initialize a matrix with zeros.
  
Upon exit, the updated copy of 'C'

"""
fun( false or `transpose or `conjugate   transA,
    false or `transpose or `conjugate   transB,
    M,
    N,
    K,
    alpha,
    A,
    lda,
    B,
    ldb,
    beta,
    C
    )
  { 
  M = Int32(M);
  N = Int32(N);
  K = Int32(K);
  lda = Int32(lda);
  ldb = Int32(ldb);
  
  let eltType = nothing;
  (eltType, A, B) = blasWrappers.eltTypeAndFloatifyIfNecessary(A, B);

  let vecType = `JovOfVectorHolding(eltType);

  if (C is nothing)
    C = Vector.uniform(M*N, eltType());
    
  let cEltType = nothing;
  (cEltType, C) = blasWrappers.eltTypeAndFloatifyIfNecessary(C);

  if (cEltType is not eltType)
	  C = C.apply(eltType)
  
  //validate input data
  if (lda < 1 or lda < (if (transA is false) M else K))
    throw "invalid LDA";
  
  //validate input data
  if (ldb < 1 or ldb < (if (transB is false) K else N))
    throw "invalid LDB";
    
  let minASize = lda * (if (transA is false) K else M);
  let minBSize = ldb * (if (transB is false) N else K);
  let minCSize = M * N;
  
  if (size(A) < minASize)
    throw "Invalid dimension for A";
  
  if (size(B) < minBSize)
    throw "Invalid dimension for B";
  
  if (size(C) < minCSize)
    throw "Invalid dimension for C";
  
  let blasname = addTypeSuffix(eltType, "gemm_");
  
  let wrapper = `FORTRANFunctionWrapper(
      blasname,
      blasname,
      (11,),        //indicate that we modify and return the 11th argument
      UInt8,        //TRANSA 0
      UInt8,        //TRANSB 1
      Int32,        //M 2
      Int32,        //N 3
      Int32,        //K 4
      eltType,     //ALPHA 5
      vecType,     //A 6
      Int32,        //LDA 7
      vecType,     //B 8
      Int32,        //LDB 9
      eltType,     //BETA 10
      vecType,     //C 11
      Int32         //LDC 12
      )
    ;
  
  wrapper(  match(transA) with
          (false) { 'n'[0] }
          (`transpose) { 't'[0] }
          (`conjugate) { 'c'[0] }
          ,
        match(transB) with
          (false) { 'n'[0] }
          (`transpose) { 't'[0] }
          (`conjugate) { 'c'[0] }
          ,
        M,
        N,
        K,
        eltType(alpha),
        A,
        lda,
        B,
        ldb,
        eltType(beta),
        C,
        M
        )[0]
  }
  ;

/****************************************************************************    
      SUBROUTINE SGEMM(TRANSA,TRANSB,M,N,K,ALPHA,A,LDA,B,LDB,BETA,C,LDC)
*     .. Scalar Arguments ..
      REAL ALPHA,BETA
      INTEGER K,LDA,LDB,LDC,M,N
      CHARACTER TRANSA,TRANSB
*     ..
*     .. Array Arguments ..
      REAL A(LDA,*),B(LDB,*),C(LDC,*)
*     ..
*
*  Purpose
*  =======
*
*  SGEMM  performs one of the matrix-matrix operations
*
*     C := alpha*op( A )*op( B ) + beta*C,
*
*  where  op( X ) is one of
*
*     op( X ) = X   or   op( X ) = X**T,
*
*  alpha and beta are scalars, and A, B and C are matrices, with op( A )
*  an m by k matrix,  op( B )  a  k by n matrix and  C an m by n matrix.
*
*  Arguments
*  ==========
*
*  TRANSA - CHARACTER*1.
*           On entry, TRANSA specifies the form of op( A ) to be used in
*           the matrix multiplication as follows:
*
*              TRANSA = 'N' or 'n',  op( A ) = A.
*
*              TRANSA = 'T' or 't',  op( A ) = A**T.
*
*              TRANSA = 'C' or 'c',  op( A ) = A**T.
*
*           Unchanged on exit.
*
*  TRANSB - CHARACTER*1.
*           On entry, TRANSB specifies the form of op( B ) to be used in
*           the matrix multiplication as follows:
*
*              TRANSB = 'N' or 'n',  op( B ) = B.
*
*              TRANSB = 'T' or 't',  op( B ) = B**T.
*
*              TRANSB = 'C' or 'c',  op( B ) = B**T.
*
*           Unchanged on exit.
*
*  M      - INTEGER.
*           On entry,  M  specifies  the number  of rows  of the  matrix
*           op( A )  and of the  matrix  C.  M  must  be at least  zero.
*           Unchanged on exit.
*
*  N      - INTEGER.
*           On entry,  N  specifies the number  of columns of the matrix
*           op( B ) and the number of columns of the matrix C. N must be
*           at least zero.
*           Unchanged on exit.
*
*  K      - INTEGER.
*           On entry,  K  specifies  the number of columns of the matrix
*           op( A ) and the number of rows of the matrix op( B ). K must
*           be at least  zero.
*           Unchanged on exit.
*
*  ALPHA  - REAL            .
*           On entry, ALPHA specifies the scalar alpha.
*           Unchanged on exit.
*
*  A      - REAL             array of DIMENSION ( LDA, ka ), where ka is
*           k  when  TRANSA = 'N' or 'n',  and is  m  otherwise.
*           Before entry with  TRANSA = 'N' or 'n',  the leading  m by k
*           part of the array  A  must contain the matrix  A,  otherwise
*           the leading  k by m  part of the array  A  must contain  the
*           matrix A.
*           Unchanged on exit.
*
*  LDA    - INTEGER.
*           On entry, LDA specifies the first dimension of A as declared
*           in the calling (sub) program. When  TRANSA = 'N' or 'n' then
*           LDA must be at least  max( 1, m ), otherwise  LDA must be at
*           least  max( 1, k ).
*           Unchanged on exit.
*
*  B      - REAL             array of DIMENSION ( LDB, kb ), where kb is
*           n  when  TRANSB = 'N' or 'n',  and is  k  otherwise.
*           Before entry with  TRANSB = 'N' or 'n',  the leading  k by n
*           part of the array  B  must contain the matrix  B,  otherwise
*           the leading  n by k  part of the array  B  must contain  the
*           matrix B.
*           Unchanged on exit.
*
*  LDB    - INTEGER.
*           On entry, LDB specifies the first dimension of B as declared
*           in the calling (sub) program. When  TRANSB = 'N' or 'n' then
*           LDB must be at least  max( 1, k ), otherwise  LDB must be at
*           least  max( 1, n ).
*           Unchanged on exit.
*
*  BETA   - REAL            .
*           On entry,  BETA  specifies the scalar  beta.  When  BETA  is
*           supplied as zero then C need not be set on input.
*           Unchanged on exit.
*
*  C      - REAL             array of DIMENSION ( LDC, n ).
*           Before entry, the leading  m by n  part of the array  C must
*           contain the matrix  C,  except when  beta  is zero, in which
*           case C need not be set on entry.
*           On exit, the array  C  is overwritten by the  m by n  matrix
*           ( alpha*op( A )*op( B ) + beta*C ).
*
*  LDC    - INTEGER.
*           On entry, LDC specifies the first dimension of C as declared
*           in  the  calling  (sub)  program.   LDC  must  be  at  least
*           max( 1, m ).
*           Unchanged on exit.
*/
