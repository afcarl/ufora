/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/
"""scal - constant times a vector

essentially a wrapper around blas routines sscal, dscal, cscal, and zscal.
	We determine which one to call by the arguments.

arguments:
	n = length of the vector
	a = a scalar constant
	X = a Vector
	xIncrement = x increment. defaults to 1

computes and returns a * X
"""
fun(	
		n,
		a,
		X,
		xIncrement = 1
		)
	{        
	xIncrement = Int32(xIncrement);

	let eltType = nothing;
	(eltType, X) = blasWrappers.eltTypeAndFloatifyIfNecessary(X);
	
	let vecType = `JovOfVectorHolding(eltType);

    a = eltType(a);
	n = Int32(n);
	
	//check our arguments so that we don't overrun the buffer 
	if (n * abs(xIncrement) > size(X))
		throw "invalid X dimension"

	if (xIncrement == 0)
		throw "invalid xIncrement (can't be zero)"
	
	let blasname = addTypeSuffix(eltType, "scal_");
    
	let wrapper =
		`FORTRANFunctionWrapper(
			blasname,
			blasname,
			(2,),		//return type
			Int32,		//arg types
			eltType,
			vecType,
			Int32
			);
	
	wrapper(n, a, X, xIncrement)[0]
	}
	;

/***********
      SUBROUTINE SSCAL(N,SA,SX,INCX)
*     .. Scalar Arguments ..
      REAL SA
      INTEGER INCX,N
*     ..
*     .. Array Arguments ..
      REAL SX(*)
*     ..
*
*  Purpose
*  =======
*
*     scales a vector by a constant.
*     uses unrolled loops for increment equal to 1.
*
*  Further Details
*  ===============
*
*     jack dongarra, linpack, 3/11/78.
*     modified 3/93 to return if incx .le. 0.
*     modified 12/3/93, array(1) declarations changed to array(*)
*
*  =====================================================================
*
*     .. Local Scalars ..
      INTEGER I,M,MP1,NINCX
*     ..
*     .. Intrinsic Functions ..
      INTRINSIC MOD
*     ..
      IF (N.LE.0 .OR. INCX.LE.0) RETURN
      IF (INCX.EQ.1) THEN
*
*        code for increment equal to 1
*
*
*        clean-up loop
*
         M = MOD(N,5)
         IF (M.NE.0) THEN
            DO I = 1,M
               SX(I) = SA*SX(I)
            END DO
            IF (N.LT.5) RETURN
         END IF
         MP1 = M + 1
         DO I = MP1,N,5
            SX(I) = SA*SX(I)
            SX(I+1) = SA*SX(I+1)
            SX(I+2) = SA*SX(I+2)
            SX(I+3) = SA*SX(I+3)
            SX(I+4) = SA*SX(I+4)
         END DO
      ELSE
*
*        code for increment not equal to 1
*
         NINCX = N*INCX
         DO I = 1,NINCX,INCX
            SX(I) = SA*SX(I)
         END DO
      END IF
      RETURN
      END

**************/
