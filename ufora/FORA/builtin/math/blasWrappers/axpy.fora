/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/
"""axpy.fora - constant times a vector plus a vector

essentially a wrapper around blas routines saxpy, daxpy, caxpy, and zaxpy.
    We determine which one to call by the arguments.

arguments:
    a = a scalar constant
    X = a Vector(Float32/Float64)
    Y = a Vector(Float32/Float64)
    n = how many terms to apply. defaults to size(X)
    xIncrement = step increment for 'x'. defaults to 1
    yIncrement = step increment for 'y'. defaults to 1

computes
    Y + a X
and returns it
"""
fun(
        a,
        X,
        Y,
        n = size(X),
        xIncrement = 1,
        yIncrement = 1
        )
    {    
	let eltType = nothing;
	(eltType, X, Y) = blasWrappers.eltTypeAndFloatifyIfNecessary(X, Y);

	let vecType = `JovOfVectorHolding(eltType);
    
    let blasname = addTypeSuffix(eltType, "axpy_");
    
    let wrapper =
        `FORTRANFunctionWrapper(
            blasname,
            blasname,
            (4,),		//indices of modified variables
            Int32,		//arg types
            eltType,
            vecType,
            Int32,
            vecType,
            Int32
            );
    
    //check our arguments so that we don't overrun the buffer 
    if (n * abs(xIncrement) > size(X))
        throw "n was to big for X argument"
    if (n * abs(yIncrement) > size(Y))
        throw "n was to big for Y argument"
    
    wrapper(Int32(n), eltType(a), X, Int32(xIncrement), Y, Int32(yIncrement))[0]
    }
    ;


