/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/
`hidden;

eigenvalues:
	fun(A) 
		{ 
		if (!A.isSquare())
		    throw "dimension error: argument must be a square matrix";

		blasWrappers.geev('N', 'N', A.dim[0], A.columnMajorData())
		};

eigenvectors:
	fun(A)
		{
		if (!A.isSquare())
		    throw "dimension error: argument must be a square matrix";

		blasWrappers.geev('N', 'V', A.dim[0], A.columnMajorData())
		};

leftEigenvectors:
	fun(A)
		{
		if (!A.isSquare())
		    throw "dimension error: argument must be square matrix";

		blasWrappers.geev('V', 'N', A.dim[0], A.columnMajorData())
		};

leftAndRightEigenvectors:
	fun(A)
	    {
		if (!A.isSquare())
		    throw "dimension error: argument must be a square matrix";

		blasWrappers.geev('V', 'V', A.dim[0], A.columnMajorData())
		};

symeigenval:
#Markdown(
"""``A.symeigenval(uplo = `lower)``

Given a real matrix `A`, let `sym(A, uplo)` denote the symmetric matrix 
determined by the upper triangle of `A` if ``uplo == `upper``, or the 
symmetric matrix determined by the lower triangle of `A` if 
``uplo == `lower``. `A.symeigenval(uplo)` returns a vector containing the `n`
eigenvalues, not necessarily distinct, of the matrix `sym(A, uplo)`. 
""")
	fun(A, uplo = `lower)
		{
		if (!A.isSquare())
		    throw "dimension error: argument must be a square matrix";

		blasWrappers.syev(
			'N', 
			match (uplo) with
				(`lower) { 'L' }
				(`upper) { 'U' }, 
			A.dim[0], 
			A.columnMajorData()
			)
		};

symeigenpair:
#Markdown(
"""``A.symeigenpair(uplo = `lower)``

Given a real matrix `A`, let `sym(A, uplo)` denote the symmetric matrix 
determined by the upper triangle of `A` if ``uplo == `upper``, or the 
symmetric matrix determined by the lower triangle of `A` if 
``uplo == `lower``. `A.symeigenpair(uplo)` returns a vector containing the `n` 
tuple pairs of eigenvalues and eigenvectors of the matrix `A`.  The first element in the tuple
is the eigenvector, the second, the corresponding eigenvalue. 
""")
	fun(A, uplo = `lower)
		{
		if (!A.isSquare())
		    throw "dimension error: argument must be a square matrix";

		let n = A.dim[0];
		let vecVal = blasWrappers.syev(
			'V', 
			match (uplo) with
				(`lower) { 'L' }
				(`upper) { 'U' }, 
			n, 
			A.columnMajorData()
			);
		let pairs = [];
		for i in sequence(n)
			{
			pairs = pairs::(vecVal[0][i * n, (i + 1) * n], vecVal[1][i])
			}
		pairs
		};

