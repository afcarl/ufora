/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/
`hidden;

`hidden
beta:
#Markdown(
"""#### Usage

    math.beta(a, b)

#### Description

Returns the beta function at `a` and `b`.
""")
    fun({Float64} x, {Float64} y)
        {
        `beta(x, y)
        }
        ({Float32} x, {Float32} y)
        {
        `beta(x, y)
        }
        (filters.IsNumeric(x), filters.IsNumeric(y))
        {
        `beta(Float64(x), Float64(y))
        }        
        ({Float64} x, {Float64} y, {Float64} z)
        {
        `beta(x, y, z)
        }
        ({Float32} x, {Float32} y, {Float32} z)
        {
        `beta(x, y, z)
        }
        (filters.IsNumeric(x), filters.IsNumeric(y), filters.IsNumeric(z))
        {
        `beta(Float64(x), Float64(y), Float64(z))
        }
        ;
        
`hidden
betac:
#Markdown(
"""#### Usage

    math.betac(a, b, x)

#### Description

Returns the full (non-normalized) complement of the incomplete beta function 
of `a`, `b`, and `x`.
""")
    fun({Float64} x, {Float64} y, {Float64} z)
        {
        `betac(x, y, z)
        }
        ({Float32} x, {Float32} y, {Float32} z)
        {
        `betac(x, y, z)
        }
        (filters.IsNumeric(x), filters.IsNumeric(y), filters.IsNumeric(z))
        {
        `betac(Float64(x), Float64(y), Float64(z))
        }
        ;
        
`hidden
ibeta:
#Markdown(
"""#### Usage

    math.beta(a, b, x)

#### Description

Returns the normalized incomplete beta function of `a`, `b`, and `x`.
""")
    fun({Float64} a, {Float64} b, {Float64} x)
        {
        `ibeta(a, b, x)
        }
        ({Float32} a, {Float32} b, {Float32} x)
        {
        `ibeta(a, b, x)
        }
        (filters.IsNumeric(a), filters.IsNumeric(b), filters.IsNumeric(x))
        {
        `ibeta(Float64(a), Float64(b), Float64(x))
        }
        ;
        
`hidden
ibetac:
#Markdown(
"""#### Usage

    math.ibetac(a, b, x)

#### Description

Returns the normalized complement of the incomplete beta function 
of `a`, `b`, and `x`.
""")
    fun({Float64} a, {Float64} b, {Float64} x)
        {
        `ibetac(a, b, x)
        }
        ({Float32} a, {Float32} b, {Float32} x)
        {
        `ibetac(a, b, x)
        }
        (filters.IsNumeric(a), filters.IsNumeric(b), filters.IsNumeric(x))
        {
        `ibetac(Float64(a), Float64(b), Float64(x))
        }
        ;

`hidden
ibetaInv:
#Markdown(
"""#### Usage

    math.ibetaInv(a, b, p)

#### Description

Returns a value `x` such that `p = ibeta(a, b, x)`.
Requires that `a, b > 0` and `0 <= p <= 1`.
""")
    fun({Float64} a, {Float64} b, {Float64} x)
        {
        `ibetaInv(a, b, x)
        }
        ({Float32} a, {Float32} b, {Float32} x)
        {
        `ibetaInv(a, b, x)
        }
        (filters.IsNumeric(a), filters.IsNumeric(b), filters.IsNumeric(x))
        {
        `ibetaInv(Float64(a), Float64(b), Float64(x))
        }
        ;

`hidden
ibetacInv:
#Markdown(
"""#### Usage

    math.ibetacInv(a, b, q)

#### Description

Returns a value `x` such that `q = ibetac(a, b, x)`.
Requires `a, b > 0` and `0 <= q <= 1`.
""")
    fun({Float64} a, {Float64} b, {Float64} x)
        {
        `ibetacInv(a, b, x)
        }
        ({Float32} a, {Float32} b, {Float32} x)
        {
        `ibetacInv(a, b, x)
        }
        (filters.IsNumeric(a), filters.IsNumeric(b), filters.IsNumeric(x))
        {
        `ibetacInv(Float64(a), Float64(b), Float64(x))
        }
        ;
       
`hidden 
ibetaInva:
#Markdown(
"""#### Usage

    math.ibetaInva(b, x, p)

#### Description

Returns a value `a` such that `p = ibeta(a, b, x)`.
Requires `b > 0, 0 < x < 1` and `0 <= p <= 1`.
""")
    fun({Float64} a, {Float64} b, {Float64} x)
        {
        `ibetaInva(a, b, x)
        }
        ({Float32} a, {Float32} b, {Float32} x)
        {
        `ibetaInva(a, b, x)
        }
        (filters.IsNumeric(a), filters.IsNumeric(b), filters.IsNumeric(x))
        {
        `ibetaInva(Float64(a), Float64(b), Float64(x))
        }
        ;
        
`hidden
ibetacInva:
#Markdown(
"""#### Usage

    ibetacInva(b, x, p)

#### Description

Returns a value `a` such that `q = ibetac(a, b, x)`.
Requires `b > 0, 0 < x < 1` and `0 <= q <= 1`.
""")
    fun({Float64} a, {Float64} b, {Float64} x)
        {
        `ibetacInva(a, b, x)
        }
        ({Float32} a, {Float32} b, {Float32} x)
        {
        `ibetacInva(a, b, x)
        }
        (filters.IsNumeric(a), filters.IsNumeric(b), filters.IsNumeric(x))
        {
        `ibetacInva(Float64(a), Float64(b), Float64(x))
        }
        ;

`hidden
ibetaInvb:
#Markdown(
"""#### Usage

    math.ibetaInvb(b, x, p)

#### Description

Returns a value `b` such that `p = ibeta(a, b, x)`.
Requires `a > 0, 0 < x < 1` and `0 <= p <= 1`.
""")
    fun({Float64} a, {Float64} b, {Float64} x)
        {
        `ibetaInvb(a, b, x)
        }
        ({Float32} a, {Float32} b, {Float32} x)
        {
        `ibetaInvb(a, b, x)
        }
        (filters.IsNumeric(a), filters.IsNumeric(b), filters.IsNumeric(x))
        {
        `ibetaInvb(Float64(a), Float64(b), Float64(x))
        }
        ;

`hidden
ibetacInvb:
#Markdown(
"""#### Usage

    math.ibetacInvb(b, x, p)

#### Description

Returns a value `b` such that `q = ibetac(a, b, x)`.
""")
    fun({Float64} a, {Float64} b, {Float64} x)
        {
        `ibetacInvb(a, b, x)
        }
        ({Float32} a, {Float32} b, {Float32} x)
        {
        `ibetacInvb(a, b, x)
        }
        (filters.IsNumeric(a), filters.IsNumeric(b), filters.IsNumeric(x))
        {
        `ibetacInvb(Float64(a), Float64(b), Float64(x))
        }
        ;

`hidden
ibetaDerivative:
#Markdown(
"""#### Usage

    math.ibetaDerivative(a, b, x)

#### Description

Returns the partial derivative with respect to `x` of the incomplete beta
function, `ibeta`.
""")
    fun({Float64} a, {Float64} b, {Float64} x)
        {
        `ibetaDerivative(a, b, x)
        }
        ({Float32} a, {Float32} b, {Float32} x)
        {
        `ibetaDerivative(a, b, x)
        }
        (filters.IsNumeric(a), filters.IsNumeric(b), filters.IsNumeric(x))
        {
        `ibetaDerivative(Float64(a), Float64(b), Float64(x))
        }
        ;


