/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/
#Markdown(
"""### distances

#### Description

Some common distance functions. 

These are all currently single-threaded versions, though it's simple to turn them
into distributed versions (in a manner similar to `builtin.sum`).

""");

cosine:
#Markdown(
"""#### Usage 

    math.distances.cosine(vec1, vec2)

#### Description

Returns the cosine "distance" between vectors (or indexables) `vec1` and `vec2`. 
This is defined to be `1 - dot(vec1, vec2) / math.sqrt(dot(vec1, vec1) * dot(vec2, vec2))`. 

Recall that this is not a true distance in the metric space sense, since it fails the triangle inequality.
""")
fun(vec1, vec2) {
    assertions.assertEqual(size(vec1), size(vec2))

    let dot = 0.0;
    let vec1NormSquared = 0.0;
    let vec2NormSquared = 0.0;
    let ix = 0;
    let top = size(vec1);

    while (ix < top) {
        let vec1Elt = vec1[ix];
        let vec2Elt = vec2[ix];

        dot = dot + vec1Elt * vec2Elt;
        vec1NormSquared = vec1NormSquared + vec1Elt * vec1Elt;
        vec2NormSquared = vec2NormSquared + vec2Elt * vec2Elt;
        
        ix = ix + 1
        }

    1.0 - dot / (math.sqrt(vec1NormSquared) * math.sqrt(vec2NormSquared))
    };

l_infinity:
#Markdown(
"""#### Usage

    math.distances.l_infinity(vec1, vec2)

#### Description

Returns the l-infinity distance between vectors (or indexables) `vec1` and `vec2`. 
""")
fun(vec1, vec2) {
    assertions.assertEqual(size(vec1), size(vec2))

    let res = 0.0;
    let ix = 0;
    let top = size(vec1)

    while (ix < top) {
        let diff = math.abs(vec1[ix] - vec2[ix]);
        res = res >>> diff

        ix = ix + 1;
        }
    res
    };

lp:
#Markdown(
"""#### Usage

    math.distances.lp(vec1, vec2)

#### Description

Returns the l-p distance between vectors (or indexables) `vec1` and `vec2`. 
""")
fun(vec1, vec2, p:= 2) {
    assertions.assertEqual(size(vec1), size(vec2))

    let res = 0.0;
    let ix = 0;
    let top = size(vec1)

    while (ix < top) {
        let diff = math.abs(vec1[ix] - vec2[ix]);
        res = res + diff ** p
        ix = ix + 1;
        }
    res ** (1.0 / p)
    };    

l2:
#Markdown(
"""#### Usage

    math.distances.l2(vec1, vec2)

#### Description

Returns the l2 (aka Euclidean) distance between vectors (or indexables) `vec1` and `vec2`. 
""")
fun(vec1, vec2) {
    math.sqrt(l2_squared(vec1, vec2))
    };

l2_squared:
#Markdown(
"""#### Usage

    math.distances.l2_squared(vec1, vec2)

#### Description

Returns the squared l2 (aka Euclidean) distance between vectors (or indexables) `vec1` and `vec2`. 
""")
fun(vec1, vec2) {
    assertions.assertEqual(size(vec1), size(vec2))

    let res = 0.0;
    let ix = 0;
    let top = size(vec1)

    while (ix < top) {
        let diff = vec1[ix] - vec2[ix];
        res = res + diff * diff
        ix = ix + 1;
        }
    res
    };

l1: 
#Markdown(
"""#### Usage

    math.distances.l1(vec1, vec2)

#### Description

Returns the l1 (aka Manhattan, or taxicab) distance between vectors (or indexables) `vec1` and `vec2`. 
""")
fun(vec1, vec2) {
    assertions.assertEqual(size(vec1), size(vec2))

    let res = 0.0;
    let ix = 0;
    let top = size(vec1)

    while (ix < top) {
        let diff = vec1[ix] - vec2[ix];
        res = res + math.abs(diff)
        ix = ix + 1;
        }
    res
    };

