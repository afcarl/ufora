/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/
`hidden;

Triangular:
#Markdown(
"""### `Triangular`

#### Description

A class for triangular distributions.

#### Aliases

    math.random.Triangular

""")

class
	{
#Markdown(
"""#### Description

The infimum of the support of the pdf of the distribution.
""")
	member min_;

#Markdown(
"""#### Description

The supremum of the support of the pdf of the distribution.
""")
	member max_;

#Markdown(
"""#### Description

The mode of the distribution.
""")
	member mode_;

#Markdown(
"""#### Description

The underlying uniform random number generator used for pulling samples from the distribution.
""")
	member unifRng_;

#Markdown(
"""#### Usage

    math.random.Triangular(min, max, mode, seed, rngFun = math.random.MersenneTwister)

#### Description

Produces a triangular distribution object with parameters `min`, `max`, 
and `mode`, using integral random number generator `rngFun`, to be seeded 
with seed `seed`.
""")
	operator new(min, max, mode, seed, rngFun = math.random.MersenneTwister)
		{
		if (min < mode and mode < max)
			{
			createInstance(cls, min_: min, max_: max, mode_: mode,
							unifRng_: UniformReal(0.0, 1.0, seed, rngFun));
			}
		else
			{
			throw "error in parameters"
			}
		};

#Markdown(
"""#### Usage

    iterator(triangularInstance)

#### Description

Produces an `iterator` from an instance of `math.random.Triangular`, `triangularInstance`, 
which can be used to generate values from the represented distribution.
""")
		operator iterator()
			{
			for x in unifRng_
				yield quantile(x, min_, max_, mode_)
			};

		static pdf:
#Markdown(
"""#### Usage

    math.random.Triangular.pdf(x, min, max, mode)

#### Description

Returns the pdf of a triangular distribution at `x` with parameters
`min`, `max`, and `mode`.
""")
	 	fun(x, min, max, mode)
			{
			min = Float64(min);
			max = Float64(max);
			mode = Float64(mode);
			if (min < mode and mode < max)
			    {
			    if (x < min or x > max)
			   	   {
				   return 0.0;
				   }
			   	else
					{
					if (x <= mode)
					   {
					   return 2.0 * (x - min) / ((max - min) * (mode - min));
					   }
					else 
					   {
					   return 2.0 * (max - x) / ((max - min) * (max - mode));
					   }
					}
				}	
			else
				{
				throw "error in parameters";
				}		
			};	

		static cdf:
#Markdown(
"""#### Usage

    math.random.Triangular.cdf(x, min, max, mode)

#### Description

Returns the cdf of a triangular distribution at `x` with parameters 
`min`, `max`, and `mode`.
""")
	 	fun(x, min, max, mode)
			{
			min = Float64(min);
			max = Float64(max);
			mode = Float64(mode);
			if (min < mode and mode < max)
			    {
			   	if (x < min)
			   	    {
				  	return 0.0;
				  	}
			    else	
					{
					if (x > max)
					    return 1.0;
					if (x <= mode)
					   {
					   return ((x - min) ** 2.0) / ((max - min) * (mode - min));
					   }
					else 
						 {
						 return 1.0 - ((max - x) ** 2.0) / ((max - min) * (max - mode));
						 }
					}
				}	
			else
				{
				throw "error in parameters"
				}
			};
		
		static quantile:
#Markdown(
"""#### Usage

    math.random.Triangular.quantile(p, min, max, mode)

#### Description

Returns the inverse of the cdf of a triangular distribution at `p` with 
parameters `min`, `max`, and `mode`.
""")
	 	fun(p, min, max, mode)
			{
			min = Float64(min);
			max = Float64(max);
			mode = Float64(mode);

			if (p < 0 or p > 1)
			    throw "p must be in (0,1)";
		
			if (min < mode and mode < max)
			    {
				let pivot = (mode - min) / (max - min);
				if (p <= pivot)
				    {
					return min + ((max - min) * (mode - min) * p) ** 0.5;
					}
				else
					{
					return max - ((1.0 - p) * (max - mode) * (max - min)) ** 0.5;
					}
				}
			else
				{
				throw "error in parameters";
				}
			};

	};


