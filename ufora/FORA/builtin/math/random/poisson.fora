/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/
`hidden;

Poisson:
#Markdown(
"""### `Poisson`

#### Description

A class for Poisson distributions.

#### Aliases

    math.random.Poisson

""")

class
	{
#Markdown(
"""#### Description

The `lambda` parameter.
""")
	member lambda_;

#Markdown(
"""#### Description

The underlying uniform random number generator used for pulling samples from the distribution.
""")
	member unifRng_;

#Markdown(
"""#### Usage

    math.random.Poisson(lambda, seed, rngFun = math.random.MersenneTwister)

#### Description

Creates a Poisson distribution object with parameter `lambda` using
an integral random number generator set by  `rngFun` to be seeded with
seed `seed`.
""")
	operator new(lambda, seed, rngFun = math.random.MersenneTwister)
		{
		checkParam_(lambda);
		let unifRng = UniformReal(0, 1, seed, rngFun);
		createInstance(cls, lambda_: lambda, unifRng_: unifRng)
		};
#Markdown(
"""#### Usage

    iterator(poissonInstance)

#### Description

Produces an `iterator` from an instance of `math.random.Poisson`, `poissonInstance`, 
which can be used to generate values from the represented distribution.
""")
	operator iterator()
		{
		for x in unifRng_
			yield quantile(x, lambda_);
		};

	static pdf:
#Markdown(
"""#### Usage

    math.random.Poisson.pdf(x, lambda)

#### Description

Returns the pdf of a Poisson random variable with parameter `lambda` evaluated 
at `x`.
""")
	fun(x, lambda)
		{
		checkParam_(lambda);
		if (x == floor(x))
			{
			return exp(-lambda) * (lambda ** x) / factorial(x);
			}
		else
			{
			return 0.0;
			}
		};
		
	static cdf:
#Markdown(
"""#### Usage

    math.random.Poisson.cdf(x, lambda)

#### Description

Returns the cdf of a Poisson random variable with parameter `lambda` evaluated 
at `x`.
""")
	fun(x, lambda)	
		{
		checkParam_(lambda);
		return gammaQ(floor(x + 1.0), lambda);
		};
		
	static quantile:
#Markdown(
"""#### Usage

    math.random.Poisson.quantile(p, lambda)

#### Description

Returns inverse cdf of a Poisson random variable with paramter `lambda` at `p`.
""")
	fun(p, lambda)
		{
		checkParam_(lambda);
		if (p <= 0 or p >= 1)
			throw "p must be in (0,1)"
		return ceil(gammaQInva(lambda, p) - 1.0);
		};
		
	static checkParam_:
#Markdown(
"""#### Usage

    math.random.Poisson.checkParam_(lambda)

Checks if the parameter `lambda` is admissible.
""")
	fun(lambda)
		{
		if (lambda <= 0)
			throw "lambda must be strictly positive";
		};

	};



