/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/
`hidden;

Beta:
#Markdown(
"""### `Beta`

#### Description

A class for beta distributions.

#### Aliases

    math.random.Beta

""")

class
	{
#Markdown(
"""#### Description

The `a` (or "`alpha`") shape parameter of a Beta distribution.
""")
	member a_;
#Markdown(
"""#### Description

The `b` (or "`beta`") shape parameter of a Beta distribution.
""")
	member b_;
#Markdown(
"""#### Description

The underlying uniform random number generator used for pulling samples from the distribution.
""")
	member unifRng_;

#Markdown(
"""#### Usage

    math.random.Beta(a, b, seed, rngFun = math.random.MersenneTwister)

#### Description

Produces a beta distribution object having parameters `a` and `b`, using 
an integral random number generator set by `rngFun` to be seeded with `seed`.
""")
	operator new(a, b, seed, rngFun = math.random.MersenneTwister)
		{
		checkParams_(a,b);
		let unifRng = UniformReal(0.0, 1.0, seed, rngFun);
		
		createInstance(cls, a_: a, b_: b, unifRng_: unifRng)		
		};

#Markdown(
"""#### Usage

    iterator(betaInstance)

#### Description

Produces an `iterator` from an instance of `math.random.Beta`, `betaInstance`, 
which can be used to generate values from the represented distribution.
""")
	operator iterator()
		{
		for i in unifRng_
			yield quantile(i, a_, b_);
		};

	static pdf:
#Markdown(
"""#### Usage

    math.random.Beta.pdf(x, a, b)

#### Description

Evaluates the pdf of a beta distribution with parameters `a` and `b` at `x`.
""")
	fun(x, a, b)
		{
		checkParams_(a, b);
		if (x <= 0 or x >= 1)
			return 0.0;
		return (x ** (a - 1)) * ((1 - x) ** (b - 1)) / beta(a, b);
		};
		
	static cdf:
#Markdown(
"""#### Usage

    math.random.Beta.cdf(x, a, b)

#### Description

Evaluates the cdf of a beta distribution with parameters `a` and `b` at `x`.
""")
	fun(x, a, b)
		{
		checkParams_(a, b);
		if (x <= 0)
			return 0.0;
		if (x >= 1)
			return 1.0;
		return ibeta(a, b, x);
		};		
		
	static quantile:
#Markdown(
"""#### Usage

    math.random.Beta.quantile(x, a, b)

#### Description

Evaluates the quantile of a beta distribution with parameters `a` and `b` at `x`.
 """)
	fun(x, a, b)
		{
		checkParams_(a, b);
		if (x <= 0 or x >= 1)
			throw "x must be between 0 and 1";
		return ibetaInv(a, b, x);
		};		
		
		
	static checkParams_:
#Markdown(
"""#### Usage

    math.random.Beta.checkParams_(a, b)

#### Description

Checks that the parameters `a` and `b` are admissible and returns an appropriate 
error message if not.
""")
	fun(a, b)
		{
		if (a <= 0 and b <= 0)
			throw "a and b must be strictly positive";
		if (a <= 0) 
			throw "a must be strictly positive";
		if (b <= 0)
			throw "b must be strictly positive";
		};
		
	};


