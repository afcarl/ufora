/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/
`hidden;

T:
#Markdown(
"""### `T`

#### Description

A class for T-distributions.

#### Aliases

    math.random.T

""")

class
	{
#Markdown(
"""#### Description

The number of degrees of freedom.
""")
	member v_;

#Markdown(
"""#### Description

The underlying uniform random number generator used for pulling samples from the distribution.
""")
	member unifRng_;

#Markdown(
"""#### Usage

    math.random.T(v, seed, rng)

#### Description

Creates a  Student's T-distribution object with `v` degrees of freedom 
using an integral random number generator set by `rngFun` to be seeded with seed
`seed`.
 """)
	operator new(v, seed, rngFun = math.random.MersenneTwister)
		{
		checkParam_(v);

		let unifRng = UniformReal(0, 1, seed, rngFun);
		createInstance(cls, v_: v, unifRng_: unifRng);
		};

#Markdown(
"""#### Usage

    iterator(tInstance)

#### Description

Produces an `iterator` from an instance of `math.random.T`, `tInstance`, 
which can be used to generate values from the represented distribution.
""")
	operator iterator()
		{
		for x in unifRng_
			yield quantile(x, v_);
		};

	static pdf:
#Markdown(
"""#### Usage

    math.random.T.pdf(x, v)

#### Description

Evaluates the pdf of a Student's T-distribution with `v` degrees of freedom at `x`.
""")
	fun(x, v)
		{
		checkParam_(v);

		v = Float64(v);
		let term1 = tgamma((v + 1.0) / 2.0);
		let term2 = sqrt(v * pi) * tgamma(v / 2.0);
		let term3 = (1.0 + (x ** 2.0) / v) ** (-(v + 1.0) / 2.0);

		return term1 * term3 / term2;		
		};
		
	static cdf:
#Markdown(
"""#### Usage

    math.random.T.cdf(x, v)

#### Description

Evaluates the cdf of a Student's T-distribution with `v` degrees of freedom at `x`.
""")
	fun(x, v)
		{
		checkParam_(v);
		v = Float64(v);
		let xStar = v / (x ** 2.0 + v);
		if (x > 0)
			{	
			return 1.0 - 0.5*ibeta(v/2.0,0.5,xStar);
			}
		else
			{
			return 0.5 * ibeta(v / 2.0, 0.5, xStar);
			}
		};		
		
	static quantile:
#Markdown(
"""#### Usage

    math.random.T.quantile(x, v)

#### Description

Evaluates the quantile of a Student's T-distribution with `v` degrees of 
freedom at `x`.
""")
	fun(x, v)
		{
		checkParam_(v);
		if (x <= 0 or x >= 1)
			throw "x must be between 0 and 1";

		v = Float64(v);

		if (x > 0.5)
			{
			let y = ibetaInv(v / 2.0, 0.5, 2.0 * (1.0 - x));
			return sqrt(v * (1.0 - y) / y);
			}	
		else
			{
			let y = ibetaInv(v / 2.0, 0.5, 2.0 * x);
			return (-1.0) * sqrt(v * (1.0 - y) / y);
			}		
		};
		
	static checkParam_:
#Markdown(
"""#### Usage

    math.random.T.checkParam_(v)

#### Description

Checks if the parameter `v` is admissible.
""")
	fun(v)
		{
		if (v <= 0)
			throw "v must be strictly positive";
		};
	
	};

		

