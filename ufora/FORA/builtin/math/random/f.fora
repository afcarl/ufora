/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/
`hidden;

F:
#Markdown(
"""### `F`

#### Description

A class for F-distributions.

#### Aliases

    math.random.F

""")

class
	{
#Markdown(
"""#### Description

The `d1` parameter.
""")
	member d1_;

#Markdown(
"""#### Description

The `d2` parameter.
""")
	member d2_;

#Markdown(
"""#### Description

The underlying uniform random number generator used for pulling samples from the distribution.
""")
	member unifRng_;

#Markdown(
"""#### Usage

    math.random.F(d1, d2, seed, rngFun = math.random.MersenneTwister)

#### Description

Creates an F-distribution object with `d1`, `d2` degrees of freedom,
using an integral random number generator set by `rngFun` to be seeded 
with seed `seed`.
""")
	operator new(d1, d2, seed, rngFun = math.random.MersenneTwister)
		{
		checkParams_(d1, d2);
		let unifRng = UniformReal(0, 1, seed, rngFun);
		createInstance(cls, d1_: d1, d2_: d2, unifRng_: unifRng)
		};

#Markdown(
"""#### Usage

    iterator(fInstance)

#### Description

Produces an `iterator` from an instance of `math.random.F`, `fInstance`, 
which can be used to generate values from the represented distribution.
""")
	operator iterator()
		{
		for x in unifRng_
			yield quantile(x, d1_, d2_);
		};

	static pdf:
#Markdown(
"""#### Usage

    math.random.F.pdf(x, d1, d2)

#### Description

Evaluates the pdf of an F-distribution with `d1, d2` degrees of freedom at `x`.
 """)
	fun(x, d1, d2)
		{
		checkParams_(d1, d2);
		if (x < 0)
			return 0.0;
		let chainRuleTerm = d1 * d2 / Float64((d1 * x + d2) ** 2.0);
		ibetaDerivative(d1 * 0.5, d2 * 0.5, d1 * x / Float64(d1 * x + d2)) * chainRuleTerm;
		};
		
	static cdf:
#Markdown(
"""#### Usage

    math.random.F.cdf(x, d1, d2)

#### Description

Evaluates the cdf of an F-distribution with `d1, d2` degrees of freedom at `x`.
""")
	fun(x, d1, d2)
		{
		checkParams_(d1, d2);
		if (x < 0)
			return 0.0;
		return ibeta(d1 * 0.5, d2 * 0.5, d1 * x / Float64(d1 * x + d2));
		};		
		
	static quantile:
#Markdown(
"""#### Usage

    quantile(x, d1, d2)

#### Description

Evaluates the quantile of an F-distribution with `d1, d2` degrees of
freedom at `x`.
""")
	fun(x, d1, d2)
		{
		checkParams_(d1, d2);
		if (x <= 0 or x >= 1)
			throw "x must be between 0 and 1";
		let y = ibetaInv(0.5 * d1, 0.5 * d2, x);
		return d2 * y / (d1 * (1.0 - y));
		};		
		
	static checkParams_:
#Markdown(
"""#### Usage

    math.random.F.checkParams_(d1, d1)

#### Description

Checks the parameters to make sure they are admissible.
""")
	fun(d1, d2)
		{
		if (d1 <= 0 or d2 <= 0)
			throw "parameters must be strictly positive";
		};

	};



