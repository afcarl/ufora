/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/
`hidden;

LogNormal:
#Markdown(
"""### `LogNormal`

#### Description

A class for LogNormal distributions.

#### Aliases

    math.random.LogNormal

""")

class
	{
#Markdown(
"""#### Description

The `mu` parameter.
""")
	member mu_;

#Markdown(
"""#### Description

The `sigma` parameter.
""")
	member sigma_;

#Markdown(
"""#### Description

The underlying uniform random number generator used for pulling samples from the distribution.
""")
	member unifRng_;

#Markdown(
"""#### Usage

    math.random.LogNormal(mu, sigma, seed, rngFun = math.random.MersenneTwister)

#### Description

Returns a log-normal distribution object having parameters
`mu` and `sigma` using an integral random number generator set by 
`rngFun` to be seeded with seed `seed`.
 """)	
	operator new(mu, sigma, seed, rngFun = math.random.MersenneTwister)
		{
		checkParams(mu, sigma);
		let unifRng = UniformReal(0, 1, seed, rngFun);
		createInstance(cls, mu_: mu, sigma_: sigma, unifRng_: unifRng)
		};

#Markdown(
"""#### Usage

    iterator(logNormalInstance)

#### Description

Produces an `iterator` from an instance of `math.random.LogNormal`, `logNormalInstance`, 
which can be used to generate values from the represented distribution.
""")
	operator iterator()
		{
		for x in unifRng_
			yield quantile(x, mu_, sigma_);
		};

	static pdf:
#Markdown(
"""#### Usage

    math.random.LogNormal.pdf(x, mu, sigma)

#### Description

Evaluates the pdf of a lognormal random variable with parameters `mu` and
`sigma` at `x`.
""")
	fun(x, mu, sigma)
		{
		checkParams(mu,sigma);
		if (x < 0)
			return 0.0;
		return exp(-((log(x) - mu) ** 2.0) / (2.0 * (sigma ** 2.0))) / 
			   				 (x * sqrt(2.0 * pi * (sigma ** 2.0)));
		};
		
	static cdf:
#Markdown(
"""#### Usage

    math.random.LogNormal.cdf(x, mu, sigma)

#### Description

Evaluates the cdf of a lognormal random variable with parameters `mu` and
`sigma` at `x`.
""")
	fun(x, mu, sigma)
		{
		checkParams(mu, sigma);
		if (x < 0)
			return 0.0;
		return 0.5 + 0.5 * erf((log(x) - mu) / sqrt(2.0 * (sigma ** 2.0)));
		};		
		
	static quantile:
#Markdown(
"""#### Usage

    math.random.LogNormal.quantile(x, mu, sigma)

#### Description

Evaluates the quantile of a lognormal random variables with 
parameters `mu` and `sigma` at `x`.
 """)
	fun(x, mu, sigma)
		{
		checkParams(mu, sigma);
		if (x <= 0 or x >= 1)
			throw "x must be between 0 and 1";
		return exp(sqrt(2.0 * (sigma ** 2.0)) * erfinv(2.0 * x - 1.0) + mu);
		};		
		
	static checkParams:
#Markdown(
"""#### Usage

    math.random.LogNormal.checkParams(mu, sigma)

#### Description

Checks if the parameters mu and sigma are admissible.
""")
	fun(mu, sigma)
		{
		if (sigma <= 0)
			throw "sigma must be strictly positive";
		};			

	};

