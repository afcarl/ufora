/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/
`hidden;

UniformReal: 
#Markdown(
"""### `UniformReal`

#### Description

A class for for uniform distributions.

#### Aliases

    math.random.UniformReal

""")
class
    {
#Markdown(
"""#### Description

The minimum of the support of the pdf of the distribution.
""")
	member min_;

#Markdown(
"""#### Description

The maximum of the support of the pdf of the distribution.
""")
	member max_;

#Markdown(
"""#### Description

The underlying uniform random number generator used for pulling samples from the distribution.
""")
	member rng_;

#Markdown(
"""#### Usage

    math.random.UniformReal(min, max, seed, rngFun = math.random.MersenneTwister)

#### Description

Produces a uniform distribution object on `(min, max)` 
generated using random number generator `rngFun`, to be seeded with `seed` 
""")
	operator new
	(min, max, seed, rngFun = math.random.MersenneTwister)
		{
		min = Float64(min);
		max = Float64(max);
	
		if (max <= min)
		   throw "max cannot be less than or equal to min";

		createInstance(cls, min_: min, max_: max, rng_: rngFun(seed));
		}
		;

#Markdown(
"""#### Usage

    iterator(uniformRealInstance)

#### Description

Produces an `iterator` from an instance of `math.random.UniformReal`, `uniformRealInstance`, 
which can be used to generate values from the represented distribution.
""")
	operator iterator()
		{
		//add 1, divide by 2 ** 32 - 1 to exclude 0 and 1
		let rngMax = classOf(rng_).max;
		for i in rng_
			{
			yield (max_ - min_) * ((i + 1.0) / (rngMax + 1.0)) + min_; 
			}
		}
		;

	static pdf:
#Markdown(
"""#### Usage

    math.random.UniformReal.pdf(x, min, max)

#### Description

Returns the pdf of the uniform distribution on `(min, max)` at `x`
""")
	fun(x, min, max)
		{
		min = Float64(min);
		max = Float64(max);
		if (max <= min)
			throw "max cannot be less than or equal to min";
		if ((x < min) or (x > max))
			{
			return 0.0;
			}
		else
			{
			return 1.0 / (max - min);
			}
		};

	static cdf:
#Markdown(
"""#### Usage

    math.random.UniformReal.cdf(x, min, max)

#### Description

Return the cdf of the uniform distribution on `(min, max)`
""")
	fun(x, min, max)
		{
		min = Float64(min);
		max = Float64(max);
		if (max <= min)
			throw "max cannot be less than or equal to min";
		if (x < min)
			{
			return 0.0;
			}
		else
			{
			if (x > max)
				{
				return 1.0;
				}
			else	
				{
				return (x - min) / (max - min);
				}
			}
		};

	static quantile:
#Markdown(
"""#### Usage

    math.random.quantile(p, min, max)

#### Description

Returns the inverse of the cdf of the uniform distribution
on `(min, max)`.
""")
	fun(p, min, max)
		{
		min = Float64(min);
		max = Float64(max);

		if (max <= min)
			throw "max cannot be less than or equal to min";
		if (p < 0 or p > 1)
			throw "bad input value";

		return p * (max - min) + min;
		};

	};
