/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/
`hidden;

Normal:
#Markdown("""
#### Description

A class for normal distributions.

#### Aliases

    math.random.Normal

""")
class
	{
#Markdown("""
#### Description

The mean of the distribution.
""")
	member mu_;

#Markdown("""
#### Description

The standard deviation of the distribution.
""")
	member sigma_;

#Markdown("""
#### Description

The underlying uniform random number generator used for pulling samples from the distribution.
""")
	member unifRng_;

#Markdown("""
#### Description

Specifies the method used for pulling values from the distribution.

Possible values are:

    `inverse
    `polar
    `boxMuller
	`ratio

""")
	member method_;

#Markdown("""
#### Usage

    math.random.Normal(mu, sigma, seed, rngFun = math.random.MersenneTwister, method = `polar)

#### Description

Produces a normal distribution object.

If ``method == `inverse``, the random numbers will be generated using the 
inverse cdf, if ``method == `polar``, the random numbers will be generated
using the polar method or G. Marsaglia, if ``method == `boxMuller``, the 
random numbers will be generated using the Box-Muller method.

#### Arguments

* `mu` -- Float. The mean of the distribution.
* `sigma` -- Float. The standard deviation of the distibution.
* `rngFun` -- Integral random number generator function .
* `seed` -- Integer. The seed.

#### Examples

    let rand = iterator(math.random.Normal(0.0, 1.0, 1));
    pull rand // evaluates to -0.209517937759

""")
	operator new
	(mu, sigma, seed, rngFun = math.random.MersenneTwister, method = `polar)
		 {
		 checkParams_(mu, sigma);

		 match (method) with 
		 (`inverse) 
			 {
			 createInstance(cls, mu_: mu, sigma_: sigma, 
		 					 unifRng_: UniformReal(0.0, 1.0, seed, rngFun), 
							 method_: method);
			 } 
		(`boxMuller) 
			 {
			 createInstance(cls, mu_: mu, sigma_: sigma, 
		 					 unifRng_: UniformReal(0.0, 1.0, seed, rngFun),
							 method_: method)
			 }
		(`polar)
			{
			createInstance(cls, mu_: mu, sigma_: sigma,	
								unifRng_: UniformReal(-1.0, 1.0, seed, rngFun),
								method_: method)
			}
		(`ratio)
		    {
			createInstance(cls, mu_: mu, sigma_: sigma,
								unifRng_: UniformReal(0.0, 1.0, seed, rngFun),
								method_: method)
			}
		};
		
	static checkParams_:
#Markdown("""
#### Usage

    math.random.Normal.checkParams(mu, sigma)

#### Description

Checks if the parameters `mu` and `sigma` are admissible -- throws an exception
if `sigma <= 0` and returns `nothing` otherwise.
""")
	fun(mu, sigma)
		{
		if (sigma <= 0)
			throw "sigma must be strictly positive";
		};		


	static pdf:
#Markdown("""
#### Usage

    math.random.Normal.pdf(x, mu, sigma)

#### Description

Returns the pdf of a normal random variable with mean `mu` and 
standard deviation `sigma` evaluated at `x`.

""")
	fun(x, mu, sigma)
		{
		checkParams_(mu,sigma);
		let inside = ((x - mu) / sigma) ** 2.0;
		let outside = sigma * ((2.0 * math.pi) ** 0.5);
		return (1.0 / outside) * math.exp(-0.5 * inside);
		};
		
	static cdf:
#Markdown("""
#### Usage

    math.random.Normal.cdf(x, mu, sigma)

#### Description

Returns the cdf of a normal random variable with mean `mu` and
standard deviation `sigma` evaluation at `x`.
""")
	fun(x, mu, sigma)
		{
		checkParams_(mu, sigma);
		let numerator = x - mu;
		let denominator = sigma * (2.0 ** (0.5));
		return 0.5 * (1.0 + math.erf(numerator / denominator));
		};
		
	static quantile:
#Markdown("""
#### Usage

    math.random.Normal.quantile(p, mu, sigma)

#### Description

Returns the inverse of the cdf of a normal random variable with mean `mu` 
and standard deviation `sigma` evaluated at `p`.
""")
	fun(p, mu, sigma)
		{
		checkParams_(mu, sigma);
		if (p <= 0 or p >= 1)
			throw "p must be in (0,1)";
		return mu + sigma * (2.0 ** 0.5) * math.erfinv(2.0 * p - 1.0);
		};

#Markdown("""
#### Usage

    iterator(normalInstance)

#### Description

Produces an `iterator` from an instance of `math.random.Normal`, `normalInstance`, 
which can be used to generate values from the distribution represented by 
`normalInstance`.

#### Examples

Suppose we bind

    let normalInstance = math.random.Normal(0.0, 1.0, 123);
    let rand = iterator(normalInstance);

Then

    pull rand //returns 0.514272271764068
    pull rand //returns 0.562039037550261

Or

    iter.toVector(iter.subseq(rand, 0, 10)) == 
    [-0.564698661023812, -0.180268438695696, -0.749255790138527,
     0.498360034721365, 0.128983707688245, 0.58031908090215,
     0.581264593617885, -0.0222632637763769, -0.193952747629141,
     0.772286741603092]

""")
	operator iterator()
		{
		match (method_) with
		(`inverse)
			{
			for x in unifRng_ { yield quantile(x, mu_, sigma_); }
			}
		(`boxMuller)
			{
			let localRng = iterator(unifRng_);
			while (true)
				{
				let u1 = pull localRng;
				let u2 = pull localRng;
				let R = (-2.0 * log(u1)) ** 0.5;
				let theta = 2.0 * pi * u2;
				yield (R * cos(theta) * sigma_ + mu_);
				yield (R * sin(theta) * sigma_ + mu_);
				}		   
			}
		(`polar)
			{
			let localRng = iterator(unifRng_);
			
			while (true)
				{
				let u = pull localRng;
				let v = pull localRng;
				
				let s = u * u + v * v;
				
				if (s <= 1.0 and s != 0.0)
				    {
				    let f = ((-2.0 * `log(s) / s) ** .5) * sigma_
					yield u * f + mu_;
					yield v * f + mu_;
					}
				}
			}
		(`ratio)
		    {
			let localRng = iterator(unifRng_);	

			let b = math.sqrt(8.0 / math.e);

			while (true)
			    {
				let u = pull localRng;
				let v = pull localRng;

				let x = b * (v - 0.5) / u
				let xSq = x ** 2.0;	
				
				let reject = false;
				
				if (xSq <= 5.0 - 4.0 * u) { yield x }
				else {
					if (xSq >= 1.03696104258357 / u + 1.4)
					    reject = true;
					
					//no choice but to compute the logarithm
					if (!reject and xSq <= -4.0 * log(u))
					    yield x
					}
				}
			}
		};

	};

