/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/
`hidden;

MersenneTwister: 
#Markdown(
"""### `MersenneTwister`

#### Description

A class wrapping the Mersenne Twister algorithm.

#### Aliases

    math.random.MersenneTwister

""")
class 
    {
#Markdown(
"""#### Description

The length-624 state array used in the Mersenne Twister algorithm.
""")
	member stateVector_;
	
#Markdown(
"""#### Usage

    math.random.MersenneTwister(seed)

#### Description

Creates a random number generator object using the Mersenne Twister algorithm
 using seed `seed`. 

Reference: M. Matsumoto and T. Nishimura, "Mersenne Twister: A
623-Dimensionally Equidistributed Uniform Pseudo-Random Number Generator",
ACM Transactions on Modeling and Computer Simulation, Vol. 8, No. 1,
January 1998, pp 3--30.
see: <http://www.math.keio.ac.jp/matumoto/emt.html>
""")
    operator new(seed)
		{	
		createInstance(cls, stateVector_: seedMersenneTwister_(seed));
		}
		;

#Markdown(
"""#### Usage

    iterator(mersenneTwisterInstance)

#### Description

Produces an `iterator` from an instance of `math.random.MersenneTwister`, `mersenneTwisterInstance`, 
which can be used to generate random integers.
""")
	operator iterator()
		{
		while(true)
			{
	 		stateVector_ = untempered_(stateVector_);
			for i in sequence(624)
				yield tempered_(stateVector_[i]);	
			}
		}
		;

#Markdown(
"""#### Description

The largest possible value producible by the Mersenne Twister algorithm `(2 **32 - 1)`.
""")
	static max: 4294967296;

	static seedMersenneTwister_:
#Markdown( 
"""#### Usage

    math.random.MersenneTwister.SeedMersenneTwister(x)

Returns a 624-element vector of unsigned 32-bit integers on [0, (2 ** 32) - 1]
with desirable properties for seeding the Mersenne Twister.
""")
		fun(seed) 
			{
			if (seed < 1)
				throw "can't use a seed less than 1";

			let xTemp = UInt32(seed);

			let seedVector = MutableVector(UInt32).create(624, 0u32);
			seedVector[0] = xTemp;

			for i in sequence(623u32)
				{
				xTemp = 1812433253u32 * (seedVector[i] ^ (seedVector[i] >> 30u32)) + i + 1u32;

				seedVector[i + 1] = xTemp;
				}

			seedVector;
			}
			;

#Markdown(
"""#### Usage

    math.random.MersenneTwister.upperBitmask_(x)

#### Description

When called on an 32-bit integer, returns its upper bitmask.
""")
	static upperBitmask_: fun(x) 
		{
		x & 2147483648u32;
		};

#Markdown(
"""#### Usage

    math.random.MersenneTwister.lowerBitmask_(x)

#### Description

When called on an 32-bit integer, returns its lower bitmask.
""")
	static lowerBitmask_: fun(x) 
		{
		x & 2147483647u32;
		};

	static untempered_: 
#Markdown(
"""`untempered_(x)`

Returns next iterate of the state array for Mersenne twister, taking a 
624-element vector of `UInt32` and returning a 624-element vector of `UInt32`.
""")
	fun(x) 
		{
		let result = MutableVector(UInt32).create(624, 0u32);

		let lookup = fun(i) {
			if (i < 624)
			    return x[i]

			return result[i - 624]
			}

		for i in sequence(624)
			{
			let xL = lowerBitmask_(lookup(i + 1));
			let xU = upperBitmask_(lookup(i));
			let y = (xL | xU);
			if (y % 2 == 1)	{
				y = (y >> 1u32) ^ 2567483615u32;
				}
			else {
				y = (y >> 1u32);
				}

			result[i] = lookup(i + 397) ^ y;
			}

		result
		};

	static tempered_: 
#Markdown(
"""#### Usage

    math.random.MersenneTwister.tempered_(x)

#### Description

"Tempers" the value `x`.
""")
		fun(y) 
			{	
			y = y ^ (y >> 11u32);
			y = y ^ ((y << 7u32) & 2636928640u32);
			y = y ^ ((y << 15u32) & 4022730752u32);
			y ^ (y >> 18u32);
			};


};

