/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/
`hidden;

NegativeBinomial:
#Markdown(
"""### `NegativeBinomial`

#### Description

A class for negative binomial distributions.

#### Aliases

    math.random.negativeBinomial

""")

class
	{
#Markdown(
"""#### Description

The number of failures.
""")
	member r_;

#Markdown(
"""#### Description

The success probability.
""")
	member p_;

#Markdown(
"""#### Description

The underlying uniform random number generator used for pulling samples from the distribution.
""")
	member unifRng_;

#Markdown(
"""#### Usage

    math.random.NegativeBinomial(r, p, seed, rngFun = math.random.MersenneTwister)

#### Description

Creates a negative binomial distribution object with parameters `r` 
(number of failures) and `p` (success probability) using an integral
 random number generator set by `rngFun` to be seeded with seed `seed`.
""")
	operator new(r, p, seed, rngFun = math.random.MersenneTwister)
		{
		checkParams_(r,p);
		let unifRng = UniformReal(0, 1, seed, rngFun);
		createInstance(cls, r_: r, p_: p, unifRng_: unifRng)
		};
	
#Markdown(
"""#### Usage

    iterator(negativeBinomialInstance)

#### Description

Produces an `iterator` from an instance of `math.random.NegativeBinomial`, `negativeBinomialInstance`, 
which can be used to generate values from the represented distribution.
""")
	operator iterator()
		{
		for x in unifRng_
			yield quantile(x, r_, p_);
		};

	static pdf:
#Markdown(
"""#### Usage

    math.random.NegativeBinomial.pdf(x, r, p)

#### Description

Evaluates the pdf of a negative binomial distribution with parameters `r` 
and `p` at `x`.
 """)
	fun(x, r, p)
		{
		checkParams_(r, p);
		if (x == floor(x))
			{
			return Float64(combination(x + r - 1, x) * ((1.0 - p) ** r) * (p ** x));
			}
		else
			{
			return 0.0;
			}
		};
		
	static cdf:
#Markdown(
"""#### Usage

    math.random.NegativeBinomial.cdf(x, r, p)

#### Description

Evaluates the cdf of a negative binomial distribution with parameters `r` and 
`p` at `x`.
""")
	fun(x, r, p)
		{
		checkParams_(r, p);
		if (x < 0) 
			return 0.0;
		return ibetac(r, floor(x) + 1.0, p);
		};		
		
	static quantile:
#Markdown(
"""#### Usage

    math.random.NegativeBinomial.quantile(x, r, p)

#### Description

Evaluates the quantile of a negative binomial distribution with
parameters `r` and `p` at `x`.
""")
	fun(x, r, p)
		{
		checkParams_(r, p);
		if (x <= 0 or x >= 1)
			throw "x must be between 0 and 1";
		return ceil(ibetaInva(r, p, 1.0 - x) - 1.0);
		};		
		
	static checkParams_:
#Markdown(
"""#### Usage

    checkParams_(r, p)

#### Description

Checks if the parameters `r` and `p` are admissible.
""")
	fun(r, p)
		{
		if (p <= 0 or p >= 1)
			throw "p must be in (0,1)";
		if (r < 1 or (r != floor(r)))
			throw "r must be a strictly positive integer";
		};			

	};





