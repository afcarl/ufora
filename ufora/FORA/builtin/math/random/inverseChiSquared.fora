/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/
`hidden;

InverseChiSquared:
#Markdown(
"""### `InverseChiSquared`

#### Description

A class for InverseChiSquared distributions.

#### Aliases

    math.random.InverseChiSquared

""")

class
	{
#Markdown(
"""#### Description

The degrees of freedom.
""")
	member k_;

#Markdown(
"""#### Description

The underlying uniform random number generator used for pulling samples from the distribution.
""")
	member unifRng_;

#Markdown(
"""#### Usage

    math.random.InverseChiSquared(k, seed, rngFun = math.random.MersenneTwister)

#### Description

Creates a inverse chi-squared distribution object with `k` degrees of freedom, using an integral random number generator set by `rngFun` to be seeded with
seed `seed`.
""")
	operator new(k, seed, rngFun = math.random.MersenneTwister)
		{
		checkParams_(k);
		let unifRng = UniformReal(0, 1, seed, rngFun);

		createInstance(cls, k_: k, unifRng_: unifRng)
		};

#Markdown(
"""#### Usage

    iterator(inverseChiSquaredInstance)

#### Description

Produces an `iterator` from an instance of `math.random.InverseChiSquared`, `inverseChiSquaredInstance`, 
which can be used to generate values from the represented distribution.
""")
	operator iterator()
		{
		for x in unifRng_
			yield quantile(x, k_);
		};

	static pdf:
#Markdown(
"""#### Usage

    math.random.InverseChiSquared.pdf(x, k)

#### Description

Evaluates the pdf of an inverse chi-squared distribution with `k` degrees of freedom at `x`.
""")
	fun(filters.IsNumeric(x), filters.IsNumeric(k))
		{
		checkParams_(k);

		`inverseChiSquaredPdf(Float64(k), Float64(x));
		};
		
	static cdf:
#Markdown(
"""#### Usage

    math.random.InverseChiSquared.cdf(x, k)

#### Description

Evaluates the cdf of an inverse chi-squared distribution with `k` degrees of freedom at `x`.
""")
	fun(filters.IsNumeric(x), filters.IsNumeric(k))
		{
		checkParams_(k);
	
		`inverseChiSquaredCdf(Float64(k), Float64(x))
		};		
		
	static quantile:
#Markdown(
"""#### Usage

    math.random.InverseChiSquared.quantile(x, a, b)

#### Description

Evaluates the quantile of an inverse chi-squared distribution with shape parameter `a` and
rate parameter `b` at `x`.
""")
	fun(filters.IsNumeric(x), filters.IsNumeric(k))
		{
		checkParams_(k);

		if (x <= 0 or x >= 1)
			throw "x must be between 0 and 1";

		`inverseChiSquaredQuantile(Float64(k), Float64(x))
		};		
		
	static checkParams_:
#Markdown(
"""#### Usage

    checkParams_(k)

#### Description

Checks that the parameter `k` is admissible.
""")
	fun(k)
		{
		if (k <= 0)
			throw "parameters must be strictly positive";
		};		

	};

