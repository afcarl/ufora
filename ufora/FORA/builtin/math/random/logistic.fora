/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/
`hidden;

Logistic:
#Markdown(
"""### `Logistic`

#### Description

A class for logistic distributions.

#### Aliases

    math.random.logistic

""")

class 
	{
#Markdown(
"""#### Description

The location parameter.
""")
	member mu_;

#Markdown(
"""#### Description

The scale parameter.
""")
	member s_;

#Markdown(
"""#### Description

The underlying uniform random number generator used for pulling samples from the distribution.
""")
	member unifRng_;

#Markdown(
"""#### Usage

    math.random.Logistic(mu, s, seed, rngFun = math.random.MersenneTwister)

#### Description

Creates a logistic distribution object with location parameter `mu` and 
scale parameter `s` using an integral random number generator set by `rngFun`
to be seeded with `seed`.
""")
	operator new(mu, s, seed, rngFun = math.random.MersenneTwister)
		{
		checkParams_(mu,s);
		let unifRng = UniformReal(0, 1, seed, rngFun);
		createInstance(cls, mu_: mu, s_: s, unifRng_: unifRng)
		};

#Markdown(
"""#### Usage

    iterator(logisticInstance)

#### Description

Produces an `iterator` from an instance of `math.random.Logistic`, `logisticInstance`, 
which can be used to generate values from the represented distribution.
""")
	operator iterator()
		{
		for x in unifRng_
			yield quantile(x, mu_, s_);
		};

	static pdf:
#Markdown(
"""#### Usage

    math.random.Logistic.pdf(x, mu, s)

#### Description

Evaluates the pdf of a logistic distribution with location parameter `mu`
and scale parameter `s` at `x`.
""")
	fun(x, mu, s)
		{
		checkParams_(mu, s);
		return (sech((x - mu) / (2.0 * s)) ** 2.0) / (4.0 * s);
		};
		
	static cdf:
#Markdown(
"""#### Usage

    math.random.Logistic.cdf(x, mu, s)

#### Description

Evaluates the cdf of a logistic distribution with location parameter `mu`
and scale parameter `s` at `x`.
""")
	fun(x, mu, s)
		{
		checkParams_(mu, s);

		return 0.5 + 0.5 * tanh((x - mu) / (2.0 * s));	
		};		
		
	static quantile:
#Markdown(
"""#### Usage

    math.random.Logistic.quantile(x, mu, s)

#### Description

Evaluates the quantile of a logistic distribution with location 
parameter `mu` and scale parameter `s` at `x`.
""")
	fun(x, mu, s)
		{
		checkParams_(mu, s);
		if (x <= 0 or x >= 1)
			throw "x must be between 0 and 1";

		return atanh(2.0 * x - 1.0) * 2.0 * s + mu;		
		};		
		
	static checkParams_:
#Markdown(
"""#### Usage

    math.random.Logistic.checkParams_(mu, s)

#### Description

Checks if the parameters `mu` and `s` are admissible.
""")
	fun(mu, s)
		{
		if (s <= 0)
			throw "s must be strictly positive";
		};	

	};


		
