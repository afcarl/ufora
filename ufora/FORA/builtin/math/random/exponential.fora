/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/
`hidden;

Exponential:
#Markdown(
"""### `Exponential`

#### Description

A class for exponential distributions.

#### Aliases

    math.random.Exponential

""")

class
	{
#Markdown(
"""#### Description

The rate, or inverse scale, parameter.
""")
	member lambda_;

#Markdown(
"""#### Description

The underlying uniform random number generator used for pulling samples from the distribution.
""")
	member unifRng_;

#Markdown(
"""#### Usage

    math.random.Exponential(lambda, seed, rngFun = math.random.MersenneTwister)

#### Description

Produces an exponential distribution object having failure rate `lambda`
generated using an integral random number generator set by `rngFun` to be 
seeded with `seed`.
""")
	operator new(lambda, seed, rngFun = math.random.MersenneTwister)
		{
		checkParam_(lambda);
		createInstance(cls, lambda_: lambda, 
					   unifRng_: UniformReal(0.0, 1.0, seed, rngFun));
		};
		
#Markdown(
"""#### Usage

    iterator(exponentialInstance)

#### Description

Produces an `iterator` from an instance of `math.random.Exponential`, `exponentialInstance`, 
which can be used to generate values from the represented distribution.
""")
	operator iterator()
		{
		for i in unifRng_
			yield quantile(i, lambda_);
		};

	static pdf:
#Markdown(
"""#### Usage

    math.random.Exponential.pdf(x, lambda)

#### Description

Returns the pdf of an exponential random variable with rate parameter
`lambda` at `x`.
""")
	fun(x, lambda)
		{
		checkParam_(lambda);
		if (x < 0)
		   {
		   return 0.0;
		   }
		else
			{
			return lambda * math.exp(-lambda * x);
			}
		};
	
	static cdf:
#Markdown(
"""#### Usage

   math.random.Exponential.cdf(x, lambda)

#### Description

Returns the cdf of an exponential random variable with rate parameter
`lambda` at `x`.
""")
	fun(x, lambda)
		{
		checkParam_(lambda);
		if (x < 0)
			{
			return 0.0;
			}
		else
			{
			return 1.0 - math.exp(-lambda * x);
			}
		};

	static quantile:
#Markdown(
"""#### Usage

    math.random.Exponential.quantile(p, lambda)

#### Description

Returns the inverse of the cdf of an exponential random variable
with rate parameter `lambda` evaluated at `p`.
""")
	fun(p, lambda)
		{
		checkParam_(lambda);
		if ( p<= 0 or p >= 1)
		    throw "p must be in (0,1)";
		return -math.log(1.0 - p) / lambda;
		};
	
	static checkParam_:
#Markdown(
"""#### Usage

    math.random.Exponential.checkParam_(lambda)

#### Description

Checks if the parameter `lambda` is admissible -- throws an exception
if `lambda <= 0`, and returns void otherwise.
"""
)
	fun(lambda)
		{
		if (lambda <= 0)
			throw "lambda must be strictly positive";
		};

	};

