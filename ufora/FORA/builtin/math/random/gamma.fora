/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/
`hidden;

Gamma:
#Markdown(
"""### `Gamma`

#### Description

A class for Gamma distributions.

#### Aliases

    math.random.Gamma

""")

class
	{
#Markdown(
"""#### Description

The shape parameter.
""")
	member a_;

#Markdown(
"""#### Description

The rate parameter.
""")
	member b_;

#Markdown(
"""#### Description

The underlying uniform random number generator used for pulling samples from the distribution.
""")
	member unifRng_;

#Markdown(
"""#### Usage

    math.random.Gamma(a, b, seed, rngFun = math.random.MersenneTwister)

#### Description

Creates a gamma distribution object with shape parameter `a` and rate parameter
`b`, using an integral random number generator set by `rngFun` to be seeded with
seed `seed`.
""")
	operator new(a, b, seed, rngFun = math.random.MersenneTwister)
		{
		checkParams_(a, b);
		let unifRng = UniformReal(0, 1, seed, rngFun);
		createInstance(cls, a_: a, b_: b, unifRng_: unifRng)
		};

#Markdown(
"""#### Usage

    iterator(gammaInstance)

#### Description

Produces an `iterator` from an instance of `math.random.Gamma`, `gammaInstance`, 
which can be used to generate values from the represented distribution.
""")
	operator iterator()
		{
		for x in unifRng_
			yield quantile(x, a_, b_);
		};

	static pdf:
#Markdown(
"""#### Usage

    math.random.Gamma.pdf(x, a, b)

#### Description

Evaluates the pdf of a gamma distribution with shape parameter `a` and
rate parameter `b` at `x`.
""")
	fun(x, a, b)
		{
		checkParams_(a, b);
		if (x > 0)
		   {
			return (b ** a) * (x ** (a - 1.0)) * exp(-b * x) / tgamma(a);
			}	
		else
			{
			return 0.0;
			}
		};
		
	static cdf:
#Markdown(
"""#### Usage

    math.random.Gamma.cdf(x, a, b)

#### Description

Evaluates the cdf of a gamma distribution with shape parameter `a` and
rate parameter `b` at `x`.
""")
	fun(x, a, b)
		{
		checkParams_(a, b);
		if (x > 0)
			{
			return gammaP(a, b * x);
			}
		else
			{
			return 0.0;
			}
		};		
		
	static quantile:
#Markdown(
"""#### Usage

    math.random.Gamma.quantile(x, a, b)

#### Description

Evaluates the quantile of a gamma distribution with shape parameter `a` and
rate parameter `b` at `x`.
""")
	fun(x, a, b)
		{
		checkParams_(a, b);
		if (x <= 0 or x >= 1)
			throw "x must be between 0 and 1";
		return gammaPInv(a , x) / b;
		};		
		
	static checkParams_:
#Markdown(
"""#### Usage

    checkParams_(a, b)

#### Description

Checks that the parameters `a` and `b` are admissible.
""")
	fun(a, b)
		{
		if (a <= 0 or b <= 0)
			throw "parameters must be strictly positive";
		};		

	};

