/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/
`hidden;

Binomial:
#Markdown(
"""### `Binomial`

#### Description

A class for Binomial distributions.

#### Aliases

    math.random.binomial

""")

class
	{
#Markdown(
"""#### Description

The number of trials.
""")
	member n_;
#Markdown(
"""#### Description

The success probability.
""")
	member p_;
#Markdown(
"""#### Description

The underlying uniform random number generator used for pulling samples from the distribution.
""")
	member unifRng_;

#Markdown(
"""#### Usage

    math.random.Binomial(n, p, seed, rngFun = math.random.MersenneTwister)

#### Description

Creates a binomial distribution object having parameters `n` and `p`, using 
an integral random number generator set by `rngFun` and seed `seed`.
""")
	operator new(n, p, seed, rngFun = math.random.MersenneTwister)
		{
		checkParams_(n, p);
		let unifRng = UniformReal(0.0, 1.0, seed, rngFun);
		createInstance(cls, n_: n, p_: p, unifRng_: unifRng);
		};

#Markdown(
"""#### Usage

    iterator(binomialInstance)

#### Description

Produces an `iterator` from an instance of `math.random.Binomial`, `binomialInstance`, 
which can be used to generate values from the represented distribution.
""")
	operator iterator()
		{
		for x in unifRng_
			yield quantile(x, n_, p_);
		};

	static pdf:
#Markdown(
"""#### Usage

    math.random.Binomial.pdf(x, n, p)

#### Description

Returns the pdf of a binomial distribution with parameters `n` and `p` at `x`.
""")
	fun(x, n, p)
		{
		checkParams_(n, p);
		if (x < 0 or x > n)
			return 0.0;
		if (x == floor(x))
			{
			return Float64(combination(n, x) * (p ** x) * ((1 - p) ** (n - x)));
			}
		else
			{
			return 0.0;
			}
		};
		
	static cdf:
#Markdown(
"""#### Usage

    math.random.Binomial.cdf(x, n, p)

#### Description

Returns the cdf of a binomial distribution with parameters `n` and `p`
evaluated at `x`.
""")
	fun(x, n, p)
		{
		checkParams_(n, p);
		if (x < 0)
			return 0.0;
		if (x >= n)
			return 1.0;
		x = floor(x);
		return ibetac(x + 1.0, n - x, p);
		};
		
	static quantile:
#Markdown(
"""#### Usage

    math.random.Binomial.quantile(x, n, p)

#### Description

Returns the inverse of the cdf of a binomial random variable with parameters
`n` and `p` evaluated at `x`.
""")
	fun(x, n, p)
		{
		checkParams_(n, p);
		if (x <= 0 or x >= 1)
			throw "x must be in [0,1]";
		return `binomQuantile(Float64(n), Float64(p), Float64(x), `integerRoundUp);
		};
		
	static checkParams_:
#Markdown(
"""#### Usage

    math.random.Binomial.checkParams_(n, p)

#### Description

Checks that the parameters `n` and `p` are admissible.
""")
	fun(n, p)
		{
		if (p < 0)
			throw "p must be positive";
		if (p > 1)
			throw "p must be less than or equal to one";
		if (n < 0)
			throw "n must be positive";
		};

	};

