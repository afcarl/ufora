/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/
`hidden;

HyperGeometric:
#Markdown(
"""### `HyperGeometric`

#### Description

A class for HyperGeometric distributions.

#### Aliases

    math.random.HyperGeometric

""")

class
	{
#Markdown(
"""#### Description

The number of "defective" objects.
""")
	member r_;

#Markdown(
"""#### Description

The number of draws.
""")
	member n_;

#Markdown(
"""#### Description

The population size.
""")
	member N_;

#Markdown(
"""#### Description

The underlying uniform random number generator used for pulling samples from the distribution.
""")
	member unifRng_;

#Markdown(
"""#### Usage

    math.random.HyperGeometric(r, n, N, seed, rngFun = math.random.MersenneTwister)

#### Description

Creates a hypergeometric distribution object with 
parameters `r, n, N` using an integral random number generator set by 
`rngFun` to be seeded with seed `seed`.
""")
	operator new(r, n, N, seed, rngFun = math.random.MersenneTwister)
		{
		checkParams_(r, n, N);
		let unifRng = UniformReal(0, 1, seed, rngFun);
		createInstance(cls, r_: r, n_: n, N_: N, unifRng_: unifRng)
		};
	
#Markdown(
"""#### Usage

    iterator(hyperGeometricInstance)

#### Description

Produces an `iterator` from an instance of `math.random.HyperGeometric`, `hyperGeometricInstance`, 
which can be used to generate values from the represented distribution.
""")	
	operator iterator()
		{
		for x in unifRng_
			yield quantile(x,r_,n_,N_)
		};

	static pdf:
#Markdown(
"""#### Usage

    math.random.HyperGeometric.pdf(x, r, n, N)

#### Description

Returns the pdf of a hypergeometric random variable with parameters 
`r, n, N` evaluated at `x`.
""")
	fun(x, r, n, N)
		{
		checkParams_(r, n, N);
		return `hypergeometricPdf(UInt32(r), UInt32(n), UInt32(N), Float64(x));
		};
		
	static cdf:
#Markdown(
"""#### Usage

    math.random.HyperGeometric.cdf(x, r, n, N) 

#### Description

Returns the cdf of a hypergeometric random variable with parameters 
`r, n, N` evaluated at `x`.
""")
	fun(x, r, n, N)
		{
		checkParams_(r, n, N);
		return `hypergeometricCdf(UInt32(r), UInt32(n), UInt32(N), floor(Float64(x)));
		};
	
	static quantile:
#Markdown(
"""#### Usage

    math.random.HyperGeometric.quantile(x, r, n, N)

#### Description

Returns the quantile of a hypergeometric random variable with parameters 
`r, n, N` evaluated at `x`.
"""	)
	fun(x, r, n, N)
		{
		checkParams_(r, n, N);
		if (x <= 0 or x >= 1)
			throw "x must be in (0,1)";	
		return `hypergeometricQuantile(UInt32(r), UInt32(n), UInt32(N),
			   							Float64(x),`integerRoundUp);		
		};

	static checkParams_:
#Markdown(
"""#### Usage

    math.random.HyperGeometric.checkParams_(r, n, N)

#### Description

Checks whether the parameters are admissible.
""")
	fun(r,n,N)
		{	
		if ((r < 0 or n < 1) or N < 1)
			throw "parameters must be positive";
		if (r > N or n > N)
			throw "r and n must be less than or equal to N";
		if ((r != floor(r) or n != floor(n)) or N != floor(N))
			throw "parameters must be integers";
		};	

	};

