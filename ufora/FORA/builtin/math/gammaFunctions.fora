/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/
`hidden;

tgamma:
#Markdown(
"""#### Usage

    1. math.tgamma(a, z)
    2. math.tgamma(z)

#### Description

1. Returns the full (non-normalized) upper incomplete gamma function of `a` and `z`.
2. Returns the "true gamma" of value `z`.
""")
    fun({Float64} t)
        {
        `tgamma(t)
        }
        ({Float32} t)
        {
        `tgamma(t)
        }
        (filters.IsNumeric(t))
        {
        `tgamma(Float64(t))
        }
        ({Float64} a, {Float64} b)
        {
        `tgamma(a, b)
        }
        ({Float32} a, {Float32} b)
        {
        `tgamma(a, b)
        }
        (filters.IsNumeric(a), filters.IsNumeric(b))
        {
        `tgamma(Float64(a), Float64(b))
        }
        ;

`hidden
lgamma:
#Markdown(
"""#### Usage

    math.lgamma(z)

#### Description

Returns the natural logarithm of the absolute value of the gamma function at `z`.
""")
    fun({Float64} t)
        {
        `lgamma(t)
        }
        ({Float32} t)
        {
        `lgamma(t)
        }
        (filters.IsNumeric(t))
        {
        `lgamma(Float64(t))
        }
        ;

`hidden
digamma:
#Markdown(
"""#### Usage

    math.digamma(z)

#### Description

Returns the digamma or psi function of `z` 
(ie, the logarithmic derivative of the gamma function).
""")
    fun({Float64} t)
        {
        `digamma(t)
        }
        ({Float32} t)
        {
        `digamma(t)
        }
        (filters.IsNumeric(t))
        {
        `digamma(Float64(t))
        }
        ;

`hidden
tgammaRatio: 
#Markdown(
"""#### Usage

    math.tgammaRatio(a, b)

#### Description

Returns the ratio of gamma functions: essentially `tgamma(a) / tgamma(b)` 
but with better error bounds than the naive call.
""")
    fun({Float64} a, {Float64} b)
        {
        `tgammaRatio(a, b)
        }
        ({Float32} a, {Float32} b)
        {
        `tgammaRatio(a, b)
        }
        (filters.IsNumeric(a), filters.IsNumeric(b))
        {
        `tgammaRatio(Float64(a), Float64(b))
        }
        ;

`hidden
gammaP:
#Markdown(
"""#### Usage 

    math.gammaP(a, z)

#### Description

Returns the normalized lower incomplete gamma function of `a` and `z`.
""")
    fun({Float64} a, {Float64} z)
        {
        `gammaP(a, z)
        }
        ({Float32} a, {Float32} z)
        {
        `gammaP(a, z)
        }
        (filters.IsNumeric(a), filters.IsNumeric(z))
        {
        `gammaP(Float64(a), Float64(z))
        }
        ;

`hidden
gammaPInv:
#Markdown(
"""#### Usage

    math.gammaPInv(a, p)

#### Description

Returns a value `x` such that `p == gammaP(a, x)`. 
Requires `a > 0` and `1 >= p >= 0`, 
""")
    fun({Float64} a, {Float64} z)
        {
        `gammaPInv(a, z)
        }
        ({Float32} a, {Float32} z)
        {
        `gammaPInv(a, z)
        }
        (filters.IsNumeric(a), filters.IsNumeric(z))
        {
        `gammaPInv(Float64(a), Float64(z))
        }
        ;
        
`hidden
gammaPDerivative:
#Markdown(
"""#### Usage

    math.gammaPDerivative(a, x)

#### Description

Returns the paritial derivative with respect to `x` of `gammaP(a, x)`.
""")
    fun({Float64} a, {Float64} z)
        {
        `gammaPDerivative(a, z)
        }
        ({Float32} a, {Float32} z)
        {
        `gammaPDerivative(a, z)
        } 
        (filters.IsNumeric(a), filters.IsNumeric(z))
        {
        `gammaPDerivative(Float64(a), Float64(z))
        }
        ;
        
`hidden
gammaPInva:
#Markdown(
"""#### Usage

    math.gammaPInva(x, p)

#### Description

Returns a value `a` such that `p == gammaP(a, x)`.
Requires `x > 0` and `1 >= p >= 0`.
""")
    fun({Float64} a, {Float64} z)
        {
        `gammaPInva(a, z)
        }
        ({Float32} a, {Float32} z)
        {
        `gammaPInva(a, z)
        }
        (filters.IsNumeric(a), filters.IsNumeric(z))
        {
        `gammaPInva(Float64(a), Float64(z))
        }
        ;

`hidden
gammaQ:
#Markdown(
"""#### Usage 

    math.gammaQ(a, z)

#### Description

Returns the normalized upper incomplete gama function of `a` and `z`.
""")
    fun({Float64} a, {Float64} b)
        {
        `gammaQ(a, b)
        }
        ({Float32} a, {Float32} b)
        {
        `gammaQ(a, b)
        }
        (filters.IsNumeric(a), filters.IsNumeric(b))
        {
        `gammaQ(Float64(a), Float64(b))
        }
        ;

`hidden
gammaQInv:
#Markdown(
"""#### Usage

    math.gammaQInv(a, q)

#### Description

Returns a value `x` such that `q == gammaQ(a, x)`.
Requires that `a > 0` and `1 >= q >= 0`.
""")
    fun({Float64} a, {Float64} b)
        {
        `gammaQInv(a, b)
        }
        ({Float32} a, {Float32} b)
        {
        `gammaQInv(a, b)
        }
        (filters.IsNumeric(a), filters.IsNumeric(b))
        {
        `gammaQInv(Float64(a), Float64(b))
        }
        ;
        
`hidden
gammaQInva:
#Markdown(
"""#### Usage

    math.gammaQInva(x, q)

#### Description

Returns a value `a` such that `q == gamma_q(a, x)`.
Requires that `x > 0` and `1 >= q >= 0`.
""")
    fun({Float64} a, {Float64} b)
        {
        `gammaQInva(a, b)
        }
        ({Float32} a, {Float32} b)
        {
        `gammaQInva(a, b)
        }
        (filters.IsNumeric(a), filters.IsNumeric(b))
        {
        `gammaQInva(Float64(a), Float64(b))
        }
        ;
        
`hidden
tgammaLower: 
#Markdown(
"""#### Usage

    math.tgammaLower(a, z)

#### Description

Returns returns the full (non-normalized) lower incomplete 
gamma function of `a` and `z`
""")
    fun({Float64} a, {Float64} b)
        {
        `tgammaLower(a, b)
        }
        ({Float32} a, {Float32} b)
        {
        `tgammaLower(a, b)
        }
        (filters.IsNumeric(a), filters.IsNumeric(b))
        {
        `tgammaLower(Float64(a), Float64(b))
        }
        ;

