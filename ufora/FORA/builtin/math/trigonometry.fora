/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/
`hidden;

//trig functions aliased in math.fora

//tigonometric functions
`hidden
sin: 
#Markdown(
"""#### Usage

    math.sin(x)

#### Description

Returns the sine of Complex or real `x` (measured in radians).
""")
	fun (Complex(a,b))
		{
		Complex(sin(a) * cosh(b),cos(a) * sinh(b));
		}
	(filters.IsNumeric(x))
		{
		`sin(x);
		};

`hidden
cos: 
#Markdown(
"""#### Usage

    math.cos(x)

#### Description

Returns the cosine of Complex or real `x` (measured in radians).  
""")
	fun (Complex(a,b))
		{
		Complex(cos(a) * cosh(b),-sin(a) * sinh(b));
		}		
	(filters.IsNumeric(x))
		{
		`cos(x);
		};

`hidden
tan:
#Markdown(
"""#### Usage

    math.tan(x)
	
#### Description

Returns the `tangent` of Complex or real `x` (measured in radians).  
""")
	fun (x)
		{
		sin(x) / cos(x);
		};

`hidden
cotan:
#Markdown(
"""#### Usage

    math.cotan(x)

#### Description

Returns the cotangent of Complex or real `x` (measured in radians). 
""")
	fun (x)
		{
        cos(x) / sin(x);
		};

`hidden
sec:
#Markdown(
"""#### Usage

    math.sec(x)
	
#### Description

Returns the secant of Complex or real `x` (measured in radians).  
""")
	fun (x)
		{
		1.0 / cos(x);
		};

`hidden
csc:
#Markdown(
"""#### Usage

    math.csc(x)

#### Description

Returns the cosecant of Complex or real `x` (measured in radians).
""")
	fun (x)
		{
		1.0 / sin(x);
		};

//inverse trigonometric functions
`hidden
asin: 
#Markdown(
"""#### Usage

    math.asin(x)
	
#### Description

Returns the arcsine (measured in radians) of Complex or real `x`.  
""")
	fun (Complex(x,y))
		{
		let z = Complex(x,y);
		(-Complex.i) * log(Complex.i * z + sqrt(1.0 - z ** 2.0));
		}
		(x)
		{
		if (abs(x) > 1.0)
			throw "argument must be <= 1.0";
		let adjacent = sqrt(1.0 - x ** 2.0);
		atan(x / adjacent);
		};

`hidden
acos: 
#Markdown(	
"""#### Usage

    math.acos(x)
	
#### Description

Returns the arccosine (measured in radians) of Complex or real `x`. 
""")
	fun (Complex(x,y))
		{
		let z = Complex(x,y);
		let i = Complex(0.0,1.0);

		(-i) * log(z + i * sqrt(1 - z ** 2.0));
		}
		(x)
		{
		if (abs(x) > 1.0)
			throw "argument must be <= 1.0";
		let opposite = sqrt(1.0 - x ** 2.0);

		atan(opposite / x);
		};

`hidden
atan:
#Markdown(
"""#### Usage 

    math.atan(x)

#### Description

Returns the arc tangent (measured in radians) of Complex or real `x`.  
""")
	fun (Complex({Float64} x, {Float64} y))
		{
		Complex(`atan(x,y))
		}
		(Complex({Float32} x, {Float32} y))
		{
		Complex(`atan(x,y))
		}
		(Complex(x,y))
		{
		Complex(`atan(Float64(x),Float64(y)))
		}
		({Float64} x)
		{
		`atan(x, 0f64)[0]
		}		
		({Float32} x)
		{
		`atan(x, 0f32)[0]
		}		
		(filters.IsNumeric(x), filters.IsNumeric(y))
		{
		`atan(Float64(x), Float64(y))
		}		
		(filters.IsNumeric(x))
		{
		`atan(Float64(x), 0f64)[0]
		}
		;

`hidden
atan2: 
#Markdown(
"""#### Usage

    math.atan2(x, y)

#### Description

Returns the arc tangent (measured in radians) of `y / x`.
""")
	fun (x, y)
		{
		if (x == 0.0)
			{
			if (y == 0.0)
				throw #UndefinedValue("atan(0,0) is defined");
			return sign(y) * (halfPi);
			}

		let theta = atan(y / x);
		
		if (x < 0.0)
			{
			if (y < 0.0)
				return theta - pi;
			return theta + pi;
			}

		theta;
		};

`hidden
acot: 
#Markdown(	
"""#### Usage

    math.acot(x)

#### Description

Returns the arc cotangent (measured in radians) of Complex or real `x`.  
""")
	fun (Complex(x,y))
		{
		if (x == 0.0)
			return halfPi
		let z = Complex.i / Complex(x,y);

		0.5 * Complex.i * (log(1.0 - z) - log(1.0 + z));
		}
		(filters.IsNumeric(x))
		{
		if (x == 0.0)
			return halfPi;

		atan(1.0 / x);
		};

`hidden
asec: 
#Markdown(
"""#### Usage

    math.asec(x)

#### Description

Returns arc secant (measured in radians) of Complex or real `x`.  
""")
	fun (Complex(x,y))
		{
		let z = 1.0 / Complex(x,y);

		(-Complex.i) * log(z + math.Complex.i * sqrt(1.0 - z ** 2.0));
		}
		(x)
		{
		if (abs(x) < 1.0)
			throw "argument must be >= 1.0";
		if (x == 1)
			return 0.0;
		if (x == -1)
			return pi;
		let adjacent = 1.0;
		let opposite = sqrt(Float64(x) ** 2.0 - 1.0);

		atan(opposite/adjacent);
		};

`hidden
acsc: 
#Markdown(
"""#### Usage

    math.acsc(x)

#### Description

Returns arc cosecant (measured in radians) of Complex or real `x`.  
""")
	fun (Complex(x,y))
		{
		let z = 1.0 / Complex(x,y);
		(-Complex.i) * log((Complex.i * z) + sqrt(1.0 - z ** 2.0));
		}
		(x)
		{
		if (abs(x) < 1.0)
			throw "argument must be >= 1.0";
		if (x == 1.0)
			return halfPi;
		if (x == -1.0)
			return -halfPi;
		let opposite = 1.0;
		let adjacent = sqrt(Float64(x)**2.0 - 1.0);
		atan(opposite/adjacent);
		};

//hyperbolic trigonometric functions
`hidden
sinh:
#Markdown(
"""#### Usage

    math.sinh(x)

#### Description

Returns the hyperbolic sine of Complex or real `x`. 
""")
	fun (x)
		{
		(exp(x) - exp(-x)) * 0.5;
		};

`hidden
cosh:
#Markdown(
"""#### Usage

    math.cosh(x)

#### Description

Returns the hyperbolic cosine of Complex or real `x`. 
""")
	fun (x)
		{
		(exp(x) + exp(-x)) * 0.5;
		};

`hidden
tanh:
#Markdown(
"""#### Usage

    math.tanh(x)
	
#### Description

Returns the hyperbolic tangent of Complex or real `x`. 
""")
	fun (x)
		{
		sinh(x) / cosh(x);
		};

`hidden
coth:
#Markdown(
"""#### Usage 

    math.coth(x)

#### Description

Returns the hyperbolic cotangent of Complex or real `x`.  
""")
	fun (x)
		{
		let t = sinh(x);
		if (t == 0.0)
			throw #UndefinedValue("Values x | sinh(x) == 0 are not in domain(coth(x))");
		cosh(x) / t;
		};

`hidden
sech:
#Markdown(
"""#### Usage

    math.sech(x)

#### Description

Returns the hyperbolic secant of Complex or real `x`.  
""")
	fun (x)
		{
		1.0 / cosh(x);
		};

`hidden
csch:
#Markdown(
"""#### Usage

    math.csch(x)

#### Description

Returns the hyperbolic cosecant of Complex or real `x`.  
""")
	fun (x)
		{
		1.0 / sinh(x);
		};

//inverse hyperbolic trigonometric functions
`hidden
asinh:
#Markdown(	
"""#### Usage

    math.asinh(x)

#### Description	

Returns the inverse hyperbolic sine of Complex or real `x`. 
""")
	fun (x)
		{
		let xSq = x**2.0;
		
		//for very small x want separate treatment
		if((1.0 + xSq) == 1.0)
			return log1p(x);

		log(x + sqrt(xSq + 1.0));
		};

`hidden
acosh:
#Markdown(	
"""#### Usage

    math.acosh(x)

#### Description
	
Returns the inverse hyperbolic cosine of Complex or real `x`. 
""")
	fun
		(Complex(_,_) x)
			{
			log(x + sqrt(x ** 2.0 - 1.0))
			}
		(x)
		{
		if (x < 1.0) throw "argument must be greater than 1.0"
		log(x + sqrt(x**2.0 - 1.0));
		};

`hidden
atanh:
#Markdown(
"""#### Usage

    math.atanh(x)

#### Description

Returns the inverse hyperbolic tangent of Complex or real `x`.  
""")
	fun (x)
		{
		0.5 * log(1.0 + x) - 0.5 * log(1.0 - x);
		};

`hidden
acoth:
#Markdown(	
"""#### Usage

    math.acoth(x)

#### Description

Returns the inverse hyperbolic cotangent of Complex or real `x`.  
""")
	fun (x)
		{
		0.5 * log(x + 1.0) - 0.5 * log(x - 1.0);
		};

`hidden
asech:
#Markdown(
"""#### Usage

    math.asech(x)

#### Description

Returns the inverse hyperbolic secant of Complex or real `x`. 
""")
	fun (x)
		{
		if (x == 0.0)
			throw #UndefinedValue("0 is not in domain(asech(x))");
		acosh(1.0 / x);
		};

`hidden
acsch:
#Markdown(
"""#### Usage

    math.acsch(x)

#### Description

Returns the inverse hyperbolic cosecant of Complex or real `x`. 
""")
	fun (x)
		{
		asinh(1.0 / x);
		};
