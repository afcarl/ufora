/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/
`hidden;

//holds exponential functions and logarithm functions aliased in math.fora
`hidden
log:
#Markdown(
"""#### Usage

    math.log(x)

#### Description

Returns the natural logarithm of Complex number `x` in the principal branch.
""")
	fun(Complex(a,b))
		{
		a = Float64(a);
		b = Float64(b);
		if (a == 0)
			{
			if (b == 0)
				throw #UndefinedValue("0 is not in domain(log(z)).");
			return Complex(log(hypot(a,b)),sign(b) * halfPi);
			}
		Complex(log(hypot(a,b)),atan2(a,b));
		}
		(filters.IsNumeric(x))
		{
		`log(x);
		};
`hidden
log_10: 
#Markdown(
"""#### Usage 

    math.log_10(x)

#### Description

Returns the base-10 logarithm of `x`.
""")
	fun (x)
		{
		log(x) / `log(10.0)
		};

`hidden
logB: 
#Markdown(
"""#### Usage

    math.logB(x, altBase)

#### Description

Returns the base-`altBase` logarithm of `x`.
""")
	fun(x, altBase)
		{
		log(x) / log(altBase)
		};
`hidden
log1p:
#Markdown(
"""#### Usage

    math.log1p(x)

#### Description

Returns `log(1+x)`, accurate for small `x`.
""")
	fun (x)
		{
		if (x < -1.0)
			throw #UndefinedValue("Values x < -1 not in domain of log(1+x)");
		let t = Float64(1.0 + x);
		//if very small, x serves as good approximation
		if (t == 1.0)
			return x;
		log(t) * (x / (t - 1.0));
		};

`hidden
exp:
#Markdown(
"""#### Usage

    math.exp(x)

#### Description

Returns `e` raised to the power of `x`.
""")
	fun (Complex(a,b))
		{
		`exp(a) * Complex(`cos(b),`sin(b));
		}
		(filters.IsNumeric(x))
		{
		`exp(x);
		};

`hidden
expm1:
#Markdown(
"""#### Usage

    math.expm1(x)

#### Description

Returns exp(x) - 1.  Relative error for all values is bounded above by 10^-10.
""")
	fun (x)
		{
		//if very small, return first three terms of taylor expansion
		if(abs(x) < 1.0e-5)
			return x + 0.5 * x * x;
		exp(x) - 1.0;
		};
