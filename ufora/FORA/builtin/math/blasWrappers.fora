/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/
`hidden;

castToTypeIfNecessary:
fun(type, filters.IsVector(X)) {
	try {
		if (X.homogeneousElementType == type)
			return X
		}
	catch (...)
		{
		}

	return X.apply(type)
	};

eltTypeAndFloatifyIfNecessary:
fun(filters.IsVector(X))
	{
	let xEltType = 
		try {
			X.homogeneousElementType
		} catch (...) {
			X = X.apply(Float64);
			Float64
		};
	
	if (xEltType != Float64 and xEltType != Float32)
		{
		X = X.apply(Float64);
		xEltType = Float64
		}

	(xEltType, X)
	}
(filters.IsVector(X), filters.IsVector(Y))
{
	let (xEltType, X_new) = eltTypeAndFloatifyIfNecessary(X);
	let (yEltType, Y_new) = eltTypeAndFloatifyIfNecessary(Y);

	if (xEltType is not yEltType)
		Y_new = Y_new.apply(xEltType);

	(xEltType, X_new, Y_new)
};

addTypeSuffix:
#Markdown(
"""given an array type, and a blas/lapack name, add the correct prefix"""
)
	fun(eltType, name) {
		return match(eltType) with
			(Float32) { "s" }
			(Float64) { "d" }
			((Float32, Float32)) { "c" }
			((Float64, Float64)) { "z" }
			+ name
			;
		}
		;

ValidElementType:
#Markdown(
"""patternmatcher to check whether a given type is OK to pass to lapack.
	
Accepts Float32, Float64, and pairs of the two (which are interpreted as
complex numbers).
""")
	object {
		operator filter( 
				Float32 or 
				Float64 or 
				(Float32, Float32) or 
				(Float64, Float64) 

				t) 
			{ 
			(t,) 
			}
		}
	;

