/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/
#Markdown(
"""## random

#### Description

The FORA random number generation and probability distributions library.

Seeded distributions are represented by instances of these classes. These 
seeded distributions are _iterable_, meaning that we may call `iterator` 
on them to produce iterable objects which give random samples from the 
corresponding distributions.

For example, consider `math.random.Normal`. We may construct a seeded 
standard normal via

    let stdNormal = math.random.Normal(0.0, 1.0, 123456)

(see the documentation in `math.random.Normal` for more details).

#### Producing random samples

To produce samples from this seeded distribution, we may call `iterator` on
stdNormal:

    let rand = iterator(stdNormal)

`rand` is now an iterator, so we may call `pull` on it:

    pull rand //evaluates to  -1.14083269820507
    pull rand //evaluates to  0.037390549017282

Recall that `pull` resets `rand` to its `Next` value on each invocation 
, but this has 
no effect on `stdNormal`.

In order to produce a sequence of samples from `stdNormal` "at once", again 
since `stdNormal` is _iterable_, we may call

    iter.toVector(iter.subseq(stdNormal, 0, nSamplesToGenerate))

For example, 

    iter.toVector(iter.subseq(stdNormal, 0, 10)) == [-1.14083269820507, 0.037390549017282, 1.83460437466898, 1.27094254438024, -0.641878414347115, 0.541214420234384, 1.26596144214918, 0.768246538151919, -0.314028629279519, 1.48798460480978]

Equivalently, we could call 

    iter.toVector(iter.subseq(iterator(stdNormal), 0, 10))

to produce the same result. We will likely include some syntactic sugar for this construct.

Note that we _cannot_ call `pull` on `stdNormal`. Also note that using `iter.toVector` paired with 
`iter.subseq`, does _not_ affect the underlying iterable object. For example, 

    let it = iterator(math.random.Normal(0, 1, 123));

Then

    iter.toVector(iter.subseq(it, 0, 3)) == [0.514272271764068, 0.562039037550261, -0.564698661023812]

And repeated calls produce the same values. In order to sample while repeatedly resetting `it` 
to its `Next` value, one would need to call `pull it` repeatedly, for instance in a loop.

#### Some common static methods

All distribution classes in `math.random` implement three static member functions `pdf`, 
`cdf`, and `quantile`. The signatures of these classes vary by class instance, 
but have the common form 

    f(x, <params that determine a specific distribution>)

for `f` in `[pdf, cdf, quantile]`. For more details, see the documentation on a particular class, 
but for example, we may call

    math.random.Normal.cdf(0.777, 0.0, 1.0) //returns 0.781420679246728

to evaluate the cdf of a standard normal distribution at `0.777`.

#### Random integer generation

FORA currently implements two integral random number generators. These are the _Mersenne 
Twister_ algorithm of M. Matsumoto and T. Nishimura, and the other is the _Multiply With 
Carry_ algorithm of G. Marsaglia. These are implemented in `math.random.MersenneTwister` 
and `math.random.MultiplyWithCarry`, respectfully.
""");

Beta: random.beta.Beta;
Binomial: random.binomial.Binomial;
Cauchy: random.cauchy.Cauchy;
ChiSquared: random.chiSquared.ChiSquared;
Exponential: random.exponential.Exponential;
ExtremeValue: random.extremeValue.ExtremeValue;
F: random.f.F;
Gamma: random.gamma.Gamma;
Geometric: random.geometric.Geometric;
HyperGeometric: random.hyperGeometric.HyperGeometric;
InverseChiSquared: random.inverseChiSquared.InverseChiSquared;
InverseGamma: random.inverseGamma.InverseGamma;
InverseGaussian: random.inverseGaussian.InverseGaussian;
Logistic: random.logistic.Logistic;
LogNormal: random.logNormal.LogNormal;
MersenneTwister: random.mersenneTwister.MersenneTwister;
MultiplyWithCarry: random.multiplyWithCarry.MultiplyWithCarry;
NegativeBinomial: random.negativeBinomial.NegativeBinomial;
Normal: random.normal.Normal;
NoncentralChiSquared: random.noncentralChiSquared.NoncentralChiSquared;
Poisson: random.poisson.Poisson;
Rayleigh: random.rayleigh.Rayleigh;
ScaledInverseChiSquared: random.scaledInverseChiSquared.ScaledInverseChiSquared;
T: random.t.T;
Triangular: random.triangular.Triangular;
UniformReal: random.uniformReal.UniformReal;
Weibull: random.weibull.Weibull;

