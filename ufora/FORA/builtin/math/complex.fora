/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/
`hidden;

Complex: 
#Markdown(
"""
#### Description

A complex number class.

#### Aliases

    math.Complex

""")
class 
	{
#Markdown("""
#### Description

The real part of the complex number.
""")
	member real;

#Markdown("""
#### Description

The imaginary part of the complex number.
""")
	member imag;

#Markdown("""
#### Usage

`Complex()` - initialize a complex number with 0.0 for real and imaginary parts
`Complex(x, y)` - initialize a complex number with real part `x` and imaginary part `y`

#### Description

Create a complex number.
""")
	operator new (x, y) 
		{ 
		createInstance(cls, real: x, imag: y) 
		};

#Markdown("""
#### Usage

`Complex((x, y))` - equivalent to `Complex(x, y)`.

#### Description

Create a complex number from a tuple.
""")
	operator new((x, y)) 
		{ 
		createInstance(cls, real: x, imag: y) 
		};

#Markdown("""
#### Description

The `match` operator on complex numbers.

`Complex` instances are matched by the tag `math.Complex` (or any expression 
which evaluates to `math.Complex`, such as `builtin.math.Complex`, or 
`math.complex.Complex`), along with a tuple pattern-matcher describing a 
possible real part to match, and a possible imaginary part to match.

#### Examples

Suppose we bind

    let z = math.Complex(1, 2.0);

All of the following evaluate to true:

    match (z) with (math.Complex(...)) { true };
    match (z) with (math.Complex(_,_)) { true };
    match (z) with (math.Complex({Int64}, 2.0)) { true };
    

""")
	operator match(tag if tag is Complex) 
		{ 
		(real, imag) 
		};

#Markdown("""
#### Usage

    z.sqNorm

#### Description

Computes the squared-norm of a complex number `z`.
""")
	sqNorm: real * real + imag * imag;

#Markdown("""
#### Usage

    z.conj

#### Description

Computes the complex-conjugate of a complex number `z`.
""")
	conj: math.Complex(real, -imag);

#Markdown("""
#### Usage

    z.phase

#### Description

Computes a phase of the complex number `z`. Equivalent to calling 
`math.atan2(z.real, z.imag)`.
""")
	phase: math.atan2(real, imag);

#Markdown("""
#### Usage

    z.polar

#### Description

Computes a polar representation of a complex number `z`. More precisely, 
returns a tuple `(r, theta)` such that 

    r * math.exp(math.Complex.i * theta) == z
""")
	polar: (abs(self), phase);

#Markdown("""
#### Usage

    z.isNan

#### Description

Checks if either of the real or imaginary part of the complex number `z` 
`isNan`.
""")
	isNan: real.isNan or imag.isNan;

#Markdown("""
#### Usage

    z.isInfinity

#### Description

Checks if either of the real or imaginary part of the complex number `z` 
`isInfinity`.
""")
	isInfinity: real.isInfinity or imag.isInfinity;

#Markdown("""
#### Usage

    z1 + z2

#### Description

Add two complex numbers, `z1` and `z2`.
""")
	operator +(Complex(x,y) z) 
		{ 
		Complex(real + x, imag + y) 
		};

#Markdown("""
#### Usage

    z + c

#### Description

For a non-complex `c` (usually a scalar), produces the new complex number `math.Complex(z.real + c, z.imag)`.

#### Examples

    math.Complex(1,1) + 1 == math.Complex(2,1);

""")
	operator +(scalar) 
		{ 
		Complex(real + scalar, imag) 
		};

#Markdown("""
#### Usage

    c + z

#### Description

For a non-complex `c` (usually a scalar), produces the new complex number `math.Complex(c + z.real, z.imag)`.

#### Examples

    2 + math.Complex(2.0, 3.41) == math.Complex(4.0, 3.41)

""")
	reverse operator +(scalar) 
		{ 
		Complex(scalar + real, imag) 
		};
	
#Markdown("""
#### Usage

    z1 - z2

#### Description

Subtract the complex number `z2` from the complex number `z1`.
""")
	operator -(Complex(x,y)) 
		{ 
		Complex(real - x, imag - y) 
		};

#Markdown("""
#### Usage

    z - c

#### Description

For a non-complex `c` (usually a scalar), returns the new complex number `math.Complex(z.real - c, z.imag)`
""")
	operator -(scalar) 
		{ 
		Complex(real - scalar, imag) 
		};

#Markdown("""
#### Usage

    c - z

#### Description

For a non-complex `c` (usually a scalar), returns the new complex number `math.Complex(c - z.real, -z.imag)`.
""")
	reverse operator -(scalar) 
		{ 
		Complex(scalar - real, -imag) 
		};

#Markdown("""
#### Usage

    -z

#### Description

Returns the additive inverse of the complex number `z`.
""")
	left operator -() 
		{ 
		Complex(-real, -imag) 
		};

#Markdown("""
#### Usage

    z1 * z2

#### Description

Computes the complex product of complex numbers `z1` and `z2`.
""")
	operator *(Complex(x,y)) 
		{ 
		Complex(real * x - imag * y, real * y + imag * x) 
		};

#Markdown("""
#### Usage

    c * z

#### Description

For a non-complex `c` (usually a scalar), returns the new complex number

    math.Complex(c * z.real, c * z.imag)

""")
	reverse operator *(scalar) 
		{ 
		Complex(scalar * real, scalar * imag) 
		};

#Markdown("""
#### Usage

#### Description

For a non-complex `c` (usually a scalar), returns the new complex number

    math.complex(z.real * c, z.imag * c)

""")
	operator *(scalar) 
		{ 
		Complex(real * scalar, imag * scalar) 
		};

#Markdown("""
#### Usage

    z1 / z2

#### Description

Divides the complex number `z1` by the complex number `z2`.
""")
	operator /(Complex(x, y)) 
		{ 
		let t = x **2 + y ** 2;
		Complex((real * x + imag * y) / t, (imag * x - real * y) / t)
		};

#Markdown("""
#### Usage

    c / z

#### Description

For a non-complex `c` (usually a scalar), returns the complex ratio `math.Complex(c, 0) / z`.
""")
	reverse operator /(scalar) 
		{ 
		Complex(scalar, 0.0) / self 
		};

#Markdown("""
#### Usage

    z / c

#### Description

For a non-complex `c` (usually a scalar), returns the complex number 

    math.Complex(z.real / c, z.imag / c)

""")
	operator /(scalar) 
		{ 
		Complex(real / scalar, imag / scalar) 
		};

#Markdown("""
#### Usage

    z1 ** z2

#### Description

Computes a power of a complex number `z1` to a complex number `z2`.
""") 
	operator **(Complex(x, y))
		{
		let norm = sqrt(sqNorm);
		let theta = pi / 2.0;
		if (real == 0)
			{
			if (imag == 0)
				return Complex(0.0, 0.0);
			theta = theta * sign(imag);
			}
		else
			{
			theta = atan2(Float64(real), Float64(imag));
			}
		let rho = x * theta + y * log(norm);
		(norm ** x) * exp(-y * theta) * Complex(cos(rho), sin(rho));
		};

#Markdown("""
#### Usage

    z ** c

#### Description

For a non-complex `c` (usually a scalar), returns a result of computing `z ** math.Complex(c, 0)`.
""")
	operator **(scalar)
		{
		self ** Complex(scalar, 0.0);
		};

#Markdown("""
#### Usage

    c ** z

#### Description

For a non-complex `c` (usually a scalar), returns a result of 

    math.Complex(c, 0.0) ** z.

""")
	reverse operator **(scalar)
		{
		let l = imag * log(scalar);
		(scalar ** real) * Complex(cos(l), sin(l));
		};
	
#Markdown("""
#### Usage

    z1 == z2

#### Description

Returns `z1.real == z2.real and z1.real == z2.real`.
""")
	operator ==(Complex(x, y)) 
		{ 
		x == real and y == imag 
		};

#Markdown("""
#### Usage

    String(z)

#### Description

Computes a string representation of a complex number `z`.

#### Examples

    String(math.Complex(1,2)) == "1 + 2 i"

""")
	convert(String) 
		{ 
		if (imag >= 0)
			return String(real) + " + " + String(imag) + " i";
		String(real) + " - " + String(imag)[1,] + " i";
		};

#Markdown("""
#### Usage

    math.Complex.i

#### Description

Returns the complex unit, `math.Complex(0,1)`.

#### Examples

    math.complex.Complex.i * math.complex.Complex.i = -1 + 0 i
""")
	static i: Complex(0, 1);

#Markdown("""
#### Usage

    math.Complex.rect(r, theta)

#### Description

Constructs a complex number from polar coordinates.

Returns the complex number `r * math.Complex(math.cos(theta), math.sin(theta))`.

In other words, thinking of the tuple `(r, theta)` as the polar representation of a 
complex number, `math.Complex.rect(r, theta)` computes its rectangular form.

#### Arguments

    r - Float or Integer. Radius.
    theta - Float or Integer. Angle in radians.

#### Return Value

A Complex number instance.
""")
	static rect: fun(r, phi)
		{ 
		r * Complex(cos(phi), sin(phi)) 
		};
	};


