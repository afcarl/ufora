/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/
#Markdown("""
#### Description

A vector-like container which summarizes feature importances for 
regression trees and gradient-boosted trees. 

This is vector-like in the sense that it matches `builtin.VectorContainer`,
supports `operator[]`, `operator iterator()`, and responds to `` `size``.
Indexing defers to indexing on its `importances` member.

This also provides a visualize method, which produces a markdown table
renderable from the Ufora UI.

This class is not typically instantiated directly by users. Instead, 
instances are produced from `featureImportances` and `rawFeatureImportances` 
methods on `math.tree.RegressionTree`, 
`math.ensemble.gradientBoosting.RegressionModel`, 
`math.ensemble.gradientBoosting.ClassificationModel`, and 
`math.ensemble.gradientBoosting.BinaryClassificationModel` instances.

""")
class {
    "the vector of actual feature importances"
    member importances;
    "the names of the corresponding variables"
    member names;
    
    operator match (VectorContainer _) { (importances,) };

    operator iterator() {
        for ix in sequence(size(importances)) 
            yield self[ix]
        };

    ...(`size) { size(importances) };

    operator [](ix) {
        importances[ix]
        };

    operator match(Visualizable _) {
        (#Markdown(self.markdownTable()),)
        };

    operator new(importances, names)
        {
        createInstance(
            cls,    
            importances: importances,
            names: names
            );
        };

    markdownTable: 
    #Markdown("""
    #### Usage

        featureImportancesInstance.markdownTable()

    #### Description

    Return a formatted markdown table summarizing the information in the 
    `FeatureImportances` instance `featureImportancesInstance`.

    """)
    fun() {
        let tr = 
            """|feature name| |feature importance|  
            |--|--|--|  
            """
        for ix in sequence(size(names)) {
            tr = tr + 
                """|%s|&nbsp;&nbsp;&nbsp;|%.3f|  
                """.format(names[ix], importances[ix])
            }
        return #Markdown(tr)
        };
    };

