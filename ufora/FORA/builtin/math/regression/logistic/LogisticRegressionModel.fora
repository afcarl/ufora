/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/
#Markdown(
"""### LogisticRegressionModel

#### Description

A class representing l2-regularized logistic regression models fit to data.

""")
class {
    member mBinaryClassifiers;
    member classes;

    score: 
    fun
    (dataframe.DataFrame(X), dataframe.DataFrame(yTrue)) {
        assertions.assertEqual(yTrue.numColumns, 1)
        score(X, yTrue.getColumn(0))
        }
    (dataframe.DataFrame(X), dataframe.Series(yTrue)) {
        assertions.assertEqual(size(X), size(yTrue));

        let yPredicted = predict(X);

        return (yTrue == yPredicted).sum({ if (_ == true) 1.0 else 0.0 }) / size(yTrue)
        }
    (dataframe.DataFrame(X), yTrue) {
        score(X, dataframe.Series(yTrue))
        };

	predict: 
#Markdown(
"""
#### Usage 

    logisticRegressionModel.predict(X)

#### Description

Predict the class labels of `X` (a `dataframe.DataFrame`, a vector, a `dataframe.DataFrameRow`, ...) 
according to a logistic regression model, `logisticRegressionModel`.

#### Examples


	let X = dataframe.DataFrame([[-1,0,1], [0,1,1]]);
	let Y = dataframe.DataFrame([[0,1,1]])

    let builder = math.regression.logistic.LogisticRegressionBuilder();

	let logisticRegressionModel = builder.fit(X, Y);

	logisticRegressionModel.predict(X)

""")
	fun(X)
		{
		if (size(mBinaryClassifiers) > 1)
			dataframe.DataFrame(predictProbability(X)).rowApply({ classes[argmax(_)] })
		else 
			mBinaryClassifiers[0].predict(X)
		};

	predictProbability: 
#Markdown(
"""
#### Usage

    logisticRegressionModel.predictProbability(X)

#### Description

Return probability estimates of `X` (a `dataframe.DataFrame`, a vector, a `dataframe.DataFrameRow`, ...) 
according to a logistic regression model, `logisticRegressionModel`, ordered by the class labels, 
`logisticRegressionModel.classes`.

#### Examples

	let X = dataframe.DataFrame([[-1,0,1], [0,1,1]]);
	let Y = dataframe.DataFrame([[0,1,1]])

	let builder = math.regression.logistic.LogisticRegression();

    let logisticRegressionModel = builder.fit(X, Y);

	logisticRegressionModel.predictProbability(X)

""")
	fun(X)
		{
		if (size(mBinaryClassifiers) > 1) 
			{
			let unnormalizedProbabilities = 
				dataframe.DataFrame(
					mBinaryClassifiers ~~ { _.predictProbability(X) }
					)

			let rowSums = 
				dot(unnormalizedProbabilities, 
					math.Matrix(Vector.uniform(unnormalizedProbabilities.numColumns, 1.0)))

			return
			unnormalizedProbabilities.columnApply(
				fun(col) {
					zipWith(
						fun(unnormalizedProbability, rowSum) {
							unnormalizedProbability / rowSum
							},
						col, rowSums
						)
					}
				)
			}
		else {
			let classZeroProbabilities = mBinaryClassifiers[0].predictProbability(X);
			let classOneProbabilities = classZeroProbabilities ~~ { 1.0 - _ };
			
			return [classZeroProbabilities, classOneProbabilities]
			}
		};

    };
    

