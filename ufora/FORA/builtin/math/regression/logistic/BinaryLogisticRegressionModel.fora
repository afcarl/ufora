/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/
class
	{
	member coefficients;
	member classes;
	member mClassZeroLabel;
	member mClassOneLabel;
	member mHasIntercept;
	member mInterceptScale;
    member mIter;
  
    member chunkSize; // do we rly need this one

	decision_function_: fun(xDotTheta)
		{
		if (math.logit(xDotTheta) > 0.5) mClassOneLabel
		else mClassZeroLabel
		};

	addInitialScaleColumnIfNecessary_:
		fun(X) 
		{
		if (mHasIntercept)
			return addInitialScaleColumn(X, mInterceptScale)

		return X
		};

    score: 
    fun
    (dataframe.DataFrame(X), dataframe.DataFrame(yTrue)) {
        assertions.assertEqual(yTrue.numColumns, 1)
        score(X, yTrue.getColumn(0))
        }
    (dataframe.DataFrame(X), dataframe.Series(yTrue)) {
        assertions.assertEqual(size(X), size(yTrue));

        let yPredicted = predict(X);

        return (yTrue == yPredicted).sum({ if (_ == true) 1.0 else 0.0 }) / size(yTrue)
        }
    (dataframe.DataFrame(X), yTrue) {
        score(X, dataframe.Series(yTrue))
        };

	predict: 
#Markdown(
"""#### Usage 

    logisticRegressionModel.predict(X)

#### Description

Predict the class labels of (the rows of) a dataframe, or matrix, `X` according to a logistic regression model, 
`logisticRegressionModel`.

#### Examples


	let X = dataframe.DataFrame([[-1,0,1], [0,1,1]]);
	let Y = dataframe.DataFrame([[0,1,1]])

	let fit = math.regression.logistic.LogisticRegression(X,Y, lambda:1);

	fit.predict(X)

""")
	fun(X)
		{
		X = addInitialScaleColumnIfNecessary_(X);

		predict_(X);
		};

	predict_: fun
	(math.Matrix(...) X)
		{
		(X * coefficients).apply(decision_function_)
		}
	(dataframe.DataFrame(X))
		{
		dot(X, coefficients, chunkSize) ~~ decision_function_
		}
    (filters.IsVector(X)) 
        {
        predict_(math.Matrix(X, (1, size(X))))
        }
    (X)
        {
        let XData = [];
        for ix in sequence(size(X))
            XData = XData :: X[ix];

        predict_(XData)
        }
        ;

	predictProbability: 
#Markdown(
"""#### Usage

    logisticRegressionModel.predictProbability(X)

#### Description

Return probability estimates of (the rows of) a dataframe, or matrix, `X` according to a logistic regression model, 
`logisticRegressionModel`, ordered by the class labels, `X.classes`.

#### Examples

	let X = dataframe.DataFrame([[-1,0,1], [0,1,1]]);
	let Y = dataframe.DataFrame([[0,1,1]])

	let fit = math.regression.logistic.LogisticRegression(X,Y, lambda:1);

	fit.predictProbability(X)

""")
	fun(X)
		{
		X = addInitialScaleColumnIfNecessary_(X);

		predictProbability_(X);
		};

    `hidden
	predictProbability_:
	fun
	(math.Matrix(...) X)
		{
		(X * coefficients).apply(logit_complement)
		}
	(dataframe.DataFrame(...) X)
		{
		dot(X, coefficients, chunkSize) ~~ logit_complement
		}
    (filters.IsVector(X))
        {
        predictProbability_(math.Matrix(X, (1, size(X))))
        }
    (X)
        {
        let XData = [];
        for ix in sequence(size(X))
            XData = XData :: X[ix];

        predictProbability_(XData)
        }
        ;

	};

