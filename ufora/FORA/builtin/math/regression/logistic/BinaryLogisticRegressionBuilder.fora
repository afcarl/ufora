/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/
`hidden
class
	{
    member lambda;
    member strict;
    member hasIntercept;
    member interceptScale;
	member tol;
    member maxIter;
    member chunkSize;


	operator new
	(lambda:, strict:= true, hasIntercept:= true, interceptScale:= 1,
     tol:= 1e-4, maxIter:= 1e5, chunkSize:= 5000000) 
        {
        assertions.assertGreater(tol, 0.0);
        assertions.assertGreater(maxIter, 0);
        assertions.assertGreater(chunkSize, 0);

        createInstance(
            cls,
            lambda: lambda,
            strict: strict,
            hasIntercept: hasIntercept,
            interceptScale: interceptScale,
            tol: tol,
            maxIter: maxIter,
            chunkSize: chunkSize
            );
        };

	// strict == true means there had better only be two classes in Y
	// direct users of this class should probably leave strict = true 
	// strict = false is used in the nClasses > 2 cases for class LogisticRegression
	fit: fun
	(dataframe.DataFrame(X), dataframe.DataFrame(y), classZeroLabel:= nothing, 
	 classOneLabel:= nothing, classes:= nothing) 
		{
        assertions.assertEqual(X.numRows, y.numRows);
        assertions.assertEqual(y.numColumns, 1)

		if (classes is nothing)
			classes = sorting.unique(y.getColumn(0));

		let nClasses = size(classes)

		if (strict and nClasses != 2)
			throw "For binary logistic regression, there must only be two classes: got " + String(size(classes));

		(classZeroLabel, classOneLabel) = 
			selectLabels_(classZeroLabel, classOneLabel, nClasses, classes, strict);

		let (coefficients, iters) = 
			TwoClassRidgeRegressionSolver(X, y, lambda: lambda, tol: tol, maxIter: maxIter, 
							classes: classes, chunkSize: chunkSize,
							classZeroLabel:classZeroLabel, hasIntercept:hasIntercept,
							interceptScale:interceptScale
						   ).computeCoefficients()

		return BinaryLogisticRegressionModel(
            coefficients: coefficients, 
            classes: classes, 
			mClassZeroLabel: classZeroLabel,
			mClassOneLabel: classOneLabel, 
            mHasIntercept: hasIntercept,
			mInterceptScale: interceptScale,
            chunkSize: chunkSize,
            mIter: iters
            )
		};

	};

