/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/
`hidden;

//Error Function and Complement of Error Function - aliased in math.fora
erf:
#Markdown(	
"""#### Usage

    math.erf(x)

#### Description

Returns an approximation of the value of the error function using an algorithm
based off a formula in "A Handbook of Mathematical Functions" by Abramowitz 
& Stegun. It has a maximum error of `1.5 x 10^-7`.  See also:
<http://en.wikipedia.org/wiki/ErrorFunction#Approximation_with_elementary_functions/>
""")
	fun(x)
		{
		//algorithm only good for x >= 0
		let s = sign(x);
		x = abs(x);

		let t = 1.0 / (1.0 + 0.3275911 * x);
		let er = ((((1.061405429 * t - 1.453152027) * t) + 1.421413741) * t - 0.284496736) * t
						+ 0.254829592;
		er = 1.0 - (er * t * `exp(-(x ** 2.0)));
		//erf(x) is an odd function
		er * s;
		};

erfinv:
#Markdown(
"""#### Usage

    math.erfinv(x)

#### Description

Returns an approximation of the value of the error function's inverse
using an algorithm from "Numerical Recipes".
""")
	fun(x)
		{
		//check to make sure x in domain(erfinv)
		if (abs(x) > 1.0)
			throw #UndefinedValue("x not in domain(erfinv): domain(erfinv) = [-1,1].")

		let s = sign(x);
		x = abs(x);
		let erinv = 0.0;

		if (x < 0.7)
			{
			let t = x ** 2.0;
			erinv = x * (((-0.140543331 * t + 0.914624893) * t - 1.645349621) * t + 0.886226899) 
					/ ((((0.012229801 * t + -0.329097515) * t + 1.442710462) * t - 2.118377725) * t + 1.0);
			}
		else
			{
			let t = (-`log((1.0 - x) * 0.5)) ** 0.5;
			erinv = (((1.641345311 * t + 3.429567803) * t - 1.624906493) * t - 1.970840454)
						/ ((1.637067800 * t + 3.543889200) * t + 1.0);
			}

		erinv = erinv - (erf(erinv) - x) / (twoDivSqrtPi * `exp(-erinv ** 2.0));
		erinv = erinv - (erf(erinv) - x) / (twoDivSqrtPi * `exp(-erinv ** 2.0));
		erinv * s;
		};

erfc:
#Markdown(
"""#### Usage

    math.erfc(x)

#### Description

Returns an approximation of the value of the error function's complement
using an algorithm based off a formula in "A Handbook of Mathematical
Functions" by Abramowitz & Stegun. It has a maximum error of 1.5 x 10^-7. See also:
<http://en.wikipedia.org/wiki/ErrorFunction#Approximation_with_elementary_functions>.
""")
	fun(x)
		{
		//algorithm only good for x >= 0
		let s = sign(x);
		x = abs(x);

		//pre-calculate t values
		let t = 1.0 / (1.0 + 0.3275911 * x);
		
		let t_2 = t * t;
		let t_3 = t * t_2;
		let t_4 = t * t_3;
		let t_5 = t * t_4;

		let er = 0.254829592 * t - 0.284496736 * t_2 + 1.421413741 * t_3 - 1.453152027 * t_4
						+ 1.061405429 * t_5;
		
		er = er * exp(-(x ** 2.0));
		
		//erfc(x) is an odd function
		er * s;
		};

erfcinv:
"""#### Usage

    math.erfcinv(x)

#### Description

Returns an approximation of the value of the error function's inverse
using an algorithm from "Numerical Recipes".
"""
	fun(x)
	{
	erfinv(1.0 - x);
	}

