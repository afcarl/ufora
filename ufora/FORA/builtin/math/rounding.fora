/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/
`hidden;

//"rounding" functions aliased in math.fora

`hidden
round:
#Markdown(	
"""#### Usage

    math.round(x)

#### Description

Rounds `x` to the nearest integer (if `x mod 1` is `0.5`, then we round up).  
If `x` is Complex, it rounds the real and imaginary parts independently.  
""")
	fun (Complex(a,b))
		{
		Complex(round(a),round(b));
		}
		(x)
		{
		let f = floor(x);

		if (abs(x - f) < 0.5)
			return f;

		f + 1;
		};

`hidden
floor:
#Markdown(
"""#### Usage 

    math.floor(x)

#### Description

Returns greatest integer less than or equal to `x`. If `x` is Complex, it treats
the and imaginary parts independently. 
""")
	fun (Complex(a,b))
		{
		Complex(floor(a),floor(b));
		}
		(x)
		{
		let remainder = x % 1;

		if (x >= 0)
			return Float64(x - remainder);

		if (remainder == 0)
			return Float64(x)

		Float64(x - remainder - 1);
		};

`hidden
ceil:
#Markdown(
"""#### Usage 

    math.ceil(x)

#### Description

Returns the least integer greater than or equal to `x`. If `x` is Complex,
it treats the and imaginary parts independently. 
""")
	fun (Complex(a,b))
		{
		Complex(ceil(a),ceil(b));
		}
		(x)
		{
		let remainder = x % 1;

		if (x <= 0)
			return Float64(x - x % 1);

		if (x % 1 == 0)
			return Float64(x)

		Float64(x - remainder + 1);
		};
