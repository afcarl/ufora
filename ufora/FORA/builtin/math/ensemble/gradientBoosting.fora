/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/
#Markdown("""### gradientBoosting

#### Description

The Fora library for gradient boosting.

""");

predictorMixin:
object {
    predict: 
#Markdown("""#### Usage

    predictor.predict(dataframe.DataFrame(df))
    predictor.predict(row)

#### Description

Use the predictor to predict the values of 
the rows of `df` or on a single row `row`.

""")
    fun
    (dataframe.DataFrame(df)) {
        df.rowApply(self.predictionFunction_)
        }
    (row) {
        self.predictionFunction_(row)
        };

    score: 
#Markdown("""
#### Usage

    predictor.score(X, yTrue)

#### Description

Returns the coefficient of determination R^2 of the prediction.

The coefficient R^2 is defined as (1 - u / v), where u is the regression sum of 
squares ((yTrue - yPredicted) ** 2).sum() and v is the residual sum of squares 
((yTrue - yTrue.mean()) ** 2).sum(). Best possible score is 1.0, lower 
values are worse.""")
    fun
    (dataframe.DataFrame(X), dataframe.DataFrame(yTrue)) {
        assertions.assertEqual(yTrue.numColumns, 1)
        score(X, yTrue.getColumn(0))
        }
    (dataframe.DataFrame(X), dataframe.Series(yTrue)) {
        assertions.assertEqual(size(X), size(yTrue));

        let yPredicted = predict(X);
        let u = ((yTrue - yPredicted) ** 2.0).sum()
        let v = ((yTrue - math.stats.mean(yTrue)) ** 2.0).sum();

        return 1.0 - u / v;
        }
    (dataframe.DataFrame(X), yTrue) {
        score(X, dataframe.Series(yTrue))
        };
    };

classifierMixin:
object {
    predict: 
#Markdown("""#### Usage

    classifier.predict(dataframe.DataFrame(df))
    classifier.predict(row)

#### Description

Use the classifier to predict the class labels of 
the rows of `df` or on a single row `row`.

""")
    fun
    (dataframe.DataFrame(df)) {
        df.rowApply(self.predictionFunction_)
        }
    (row) {
        self.predictionFunction_(row)
        };

    score: 
#Markdown("""#### Usage

    classifier.score(dataframe.DataFrame(X), dataframe.DataFrame(yTrue))
    classifier.score(dataframe.DataFrame(X), dataframe.Series(yTrue))

#### Description

Compute the mean accuracy of `classifier` in predicting `X` 
with respect to `yTrue`.

""")
    fun
    (dataframe.DataFrame(X), dataframe.DataFrame(yTrue)) {
        assertions.assertEqual(yTrue.numColumns, 1)
        score(X, yTrue.getColumn(0))
        }
    (dataframe.DataFrame(X), dataframe.Series(yTrue)) {
        assertions.assertEqual(size(X), size(yTrue));

        let yPredicted = predict(X);

        return (yTrue == yPredicted).sum({ if (_ == true) 1.0 else 0.0 }) / size(yTrue)
        }
    (dataframe.DataFrame(X), yTrue) {
        score(X, dataframe.Series(yTrue))
        };
    };


