/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/
"""Produce the the combination of two timeseries according to an arbitrary function"""
pairwiseCombination: fun(timeseries1, timeseries2, combinationFunc)
		{
		//take the max time of the two timeseries, since they both have to be defined
		let firstSampleTime_ = (timeseries1.firstSampleTime >>> timeseries2.firstSampleTime);
		timeseries1 = timeseries1.sampleForTime(firstSampleTime_)
		timeseries2 = timeseries2.sampleForTime(firstSampleTime_)

		let secondSampleTime_ = sstFor(timeseries1, timeseries2);

		object 
			{
			firstSampleTime: firstSampleTime_;
			secondSampleTime: secondSampleTime_;

			sample: fun(t) {
				let v1 = timeseries1.sample(t);
				let v2 = timeseries2.sample(t);

				return combinationFunc(v1, v2);
				};

		    nextSample: (
				let sst = self.secondSampleTime;

				if (sst is nothing)
					return nothing

				let ts1 = timeseries1.sampleForTime(sst);
				let ts2 = timeseries2.sampleForTime(sst); 

				return pairwiseCombination(ts1, ts2, combinationFunc)
			    );
			convert(String) 
				{
				"Combination(ts1=" + String(timeseries1) 
					+ ",ts2=" + String(timeseries2) 
					+ ", comb=" + String(combinationFunc) 
					+ ")"
				};
			sampleForTime: fun(t) {
				let timeseries = self;
				while (timeseries.secondSampleTime is not nothing
						and t >= timeseries.secondSampleTime)
					timeseries = timeseries.nextSample;
				return timeseries;
				};
			operator ()(t)
				{
				if (t < self.firstSampleTime)
					return nothing;
				if (self.secondSampleTime is nothing or t < self.secondSampleTime)
					return self.sample(t);
				return self.nextSample(t)
				};
			};
		}
		;


//produce the secondSampleTime appropriate for two timeseries
sstFor: fun(timeseries1, timeseries2) {
	if (timeseries1.secondSampleTime is nothing)
		return timeseries2.secondSampleTime;

	if (timeseries2.secondSampleTime is nothing)
		return timeseries1.secondSampleTime;

	//take the minimum sampleTime between them
	return timeseries1.secondSampleTime <<< timeseries2.secondSampleTime;
	};

