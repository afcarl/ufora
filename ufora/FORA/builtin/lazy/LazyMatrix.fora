/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/
#Markdown("""
### LazyMatrix

#### Description

This class models a `math.Matrix` object whose values are computed when the
object is dereferenced, instead of storing them explicitly in a matrix. 
This allows us to trade space for computation time.
""");

class {
    member f;
    member dim;
    
    operator new(f, dim) {
        createInstance(cls, f: f, dim: dim);
        };

    operator[]
    (rowIx, columnIx) {
        f(rowIx, columnIx)
        }
    (rowIx) {
        LazyVector(
            fun(columnIx) {
                f(rowIx, columnIx)
                },
            dim[1]
            )
        };
      
    toMatrix: 
    #Markdown("""#### Usage
 
        lazyMatrix.toMatrix()
 
    #### Description

    Realize a a `LazyMatrix` as a true `math.Matrix`.

    """)
    fun() {
        let rowMajorData = [];
        for rowIx in sequence(dim[0]) {
            for columnIx in sequence(dim[1]) {
                rowMajorData = rowMajorData :: self[rowIx, columnIx]
                }
            }

        return math.Matrix(rowMajorData, dim, `row)
        }
    
    };

    

