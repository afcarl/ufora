/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/
#Markdown("""
### LazyVector

#### Description

This class models a regular fora Vector object whose values are computed when the
vector is dereferenced, instead of storing them in a vector. This allows us to 
trade space for computation time.
""");

class { 
    member f;
    member sz;
    member offset;

    operator new (f, sz) {
        createInstance(cls, f:f, sz:sz, offset:0)
        };

    operator new (f, sz, offset) {
        createInstance(cls, f:f, sz:sz, offset:offset)
        };

    ...(`size) { sz }; 
    operator[](ix) { f(ix + offset) }; 
    operator[](i1, i2) { LazyVector(f, sz <<< (i2 - i1), offset + i1) }; 
    operator match(filters.IsVector) { (self,) };

    operator iterator() {
        for ix in sequence(sz)
            yield self[ix]
        };

    convert (String) { "LazyVector(f:%s,sz:%s,offset:%s)".format(f,sz,offset) };
    
    toVector:
    #Markdown("""#### Usage
 
        lazyVector.toVector()
 
    #### Description

    Realize a a `LazyVector` as a true `Vector`.

    """)
    fun() {
        Vector.range(size(self), { self[_] })
        };

    sum: fun(*args) {
        toVector().sum(*args)
        };

    };

