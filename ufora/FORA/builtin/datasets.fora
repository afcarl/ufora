/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/
#Markdown("""## datasets

#### Description

Functions for importing external datasets into Fora.

""");


s3:
#Markdown("""
#### Usage

    datasets.s3(bucketname, keyname)
    datasets.s3(bucketname, keyname, awsAccessKey, awsSecretKey)

#### Description

Maps a key in the Amazon S3 filesystem into FORA as a Vector of unsigned 8 bit integers containing
the bytes of the file.

#### Arguments

* `bucketname` -- a string identifying the name of the bucket.
* `keyname` -- a string identifying the name of the key
* `awsAccessKey` -- (optional) a string containing the access key to use when connecting to S3
* `awsSecretKey` -- (optional) a string containing the secret key to use when connecting to S3

""")
fun	(bucketname, key, awsAccessKey = nothing, awsSecretKey = nothing) { 
	let resultOrException = `ExternalS3Dataset(
		bucketname, 
		key,
		if (awsAccessKey is nothing) "" else awsAccessKey,
		if (awsSecretKey is nothing) "" else awsSecretKey
		)[0];
	
	if (filters.IsString(resultOrException))
		throw resultOrException
	else
		return resultOrException
	};

http:
#Markdown("""
#### Usage

    datasets.http(url, uniqueID="")

#### Description

Map the data coming back from an http request into a vector of characters.  In our current model,
this is only a safe thing to do if the result of the query is not changing.  Currently, the
UFORA platform caches all dataset requests. Modifying the 'uniqueID' parameter allows the system
to make subsequent requests (as if they were different urls) in case this doesn't work. 

Future versions of UFORA will support a model allowing explicit updates to web datasets.

#### Arguments

* `url` -- a string giving the URL to query
* `uniqueID` -- an optional string to make subsequent calls to this function unique.

#### Examples
   
	> datasets.http("http://www.ufora.com/")

""")
fun	(url, uniqueID="") { 
	let resultOrException = `ExternalHttpRequestDataset(
		url, 
		uniqueID
		)[0];

	if (filters.IsString(resultOrException))
		throw resultOrException
	else
		return resultOrException
	};

odbc:
#Markdown("""
#### Usage

    datasets.odbc(connectionString, query, uniqueID="")

#### Description

Map the data coming back from an ODBC request into a Dataset.  In our current model,
this is only a safe thing to do if the result of the query is not changing.  Currently, the
UFORA platform caches all dataset requests. Modifying the 'uniqueID' parameter allows the system
to make subsequent requests (as if they were different urls) in case this doesn't work. 

#### Arguments

* `connectionString` -- a string giving the connection string
* `query` -- the query to run on the remote dataset
* `uniqueID` -- an optional string to make subsequent calls to this function unique.

""")
fun	(connectionString, query, uniqueID="") { 
	let resultOrException = `ExternalOdbcRequestDataset(
		connectionString,
		query,
		uniqueID
		)[0];

	if (filters.IsString(resultOrException))
		throw resultOrException
	else
		return resultOrException
	};


file:
#Markdown("""
#### Usage

	datasets.file(fullPath, uniqueID="")

#### Description

Map the content of the specified file into a Dataset. This is only a safe thing to do if the file's
content does not change because the UFORA platform caches all dataset requests.
Modifying the 'uniqueID' parameter allows the system to make subsequent requests (as if they were 
different files).

#### Arguments

* `fullPath` -- a string with the full path to the file
* `uniqueID` -- an optional string to make subsequent calls to this function unique.

""")
fun (fullPath, uniqueID="") {
	let resultOrException = `LocalFileDataset(fullPath, uniqueID)[0];

	if (filters.IsString(resultOrException))
		throw resultOrException
	else
		return resultOrException
	};

`hidden
builtin: fun(x) { `InternalS3Dataset(x) };

