/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/
#Markdown("""
### Layout

#### Description

The layout module provides classes that enable you to lay out results explicitly in the Ufora UI.

A common layout mechanism is the Dashboard, which consists of a full-screen set of split panes that
can contain results of any type.
""");

// Vertical stack of results. Used to render related results without chrome or menu between them.
`hidden
Stack:
fun (*args) {
    #Stack(*args)
    };

// A horizontal split.
`hidden
Split:
fun (*args) {
    #Split(*args)
    };

Pane:
#Markdown("""
#### Usage

    layout.Pane(value)

#### Description

A Pane wraps a single value to be drawn in a Dashboard layout.

You can create a Dashboard from a Pane by using operators. For example,

    let p = layout.Pane(value)
    p | otherValue
""")
class {
    member value;
    member options; // e.g. (size:40.0, overflow:`scrollable)

    operator new (value, options:=()) {
        let msg = "The constructor for Pane objects expects the 'options' argument to be a tuple.";
        match (options) with
            (filters.IsTuple(...)){ nothing }
            (...){ throw msg };

        createInstance(Pane, value:value, options:options)
        };

    asTuple:
    fun () {
        (value: value) + self.options
        };

    operator +(other) {
        self | other
        };

    #Markdown("""
    #### Usage

        layout.Pane(value) | other

    #### Description

    Creates a horizontally split Dashboard with `value` in the left pane and `other` in the right.
    """)
    operator |(other) {
        match (other) with
            (Pane(...)) {
                Dashboard((self, other), `horizontal)
                }
            (_) {
                Dashboard((self, Pane(other)), `horizontal)
                }
        };

    operator |+(other) {
        self | other
        };

    #Markdown("""
    #### Usage

        layout.Pane(value) / other

    #### Description

    Creates a vertically split Dashboard with `value` in the top pane and `other` in the bottom.
    """)
    operator /(other) {
        match (other) with
            (Pane(...)) {
                Dashboard((self, other), `vertical)
                }
            (_) {
                Dashboard((self, Pane(other)), `vertical)
                }
        };

    operator /+(other) {
        self / other
        };

    operator match
    (Pane _) {
        (self,)
        }
    (Visualizable _) {
        (visualize(self.value),)
        };
    };

Dashboard:
#Markdown("""
#### Usage

    let pane = layout.Pane(aPlotToShow);
    let dash = layout.Dashboard((pane,), `horizontal);
    dash + anotherPlotToShow

#### Description

A Dashboard is a full-screen layout mechanism that consists of a set of nested split "panes".

Dashboard instances hold a set of Pane instances, each of which holds a single Fora value to
display. Dashboards display their panes either vertically or horizontally only. To make more
complex layouts, Dashboards can be composed with each other (or other raw Fora values or Pane 
instances) using the `/` or `|` operators, for vertical or horizontal splits, respectively.

For instance, a Dashboard showing two plots can be built like this:

    let panes = (layout.Pane(plot1), layout.Pane(plot2));
    layout.Dashboard(panes, `horizontal)

which will be laid out like this:

    -----------------------------
    |    plot1    |    plot2    |
    -----------------------------

filling the available height and width.

To add another plot below these two plots, with a "vertical" split, spanning both plots, one
could write:

    dash / plot3

which would show:

    -----------------------------
    |    plot1    |    plot2    |
    -----------------------------
    |           plot3           |
    -----------------------------

Using the pipe operator (`|`) will make another horizontal split. Thus,

    dash | pane3

would show:

    -------------------------------
    | plot1 | plot2 |    plot3    |
    -------------------------------

To add a value to a dashboard, use `+`.

    dash + pane3

results in:

    -------------------------------
    |  plot1  |  plot2  |  plot3  |
    -------------------------------

The operator `|+` creates a new horizontal split, unless the thing you're adding is another
Dashboard with a horizontal layout. In that case, their panes are concatenated as with `+`.

In this case, you wouldn't need to wrap the `plot3` instance in a Pane, but you could. You can also
use these operators on other Dashboards to compose them together.

Use parentheses to ensure the precedence you want:

    let dash = layout.Dashboard((Pane(plot1),), `vertical);
    ((dash + plot2) | plot3) / plot4

would show:

    -----------------------------
    |    plot1    |             |
    |-------------|    plot3    |
    |    plot2    |             |
    -----------------------------
    |                           |
    |           plot4           |
    |                           |
    -----------------------------


#### Example

Using the variables:

    let data1 = Vector.range(10.0, math.sin);
    let plot1 = linePlot(data1);
    let pane1 = layout.Pane(plot1);

    let data2 = Vector.range(10.0, math.cos);
    let plot2 = linePlot(data2);
    let pane2 = layout.Pane(plot2);

One could lay out the two plots side-by-side with:

    let dash = layout.Dashboard((pane1, pane2), `horizontal);
    dash

This would be equivalent to the following, which wouldn't require the second Pane() instance:

    let dash = layout.Dashboard((pane1,), `horizontal);
    dash | plot2

If you wanted to lay out the two plots vertically, you could do:

    let dash = layout.Dashboard((pane1,), `horizontal);
    dash / plot2

""")
class {
    member panes;
    member layout; // `horizontal or `vertical

    #Markdown("""
    #### Usage

        dash + value

    #### Description

    Adds another pane to the Dashboard containing the value to the right of `+`.

    If `value` is a Dashboard, the panes of the dashboard are added according to the layout of 
    `dash`. If the layouts are the same (e.g. both horizontal), the panes are concatenated, to
    yield a single Dashboard containing the panes of both. If not, the Dashboard `value` is wrapped
    in a Pane, maintaining the layout of `value`.
    """)
    operator +(other) {
        match (other) with
            (Dashboard(...)) {
                if (self.layout is other.layout) {
                    Dashboard(self.panes + other.panes, self.layout)
                    }
                else {
                    Dashboard(self.panes + (Pane(other),), self.layout)
                    }
                }
            (Pane(...)) {
                Dashboard(self.panes + (other,), self.layout)
                }
            (_) {
                Dashboard(self.panes + (Pane(other),), self.layout)
                }
        };

    #Markdown("""
    #### Usage

        dash /+ other

    #### Description

    Creates a vertical split in `dash`, but concatenates if `other` is a vertical Dashboard.

    This is a convenience operator that makes a vertical split unless the value `other` is a 
    Dashboard, in which case the two Dashboards are concatenated together. This makes the result
    maintain the relative sizes of panes, as opposed to `/`, which always creates a 50% split.
    """)
    operator /+(other) {
        match (other) with
            (Dashboard(...)) {
                if (self.layout is `vertical) {
                    self + other
                    }
                else if (self.layout is `horizontal) {
                    self / other
                    }
                }
            (_) {
                self / other
                }
        };

    operator +/(other) {
        // Alias for /+
        self /+ other
        };

    #Markdown("""
    #### Usage

        dash / other

    #### Description

    Create a vertical split between a Dashboard and other value.

    The Dashboard will take the top pane, and the other value the bottom.
    """)
    operator /(other) {
        // Always create a vertical split.
        match (other) with
            (Dashboard(...)) {
                Dashboard((Pane(self), Pane(other)), `vertical)
                }
            (Pane(...)) {
                Dashboard((Pane(self), other), `vertical)
                }
            (_) {
                Dashboard((Pane(self), Pane(other)), `vertical)
                }
        };

    operator |+(other) {
        match (other) with
            (Dashboard(...)) {
                if (self.layout is `horizontal) {
                    self + other
                    }
                else if (self.layout is `vertical) {
                    self | other
                    }
                }
            (_) {
                self | other
                }
        };

    operator +|(other) {
        // Alias for |+
        self |+ other
        };

    #Markdown("""
    #### Usage

        dash | other

    #### Description

    Creates a new Dashboard with a horizontal split.

    The Dashboard will take the left pane, and the other value the right.
    """)
    operator |(other) {
        // Always create a horizontal split.
        match (other) with
            (Dashboard(...)) {
                Dashboard(Pane(self), Pane(other), `horizontal)
                }
            (Pane(...)) {
                Dashboard((Pane(self), other), `horizontal)
                }
            (_) {
                Dashboard((Pane(self), Pane(other)), `horizontal)
                }
        };

    operator match
    (Dashboard _) {
        (self,)
        }
    (Visualizable _) {
        let layoutAsString = String(self.layout).replace('`', '');
        (#Dashboard(layout: layoutAsString, panes: self.panesAsTuple()),)
        };

    `hidden
    panesAsTuple:
    fun (){
        let tr = ();
        for pane in self.panes {
            tr = tr + (pane.asTuple(),)
            }
        tr
        };
    };


