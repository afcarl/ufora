/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/
`hidden
;
docstring: """
timeseries.fora

models a single-valued function of time, optimized for forward scanning. At every point, we can
hand it a time value, and it spits out a function value at that time and the 'next' iterator.

""";

fromIterator: iteratorToTimeseries.iteratorToTimeseries;
fromVector: fun(v) { iteratorToTimeseries.iteratorToTimeseries(v`(`Iter)) };
ema: exponentialMovingAverage.exponentialMovingAverage;
pairwise: pairwiseCombination.pairwiseCombination;

sample: 
	fun(timeseries) {
		while (timeseries is not nothing)
			{
			let t0 = timeseries.firstSampleTime;
			yield (x: timeseries.sample(t0), t: t0);
			timeseries = timeseries.nextSample
			};
		}
	(timeseries, samplePointIterator) {
		for t in samplePointIterator {
			timeseries = timeseries.sampleForTime(t);
			yield (x: timeseries.sample(t), t: t)
			}
		}
	;
resampled: fun(ts) { 
	fromIterator([x for x in sample(ts)])
	};

pairtest: {
    let ct = 1000000;
    let ts1 = timeseries.ema(0.0 + 2.0)(
                    timeseries.fromVector(
                        [(t: ix / 1.0, x: (ix % 100) / 100.0) for ix in sequence(ct)]
                        )
                    );
    let ts2 = timeseries.ema(0.0 + 4.0)(
                    timeseries.fromVector(
                        [(t: ix / 1.0, x: (ix % 100) / 100.0) for ix in sequence(ct)]
                        )
                    );
    let pairTimeseries = timeseries.pairwise(ts1, ts2, fun(x,y) { (x - y) } );

    [x for x in timeseries.sample(pairTimeseries)];
    
    return true
    };


/*

ema1 = timeseries.fromVector(
	[x for x in timeseries.sample(timeseries.ema(1.0 / 200.0 / (col+1))(tsmid))]
	)
ema2 = timeseries.fromVector(
	[x for x in timeseries.sample(timeseries.ema(1.0 / 200.0 / (row+1))(tsmid))]
	)
tsplot(timeseries.pairwise(ema1, ema2, fun(x,y){x-y}));

tsPlot =  fun(ts) { 
	linePlot([
		(x: x.t, y: x.x) for x in timeseries.sample(ts)
		])
	};

tsmid = timeseries.fromVector(
	ticks.apply(fun(tick) { (t: tick.t - ticks[0].t, x: (tick.bid + tick.ask)/2) } )
	)

let ema1 = timeseries.ema(1.0 / 120.0)(tsmid);
let ema2 = timeseries.ema(1.0 / 200.0)(tsmid);
let diff = timeseries.pairwise(ema1, ema2, fun(x,y){x-y});
tsplot(diff)

tsplot = fun(ts) { 
	linePlot([
		(x: x.t, y: x.x) for x in timeseries.sample(ts)
		])
	};

*/

