/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/
#Markdown("""
### math

#### Description

The fora mathematics libraries.

""");

//constants
pi: 3.14159265358979;
twoPi: pi * 2.0;
halfPi: pi * 0.5;
sqrtPi: 1.7724538509055159;
sqrtTwoPi: 2.5066282746310002;
twoDivSqrtPi: 1.1283791670955126;
logTwoPi: 1.8378770664093453;
e: 2.71828183;
phi: 1.6180339;
inf: 1.0 / 0.0;
nan: inf - inf;

//miscellaneous functions
sqrt:
#Markdown(
"""
#### Usage

    math.sqrt(x)

#### Description

Square root function. Returns `x ** 0.5`.
""")
fun (x)
    {
    x ** 0.5;
    };

hypot:
#Markdown(
"""
#### Usage

    math.hypot(x, y)

#### Description

Returns a floating point value for the hypotenuse of a 
triangle with legs of length `x` and `y`.
""")
fun(x,y)
    {
    x = abs(Float64(x));
    y = abs(Float64(y));

    if (x == 0)
        return y
    if (y == 0)
        return x
    
    let t = x <<< y;
    x = x >>> y;
    y = t;

    x * sqrt(1 + (y / x) * (y / x));
    };

logit:
"""
#### Usage

    math.logit(x)

#### Description

Returns the logistic function (aka \"logit\") at `x`.
"""
fun(x) 
	{
	1.0 / (1.0 + math.exp(-x));
	};

abs:
#Markdown(
"""
#### Usage

    math.abs(x)

#### Description

Returns the magnitude of `x`, where `x` is real or complex. 
""")
fun (Complex(a, b))
    {
    return hypot(a, b);
    }
    (x)
    {
    if (x < 0.0) -x else x
    };

sign:
#Markdown(
"""
#### Usage

    math.sign(x)

#### Description

Returns `-1.0` if `x` is less than `1`, `O` if `x == 0`, and `1` otherwise.
""")
fun (x)
    { 
    if (x < 0.0) -1.0 else if (x == 0) 0.0 else 1.0
    };

Tensor: tensor.Tensor;
Matrix: matrix.Matrix;
Complex: complex.Complex;

//Exponential and Logarithm functions - math/exponentialsLogarithms.fora
log: exponentialsLogarithms.log;
log_10: exponentialsLogarithms.log_10;
logB: exponentialsLogarithms.logB;
log1p: exponentialsLogarithms.log1p;
exp: exponentialsLogarithms.exp;
expm1: exponentialsLogarithms.expm1;

//trigonometric functions - math/trigonomety.fora
(alias: 'math.trigonometry.sin')
sin: trigonometry.sin;
cos: trigonometry.cos;
tan: trigonometry.tan;
cotan: trigonometry.cotan;
sec: trigonometry.sec;
csc: trigonometry.csc;

//inverse trigonometric functions - math/trigonomety.fora
asin: trigonometry.asin;
acos: trigonometry.acos;
atan: trigonometry.atan;
atan2: trigonometry.atan2;
acot: trigonometry.acot;
asec: trigonometry.asec;
acsc: trigonometry.acsc;

//hyperbolic trigonometric functions - math/trigonomety.fora
sinh: trigonometry.sinh;
cosh: trigonometry.cosh;
tanh: trigonometry.tanh;
coth: trigonometry.coth;
sech: trigonometry.sech;
csch: trigonometry.csch;

//inverse hyperbolic trigonometric functions - math/trigonomety.fora
asinh: trigonometry.asinh;
acosh: trigonometry.acosh;
atanh: trigonometry.atanh;
acoth: trigonometry.acoth;
asech: trigonometry.asech;
acsch: trigonometry.acsch;

//"rounding" functions - math/rounding.fora
round: rounding.round;   
floor: rounding.floor;
ceil: rounding.ceil;

//Greatest Common Divisor and Least Common Multiple - math/factorization.fora
gcd: factorization.gcd;       
lcm: factorization.lcm;

//Error Function and Complement of Error Function - math/errorFunction.fora
erf: errorFunction.erf;
erfc: errorFunction.erfc;
erfinv: errorFunction.erfinv;
erfcinv: errorFunction.erfcinv;

//Gamma and Logarithmic Gamma Functions - math/gammaFunctions.fora
tgamma: gammaFunctions.tgamma;
lgamma: gammaFunctions.lgamma;
digamma: gammaFunctions.digamma;
tgammaRatio: gammaFunctions.tgammaRatio;
gammaP: gammaFunctions.gammaP;
gammaPInv: gammaFunctions.gammaPInv;
gammaPDerivative: gammaFunctions.gammaPDerivative;
gammaPInva: gammaFunctions.gammaPInva;
gammaQ: gammaFunctions.gammaQ;
gammaQInv: gammaFunctions.gammaQInv;
gammaQInva: gammaFunctions.gammaQInva;
tgammaLower: gammaFunctions.tgammaLower;

//beta functions - math/betaFunctions.fora
beta: betaFunctions.beta;
betac: betaFunctions.betac;
ibeta: betaFunctions.ibeta;
ibetac: betaFunctions.ibetac;
ibetaInv: betaFunctions.ibetaInv;
ibetacInv: betaFunctions.ibetacInv;
ibetaInva: betaFunctions.ibetaInva;
ibetacInva: betaFunctions.ibetacInva;
ibetaInvb: betaFunctions.ibetaInvb;
ibetacInvb: betaFunctions.ibetacInvb;
ibetaDerivative: betaFunctions.ibetaDerivative;

//combinatorial functions
factorial: counting.factorial;
combination: counting.combination;

//functions that help enable support of applying many of the functions
//to tuples and vectors of elements
`hidden
applyBinaryFunctionToVectors:
	fun ({Vector(...)} v1, {Vector(...)} v2, functionToApply)
		{
		if(size(v1) != size(v2))
			throw #SizeMismatch("Input vectors v1 and v2 are of different size");
		let functionApplicator = fun(j) {functionToApply(v1[j],v2[j])};
		Vector.range(size(v1)).apply(functionApplicator);
		};
`hidden
applyBinaryFunctionToTuples:
	fun((...) t1,(...) t2, functionToApply)
		{
		if(size(t1) != size(t2))
			throw #SizeMismatch("Input input tuples t1 and t2 are of different size")
		let toReturn = ();
		for i in sequence(size(t1))
			{
			toReturn = toReturn+(functionToApply(t1[i],t2[i]),);
			}
		toReturn;
		};

modifiedBesselI: besselFunctions.modifiedBesselI;
modifiedBesselK: besselFunctions.modifiedBesselK;

machinePrecision: 
	fun 
		(Float32) { 1.192e-7 }
		(Float64) { 2.22e-16 }
		;

dot: 
#Markdown(
"""#### Usage 
 
    math.dot(vec1, vec2)

#### Description

Return the dot product of two vectors (or indexables).
""")
fun(vec1, vec2) {
    assertions.assertEqual(size(vec1), size(vec2))
    dotDontCheckLengths(vec1, vec2)
    };

dotDontCheckLengths:
#Markdown(
"""#### Usage 
 
    math.dotDontCheckLengths(vec1, vec2)

#### Description

Return the dot product of two vectors (or indexables), 
*without* checking that `vec1` and `vec2` have the same length.
""")
fun(vec1, vec2) {
    let s = nothing;
    let i = 0;
    let top = size(vec1);

    while (i < top) {
        s = s + vec1[i] * vec2[i];
        i = i + 1;
        }
    s
    };


