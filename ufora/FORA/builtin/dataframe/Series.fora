/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/
#Markdown("""
### Series

#### Description

A Series is a one-dimensional wrapper around a Vector data structure that provides conveniences
and routines best used in conjunction with DataFrame instances. They are also used to represent 
columns of a DataFrame.
""")
class {
    #Markdown("""
    Holds the Vector of one-dimensional data for this Series instance.
    """)
    member dataVec;

    #Markdown("""
    #### Usage

        dataframe.Series(vector)
        dataframe.Series(series)

    #### Description

    Construct a new `Series` instance. 

    """)
    operator new
    (filters.IsVector(dataVec)) {
        createInstance(cls, dataVec: dataVec)
        }
    (Series(series)) {
        createInstance(cls, dataVec: series.dataVec)
        }
    (otherwise) {
        createInstance(cls, dataVec: otherwise)
        }
    ;

    ...(`size) { size(dataVec) };

    `hidden
    operator match 
    (Series _) { (self,) }
    (Visualizable _) { (dataVec,) }
    (Plottable _) { (dataVec,) }
    (VectorContainer _) { (dataVec,) };

    #Markdown("""
    #### Description

    Iterate through the values in a DataFrameRow

    """)
    operator iterator() { 
        for ix in sequence(size(self))
            yield self[ix]
        };

    operator []
    (index) {
        dataVec[index]
        }
    (*args) {
        Series(dataVec[*args])
        };

    #Markdown("""
    #### Usage 

        series(function)

    #### Description

    Apply a function to each element in a series.

    Equivalent to 

        series.apply(function)
        series ~~ function

    """)
    operator () (function) {
        function(self)
        };

    #Markdown("""
    #### Usage

        dataframe.Series.uniform(10, 1)

    #### Description

    Produce a Series object containing `count` number of `value` elements.

    #### Example

        dataframe.Series.uniform(10, 1)

    will produce:

        Series([1, 1, 1, 1, 1, 1, 1, 1, 1])
    """)
    static uniform: fun(count, value) {
        Series(Vector.uniform(count, value))
        };

    #Markdown("""
    #### Usage

        dataframe.Series.range(10)

    #### Description

    Produce a Series instance containing a range of increasing values, similar to Vector.range.

    #### Examples

        dataframe.Series.range(10)

    will produce:

        Series([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])

    You can also provide a function:

        dataframe.Series.range(5, math.sin)

    which produces:

       Series([0.0, 0.841470984807897, 0.909297426825682, 0.141120008059867, -0.756802495307928])

    """)
    static range: fun
        (count) { Series(Vector.range(count)) }
        (count, f) { Series(Vector.range(count, f)) }
        ;

    #Markdown("""
    #### Usage

        series.equals(other)

    #### Description

    Determines whether a given Series equals another Fora value.
    """)
    equals:
    fun(Series(series)) {
        self.dataVec == series.dataVec
        }
    (_) {
        false
        };

    asMatrix: 
    #Markdown("""
    #### Usage

        series.asMatrix()

    #### Description

    Returns a math.Matrix instance with the content of this Series.
    """)
    fun () {
        math.Matrix(dataVec)
        };

    apply:
    #Markdown("""
    #### Usage

        series.apply(function)

    #### Description

    Calls a function given each element of the Series and returns a new Series.

    This is similar behavior to Vector.apply.
    """)
    fun (f) {
        Series(self.dataVec ~~ f)
        };

    reverse:
#Markdown("""
#### Usage

    series.reverse()

#### Description

Reverse the elements in a series, producing a new `Series`.
""")
    fun() {
        Series(builtin.reverse(self.dataVec))
        };

    applyWithIndex:
    #Markdown("""
    #### Usage

        series.applyWithIndex(function)

    #### Description

    Calls a function given each element and index of the Series 
    and returns a new Series.

    This is similar behavior to Vector.applyWithIndex.
    """)
    fun (f) {
        Series(self.dataVec.applyWithIndex(f))
        };

    operator ~~(function) {
        self.apply(function)
        };

    append:
    #Markdown("""
    #### Usage

        series.append(series)
        series.append(vector)

    #### Description

    Appends the values of the given Series or Vector to this Series.
    """)
    fun (Series(series)) {
        Series(self.dataVec + series.dataVec)
        }
    (filters.IsVector(vector)) {
        Series(self.dataVec + vector)
        };

    prepend:
    #Markdown("""
    #### Usage

        series.prepend(series)
        series.prepend(vector)

    #### Description

    Adds the values of the given Series or Vector to the beginning of this Series.
    """)
    fun (Series(series)) {
        Series(series.dataVec + self.dataVec)
        }
    (filters.IsVector(vector)) {
        Series(vector + self.dataVec)
        };

    sum:
    #Markdown("""
    #### Usage

        series.sum(*args)

    #### Description

    Compute the sum of elements in a series.

    This has the same interface as Vector summing, (see, for example 
    `help([].sum)`).

    #### Examples

        let s = dataframe.Series([1,2,3]);
        s.sum()
        s.sum(fun(x) { x ** 2 })
 
    """)
    fun (*args) {
        self.dataVec.sum(*args)
        };

    #Markdown("""
    #### Description

    Check whether or not a given value is in a vector.

    #### Examples

        let s = dataframe.Series([1,2,3]);
        2 in s // true
        4 in s // false

    """)
    operator in (other) {
        other in dataVec
        };

    ...(`Operator, op, Series(otherSeries)) {
        Series(Vector.range(size(dataVec), fun(ix) {
            dataVec[ix]`(`Operator, op, otherSeries[ix])
            }))
        };

    ...(`Operator, op, notAnotherSeries) {
        Series(Vector.range(size(dataVec), fun(ix) {
            dataVec[ix]`(`Operator, op, notAnotherSeries)
            } ))
        };

    ...(`ReverseOperator, op, notAnotherSeries) {
        Series(Vector.range(size(dataVec), fun(ix) {
            notAnotherSeries`(`Operator, op, dataVec[ix])
            } ))
        };

    #Markdown("""
    #### Usage

        String(series)

    #### Description

    Return a `String` representation of a `Series`.
    """)
    convert (String) {
        "Series(" + String(dataVec) + ")"
        };

    index:
#Markdown("""
#### Usage

    series.index(value)

#### Description

Find the index of the first occurrence of `value` in `series`, 
else throw an exception.

#### Examples

    dataframe.Series([1,2,3,3]).index(3) // 2
    dataframe.Series([1,2,3]).index(4)   // throws exception
""")
    fun(val) {
        self.dataVec.index(val)
        };

    }; // end Series definition.

