/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/
`hidden;

intersection:
fun (left, right) {
    let rightValsSorted = sorting.sort(right);

    left.filter(
        { sorting.searchSorted(rightValsSorted, _) is not nothing }
        )

    };

disjoint:
fun (left, right) {
    let leftValsSorted = sorting.sort(left);
    let rightValsSorted = sorting.sort(right);

    left.filter(
        { sorting.searchSorted(rightValsSorted, _) is nothing }
        ) +
    right.filter(
        { sorting.searchSorted(leftValsSorted, _) is nothing }
        )
    };

union:
fun (left, right) {
    let leftValsSorted = sorting.unique(left);

    left + right.filter(
        { sorting.searchSorted(leftValsSorted, _) is nothing }
        )
    };

IsVectorOfVectorsAndSeries:
object {

    operator filter
    (value if isVectorOfVectors_(value)) {
        (value,)
        };

    `hidden
    isVectorOfVectors_:
    fun (candidate) { 
        try {
            match (candidate) with (filters.IsVector(...)) { nothing }

            for el in candidate {
                match (el) with
                    (filters.IsVector(...)) { nothing }
                    (Series(...)) { nothing }
                }
            }
        catch (e) {
            return false;
            }

        return true;
        };
    };

IsVectorOfTuples:
object {
    operator filter
    (value if isVectorOfTuples_(value)) {
        (value,)
        };

    `hidden
    isVectorOfTuples_:
    fun (candidate) {
        try {
            // Check for the pure {Vector} match, since this should rule out heterogeneous
            // candidates.
            match (candidate) with ({Vector(...)}) { nothing }
            }
        catch (e) {
            return false;
            }

        if (size(candidate) == 0)
            return false;

        // The first element should be a tuple....
        try {
            match (candidate[0]) with (filters.IsTuple(...)) { nothing }
            }
        catch (e) {
            return false;
            }

        // The TypeJOVs of the first n elements should match.
        let jov = `TypeJOV(candidate[0]);
        let numElementsToCheck = min(5, size(candidate));
        for i in sequence(1, numElementsToCheck) {
            if (jov != `TypeJOV(candidate[i])) return false;
            }

        // That's probably the best we can do.
        return true;
        };
    };


