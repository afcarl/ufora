/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/
#Markdown(
"""
### GroupBy 

#### Description

A class for grouping rows of a `DataFrame` according to a key (or keys).

To create a `GroupBy` instance, use

    df.groupBy(key)
    df.groupBy(key:)
    df.groupBy((*keys))
    df.groupBy(keys: (*keys))

Each key should either be a `Symbol` or `String`, giving the name of the column 
on which groups of rows are constructed.

For example, consider

    let df = dataframe.DataFrame(
        A: ['foo', 'bar', 'foo', 'bar', 
            'foo', 'bar', 'foo', 'foo'], 
        B: ['one', 'one', 'two', 'three', 
            'two', 'two', 'one', 'three'], 
        C: Vector.range(8),
        D: Vector.range(8, { _ + 8 })
        );

    df.groupBy(`A) // equivalient to df.groupBy("A")   

""")
class {
    member mGroupBySorted;

    operator new(*args) { factory_(*args) };

    static factory_: 
#Markdown(
"""#### Description

Create a `GroupBy` object. Use of the constructor syntax is preferred.

""")
    fun
    (inDataFrame, key:)
        {
        let sortedDf = inDataFrame.sort(key);

        createInstance(cls, mGroupBySorted: GroupBySorted(sortedDf, key:key))
        }
    (inDataFrame, (*keys))
        {
        factory_(inDataFrame, keys: keys)
        }
    (inDataFrame, keys: (*keys))
        {
        let df = inDataFrame.addColumn(
            inDataFrame.rowApply(
                fun(row) {
                    keys..apply(fun(sym) { row[sym] })
                    }
                )
            )
            
        let keyColumn = df.columnNames[-1]
        df = df.sortByColumn(keyColumn)

        createInstance(
            cls, 
            mGroupBySorted: 
                GroupBySorted(df, key: keyColumn, dropLastColumnInSlices: true)
            );            
        }
    (inDataFrame, key)
        {
        factory_(inDataFrame, key:key)
        }
    ;

    groups: 
#Markdown(
"""#### Usage

    groupBy.groups()

#### Description 

Return the "groups" of the `groupBy` object. 

This is a vector of dataframes (ie "groups"), such that each dataframe is
key-homogeneous (all rows in it have the same key), 
and which are maximal in the sense that no two distinct groups have the same key, 
and no group is empty.

#### Examples

    let df = dataframe.DataFrame(
        A: ['foo', 'bar', 'foo', 'bar', 
            'foo', 'bar', 'foo', 'foo'], 
        B: ['one', 'one', 'two', 'three', 
            'two', 'two', 'one', 'three'], 
        C: Vector.range(8),
        D: Vector.range(8, { _ + 8 })
        );

    let groupBy = df.groupBy(`A)
    groupBy.groups()
""")
    fun() {
        mGroupBySorted.groups()
        };

    groupKeys:
#Markdown(
"""#### Usage

    groupBy.groupKeys()

#### Description

Return the vector of keys which partially define this `GroupBy` object.

#### Examples

    let df = dataframe.DataFrame(
        A: ['foo', 'bar', 'foo', 'bar', 
            'foo', 'bar', 'foo', 'foo'], 
        B: ['one', 'one', 'two', 'three', 
            'two', 'two', 'one', 'three'], 
        C: Vector.range(8),
        D: Vector.range(8, { _ + 8 })
        );

    let groupBy = df.groupBy(`A)
    groupBy.groupsKeys()
""")
    fun() {
        mGroupBySorted.groupKeys()
        };

    getGroup: 
#Markdown(
"""#### Usage

    groupBy.getGroup(key)

#### Description

Return the corresponding group for a key.

#### Examples

    let df = dataframe.DataFrame(
        A: ['foo', 'bar', 'foo', 'bar', 
            'foo', 'bar', 'foo', 'foo'], 
        B: ['one', 'one', 'two', 'three', 
            'two', 'two', 'one', 'three'], 
        C: Vector.range(8),
        D: Vector.range(8, { _ + 8 })
        );

    let groupBy = df.groupBy(`A)
    groupBy.getGroup('foo')
    groupBy.getGroup('bar')
    groupBy.getGroup('doesNotExist')

""")
    fun(key) {
        mGroupBySorted.getGroup(key)
        };

    operator iterator() {
        for val in mGroupBySorted {
            yield val
            }
        };

    };
        

