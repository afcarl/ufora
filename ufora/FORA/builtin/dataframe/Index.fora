/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/
#Markdown("""
#### dataframe.Index

#### Description

A class for building indices (ie, lookup mappings) on rows in dataframes.
""")
class {
    member keyToIndexVector;
    member df;
    
#Markdown("""
#### Usage

    possibleKey in index

#### Description

Check if a possible key `possibleKey` exists as a key in a dataframe 
index, `index`.

#### Examples

    let df = dataframe.DataFrame([[0, 1, 2, 3], [0, 1, 0, 2]], columnNames: [`a, `b])
    let indexOnColumnB = df.index(`b)

Then the following are true:

    0 in indexOnColumnB
    1 in indexOnColumnB
    2 in indexOnColumnB
    42 not in indexOnColumnB

""")
    operator in(key) {
        let (l,u) = offsetsFor(key)
        return l < u
        };
        
    rowCountForKey: 
#Markdown("""
#### Usage

    index.rowCountForKey(key)

#### Description

    Return the number of rows in the dataframe index with key `key`.

#### Examples

    let df = dataframe.DataFrame([[0, 1, 2, 3], [0, 1, 0, 2]], columnNames: [`a, `b])
    let indexOnColumnB = df.index(`b)

Then the following are true:

    indexOnColumnB.rowCountForKey(0) == 2
    indexOnColumnB.rowCountForKey(1) == 1
    indexOnColumnB.rowCountForKey(2) == 1
    indexOnColumnB.rowCountForKey(42) == 0
    
""")
    fun(key) {
        let (l,u) = offsetsFor(key)
        
        return (u - l) >>> 0
        };
    
    `hidden
    offsetsFor: fun(key) {
        return (bound(key, true), bound(key, false))
        };
        
    `hidden
    bound: 
    fun(key, searchForLower) {
        let v = keyToIndexVector
        let low = 0
        let high = size(v)
        
        while (low < high) {
            let mid = (low + high)/2
            let elt = v[mid][0]
            
            if (key < elt)
                high = mid
                else
            if (elt < key)
                low = mid + 1
            else
                {
                if (searchForLower)
                    high = mid
                else
                    low = mid + 1
                }
            }
        
        return low
        };

#Markdown("""
#### Usage

    index[key]

#### Description

Return the dataframe of rows in `index` with key `key`

#### Examples

    let df = dataframe.DataFrame([[0, 1, 2, 3], [0, 1, 0, 2]], columnNames: [`a, `b])
    let indexOnColumnB = df.index(`b)

For column b, we have values `[0, 1, 0, 2]`, so these elements give us the existent "keys"
in `indexOnColumnB`. Then the following are true

    indexOnColumnB[0].equals(dataframe.DataFrame([[0, 2], [0, 0]], columnNames: df.columnNames))
    indexOnColumnB[1].equals(dataframe.DataFrame([[1], [1]], columnNames: df.columnNames))
    indexOnColumnB[2].equals(dataframe.DataFrame([[3], [2]], columnNames: df.columnNames))

For nonexistent keys, for example 42, indexing gives an empty dataframe:

    indexOnColumnB[42].equals(dataframe.DataFrame([[], []], columnNames: df.columnNames))

As another example, consider

    let rowToKeyFun = fun(row) { row.sum() % 2 }
    let indexForRowToKeyFun = df.index(rowToKeyFun)

Then the following hold true

    indexForRowToKeyFun[0].equals(dataframe.DataFrame([[0, 1, 2], [0, 1, 0]], columnNames: df.columnNames))
    indexForRowToKeyFun[1].equals(dataframe.DataFrame([[3], [2]], columnNames: df.columnNames))
    indexForRowToKeyFun[3].equals(dataframe.DataFrame([[], []], columnNames: df.columnNames))
    
""")
    operator[](key) {
        let (l,u) = offsetsFor(key)
        let keysAndSlice = keyToIndexVector[l,u]
        
        let takeSubset = fun(v) { 
            Series(keysAndSlice ~~ fun((_, ix)) { v[ix] })
            };
        
        DataFrame(
            columns:df.columns ~~ takeSubset, 
            columnNames: df.columnNames,
            numRows: u - l,
            numColumns: df.numColumns
            )
        };
    };

