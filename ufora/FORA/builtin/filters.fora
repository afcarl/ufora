/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/
#Markdown("""
### filters

#### Description

Filters are a means to check for types in match blocks and function calls.

For example, one can write a function that operates on vectors or functions by using:

    let plotter =
    fun (filters.IsVector(...) vector) {
        // Do vector stuff here.
        }
    (filters.IsFunction(...) f) {
        // Do function stuff here.
        };
""");

IsOfType:
#Markdown("""
#### Usage

    let myFilter = filters.IsOfType(String);
    match (value) with
        (myFilter(...)) {
            true;
            }

#### Description

Constructs a filter that matches the given TypeJOV.

This is used to construct the other filters in this module.
""")
class
    {
    member typeJOV;

    operator filter
    (value if isOfType(value)) {
        (value,)
        };

    operator()(other) { isOfType(other) };

    isOfType:
    fun (value) {
        match (typeJOV) with
            ((...)) { `TypeJOV(value) in typeJOV }
            (...) { `TypeJOV(value) is typeJOV }
        };
    };

IsIterable: 
#Markdown("""
#### Usage

    let iterable = math.random.Normal(0.0, 1.0, 1);
    match (iterable) with
        (filters.IsIterable(...)) { true };

#### Description

Matches iterable objects.
""")
object {
    operator filter(value) {
        if (self(value))
            return (value,)
        return nothing
        };
    operator ()(value) {
        try {
            value`(`Iter)
            return true
            }
        catch (...)
            {
            return false
            }
        }
    };

IsString:
#Markdown("""
#### Usage

    match ("hello") with
        (filters.IsString(...)) { true };

#### Description

Matches strings.
""")
IsOfType(String);

IsTag:
#Markdown("""
#### Usage

    match (#Hello) with
        (filters.IsTag(...)) { true };

#### Description

Matches tags.
""")
IsOfType(Tag);

IsSymbol:
#Markdown("""
#### Usage

    match (`hello) with
        (filters.IsSymbol(...)) { true };

#### Description

Matches symbol values.
""")
IsOfType(Symbol);

IsDictionary:
#Markdown("""
#### Usage

    let d = {"a" : 1};
    match (d) with
        (filters.IsDictionary(...)) { true };

#### Description

Matches instances of dictionaries.
""")
IsOfType(`TypeJOV({:}));

IsDateTime:
#Markdown("""
#### Usage

    let dt = DateTime("2014-03-01");
    match (dt) with
        (filters.IsDateTime(...)) { true };

#### Description

Matches instances of DateTime objects.
""")
IsOfType(DateTime);

IsTimeDuration:
#Markdown("""
#### Usage

    let oneHour = TimeDuration("01:00:00");
    match (time) with
        (filters.TimeDuration(...)) { true };

#### Description

Matches instances of TimeDuration.
""")
IsOfType(TimeDuration);

IsMutableVector:
#Markdown("""
#### Usage

    let ones = MutableVector(Float64).create(10, 1.0);
    match (ones) with
        (filters.IsMutableVector(...)) { true };

#### Description

Matches instances of MutableVectors, regardless of the types they contain.
""")
IsOfType(MutableVector);

IsFloat:
#Markdown("""
#### Usage

    match (1.0) with
        (filters.IsFloat(...)) { true };

#### Description

Matches numbers of Float64 and Float32.
""")
object
    {
    operator filter
    (value if isFloat(value)) {
        (value,)
        };

    operator()(other) { isFloat(other) };

    isFloat:
    fun (value) {
        match (`TypeJOV(value)) with
            (Float64) {true}
            (Float32) {true}
            (...)     {false}
        };
    };

IsInteger:
#Markdown("""
#### Usage

    match (10) with
        (filters.IsInteger(...)) { true };

#### Description

Matches numbers of type Int64, Int32, Int16, Int8, UInt64, UInt32, UInt16, and UInt8.
""")
object
    {
    operator filter
    (value if isInteger(value)) {
        (value,)
        };

    operator()(other) { isInteger(other) };
    
    isInteger:
    fun (value)
        {
        match (`TypeJOV(value)) with
            (Int64)  {true}
            (Int32)  {true}
            (Int16)  {true}
            (Int8)   {true}
            (UInt64) {true}
            (UInt32) {true}
            (UInt16) {true}
            (UInt8)  {true}
            (...)    {false}
        };
    };

IsNumeric:
#Markdown("""
#### Usage

    match (10.0) with
        (filters.IsNumeric(...)) { true };

#### Description

Matches all types of integers and floats.
""")
object {
    operator filter
    (value if isNumeric(value)) {
        (value,)
        };

    operator()(other) { isNumeric(other) };

    isNumeric:
    fun (value) {
        match (`TypeJOV(value)) with
            (Float64) {true}
            (Int64)   {true}
            (Float32) {true}
            (Int32)   {true}
            (Int16)   {true}
            (Int8)    {true}
            (UInt64)  {true}
            (UInt32)  {true}
            (UInt16)  {true}
            (UInt8)   {true}
            (...)     {false}
        };
    };

#Markdown("""
#### Usage

    let x = 1 == 1;
    match (x) with
        (filters.IsBool(...)) { true }

#### Description

Matches the values `true` and `false`.
""")
IsBool:
object {
    operator filter
    (value if isBool(value)) {
        (value,)
        };

    operator()(other) { isBool(other) };

    isBool:
    fun (value) {
        match (value) with
            (true) { true }
            (false) { true }
            (...) { false }
        };

    };

IsAlternative:
#Markdown("""
#### Usage

    let alt = #Markdown("hello!");
    match (alt) with
        (filters.IsAlternative(...)) { true };

#### Description

Matches instances of alternatives.
""")
object
    {
    operator filter
    (value if isAlternative(value)) {
        (value,)
        };

    operator()(other) { isAlternative(other) };
    
    isAlternative:
    fun (value) {
        match (value) with
            ({Alternative(...)}) {true}
            (...) {false}
        };
    };


IsVector:
#Markdown("""
#### Usage

    let v = [1, 2, 3];
    match (v) with
        (filters.IsVector(...)) { true };

#### Description

Matches all instances of Vectors, regardless of the types they contain.
""")
object
    {
    operator filter
    (value if isVector(value))
        {
        (value,)
        };

    operator()(other) { isVector(other) };

    isVector:
    fun (value) {
        `IsVector(value)
        };
    };

IsCode:
#Markdown("""
#### Usage

    let myFilter = filters.IsCode(`function);
    match (math.sin) with
        (myFilter(...)) { true };

#### Description

Used to construct filters that match functions, objects, classes, and instances.
""")
class
    {
    member kindSymbol;

    operator filter (value if kindsMatch(value)) {
        (value,)
        };

    operator()(other) { kindsMatch(other) };

    kindsMatch:
    fun (value) {
        try {
            match (`ExtractMetadata(value)) with
                ((kind: k, ...)) { self.kindSymbol == k }
                (...) { false }
                ;
            }
        catch (e) {
            false
            }
        };
    };

IsClass: 
#Markdown("""
#### Usage

    match (math.Matrix) with
        (filters.IsClass(...)) { true };

#### Description

Matches class objects.
""")
IsCode(`class);

IsObject:
#Markdown("""
#### Usage

    let myObject = object { x:1; };
    match (myObject) with
        (filters.IsObject(...)) { true };

#### Description

Matches anonymous objects.
""")
IsCode(`object);

IsInstance:
#Markdown("""
#### Usage

    let rand = math.random.Normal(0.0, 1.0, 1);
    match (rand) with
        (filters.IsInstance(...)) { true };

#### Description

Matches any instance of any class.
""")
IsCode(`instance);

IsModule:
#Markdown("""
#### Usage

    match (math) with
        (filters.IsModule(...)) { true };

#### Description

Matches modules.
""")
IsCode(`module);

IsFunction:
#Markdown("""
#### Usage

    fun (IsFunction(...) f) { "A function" }
        (_) { "Not a function" }

#### Description

An object filter that accepts functions.
""")
IsCode(`function);

IsTuple:
#Markdown("""
#### Usage

    let tup = (1, 2, 3);
    match (tup) with
        (filters.IsTuple(...)) { true };

#### Description

Matches tuples, regardless of the number of elements or types they contain.
""")
object
    {
    operator filter
    (value if isTuple(value)) {
        (value,)
        };

    operator()(other) { isTuple(other) };

    isTuple:
    fun (value) {
        match (value) with
            ((...)) {true}
            (...) {false}
        };
    };


