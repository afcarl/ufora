/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/
`hidden
;

floor: fun(x) {
	if (x < 0)
		Int64(x)-1
		else
		Int64(x)
	};
abs: fun(t) {
	if (t < 0)
		-t
	else
		t
	};

simulate1D:
	"""Return a simulation object for a 1d simulation.
	
	updateFun - fun((x,t),(l,c,r)) -> an updated value
		where (x,t) is the current node, and (l,c,r) are the values of the
		function at (x-1,t-1), (x,t-1), and (c+1,t-1) respectively.
	width - the width of the problem. E.g. we have nodes in [0, width-1]
	boundaryCondition - a function of (x,t) indicating the value at the
		boundaries (e.g. at t = 0 and at x = 0 or x = width-1)
		
	the function returns a vector of values laid out from xLeft to xRight
	inclusive.
	
	We work internally by dividing the space into blocks and passing the edges
	around through cache nodes.
	
	So, each block looks like this
	
					O	O
				O	O	O	O
			O	O	*	*	O	O
		O	O	*	*	*	*	O	O
	L	L	*	*	*	*	*	*	R	R
		L	L	*	*	*	*	R	R	
			L	L	*	*	R	R
				L	L	R	R	
	
	where 'O' is the output of the block, * is an interior node that we
	compute but don't actually store, 'L' is an output node of the 'left'
	block below us, and 'R' is an output node in the 'right' block below us.
	
	Using this pattern, we first compute the edges of block 'L' and 'R', and then
	use those to compute the value of 'O'
	"""
	fun(updateFun_, width_, boundaryCondition_) {
		//we return a 'simulation' object
		object {
			updateFun: updateFun_;
			width: width_;
			boundaryCondition: boundaryCondition_;
			
			"""given x and t and a blocksize N, produce a block object"""
			blockFor: fun(x,t, N) {
				//compute X and Y, the indices of the left-most point in the
				//block
				let A = floor(Float64(x + t) / N / 2);
				let B = floor(Float64(x - t) / N / 2);
				let X = (A+B) * N;
				let T = (A-B) * N;
				
				return createBlock(self, (X,T),N)
				};
			convert(String) {
				"Simulate1D(" +
					"update=" + String(updateFun_) + ", " + 
					"width=" + String(width_) + ", " + 
					"boundary=" + String(boundaryCondition_) +
					")"
				};
			timeSlice: fun(t, N) {
				let blockIt = fun() {
					let x = 0;
					while (x < width_) {
						let b = blockFor(x, t, N);
						yield b;
						x = x + b.widthAt(t)
						}
					};
				flatten(
					[b for b in blockIt()].apply(
						fun(b) {
							b.rowVectorFor(t).data
							}
						)
					)
				};
			"""compute the simulation without any parallelism."""
			simpleTimeSlice: fun(t) {
				let v = [boundaryCondition_(x,0) for x in sequence(0,width)];
				for tIx in sequence(t - 1) {
					let s = fun(x) {
						if (x < 0)
							boundaryCondition_(1,tIx)
							else
						if (x >= width)
							boundaryCondition_(width,tIx)
							else
							v[x]
						};
					v = [updateFun_((x,tIx),
							(s(x-1),s(x),s(x+1))) for x in sequence(0,width)
							]
					};
				v
				}
			}
		}
	;
"""represents the solution to a given problem over a given block

problem - the problem to be solved
(X,T) - the indices of the leftmost point in the block
N - the size of the block
"""
createBlock: fun(problem_, (X_, T_), N_) {
	object {
		problem: problem_;
		X: X_;
		T: T_;
		N: N_;
		convert(String) { "Block at " + String((X_,T_)) };
		leftBlock: createBlock(problem_, (X_-N, T_-N), N_);
		rightBlock: createBlock(problem_, (X_+N, T_-N), N_);
		edgeValues: cached(
			vectorToEdgeValueFun(
				self.computeEdgeValues_(),
				(X_,T_),
				N
				)
			)[0];
		"""given a time index, compute the width of the block at a given time"""
		widthAt: fun(t) {
			(2 * N - abs(t - T) * 2) <<< (problem_.width - rowLeftPos(t))
			};
		"""given a time index, what x value starts this?"""
		rowLeftPos: fun(t) {
			X + abs(t - T)
			};
			
		rowVectorFor: fun(t) {
			if (t < 0)
				throw "Negative time index not allowed"
			
			if (t < T_-N_ or t > T_+N_)
				throw ("invalid time index: ", t, (T_-N_, T_+N_))
			
			let (rowVec,curT) = (
				if (T == 0)
					(self.t0Vector,0)
					else
					(self.bottommostRowVector, T_-N_)
				);
			while (curT < t)
				{
				rowVec = rowVec.rollVectorForward(problem_)
				curT = curT + 1
				}
			
			return rowVec
			};
		t0Vector: {
			let bc = problem_.boundaryCondition;
			
			createRowVector(
				[bc(x, 0) for x in sequence(X_, (X_+N_*2) <<< problem.width)],
				(X_,0),
				(X_,0),
				N_,
				nothing,
				nothing,
				problem_
				)
			};
		bottommostRowVector: {
			createRowVector([],
				(X_+N,T_-N),
				(X_,T_),
				N_,
				self.leftBlock.edgeValues,
				self.rightBlock.edgeValues,
				problem_
				)
			};
		computeEdgeValues_: fun() {
			if (T < 0)
				throw "Negative time index not allowed"
			
			let rowVec = nothing;
			if (T == 0)
				{
				//we're starting at t0 - we can just roll forward 'N' times
				rowVec = self.t0Vector;
				}
				else
				{
				rowVec = self.bottommostRowVector;
				
				for ix in sequence(N) {
					rowVec = rowVec.rollVectorForward(problem_)
					}
				}
			
			//now, we roll the vector forward N-1 times, taking the right elements off
			let res = [];
			for t in sequence(N) {
				res = res ::  rowVec[X_+t] :: rowVec[X_+t+1]
				
				if (t < N - 1) {
					res = res :: rowVec[X_+2*N-2-t] :: rowVec[X_+2*N-1-t]
					rowVec = rowVec.rollVectorForward(problem_)
					}
				}
			
			return res
			};
		}
	};
"""createRowVector - fun(data,(x,t),(X,T),N,leftBlock,rightBlock, problem)

creates an object that holds a bunch of values for a row vector. support services
to keep from going off the edge of the vector.  The row vector is an indexable
function of [x]
"""
createRowVector: fun(data_,(x,t),(X,T),N,leftBlock,rightBlock, problem) {
	let width = problem.width;
	let bc = problem.boundaryCondition;
	object {
		data: data_;
		operator [](inX) {
			if (inX < 0)
				return bc(-1, t)
				else
			if (inX >= width)
				return bc(width, t)
				else
			if (inX < x)
				return leftBlock(inX, t)
				else
			if (inX >= x + size(data_))
				return rightBlock(inX, t)
				else
				return data_[inX - x]
			};
		convert(String) {
			"Row vector at time t=" + String(t) + " in block "
				+ String((X,T)) + " with " + String(data_)
			};
		
		rollVectorForward: fun(problem) {
			let uf = problem.updateFun;
			let tOff = t + 1 - T;
			let insetAmt = (if (tOff < 0) -tOff  else tOff);
			let x0 = ((X + insetAmt) >>> 0) <<< width;
			let x1 = ((X + 2*N - insetAmt) >>> 0) <<< width;
			
			
			let newData = [
					uf((sampleX, t+1),
						(self[sampleX-1], self[sampleX], self[sampleX+1]))
					for sampleX in sequence(x0, x1)
					]
			
			return createRowVector(newData, (x0,t+1),(X,T),N,leftBlock,rightBlock,problem)
			};
		}
	};
	
	
	
"""vectorToEdgeValueFun

given a vector containing the 'edge values' of the computation, represent it
as a function of 'x' and 't'.  The vector should be laid out in increasing 't'.
the first 'N-1' rows should have four elements each, and the last row
should have two.  So, for instance, the canonical block listed above, if placed
at (0,0) with N = 4, would have values laid out as

	[(0,0), (1,0), (6,0), (7,0),
	 (1,1), (2,1), (5,1), (6,1),
	 (2,2), (3,2), (4,2), (5,2),
	 (3,3), 			  (4,3)]
	 
"""
vectorToEdgeValueFun:
	fun(data, (X,T), N) {
		//check the size of the vector
		if (size(data) != ((N-1)*4 + 2))
			throw (
				"vectorToEdgeValueFun was expecting a vector with",
				((N-1)*4 + 2),
				"elements, not ",
				size(data)
				);
		
		object {
			operator () (x,t) {
				let row = t - T;
				if (row >= 0 and row < N)
					{
					let col = x - X - row;
					if (col >= 0 and col < 2)
						return data[row * 4 + col]
					
					col = col + row * 2;
					
					if (col >= 2*N-2 and col < 2*N)
						return data[row * 4 + 4 + (col - 2*N)]
					}
				
				throw ((x,t), " out of bounds in block ", (X,T,N))
				};
			convert(String) {
				"EdgeFunction at " + String((X,T))
					+ " with N=" + String(N)
					+ " and data " + String(data)
				}
			}
		}
	;

simpleProblem:
	simulate1D(
		object {
			operator () ((x,t),(l,c,r)) {
				(l+r)/2.0
				};
			convert(String) {
				"AveragingFunction"
				}
			},
		1000,
		object {
			operator ()(x,t) { if (t == 0) Float64((x-500) >>> 0) else 0.0 };
			convert(String) {
				"Option"
				}
			}
		)
	;

