/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/
#Markdown("""
### hash

#### Description

The fora library for cryptographic hashes. Currently implements only SHA-1.

""");

SHA1:
#Markdown("""#### Description

A class for working with SHA1 hashes

""")
class 
	{
	member mData;
	
	hexDigest: 
#Markdown(
"""#### Usage

    hashInstance.hexDigest()

#### Description

Interpret the 160-byte digest implicit in `mData` as a hexadecimal string.

#### Description

    : let h = hash.SHA1("The quick brown fox jumps over the lazy dog")
    > h.hexDigest()

""")
    fun() {
		`hexDigest(mData)
		};

#Markdown(
"""#### Usage

    hash.SHA1(string)

#### Description

Computes a Hash object representing the SHA-1 cryptographic hash function of the 
string `string`. SHA-1 values are usually represented as 160-bit (20-byte) "digests." 
We interpret these digests as length-5 tuples of 32-bit unsigned integers (`UInt32`). 
These tuples are held in `mData`.

#### Example

    : let h = hash.SHA1("The quick brown fox jumps over the lazy dog")
    > h.mData
    > h.hexDigest()

""")
	operator new(filters.IsString(string)) {
		createInstance(cls, mData: `SHA1(string))
		};

    data:
#Markdown("""#### Usage

    sha1Object.data()

#### Description

Return the length-5 tuple underlying a sha1 object.

""")
    fun() { mData };

	};
	

