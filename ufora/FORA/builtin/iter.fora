/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/
#Markdown(
"""
### iter

#### Description

Common transformations for iterators and iterables. An iterable is an object
that provides an iterator.

Note that an iterator is itself considered an iterable.

Inspired by Python's `itertools` and, to a lesser extent, Haskell's `Prelude`.
""");

length:
#Markdown(
"""#### Usage

    iter.length(iterable)
	
#### Description

Computes the length of the given iterable object, `iterable`.
	
If the provided iterable is infinite, this function will fail to terminate.
""")
	fun (iterable) {
		let len = 0
		for elem in iterable { len = len + 1 }
		len
		};

get:
#Markdown(
"""#### Usage

    iter.get(iterable, index)
	
#### Description

Gets the `index`-th element of the given iterable object by a linear scan. 

The given index is zero-based, must not be negative, and may not equal or 
exceed the length of the iterable.
""")
	fun (iterable, index) {
		if (index < 0)
			throw "Negative index: " + String(index) + "."
		let i = 0
		for elem in iterable {
			if (i is index)
				return elem
			i = i + 1
			}
		throw "Not enough elements in iterable to reach index " + String(index)
			+ "; iterable has length " + String(i) + "."
		};


append:
#Markdown(
"""#### Usage

    iter.append(iterable, *elemsToAppend)
	
#### Description

Produces an iterator that yields the elements of the given iterable
followed by the specified extra elements.
	
If you want to concatenate two or more iterables together, use `chain`
instead.
	
If the provided iterable is infinite, the returned iterator is again of course infinite, and yields the same values as the provided iterator, and can never yield the elements in `elemsToAppend`.
""")
	fun (iterable, *elemsToAppend) {
		for elem in iterable      { yield elem }
		for elem in elemsToAppend { yield elem }
		};

chain:
#Markdown(
"""#### Usage

1. `iter.chain(*iterables)`
2. `iter.chain(iterableOfIterables)`
	
#### Description

Chains the iterators of given iterables together, yielding the elements
of the first iterator, followed by the elements of the second iterator, etc.
	
This function is safe to use on infinite iterables, since it steps through
the iterators of its arguments only as needed. Moreover, in the second form,
`iterableOfIterables` can itself be infinite.
""")
	fun
		(iterableOfIterables) { 
			for iterable in iterableOfIterables {
				for elem in iterable{
					yield elem
					}
				}
			}
		(*iterables) { chain(iterables) }
	;

repeat:
#Markdown(
"""#### Usage

1. `iter.repeat(elem)`
2. `iter.repeat(elem, count)`

#### Description

Produces an iterator that yields the given value as many times as specified,
or infinitely, if no count is provided.
""")
	fun
		(elem)        { while (true) yield elem }
		(elem, count) { 
			if (count < 0)
				throw "Negative repetition count: " + String(count) + "."
			while (count > 0) {
				yield elem
				count = count - 1
				}
			}
	;

iterate:
#Markdown(
"""#### Usage

    iter.iterate(function, startingValue)

#### Description
	
Produces an iterator that repeatedly applies the given function `function`, yielding
the intermediate results, starting with the value `startingValue`.
	
The iterator returned by `iter.iterate(f, x)` is infinite, and its elements are:
    x, f(x), f(f(x)), f(f(f(x))), f(f(f(f(x)))), f(f(f(f(f(x))))), ...
""")
	fun (f, x) {
		let cur = x
		while (true) {
			yield cur
			cur = f(cur)
			}
		};

cycle:
#Markdown(
"""#### Usage

1. `iter.cycle(*elems)`
2. `iter.cycle(iterable)`
	
#### Description

Produces an iterator which repeats the given sequence of elements over and
over. 

Passing an infinite iterable to this function merely results in
an equivalent infinite iterator, not an infinite loop.
""")
	fun
		(iterable) { while (true) for elem in iterable { yield elem } }
		(*elems)   { while (true) for elem in elems { yield elem } }
	;


subseq:
#Markdown(
"""#### Usage

1. `iter.subseq(iterable, startIndex)`
2. `iter.subseq(iterable, startIndex, stopIndex)`

#### Description
	
Produces an iterator which yields the elements of the given iterable,
beginning with the `startIndex`-th, inclusive, and ending with the
`stopIndex`-th, exclusive.

If `stopIndex` is omitted, the resultant iterator will continue to yield
elements until the iterable is exhausted, or forever, if the iterable is
infinite.
""")
	fun
		(iterable, start) {
			if (start < 0)
				throw "Negative starting index: " + String(start) + "."
			let i = 0
			for elem in iterable {
				if (i < start)
					i = i + 1
				else
					yield elem
				}
			}
		(iterable, start, stop) {
			if (start < 0)
				throw "Negative starting index: " + String(start) + "."
			if (start == stop)
				return nothing
			if (start > stop)
				throw "Starting index " + String(start)
					+ " exceeds stopping index " + String(stop) + "."
			let i = 0
			for elem in iterable {
				if (i >= stop)
					return nothing
				if (i >= start)
					yield elem
				i = i + 1
				}
			}
	;


forall:
#Markdown(
"""#### Usage

    iter.forall(iterable, predicate)
	
#### Description

Returns `true` if the predicate holds for every element in the given iterable,
`false` otherwise.
	
This function will always terminate, except in the case where the iterable
is infinite and none of its elements fails the predicate.
""")
	fun (iterable, predicate) {
		for elem in iterable {
			if (not predicate(elem))
				return false
			}
		true
		};

exists:
#Markdown(
"""#### Usage

    iter.exists(iterable, predicate)
	
#### Description

Returns `true` if at least one element in the given iterable satisfies the
predicate, `false` otherwise.
	
This function will fail to terminate if and only if the iterable is infinite
*and* none of its elements satisfies the predicate.
""")
	fun (iterable, predicate) {
		for elem in iterable {
			if (predicate(elem))
				return true
			}
		false
		};


takeWhile:
#Markdown(
"""#### Usage

    iter.takeWhile(predicate, iterable)

#### Description
	
Yields elements of the given iterable for as long as the predicate holds.

The resultant iterator halts as soon as a non-predicate-satisfying element
is encountered.
	
This function will always terminate, except in the case where the iterable
is infinite and none of its elements fails the predicate.

#### Examples

    iter.takeWhile(fun(x) { x < 10 }, sequence())

Yields `0, 1, ... , 9` and then is empty.
""")
	fun (predicate, iterable) {
		for elem in iterable {
			if (predicate(elem))
				yield elem
			else
				return nothing
			}
		};

dropWhile:
#Markdown(
"""#### Usage

    iter.dropWhile(predicate, iterable)
	
#### Description

Discards elements of the given iterable for as long as the predicate holds,
then yields all of the remaining elements.
	
This function will always terminate, except in the case where the iterable
is infinite and none of its elements fails the predicate.

#### Examples

    iter.dropWhile(fun(x) { x < 10 }, sequence())

Is an iterator which yields `10, 11, 12, ...`

""")
	fun (predicate, iterable) {
		let dropping = true
		for elem in iterable {
			if (dropping and not predicate(elem))
				dropping = false
			if (not dropping)
				yield elem
			} 
		};

span:
#Markdown(
"""#### Usage

    iter.span(predicate, iterable)

#### Description
	
Returns the pair
 
    (takeWhile(predicate, iterable), dropWhile(pair, iterable))

This function will always terminate, except in the case where the iterable
is infinite and none of its elements fails the predicate.
""")
	fun (predicate, iterable) {
		(takeWhile(predicate, iterable), dropWhile(predicate, iterable))
		};

filter:
#Markdown(
"""#### Usage

    iter.filter(predicate, iterable)

#### Description

Yields every element of the given iterable that satisfies the predicate,
filtering out the elements that don't.

If the provided iterable is infinite, and none of its elements satisfy the predicate, then 
this function will fail to terminate.
""")
	fun (predicate, iterable) {
		for elem in iterable {
			if (predicate(elem))
				yield elem
			}
		};

filterNot:
#Markdown(
"""#### Usage

    iter.filterNot(predicate, iterable)

#### Description

Yields every element of the given iterable that *doesn't* satisfy the
predicate, filtering out the elements that *do*.

If the provided iterable is infinite, and all of its elements satisfy the predicate, then 
this function will fail to terminate.
""")
	fun (predicate, iterable) {
		for elem in iterable {
			if (not predicate(elem))
				yield elem
			}
		};


zip:
#Markdown(
"""#### Usage

    iter.zip(*iterables)

#### Description

Produces an iterator which steps through the provided iterables
simultaneously, yielding, on every iteration, a tuple containing one element
from each of the given iterables. The resultant iterator terminates when
*any* of the given iterables is exhausted, ignoring the remaining elements
of any longer iterables.

For example, suppose we have bound `let nats = sequence()`. Then
    zip((1, 2, 3, 4, 5), [`a, `b, `c], nats)
produces an iterator which yields the following elements, in order:
    (1, `a, 0),
    (2, `b, 1),
    (3, `c, 2)
and then terminates.

This function is safe to use on infinite iterables. In the case where all
input iterables are infinite, the result will also be infinite.
""")
	fun (*iterables) {
		let mkIters = fun() {
			for iterable in iterables {
				yield iterable`(`Iter)		
				}
			}
		let iters = mkIters()
		while (true) {
			let elems = (), iter1s = ()
			for i in iters {
				match (i`(`Next, ())) with
					(nothing) { return nothing }
					((e, i1)) { elems = elems + (e,); iter1s = iter1s + (i1,) }
				}
			iters = iter1s
			yield elems
			}
		};

zipWithIndex:
#Markdown(
"""#### Usage

    `iter.zipWithIndex(iterable)`

#### Description

Produces an iterator which yields the elements of the given iterable paired
with their indices. The first component of a yielded pair is the index, and
the second is the element.
	
For example, if the input iterable yields:
    `a,
    `b,
    `c,
then the iterator returned by this function returns:
    (0, `a),
    (1, `b),
    (2, `c).

This function is safe to use on infinite iterables; if the provided iterable
is infinite, the resultant iterator will also be infinite.

In other words, `zipWithIndex(iterable)` is equivalent to `zip(sequence(), iterable)`.
""")
	fun (iterable) { zip(sequence(), iterable) };


map:
#Markdown(
"""#### Usage

    iter.map(function, *iterables)

#### Description

Produces an iterator that applies the given function to arguments taken one
from each of the iterables. The resultant iterator has length equal to the
shortest of the input iterables.

For example,
    map(fun (x, y) { x + y }, (1, 2, 3, 4, 5), (2, 3, 3, 3))
yields:
    3,
    5,
    6,
    7.

This function is safe to use on infinite iterables; if the given iterables
are all infinite, then the result will be an infinite iterator.
""")
	fun
		(f) { throw "`iter.map` requires at least one iterable argument." }
		(f, *iterables) {
			let argTups = zip(*iterables)
			for args in argTups {
				yield f(*args)
				}
			}
	;

starMap:
#Markdown(
"""#### Usage

    iter.starMap(function, iterableOfArgTuples)

#### Description

Produces an iterator which yields the result of applying the given function
to the arguments contained in each element tuple of the provided iterable.

Equivalent to:
    fun (f, iter) { for tup in iter { yield f(*tup) } }

Note that `zip`, `map`, and `starMap` obey the following identity:
	`map(f, *iters)` yields the same values as `starMap(f, zip(*iters))`.	

This function is safe to use on infinite iterables; if the provided iterable
is infinite, the resultant iterator will also be infinite.
""")
	fun (f, iterableOfTuples) { for tup in iterableOfTuples { yield f(*tup) } };


zipApply:
#Markdown(
"""#### Usage

    iter.zipApply(iterableOfFunctions, *argumentIterables)

#### Description

Produces an iterator which yields the result of applying the first function
to the first elements of the argument iterables, followed by the result of
applying the second function to the second arguments, etc. The resultant
iterator has length equal to the shortest of the input iterables.

For example, consider the following declarations:

    let funs = (fun (x, y) { x + y },
                fun (x, y) { x * y },
                fun (x, y) { x - y });
    let arg1s = (1, 2, 3, 4);
    let arg2s = (0, 2, 2);

Then `zipApply(funs, arg1s, arg2s)` yields:

    1,  // 1 + 0
    4,  // 2 * 2
    1.  // 3 - 1
	
This function is safe to use on infinite iterables; if the given iterables
are all infinite, then the result will be an infinite iterator.
""")
	fun (funcIterable, *iterables) {
		for tup in zip(funcIterable, *iterables) {
			let (f, *args) = tup
			yield f(*args)
			}
		};


toVector:
#Markdown(
"""#### Usage

    iter.toVector(iterable)

#### Description

Converts the given iterable object to a vector.

If the provided iterable is infinite, this function will fail to terminate.
""")
	fun (iterable) {
		let vec = []
		for elem in iterable {
			vec = vec :: elem
			}
		vec
		};

toTuple:
#Markdown(
"""#### Usage

    iter.toTuple(iterable)

#### Description

Converts the given iterable object to a tuple.

If the provided iterable is infinite, this function will fail to terminate.
""")
	fun (iterable) {
		let tup = ()
		for elem in iterable {
			tup = tup + (elem,)
			}
		tup
		};

toString:
#Markdown(
"""#### Usage

    iter.toString(iterable,
             begin = "",
             sep = ", ",
             end = "",
             elemStringifier = fun (elem) { String(elem) })

#### Description
	
Produces a string containing the elements of the given iterable in order,
preceded by `begin`, separated by `sep`, and terminated by `end`.

If the provided iterable is infinite, this function will fail to terminate.
""")
	fun (iterable, begin = "",
	               sep = ", ",
	               end = "",
	               elemStringifier = fun (elem) { String(elem) }) {
		let str = begin, sawFirst = false
		for elem in iterable {
			if (not sawFirst)
				sawFirst = true
			else
				str = str + sep
			str = str + elemStringifier(elem)
			}
		str + end
		};

coiterate:
#Markdown(
	"""#### Usage

		iter.coiterate(iterable, values)

	where iterable and values are both iterators.

	#### Description

	Iterates over 'iterable' and 'values' in tandem, passing values from 'values' into 'iterable'
	at each iteration point.  We yield tuples of the form

		(value: v) 

	Until the very end when we either terminate (if iterable runs out of valuues) or we yield

		(tail: t)

	if values has run out of space.
	""")
	fun(iterable, values) {
		let valueIter = iterator(values)
		let iterIt = iterator(iterable)

		while (true)
			{
			let valuePair = valueIter`(`Next, nothing)
			
			if (valuePair is nothing)
				{
				yield (tail: iterIt)
				return nothing
				}

			let iterPair = iterIt `(`Next, valuePair[0])

			if (iterPair is nothing)
				return nothing

			yield iterPair[0]

			iterIt = iterPair[1]
			valueIter = valuePair[1]

			if (iterIt is nothing)
				return nothing
			}
		};


