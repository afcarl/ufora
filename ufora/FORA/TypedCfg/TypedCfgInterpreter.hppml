/***************************************************************************
    Copyright 2016 Ufora Inc.
 
    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at
 
        http://www.apache.org/licenses/LICENSE-2.0
 
    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
****************************************************************************/

#pragma once

#include "TypedCfgInterpreterStackFrame.hppml"

namespace TypedFora {

class Compiler;

namespace Abi {

class VectorLoadRequest;

}

}

namespace Fora {

namespace Interpreter {

class RefcountPool;

}

}

class TypedCfgInterpreter {
public:
    enum {
        continuation_continue = 0,
        continuation_resume_with_normal_result = 1,
        continuation_resume_with_exception_result = 2
        };

    TypedCfgInterpreter(TypedCfgInterpreterStackFrame* inFrame, StackFrameAllocator& allocator, uword_t curCont);

    //returns a continuation that we want callers to resume with.
    static NativeRuntimeContinuationValue<1> interpreter(
                                    StackFrame** memory,
                                    uword_t continuation,
                                    void* typedCfgInterpStackFramePtr
                                    );

    void step();

    bool done() const;

    NativeRuntimeContinuationValue<1> toFollow() const;

private:
    void stepNativeAxiom();

    ImplVal constructArgument(const ControlFlowArg& arg);

    ImplVal constructApplyArgumentWithoutNameInfo(const ControlFlowApplyArg& arg);

    ImplVal constructArgument(const ControlFlowContinuationArg& arg);
    
    void followInterruptContinuation(const Nullable<TypedFora::Abi::VectorLoadRequest>& loadRequest);

    void followContinuation(const TypedCfgStats::Continuation& cont);

    TypedCfgInterpreterStackFrame* mCurrentFrame;

    TypedFora::Compiler* mTypedForaCompiler;

    Fora::Interpreter::RefcountPool* mRefcountPool;

    StackFrameAllocator& mStackAllocator;

    uword_t mCurrentContinuation;

    Nullable<NativeRuntimeContinuationValue<1> > mContinuationToExitAndFollow;

    Nullable<int32_t> mIndexOfReturnInParent;
};