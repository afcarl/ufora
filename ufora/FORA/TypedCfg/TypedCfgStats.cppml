/***************************************************************************
    Copyright 2016 Ufora Inc.
 
    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at
 
        http://www.apache.org/licenses/LICENSE-2.0
 
    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
****************************************************************************/

#include "TypedCfgStats.hppml"
#include "../TypedFora/TypedFora.hppml"
#include "../TypedFora/TypedForaUtil.hppml"
#include "../TypedFora/JitCompiler/Compiler.hppml"
#include "../TypedFora/JitCompiler/TypedContinuation.hppml"
#include "../TypedFora/JitCompiler/TypedJumpTarget.hppml"
#include "../TypedFora/ABI/VectorLoadRequest.hppml"
#include "../Axioms/Axioms.hppml"
#include "../../core/threading/SimpleCallbackSchedulerFactory.hppml"
#include "../Core/ExecutionContext.hppml"
#include "../Core/ExecutionContextImpl.hppml"
#include "../Core/ExecutionContextConfiguration.hppml"
#include "../Native/NativeRuntimeUntypedContinuation.hppml"
#include "../VectorDataManager/VectorDataManager.hppml"

using namespace TypedCfgStatsClasses;

TypedCfgStats::TypedCfgStats(
			PolymorphicSharedPtr<TypedFora::Compiler> inCompiler,
			PolymorphicSharedPtr<Axioms> inAxioms
			) : 
		mCompiler(inCompiler),
		mAxioms(inAxioms)
	{
	}

void TypedCfgStats::addGraphSet(ImmutableTreeMap<TypedCfgGraphIdentity, TypedCfgGraph> inGraphSet)
	{
	boost::mutex::scoped_lock lock(mMutex);

	for (auto idAndGraph: inGraphSet)
		if (mGraphs.find(idAndGraph.first) == mGraphs.end())
			addGraph(idAndGraph.first, idAndGraph.second, mNodes[idAndGraph.first]);
	}

void TypedCfgStats::addGraph(
			TypedCfgGraphIdentity curId,
			const TypedCfgGraph& graph, 
			map<hash_type, TypedCfgStats::Node>& graphNodeMap
			)
	{
	mGraphs[curId] = graph;

	for (auto hashAndNode: graph.nodes())
		graphNodeMap[hashAndNode.first] = convertNode(curId, hashAndNode.second, graphNodeMap);
	}

Node TypedCfgStats::convertNode(
					const TypedCfgGraphIdentity curId,
					const TypedCfgNode& node, 
					map<hash_type, Node>& graphNodeMap
					)
	{
	return Node(
		&mGraphs[curId],
		node.label(),
		node.judgments(),
		convertNodeBody(node.body(), graphNodeMap)
		);
	}

NodeBody TypedCfgStats::convertNodeBody(
				const TypedCfgNodeBody& node,
				map<hash_type, Node>& graphNodeMap
				)
	{
	auto convertContinuationFun = 
		[&](const TypedCfgContinuation& cont) { 
			return convertContinuation(cont, graphNodeMap);
			};

	@match TypedCfgNodeBody(node)
		-| Apply(args, target, normal, exception) ->> {
			return NodeBody::Apply(
				args, 
				convertApplyTarget(target), 
				mapITV(normal, convertContinuationFun),
				mapITV(exception, convertContinuationFun)
				);
			}
		-| Cached(args, normal, exception) ->> {
			return NodeBody::Cached(
				args, 
				convertContinuationFun(normal), 
				convertContinuationFun(exception)
				);
			}
		-| Branch(arg, normal, exception) ->> {
			return NodeBody::Branch(
				arg,
				convertContinuationFun(normal),
				convertContinuationFun(exception)
				);
			}
		-| TupleExpand(argIndex, (arity, exact, ifMatch), ifNoMatch) ->> {
			return NodeBody::TupleExpand(
				argIndex,
				TupleContinuation(arity, exact, convertContinuationFun(ifMatch)),
				convertContinuationFun(ifNoMatch)
				);
			}
		-| Switch(arg, branches, otherwise) ->> {
			ImmutableTreeMap<CSTValue, Continuation> convertedBranches;

			for (auto valAndBranch: branches)
				convertedBranches = convertedBranches + valAndBranch.first + convertContinuationFun(valAndBranch.second);

			return NodeBody::Switch(
				arg,
				convertedBranches,
				convertContinuationFun(otherwise)
				);
			}
		-| Jump(cont) ->> {
			return NodeBody::Jump(convertContinuationFun(cont));
			}
		-| TupleExpandJump(argIndex, arity, cont) ->> {
			return NodeBody::TupleExpandJump(argIndex, arity, convertContinuationFun(cont));
			}
		-| TransferToInterpreter() ->> {
			return NodeBody::TransferToInterpreter();
			}
	}

Continuation TypedCfgStats::convertContinuation(const TypedCfgContinuation& cont, map<hash_type, TypedCfgStats::Node>& graphNodeMap)
	{
	@match TypedCfgContinuation(cont)
		-| Return(arg, isException, indexInExits) ->> {
			return Continuation::Return(
				boost::shared_ptr<ContinuationStats>(new ContinuationStats()),
				arg, 
				isException, 
				indexInExits
				);
			}
		-| Node(label, args) ->> {
			return Continuation::Jump(
				boost::shared_ptr<ContinuationStats>(new ContinuationStats()),
				args, 
				&graphNodeMap[label]
				);
			}
	}

TypedCfgStats::ApplyTarget TypedCfgStats::convertApplyTarget(
			const TypedCfgApplyTarget& target
			)
	{
	@match TypedCfgApplyTarget(target)
		-| Graph(identity, node) ->> {
			return ApplyTarget::Graph(&mNodes[identity][node]);
			}
		-| NativeAxiom(axiom) ->> {
			JudgmentOnValueTuple callSignature = axiom.callSignature();

			Nullable<Axiom> axiom2 = mAxioms->weakestAxiom(*mCompiler, callSignature);
			lassert_dump(axiom2, prettyPrintString(callSignature));
			lassert(axiom2->isNative());

			Axiom_NativeType nativeAxiom2 = axiom2->getNative();

			TypedFora::TypedJumpTarget jumpTarget = compileAxiom(nativeAxiom2);

			NativeFunctionPointerAndEntrypointId ptr = jumpTarget.functionPointer().get();

			return ApplyTarget::NativeAxiom(axiom, nativeAxiom2, ptr);
			}
	}

TypedFora::TypedJumpTarget TypedCfgStats::compileAxiom(Axiom_NativeType nativeAxiom)
	{
	JudgmentOnAction resultSignature = nativeAxiom.resultSignature();
	TypedFora::Callable callTarget = *nativeAxiom.callTarget();

	callTarget = 
		TypedFora::adaptSignatureOfCallable(
			callTarget,
			nativeAxiom.callSignature(),
			nativeAxiom.callSignature(),
			TypedFora::interpreterResultSignature(),
			false
			);

	string axiomName = "Axiom_" + hashToString(nativeAxiom.callSignature().hash());

	mCompiler->define(axiomName, callTarget);

	return mCompiler->getJumpTarget(axiomName, TypedFora::BlockID::entry(), true);
	}

Node* TypedCfgStats::getNode(TypedCfgGraphIdentity graph, hash_type nodeHash)
	{
	boost::mutex::scoped_lock lock(mMutex);

	auto it = mNodes.find(graph);
	if (it == mNodes.end())
		return nullptr;

	auto it2 = it->second.find(nodeHash);
	if (it2 == it->second.end())
		return nullptr;

	return &it2->second;
	}

JudgmentOnAction TypedCfgStats::resolveAxiomDirectly(const JudgmentOnValueTuple& jovs)
	{
	hash_type jovHash = jovs.hash();

		{
		boost::mutex::scoped_lock lock(mMutex);

		auto it = mResolvedAxiomsCache.find(jovHash);
		if (it != mResolvedAxiomsCache.end())
			return it->second;
		}

	JudgmentOnAction result = resolveAxiomDirectlyUncached(jovs);

		{
		boost::mutex::scoped_lock lock(mMutex);

		mResolvedAxiomsCache[jovHash] = result;
		return result;
		}
	}

ImplValContainer buildArgumentsForAxiom(JOVT callSignature, JOVT toCallWith)
	{
	long oneToOneArgs = callSignature.jovs().size();

	lassert(oneToOneArgs <= toCallWith.jovs().size());

	ImmutableTreeVector<ImplValContainer> args = 
		mapITV(
			toCallWith.jovs().slice(0, oneToOneArgs),
			[&](JOV jov) { return ImplValContainer(*jov.constant()); }
			);

	ImmutableTreeVector<ImplValContainer> remainingArgs = 
		mapITV(
			toCallWith.jovs().slice(oneToOneArgs),
			[&](JOV jov) { return ImplValContainer(*jov.constant()); }
			);

	if (callSignature.hasExtras())
		args = args + ImplValContainer(remainingArgs);

	//makes an unnamed tuple
	return ImplValContainer(args);
	}

JudgmentOnAction TypedCfgStats::resolveAxiomDirectlyUncached(const JudgmentOnValueTuple& jovs)
	{
	//get the weakest axiom possible for this so we can execute it
	Nullable<Axiom> axiom = mAxioms->weakestAxiom(*mCompiler, jovs);

	if (!axiom && !axiom->isNative() && jovs.hasExtras())
		return JudgmentOnAction::Unknown();

	Axiom_NativeType nativeAxiom = axiom->getNative();

	ImplValContainer argumentTuple = buildArgumentsForAxiom(nativeAxiom.callSignature(), jovs);

	TypedFora::TypedJumpTarget jumpTarget = compileAxiom(nativeAxiom);

	static PolymorphicSharedPtr<CallbackSchedulerFactory> factory(
			new SimpleCallbackSchedulerFactory()
			);

	static PolymorphicSharedPtr<CallbackScheduler> scheduler(
		factory->createScheduler("Axioms::resolveAxiomDirectly", 1)
		);

	static PolymorphicSharedPtr<VectorDataManager> vdm(
			new VectorDataManager(scheduler, 32 * 1024)
			);
	vdm->dontIncludeInCounts();

	Fora::Interpreter::ExecutionContext interp(
		vdm,
		0x20000
		);

	Nullable<JudgmentOnAction> finalResult;

	interp.getImpl()->lockAndExecute([&]() {
		ImplVal resultingImplVal;
		uword_t which = 0xFFFFFF;

		//generate new interrupts
		NativeRuntimeCallbacks newCallbacks;
		newCallbacks.resetNativeRuntimeState();
		newCallbacks.bigVectorSlotIndex = *interp.getCurrentBigvecSlotIndex();

		pair<NativeRuntimeContinuationValue<1>, TypedFora::Abi::VectorLoadRequest> interruptData;

		newCallbacks.interruptContinuation = 
			mCompiler->generateDummyContinuation(&interruptData, &which, 2);

		newCallbacks.cacheCallContinuation =
			mCompiler->generateDummyContinuation(&interruptData, &which, 3);

		NativeRuntimeContinuationValue<2> continuations;

		continuations.setTo(
			mCompiler->
				generateDummyContinuation(&resultingImplVal, &which, 0, 2)
			);

		StackFrameAllocator alloc(32 * 1024, interp.getMemoryPool());

		NativeRuntimeCallTarget callTarget = 
			mCompiler->
				generateStackframeAndCallTargetFromArgTuple(
					jumpTarget,
					TypedFora::TypedContinuation(
						NativeRuntimeUntypedContinuation(
							continuations,
							&newCallbacks
							)
						),
					alloc.getMemBlockPtr(),
					argumentTuple.getReference(),
					interp.getRefcountPool()
					);

		mCompiler->callFunction(
			callTarget,
			alloc.getMemBlockPtr()
			);

		if (which == 0)
			finalResult = JudgmentOnAction::Value(JOV::FromLiveValue(resultingImplVal));
			else
		if (which == 1)
			finalResult = JudgmentOnAction::Throws(JOV::FromLiveValue(resultingImplVal));
		else
			finalResult = JudgmentOnAction::Unknown();
		});
	
	return *finalResult;
	}
