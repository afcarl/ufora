/***************************************************************************
    Copyright 2016 Ufora Inc.
 
    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at
 
        http://www.apache.org/licenses/LICENSE-2.0
 
    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
****************************************************************************/

#include "TypedCfgInterpreterStackFrame.hppml"
#include "../Core/StackFrameAllocator.hpp"

TypedCfgInterpreterStackFrame::TypedCfgInterpreterStackFrame(
	        NativeRuntimeContinuationValue<2> conts,
	        TypedCfgStats::NodePtr node,
	        NativeRuntimeCallbacks* callbacks
	        ) : 
		mContinuations(conts),
		mTypedCfgNode(node),
		mCallbacks(callbacks),
		mParentStackFrame(nullptr)
	{
	}

TypedCfgInterpreterStackFrame::TypedCfgInterpreterStackFrame(
	        TypedCfgInterpreterStackFrame* parent,
	        TypedCfgStats::NodePtr node,
	        NativeRuntimeCallbacks* callbacks
	        ) : 
		mContinuations(),
		mTypedCfgNode(node),
		mCallbacks(callbacks),
		mParentStackFrame(parent)
	{
	}

TypedCfgInterpreterStackFrame* TypedCfgInterpreterStackFrame::allocate(
            StackFrameAllocator& allocator, 
            NativeRuntimeContinuationValue<2> continuations,
            TypedCfgStats::NodePtr node,
            NativeRuntimeCallbacks* callbacks
            )
	{
	int64_t maxArgs = node->graphPtr()->graph().maxArgCount();

	uint64_t bytecount = sizeof(TypedCfgInterpreterStackFrame) + sizeof(ImplVal) * maxArgs;

	TypedCfgInterpreterStackFrame* data = (TypedCfgInterpreterStackFrame*)allocator.allocate(bytecount);

	//verify that the top address is in bounds. We expect this check to pass by construction
	//but leave it in to enforce the invariant if we're changing the code.
	lassert((uint8_t*)&data->mFrameValues[maxArgs] <= (uint8_t*)data + bytecount)

	new (data) TypedCfgInterpreterStackFrame(continuations, node, callbacks);

	return data;
	}

TypedCfgInterpreterStackFrame* TypedCfgInterpreterStackFrame::allocate(
            StackFrameAllocator& allocator, 
            TypedCfgInterpreterStackFrame* parent,
            TypedCfgStats::NodePtr node,
            NativeRuntimeCallbacks* callbacks
            )
	{
	int64_t maxArgs = node->graphPtr()->graph().maxArgCount();

	uint64_t bytecount = sizeof(TypedCfgInterpreterStackFrame) + sizeof(ImplVal) * maxArgs;

	TypedCfgInterpreterStackFrame* data = (TypedCfgInterpreterStackFrame*)allocator.allocate(bytecount);

	//verify that the top address is in bounds. We expect this check to pass by construction
	//but leave it in to enforce the invariant if we're changing the code.
	lassert((uint8_t*)&data->mFrameValues[maxArgs] <= (uint8_t*)data + bytecount)

	new (data) TypedCfgInterpreterStackFrame(parent, node, callbacks);

	return data;
	}

void TypedCfgInterpreterStackFrame::destroy(TypedCfgInterpreterStackFrame* frame, StackFrameAllocator& allocator)
	{
	allocator.free(frame);
	}