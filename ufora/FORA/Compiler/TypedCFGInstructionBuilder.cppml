/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/
#include "TypedCFGInstructionBuilder.hppml"
#include "CompiledInstructionGroup.hppml"
#include "../TypedFora/Transforms/RenameVariables.hppml"
#include "../TypedFora/Transforms/PushDownMetadata.hppml"
#include "../TypedFora/TypedForaUtil.hppml"
#include "../TypedFora/ABI/NativeLayoutType.hppml"
#include "../TypedFora/ABI/TestTypedForaValuesIdentical.hppml"
#include "../../core/StringUtil.hpp"
#include "../../core/Logging.hpp"
#include "../Axioms/Axioms.hppml"
#include "../Core/ClassMediator.hppml"
#include "../ControlFlowGraph/ControlFlowGraphUtil.hppml"
#include "InstructionCycle.hppml"
#include "CompilerInstructionGraph/Instruction.hppml"
#include "CompilerInstructionGraph/InstructionBody.hppml"
#include "CompilerInstructionGraph/Continuation.hppml"

using Fora::Compiler::CompilerInstructionGraph::InstructionBody;
using Fora::Compiler::CompilerInstructionGraph::InstructionPtr;
using Fora::Compiler::CompilerInstructionGraph::Instruction;
using Fora::Compiler::CompilerInstructionGraph::ApplyArgs;
using Fora::Compiler::CompilerInstructionGraph::ContinuationArgs;
using Fora::Compiler::CompilerInstructionGraph::Continuation;
using Fora::Compiler::CompilerInstructionGraph::ContinuationElement;

namespace TypedCFGInstructionBuilder {

Builder::Builder(
			InstructionPtr inInstruction,
			CallTargetGenerator& generator,
			const PolymorphicSharedPtr<Axioms>& inAxioms,
			const PolymorphicSharedPtr<TypedFora::Compiler>& inTypedForaCompiler,
			const ImmutableTreeVector<TypedFora::Variable>& inVariables
			) :
		mTypedForaCompiler(inTypedForaCompiler),
		mAxioms(inAxioms),
		mInstruction(inInstruction),
		mJovs(inInstruction->jovsWithConstantPropagationOrRootJovs()),
		mGenerator(generator),
		mVariables(inVariables)
	{
	for (long k = 0; k < mJovs.size(); k++)
		lassert_dump(
			mJovs[k].covers(mVariables[k].type().jov()),
				"variables " + prettyPrintString(inVariables) + " don't match" +
				" given JOVs of " + prettyPrintString(mJovs) +
				"\ninstruction = " + mInstruction->toString(false)
			);

	mInstruction->timesCompiled()++;
	}


TypedFora::Block	Builder::getBlock()
	{
	return TypedFora::Block(
		mVariables,
		TypedFora::Expression::DiscardFirst(
			interruptExpression(),
			getExpression()
			),
		mInstruction->executionCount() + 1
		);
	}


TypedFora::Expression Builder::interruptExpression()
	{
	if (Fora::Compiler::InstructionCycle::get(mInstruction).needsInterrupt(mInstruction))
		{
		ImmutableTreeVector<TypedFora::MetadataStackFrame> metas = metadataForNode();

		return
			TypedFora::Expression::DiscardFirst(
				TypedFora::Expression::InterruptCheck(metas),
				TypedFora::Expression::KickCheck(
					TypedFora::Expression::TransferToInterpreter(metas)
					)
				);
		}
	else
		return TypedFora::Expression::Constant(CSTValue());
	}

ImmutableTreeVector<TypedFora::MetadataVariable>
		Builder::metadataVariables()
	{
	ImmutableTreeVector<TypedFora::MetadataVariable> tr;

	for (long k = 0; k < mInstruction->argCount(); k++)
		tr = tr + TypedFora::MetadataVariable::Var(mVariables[k]);

	return tr;
	}

ImmutableTreeVector<TypedFora::MetadataStackFrame>
		Builder::metadataForContinuation(uword_t indexInCfgNode, const TypedFora::Variable& inResultVar)
	{
	return emptyTreeVec() +
		TypedFora::MetadataStackFrame(
			TypedFora::MetadataInstruction::NodeWithResult(
				ControlFlowGraphJumpPoint(
					mInstruction->getGraph(),
					mInstruction->getLabel()
					),
				indexInCfgNode,
				mJovs,
				inResultVar.type().jov()
				),
			metadataVariables() +
				TypedFora::MetadataVariable::Var(inResultVar)
			);
	}

ImmutableTreeVector<TypedFora::MetadataStackFrame>
		Builder::metadataForNode()
	{
	return emptyTreeVec() +
		TypedFora::MetadataStackFrame(
			TypedFora::MetadataInstruction::Node(
				ControlFlowGraphJumpPoint(
					mInstruction->getGraph(),
					mInstruction->getLabel()
					),
				mJovs
				),
			metadataVariables()
			);
	}

TypedFora::Expression
Builder::getExpression()
	{
	try {
		if (mInstruction->applyResultIsKnown())
			return getExpressionForKnownResult();

		@match InstructionBody(mInstruction->getInstructionBody())
			-|	Jump() ->> {
				return generateTerminator(getContinuation(0));
				}
			-|	Branch() ->> {
				return getExpressionForBranch();
				}
			-|	Switch() ->> {
				return getExpressionForSwitch();
				}
			-|	TupleExpand() ->> {
				return getExpressionForTupleExpand();
				}
			-|	Cached() ->> {
				lassert_dump(false, "shouldn't have gotten here. Cached nodes should "
					"always be handled in the interpreter.");
				}
			-|	JumpApply(_, target) ->> {
				if (!target || target->isRootInstruction())
					return TypedFora::Expression::TransferToInterpreter(metadataForNode());

				return getExpressionForApply();
				}
			-|	AxiomApply() ->> {
				return getExpressionForApply();
				}
			-|	UnknownApply() ->> {
				return TypedFora::Expression::TransferToInterpreter(metadataForNode());
				}
			-|	_ ->> {
				lassert_dump(false,
					"tried to call Builder::getExpression for bad instruction:\n"
						<< mInstruction->toString(true)
					);
				}
			;

		lassert(false);
		}
	catch(std::logic_error& e)
		{
		throw std::logic_error(e.what() + std::string("\nInstruction = \n") +
			mInstruction->toString(false)
			);
		}
	};

TypedFora::Expression
Builder::getExpressionForKnownResult()
	{
	CSTValue constant = mInstruction->applyResultIsKnown()->first;

	JudgmentOnValue jov = JudgmentOnValue::Constant(constant);

	TypedFora::Variable constantVar =
		TypedFora::Variable::Temp(
			TypedFora::Type(jov, TypedFora::RefcountStyle::AsValueUnowned())
			);

	//we can just jump to the right one
	TypedFora::Expression e = generateTerminator(
		getContinuation(mInstruction->applyResultIsKnown()->second),
		null() << constantVar
		).first;

	return TypedFora::Expression::Let(
		constantVar,
		TypedFora::Expression::Constant(constant),
		e
		);
	}

TypedFora::Expression Builder::getExpressionForBranch()
	{
	@match InstructionBody(mInstruction->getInstructionBody())
		-|	Branch(ix) ->> {
			Continuation& ifTrue = getContinuation(0);
			Continuation& ifFalse = getContinuation(1);

			return TypedFora::Expression::If(
					mVariables[ix].expr(),
					generateTerminator(ifTrue),
					generateTerminator(ifFalse),
					(ifTrue.executionCount() + 1.0) /
						(ifTrue.executionCount() + ifFalse.executionCount() + 2.0)
					);
			};
	}

TypedFora::Expression
Builder::getExpressionForSwitch()
	{
	@match InstructionBody(mInstruction->getInstructionBody())
		-|	Switch(ix, valuesToMatch, mapping, otherwise) ->> {

			const JudgmentOnValue& switchJOV = mJovs[ix];

			TypedFora::Expression curTerminator =
				generateTerminator(getContinuation(otherwise));

			uword_t executionCount = 2 + getContinuation(otherwise).executionCount();

			for (long k = ((long)valuesToMatch.size()) - 1; k >= 0; k--)
				{
				if (!switchJOV.disjoint(valuesToMatch[k]))
					curTerminator =
						TypedFora::Expression::If(
							TypedFora::Abi::exprTestArgsAreIdentical(
								TypedFora::Expression::Constant(valuesToMatch[k]),
								mVariables[ix].expr()
								),
							generateTerminator(getContinuation(k)),
							curTerminator,
							getContinuation(k).executionCount() / executionCount
							);

				executionCount += getContinuation(k).executionCount();
				}

			return curTerminator;
			}
	}

namespace {

bool tupleExpandNeverPossible(uword_t arity, bool arityIsExact, const JudgmentOnValue& eltJOV)
	{
	if (eltJOV.disjoint(jovTuple()))
		return true;

	//check whether we know its a tuple. if not, and it's also not disjoint from (...*)
	//then we don't have enough information

	if (!eltJOV.isTuple())
		return false;

	const JOVT& tupleJOVT = eltJOV.getTuple().jov();

	Nullable<bool> possible =
		arityIsExact ? tupleJOVT.arityEqualTo(arity) : tupleJOVT.arityGreaterThanOrEqualTo(arity);

	if (possible && !*possible)
		return false;

	return false;
	}

}

TypedFora::Expression
Builder::getExpressionForTupleExpand()
	{
	@match InstructionBody(mInstruction->getInstructionBody())
		-|	TupleExpand(whichArgument, arity, arityIsExact) ->> {

			lassert_dump(whichArgument < mJovs.size(), "improperly formed TupleExpand call");

			if (tupleExpandNeverPossible(arity, arityIsExact, mJovs[whichArgument]))
				return generateTerminator(getContinuation(1));

			return TypedFora::Expression::If(
				TypedFora::Expression::IsTuple(mVariables[whichArgument].expr(), arity, arityIsExact),
				generateTerminator(
					getContinuation(0),
					null()
					).first,
				generateTerminator(getContinuation(1)),
				(getContinuation(0).executionCount() + 1.0) /
					(getContinuation(0).executionCount() + getContinuation(1).executionCount() + 1.0)
				);
			}
	}



Nullable<TypedFora::Expression>
Builder::getExpressionShortCircuitApplyIfResultUnused()
	{
	//first, lets see if we use the result. if we don't, and it's CST,
	//we don't need to generate code...
	if (mInstruction->resultJOA().joa().size() == 1 && !mInstruction->resultJOA().joa().hasSideEffects())
		{
		Continuation& cont(
			mInstruction->resultJOA().joa().jovAndIsExceptionByIndex(0).second ?
				getContinuation(1) :
				getContinuation(0)
			);

		if (!cont.usesResult())
			{
			ImmutableTreeVector<JudgmentOnValue> applyJOVs = mInstruction->getApplyJOVsInTargetCFG();
			bool allAreCST = true;
			for (long k = 0; k < applyJOVs.size(); k++)
				{
				Nullable<bool> isCST = applyJOVs[k].isCST();
				if (!isCST || !*isCST)
					allAreCST = false;
				}

			if (allAreCST)
				return null() << generateTerminator(cont);
			}
		}

	return null();
	}


pair<TypedFora::CallTarget, JOVT>
Builder::getExpressionComputeApplyTargetForJumpApply(
						ApplyArgs& outApplyArgs
						)
	{
	@match InstructionBody(mInstruction->getInstructionBody())
		-|	JumpApply(a, targetInstruction, isTupleCall) ->> {
			outApplyArgs = a;

			JudgmentOnValueTuple targetJovt;

			ImmutableTreeVector<JOV> targetInstructionJovs = targetInstruction->jovsWithConstantPropagationOrRootJovs();
			if (isTupleCall)
				targetJovt =
					JudgmentOnValueTuple::Unnamed(
						targetInstructionJovs.slice(0, -1)
						) +
					JudgmentOnValueTupleExtras::Extras(
						targetInstructionJovs.back()
						);
			else
				targetJovt = JudgmentOnValueTuple::Unnamed(targetInstructionJovs);

			Nullable<TypedFora::CallTarget> target = mGenerator.getTarget(targetInstruction);

			//we're calling a specific function (that we've already compiled)
			//at 'targetInstruction'. if it's empty, or uncompiled,
			//we have to call the interpreter
			if (target)
				return make_pair(*target, targetJovt);
			else
				{
				lassert_dump(false,
					"jumpApply should always be pointed at a valid target! Instruction = \n"
						<< mInstruction->toString(false)
					);
				}
			}
		;
	}

pair<TypedFora::CallTarget, JOVT>
Builder::getExpressionComputeApplyTargetForAxiomApply(
						ApplyArgs& outApplyArgs
						)
	{
	@match InstructionBody(mInstruction->getInstructionBody())
		-|	AxiomApply(a, axiomEncodedJOA) ->> {
			outApplyArgs = a;

			JOVT applySignature = outApplyArgs.flattenedApplyTuple(mJovs);

			Nullable<Axiom> axiom;

			JudgmentOnAction specializations = mInstruction->getAxiomSpecializations();

			if (specializations.size())
				axiom = mAxioms->axiom(
					*mTypedForaCompiler,
					applySignature,
					mInstruction->resultJOA().joa()
					);
			else
				axiom = mAxioms->axiom(
					*mTypedForaCompiler,
					applySignature
					);

			lassert_dump(axiom,
				"expected result for signature " << prettyPrintString(applySignature) << (
					specializations.size() ?
						" and JOA " + prettyPrintString(specializations)
							+ " != " + prettyPrintString(axiomEncodedJOA)
							+ ". " + (mAxioms->axiom(
					*mTypedForaCompiler,
					applySignature
					) ? "yes":"no"):
						std::string())
				);

			@match Nullable<Axiom>(axiom)
				-|	Value(Native(callSignature, sig, graph)) ->> {
					return make_pair(
						TypedFora::CallTarget::Subgraph(
							*graph,
							TypedFora::BlockID::entry()
							),
						callSignature
						);
					}
					;
			}
		;
	}

pair<TypedFora::CallTarget, JOVT>
Builder::getApplyCallTarget(ApplyArgs& outApplyArgs)
	{
	@match InstructionBody(mInstruction->getInstructionBody())
		-|	AxiomApply(a, _) ->> {
			return getExpressionComputeApplyTargetForAxiomApply(
				outApplyArgs
				);
			}
		-|	JumpApply(a, tInst, isTupleCall) ->> {
			return getExpressionComputeApplyTargetForJumpApply(
				outApplyArgs
				);
			}
		-|	UnknownApply(a) ->> {
			lassert_dump(false, "we should use the new interpreter transfer function here.");
			}
		;
	}

TypedFora::Expression Builder::inlinedApplyExpression(
						const ImmutableTreeVector<TypedFora::Variable>& boundVars,
						const TypedFora::Expression& expression,
						const ImmutableTreeVector<TypedFora::Expression>& arguments,
						const TypedFora::Continuation& continuation
						)
	{
	try {
		map<TypedFora::Variable, TypedFora::Variable> varmap;

		ImmutableTreeVector<pair<TypedFora::Variable, TypedFora::Expression> > letBindings;

		for (long k = 0; k < boundVars.size(); k++)
			{
			if (arguments[k].isVar())
				varmap[boundVars[k]] = arguments[k].getVar().var();
			else
				{
				TypedFora::Variable newVar = TypedFora::Variable::Temp(boundVars[k].type());
				varmap[boundVars[k]] = newVar;

				letBindings = letBindings + make_pair(newVar, arguments[k]);
				}
			}

		ImmutableTreeVector<TypedFora::MetadataStackFrame> metas =
							metadataForNode();

		return
			wrapExpressionInLetBindings(
				letBindings,
				TypedFora::Expression::Let(
					continuation.var(),
					TypedFora::Transforms::pushDownMetadata(
						TypedFora::Transforms::renameVariables(
							expression,
							varmap
							),
						metas
						),
					continuation.resumption()
					)
				);
		}
	catch(std::logic_error& e)
		{
		throw std::logic_error(std::string(e.what()) +
			"\nexpression we're inlining has type " + prettyPrintString(expression.type())\
			 + "\nexpression = " + prettyPrintString(expression)
			 + "\nexpression we're flowing to expects " + prettyPrintString(continuation.var().type())
			 + "\nour resultJOA is " + prettyPrintString(mInstruction->resultJOA())
			 + "\nour target jump is " + (mInstruction->isJumpApply() ? mInstruction->flowsTo(0)->toString(false) : std::string("axiom"))
			);
		}
	}

namespace {

//determines whether this instruction returns its results immediately,
//in which case we may tail-call optimize if the target of the apply is in our own group
bool instructionReturnsResultsImmediately(InstructionPtr inInstruction)
	{
	for (long k = 0; k < inInstruction->getContinuationCount(); k++)
		{
		Continuation& continuation(inInstruction->getContinuation(k));

		if (!continuation.isReturn() ||
				(continuation.getIndexInCfgNode() == 0 && continuation.returnIsException()) ||
				(continuation.getIndexInCfgNode() == 1 && !continuation.returnIsException())
				)
			return false;
		}

	return true;
	}

}

Nullable<TypedFora::Expression> Builder::getExpressionForTailCallRecursion(
											const ImmutableTreeVector<TypedFora::Expression>& args
											)
	{
	@match InstructionBody(mInstruction->getInstructionBody())
		-|	JumpApply(applyArgs, tInst, isTupleCall) ->> {

			Nullable<TypedFora::BlockID> callTargetBlockID =
							mGenerator.getTransferTargetBlockID(tInst);

			if (!callTargetBlockID || !instructionReturnsResultsImmediately(mInstruction))
				return null();

			return null() << TypedFora::Expression::Jump(
				*callTargetBlockID,
				args
				);
			}
		-| _ ->> {
			return null();
			}
	}

TypedFora::Expression Builder::getExpressionForApply()
	{
		{
		Nullable<TypedFora::Expression> tr =
			getExpressionShortCircuitApplyIfResultUnused();
		if (tr)
			return *tr;
		}

	//one of JumpApply, AxiomApply, or UnknownApply
	ApplyArgs applyArgs;

	pair<TypedFora::CallTarget, JOVT> target = getApplyCallTarget(applyArgs);

	TypedFora::ResultSignature resultJOAProducedByApply = target.first.resultSignature();

	//map each element of the JOA into a terminator
	pair<ImmutableTreeVector<TypedFora::Continuation>,
							ImmutableTreeVector<TypedFora::Continuation> > conts =
		getExpressionGenerateApplyContinuations(
			resultJOAProducedByApply
			);

	ImmutableTreeVector<pair<TypedFora::Variable, TypedFora::Expression> > letBindings;

	ImmutableTreeVector<TypedFora::Expression> args;

	try {
		args = getExpressionComputeApplyArgs(
			applyArgs,
			target.second,
			letBindings
			);
		}
	catch(std::logic_error& e)
		{
		throw std::logic_error(string(e.what()) +
			"\napplyArgs signature = " + prettyPrintString(applyArgs.applySignature()) +
			"\ntarget = " + prettyPrintString(target.second)
			);
		}

	TypedFora::Expression expr;

	try {
		//check if this is a tail-call back into the same CIG
		Nullable<TypedFora::Expression> tailCallJump =
			getExpressionForTailCallRecursion(args);

		if (tailCallJump)
			expr = *tailCallJump;
		else
			{
			bool isSimple = false;

			//see if this is an inlinable apply operation
			@match TypedFora::CallTarget(target.first)
				-| Subgraph(SingleExpression(vars, expression, resultType, isException)) ->> {

					if ( (isException ? conts.second : conts.first).size() == 1)
						{
						expr = inlinedApplyExpression(
							vars,
							expression,
							args,
							isException ? conts.second[0] : conts.first[0]
							);
						isSimple = true;
						}
					}
				-| _ ->> {
					}
					;

			if (!isSimple)
				expr =
					TypedFora::Expression::Call(
						target.first,
						args,
						TypedFora::ContinuationFrame(
							conts.first,
							conts.second
							),
						metadataForNode()
						);
			}
		}
	catch(...)
		{
		LOG_WARN << "instruction = " << mInstruction->toString(false);
		LOG_WARN << "resultJOA = " << prettyPrintString(mInstruction->resultJOA()) << "\n";
		LOG_WARN << "target resultSignature = " << prettyPrintString(target.first.resultSignature()) << "\n";
		LOG_WARN << "CallTarget = " << prettyPrintString(target.first) << "\n";
		LOG_WARN << mInstruction->toString() << "\n";
		throw;
		}

	return wrapExpressionInLetBindings(letBindings, expr);
	}

pair<ImmutableTreeVector<TypedFora::Continuation>,
	ImmutableTreeVector<TypedFora::Continuation> >
Builder::getExpressionGenerateApplyContinuations(
								const TypedFora::ResultSignature& inSignature
								)
	{
	ImmutableTreeVector<TypedFora::Continuation>  contsNormal;
	ImmutableTreeVector<TypedFora::Continuation>  contsException;

	for (uword_t k = 0; k < inSignature.size(); k++)
		{
		bool isException = inSignature[k].second;
		TypedFora::Type curType = inSignature[k].first;

		TypedFora::Continuation cont =
			generateTerminatorContinuation(
				getContinuation(isException ? 1 : 0),
				curType
				);

		if (isException)
			contsException = contsException + cont;
		else
			contsNormal = contsNormal + cont;
		}

	return make_pair(contsNormal, contsException);
	}

pair<
	ImmutableTreeVector<TypedFora::Expression>,
	ImmutableTreeVector<TypedFora::MakeTupleArgument>
	>
Builder::getExpressionComputeApplyArgsAndTupleExpressions(
					const ApplyArgs& inArgs,
					const JOVT& inTargetJovt
					)
	{
	ImmutableTreeVector<TypedFora::Expression> args;
	ImmutableTreeVector<TypedFora::MakeTupleArgument> makeTupleArgs;

	for (uword_t k = 0; k < inArgs.size(); k++)
		{
		TypedFora::Expression expr;

		if (inArgs.isConstant(k))
			expr = TypedFora::Expression::Constant(inArgs.constant(k));
			else
		if (inArgs.isIndex(k))
			expr = TypedFora::Expression::Var(mVariables[inArgs.index(k)]);
		else
			{
			lassert(false);
			}

		if (inArgs.isTupleCall(k))
			makeTupleArgs = makeTupleArgs +
				TypedFora::MakeTupleArgument::TupleCall(expr);
		else
			{
			if (makeTupleArgs.size() || args.size() == inTargetJovt.jovs().size())
				makeTupleArgs = makeTupleArgs +
					TypedFora::MakeTupleArgument::Normal(inArgs.symbol(k), expr);
			else
				args = args + expr;
			}
		}

	return make_pair(args, makeTupleArgs);
	}


ImmutableTreeVector<TypedFora::Expression>
Builder::getExpressionComputeApplyArgs(
					const ApplyArgs& inArgs,
					const JOVT& inTargetJovt,
					ImmutableTreeVector<pair<TypedFora::Variable,
						TypedFora::Expression> >& outLetBindings
					)
	{
	if (mInstruction->getInstructionBody().isJumpApply())
		{
		//this is an expansion, so we should pack exactly one argument per apply argument
		ImmutableTreeVector<TypedFora::Expression> expressions;

		for (uword_t k = 0; k < inArgs.size(); k++)
			{
			TypedFora::Expression expr;

			if (inArgs.isConstant(k))
				expr = TypedFora::Expression::Constant(inArgs.constant(k));
				else
			if (inArgs.isIndex(k))
				expr = TypedFora::Expression::Var(mVariables[inArgs.index(k)]);
			else
				{
				lassert(false);
				}

			if (inArgs.isTupleCall(k))
				expr = TypedFora::Expression::MakeTuple(
					emptyTreeVec() +
						TypedFora::MakeTupleArgument::TupleCall(expr)
					);

			expressions = expressions + expr;
			}

		return expressions;
		}
	else
		{
		//this is a native axiom, so we should pack according to the target JOVT
		pair<
			ImmutableTreeVector<TypedFora::Expression>,
			ImmutableTreeVector<TypedFora::MakeTupleArgument>
			> expressionsAndTupleArgs;

		expressionsAndTupleArgs =
			getExpressionComputeApplyArgsAndTupleExpressions(
				inArgs,
				inTargetJovt
				);

		lassert(expressionsAndTupleArgs.first.size() <= inTargetJovt.jovs().size());

		//the tuple at the end might be too big, in which case we have to bind it in
		//a  let statement and unpack it into the target arguments
		uword_t tupleArgumentsToConsumeExplicitly =
			inTargetJovt.jovs().size() - expressionsAndTupleArgs.first.size();

		TypedFora::Expression makeTupleExpr =
			TypedFora::Expression::MakeTuple(expressionsAndTupleArgs.second);

		TypedFora::Variable tupleVar = TypedFora::Variable::Temp(*makeTupleExpr.type());

		//only push the make tuple expr if we really need it
		if (expressionsAndTupleArgs.second.size() || inTargetJovt.hasExtras())
			outLetBindings = outLetBindings + make_pair(tupleVar, makeTupleExpr);

		ImmutableTreeVector<TypedFora::Expression> exprs = expressionsAndTupleArgs.first;
		for (long k = 0; k < tupleArgumentsToConsumeExplicitly; k++)
			exprs = exprs + TypedFora::Expression::GetItem(tupleVar.expr(), k);

		if (inTargetJovt.hasExtras())
			{
			if (tupleArgumentsToConsumeExplicitly > 0)
				exprs = exprs +
					TypedFora::Expression::GetSlice(
						tupleVar.expr(),
						tupleArgumentsToConsumeExplicitly
						);
			else
				exprs = exprs + tupleVar.expr();
			}

		return exprs;
		}
	}



TypedFora::Expression
Builder::generateTerminator(Continuation& tc)
	{
	return generateTerminator(tc, null()).first;
	}

TypedFora::Continuation
Builder::generateTerminatorContinuation(
								Continuation& tc,
								const TypedFora::Type& result
								)
	{
	TypedFora::Variable var =
		TypedFora::Variable::Temp(result);

	pair<TypedFora::Expression, double> p = generateTerminator(tc, null() << var);
	return TypedFora::Continuation(var, p.first, null(), p.second);
	}


pair<TypedFora::Expression, double>
				Builder::generateTerminatorForReturnContinuation(
					Continuation& inContinuation,
					const Nullable<TypedFora::Variable>& resultVar
					)
	{
	const ContinuationArgs& args = inContinuation.getContinuationArgs();

	bool isException = inContinuation.returnIsException();

	TypedFora::Expression returnExpr;

	if (args.isResult(0))
		returnExpr = resultVar->expr();
		else
	if (args.isConstant(0))
		returnExpr = TypedFora::Expression::Constant(args.constant(0));
		else
	if (args.isIndex(0))
		returnExpr = TypedFora::Expression::Var(mVariables[args.index(0)]);
		else
	if (args.isTupleExpandElement(0) || args.isTupleExpandRemainingElements(0))
		{
		uword_t arity = args.tupleExpandArity();
		bool arityIsExact = args.tupleExpandArityIsExact();

		if (args.isTupleExpandElement(0))
			returnExpr = TypedFora::Expression::GetItem(
				mVariables[args.tupleExpandArgIndex()].expr(),
				args.getTupleExpandElementIndex(0)
				);
		else
			returnExpr = TypedFora::Expression::GetSlice(
				mVariables[args.tupleExpandArgIndex()].expr(),
				arity
				);
		}
		else
	if (args.isMakeTuple(0))
		returnExpr = TypedFora::Expression::MakeTuple(
			makeTupleExpression(
				args,
				args.getMakeTupleArgs(0),
				resultVar
				)
			);
	else
		{
		lassert(false);
		}


	double probability = 1.0;

	return make_pair(
		TypedFora::Expression::Return(isException, returnExpr),
		probability
		);
	}

pair<TypedFora::Expression, double>
				Builder::generateTerminatorTransferToBlock(
					Continuation& inContinuation,
					ContinuationElement* continuationElement,
					TypedFora::BlockID inBlockID,
					const Nullable<TypedFora::Variable>& inResultVar
					)
	{
	return make_pair(
		TypedFora::Expression::Jump(
			inBlockID,
			jumpExpressions(inContinuation, inResultVar)
			),
		continuationElement->executionCount()+1.0
		);
	}


Nullable<pair<TypedFora::Expression, double> >
				Builder::tryInlineTransferToBlock(
					Continuation& inContinuation,
					ContinuationElement* continuationElement,
					InstructionPtr targetInstruction,
					const Nullable<TypedFora::Variable>& inResultVar
					)
	{
	if (mGenerator.hasInlinedTarget(targetInstruction))
		{
		ImmutableTreeVector<TypedFora::Expression> jumpExprs =
			jumpExpressions(inContinuation, inResultVar);

		return null() <<
			make_pair(
				*tryInlineTransferToBlockGivenExpressions(jumpExprs, targetInstruction),
				continuationElement->executionCount()+1.0
				);
		}

	return null();
	}

Nullable<TypedFora::Expression>
				Builder::tryInlineTransferToBlockGivenExpressions(
					const ImmutableTreeVector<TypedFora::Expression>& jumpExprs,
					InstructionPtr targetInstruction
					)
	{
	if (mGenerator.hasInlinedTarget(targetInstruction))
		{
		ImmutableTreeVector<pair<TypedFora::Variable, TypedFora::Expression> > letBindings;

		ImmutableTreeVector<TypedFora::Variable> transferVars;

		for (long k = 0; k < jumpExprs.size(); k++)
			{
			TypedFora::Variable tempVar = TypedFora::Variable::Temp(*jumpExprs[k].type());
			letBindings = letBindings + make_pair(tempVar, jumpExprs[k]);
			transferVars = transferVars + tempVar;
			}

		TypedFora::Expression contExpr =
			*mGenerator.getInlinedTarget(transferVars, targetInstruction);

		return null() << wrapExpressionInLetBindings(letBindings, contExpr);
		}

	return null();
	}

pair<TypedFora::Expression, double> Builder::generateTransferToInterpreterTerminator(
				Continuation& inContinuation,
				const Nullable<TypedFora::Variable>& resultVar
				)
	{
	return make_pair(
		TypedFora::Expression::TransferToInterpreter(
			resultVar ?
					metadataForContinuation(
						inContinuation.getIndexInCfgNode(),
						*resultVar
						)
				:	metadataForNode()
			),
		0
		);
	}

pair<TypedFora::Expression, double>
				Builder::generateTerminator(
					Continuation& inContinuation,
					const Nullable<TypedFora::Variable>& resultVar
					)
	{
	if (inContinuation.usesResult())
		lassert_dump(resultVar,
			"don't have a JOV to supply to continuation:\n" << inContinuation.toString());

	if (inContinuation.isReturn())
		return generateTerminatorForReturnContinuation(inContinuation, resultVar);

	ContinuationElement* continuationElement =
		terminatorGetContinuationElementForTransfer(inContinuation, resultVar);

	if (!continuationElement)
		{
		//there's no way to continue with this continuation within the current control flow graph.
		//This is probably because the graph isn't fully constructed, so we should transfer to
		//the interpreter
		return generateTransferToInterpreterTerminator(inContinuation, resultVar);
		}

	InstructionPtr targetInstruction = continuationElement->getTargetInstructionPtr();

	if (targetInstruction->isRootInstruction())
		//transfer directly into the interpreter
		return generateTransferToInterpreterTerminator(inContinuation, resultVar);

	Nullable<pair<TypedFora::Expression, double> > inlinedTarget =
		tryInlineTransferToBlock(inContinuation, continuationElement, targetInstruction, resultVar);

	if (inlinedTarget)
		return *inlinedTarget;

	Nullable<TypedFora::BlockID> callTargetBlockID = mGenerator.getTargetBlockID(targetInstruction);

	if (callTargetBlockID)
		return generateTerminatorTransferToBlock(
			inContinuation, continuationElement, *callTargetBlockID, resultVar
			);

	Nullable<TypedFora::TransferTarget> transferTarget =
											mGenerator.getTransferTarget(targetInstruction);

	if (!transferTarget)
		{
		lassert_dump(
			!Fora::Compiler::CompiledInstructionGroup::get(targetInstruction) ||
				targetInstruction->getInstructionBody().isCached(),
			"Transferring to the interpreter without being a cachecall node, "
				<< "despite the existence of a CIG."
				<< targetInstruction->toString(false)
			);

		return make_pair(
			TypedFora::Expression::TransferToInterpreter(
				resultVar ?
						metadataForContinuation(
							continuationElement->getContinuationPtr()->getIndexInCfgNode(),
							*resultVar
							)
					:	metadataForNode()
				),
			0
			);
		}

	return jumpToTarget(inContinuation, resultVar, *transferTarget);
	}

pair<TypedFora::Expression, double>
				Builder::jumpToTarget(
					Continuation& inContinuation,
					const Nullable<TypedFora::Variable>& inResultVar,
					const TypedFora::TransferTarget& inTarget
					)
	{
	return make_pair(
		TypedFora::Expression::TransferTo(
			inTarget,
			jumpExpressions(inContinuation, inResultVar),
			emptyTreeVec()
			),
		1.0
		);
	}

ContinuationElement*  Builder::terminatorGetContinuationElementForTransfer(
										Continuation& inContinuation,
										const Nullable<TypedFora::Variable>& inResultVar
										)
	{
	ContinuationElement* continuation;

	if (inResultVar)
		continuation = inContinuation.find(inResultVar->type().jov());
	else
		continuation = inContinuation.firstContinuationElementPtr();

	return continuation;
	}


ImmutableTreeVector<TypedFora::MakeTupleArgument> Builder::makeTupleExpression(
							const ContinuationArgs& contArgs,
							const ImmutableTreeVector<ControlFlowContinuationTupleArg>& inArg,
							const Nullable<TypedFora::Variable>& inResultVar
							)
	{
	ImmutableTreeVector<TypedFora::MakeTupleArgument> tr;
	for (long k = 0; k < inArg.size(); k++)
		tr = tr + continuationExpression(contArgs, inArg[k], inResultVar);
	return tr;
	}


ImmutableTreeVector<TypedFora::Expression> Builder::jumpExpressions(
					Continuation& inContinuation,
					const Nullable<TypedFora::Variable>& inResultVar
					)
	{
	const ControlFlowContinuation& continuation = inContinuation.getControlFlowContinuation();
	lassert(continuation.isNode());

	const ImmutableTreeVector<ControlFlowContinuationArg>& args = continuation.getNode().args();

	ImmutableTreeVector<TypedFora::Expression> exprs;

	for (long k = 0; k < args.size(); k++)
		exprs = exprs + continuationExpression(
							inContinuation.getContinuationArgs(),
							args[k],
							inResultVar
							);

	return exprs;
	}

TypedFora::MakeTupleArgument Builder::continuationExpression(
							const ContinuationArgs& contArgs,
							const ControlFlowContinuationTupleArg& inArg,
							const Nullable<TypedFora::Variable>& inResultVar
							)
	{
	@match ControlFlowContinuationTupleArg(inArg)
		-|	Normal(fieldName, arg) ->> {
			return TypedFora::MakeTupleArgument::Normal(
				fieldName,
				continuationExpression(contArgs, arg, inResultVar)
				);
			}
		-|	TupleCall(arg) ->> {
			return TypedFora::MakeTupleArgument::TupleCall(
				continuationExpression(contArgs, arg, inResultVar)
				);
			}
	}

TypedFora::Expression Builder::continuationExpression(
							const ContinuationArgs& contArgs,
							const ControlFlowContinuationArg& inArg,
							const Nullable<TypedFora::Variable>& inResultVar
							)
	{
	@match ControlFlowContinuationArg(inArg)
		-|	Arg(Arg(index)) ->>  {
			return mVariables[index].expr();
			}
		-|	Arg(Constant(c)) ->> {
			return TypedFora::Expression::Constant(c);
			}
		-|	Result() ->> {
			return inResultVar->expr();
			}
		-|	TupleElement(index) ->> {
			return TypedFora::Expression::GetItem(
						mVariables[contArgs.tupleExpandArgIndex()].expr(),
						index
						);
			}
		-|	TupleRemainingElements() ->> {
			return TypedFora::Expression::GetSlice(
				mVariables[contArgs.tupleExpandArgIndex()].expr(),
				contArgs.tupleExpandArity()
				);
			}
		-|	MakeTuple(args) ->> {
			ImmutableTreeVector<TypedFora::MakeTupleArgument> applyArgs;
			for (long k = 0;  k < args.size(); k++)
				applyArgs = applyArgs + continuationExpression(contArgs, args[k], inResultVar);
			return TypedFora::Expression::MakeTuple(applyArgs);
			}
	}

Continuation& Builder::getContinuation(uword_t index)
	{
	return mInstruction->getContinuation(index);
	}

};


