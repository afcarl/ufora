/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/
#include "InstructionBody.hppml"
#include "Instruction.hppml"

using namespace Fora::Compiler::CompilerInstructionGraph;

void CPPMLPrettyPrint<Fora::Compiler::CompilerInstructionGraph::InstructionBody>::prettyPrint(
									CPPMLPrettyPrintStream& s,
									const Fora::Compiler::CompilerInstructionGraph::InstructionBody& t
									)
	{
	@match InstructionBody(t)
		-|	Uninitialized() ->> {
			s << "Uninitialized";
			}
		-|	Jump() ->> {
			s << "Jump";
			}
		-|	Branch(b) ->> {
			s << "Branch("  << b << ")";
			}
		-|	TupleExpand(arg, arity, arityIsHard) ->> {
			s << "TupleExpand(" << arg << ", " << (arityIsHard?"==":">=") << " " << arity << ")";
			}
		-|	Switch(b) ->> {
			s << "Switch(" << b << ")";
			}
		-|	JumpApply(_,t,_) ->> {
			s << "jump apply -> " << t->toString(true);
			}
		-|	AxiomApply(args, joa) ->> {
			s << "axiom -> " << joa;
			}
		-|	UnknownApply() ->> {
			s << "unknown apply";
			}
		-|	Cached() ->> {
			s << "cached";
			}
		;
	}

Nullable<uword_t> Fora::Compiler::CompilerInstructionGraph::InstructionBody::getTupleExpandIndex(void) const
	{
	@match InstructionBody(*this)
		-| TupleExpand(arg) ->> {
			return null() << arg;
			}
		-| _ ->> {
			return null();
			}
	}

bool InstructionBody::isApply(void) const
	{
	@match InstructionBody(*this)
		-| JumpApply() ->> { return true; }
		-| AxiomApply() ->> { return true; }
		-| UnknownApply() ->> { return true; }
		-| _ ->> { return false; }
	}

JOVT InstructionBody::flattenedApplyTuple(void) const
	{
	@match InstructionBody(*this)
		-| JumpApply(args) ->> {
			return args.flattenedApplyTuple(instructionPtr()->jovs());
			}
		-| AxiomApply(args) ->> {
			return args.flattenedApplyTuple(instructionPtr()->jovs());
			}
		-| UnknownApply(args) ->> {
			return args.flattenedApplyTuple(instructionPtr()->jovs());
			}
		-| _ ->> {
			throw standardLogicErrorWithStacktrace(
				"Can't ask for the apply JOVT of a non apply instruction"
				);
			}
	}

ImmutableTreeVector<JOV> InstructionBody::computeApplyJovsInTargetCFG(void) const
	{
	@match InstructionBody(*this)
		-| JumpApply(args) ->> {
			return args.jovsInTargetCFG(instructionPtr()->jovs());
			}
		-| AxiomApply(args) ->> {
			return args.jovsInTargetCFG(instructionPtr()->jovs());
			}
		-| UnknownApply(args) ->> {
			return args.jovsInTargetCFG(instructionPtr()->jovs());
			}
		-| _ ->> {
			throw standardLogicErrorWithStacktrace(
				"Can't ask for the apply JOVT of a non apply instruction"
				);
			}
	}

bool InstructionBody::computeApplyIsDeterministic(void) const
	{
	return !instructionPtr()->isRootInstruction() && JOV::Tuple(flattenedApplyTuple()).constant();
	}


