/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/
#pragma once

#include "ContinuationElement.hpp"
#include "InstructionJOA.hppml"

namespace Fora {
namespace Compiler {
namespace CompilerInstructionGraph {

//represents a set of exit points from an instruction,
//grouped by whether they're exceptions or normals
class Continuation {
	Continuation();
	Continuation(const Continuation& continuation);
	Continuation& operator=(const Continuation& continuation);

	Continuation(InstructionPtr instructionPtr, uword_t indexInInstruction, uword_t indexInCFGNode);

	void init(
			const ControlFlowContinuation& controlFlowContinuation,
			bool hasResult
			);

	void destroyContinuations(void);

	friend class Instruction;
	friend class ContinuationElement;

public:
	ContinuationElement* find(JudgmentOnValue inJOV);

	bool isReturn(void) const;

	const JudgmentOnResult& returnJOR(void) const;

	uword_t getIndexInInstruction(void) const;

	uword_t getIndexInCfgNode(void) const;

	bool isExceptionContinuation() const { return getIndexInCfgNode() == 1; }

	bool requiresResult(void) const;

	bool usesResult(void) const;

	bool returnIsException(void) const;

	bool isNone(void) const;

	string toString(void) const;

	string getName(void) const;

	//we should always have a 'first element' if we're not a return
	ContinuationElement* firstContinuationElementPtr(void) const;

	InstructionPtr getSourceInstruction(void) const;

	bool update(const JudgmentOnResult& inResult);

	InstructionJOA joa(void) const;

	const ContinuationArgs& getContinuationArgs(void) const;

	uint64_t executionCount(void);

	uword_t flowsToCount(void) const;	//number of known instructions that control flow could go to

	InstructionPtr flowsTo(uword_t ix) const; //one of the instructions

	const ControlFlowContinuation& getControlFlowContinuation(void) const;

private:
	ControlFlowContinuation mControlFlowContinuation;

	bool mIsNone;

	InstructionPtr mSourceInstructionPtr;

	bool mRequiresResult;

	uword_t mIndexInParent;

	uword_t mIndexInCFGNode;

	bool mIsReturn;

	bool mIfReturnIsException;

	ContinuationArgs mContinuationArgs;

	ContinuationElement* mFirstContinuationElementPtr;	//IFF not a return.

	Nullable<string> mLabel;

	JudgmentOnResult mReturnJOR;

	JudgmentOnResult mResultJOR;	//if mRequiresResult, then the JOR of the
									//result we're currently calibrated to

	void insertContinuationElement(
			ContinuationElement* continuationElementPtr,
			const JudgmentOnValue& jov
			);
	void updateContinuationElementPtrsOnFilter(const JudgmentOnResult& jor);
	void updateReturnJOR(const JudgmentOnResult& jor);
};


}
}
}

