/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/
#include "ApplyArgs.hppml"
#include "../../Core/Type.hppml"
#include "../../Judgment/ControlFlowGraphJudgmentUtil.hppml"
#include "../../Core/TupleCategory.hppml"
#include <boost/numeric/conversion/cast.hpp>

namespace Fora {
namespace Compiler {
namespace CompilerInstructionGraph {

ApplyArgs::ApplyArgs()
	{
	mRefCount = new  uword_t(1);

	mApplyCt = 0;
	mApplySource = new long[mApplyCt];
	mApplyConstants = new CSTValue[mApplyCt];
	mApplySymbols = new Nullable<Symbol>[mApplyCt];
	mApplyIsTupleCall = new bool[mApplyCt];
	mArgs = new ImmutableTreeVector<ControlFlowApplyArg>();
	mApplySignature = new ApplySignature();
	}

ApplyArgs::ApplyArgs(const ApplyArgs& in)
	{
	mApplyCt = in.mApplyCt;
	mRefCount = in.mRefCount;
	(*mRefCount)++;
	mApplyIsTupleCall = in.mApplyIsTupleCall;
	mApplySymbols = in.mApplySymbols;
	mApplySource = in.mApplySource;
	mApplyConstants = in.mApplyConstants;
	mArgs = in.mArgs;
	mApplySignature = in.mApplySignature;
	}

ApplyArgs& ApplyArgs::operator=(const ApplyArgs& in)
	{
	if (this == &in)
		return *this;

	drop();

	mApplyCt = in.mApplyCt;
	mRefCount = in.mRefCount;
	(*mRefCount)++;
	mApplyIsTupleCall = in.mApplyIsTupleCall;
	mApplySymbols = in.mApplySymbols;
	mApplySource = in.mApplySource;
	mApplyConstants = in.mApplyConstants;
	mArgs = in.mArgs;
	mApplySignature = in.mApplySignature;

	return *this;
	}

ApplyArgs::ApplyArgs(const ImmutableTreeVector<ControlFlowArg>& args)
	{
	mArgs = new ImmutableTreeVector<ControlFlowApplyArg>();
	for (long k = 0; k < args.size(); k++)
		*mArgs = *mArgs + ControlFlowApplyArg::Normal(null(), args[k]);

	mRefCount = new uword_t(1);
	mApplyCt = args.size();
	mApplySource = new long[mApplyCt];
	mApplySymbols = new Nullable<Symbol>[mApplyCt];
	mApplyConstants = new CSTValue[mApplyCt];
	mApplyIsTupleCall = new bool[mApplyCt];

	mApplySignature = new ApplySignature(args.size());

	for (long k = 0; k < args.size(); k++)
		{
		mApplyIsTupleCall[k] = false;
		@match ControlFlowArg(args[k])
			-|	Arg(ht) ->> { mApplySource[k] = (long)ht; }
			-|	Constant(c) ->> { mApplyConstants[k] = c; mApplySource[k] = (long)-1; }
			;
		mApplySymbols[k] = null();
		}
	}

ApplyArgs::ApplyArgs(const ImmutableTreeVector<ControlFlowApplyArg>& args)
	{
	mArgs = new ImmutableTreeVector<ControlFlowApplyArg>(args);

	mApplyCt = args.size();
	mRefCount = new uword_t (1);
	mApplyIsTupleCall = new bool[mApplyCt];
	mApplySource = new long[mApplyCt];
	mApplySymbols = new Nullable<Symbol>[mApplyCt];

	mApplyConstants = new CSTValue[mApplyCt];

	ImmutableTreeVector<ApplyArgumentSignature> sigs;

	for (long k = 0; k < args.size(); k++)
		{
		@match ControlFlowApplyArg(args[k])
			-| Normal(field) ->> {
				sigs = sigs +
					ApplyArgumentSignature::Normal(field);
				}
			-| TupleCall() ->> {
				sigs = sigs +
					ApplyArgumentSignature::TupleCall();
				}
				;

		ControlFlowArg arg;
		@match ControlFlowApplyArg(args[k])
			-| Normal(field, a) ->> {
				mApplySymbols[k] = field;
				mApplyIsTupleCall[k] = false;
				arg = a;
				}
			-| TupleCall(a) ->> {
				mApplySymbols[k] = null();
				mApplyIsTupleCall[k] = true;
				arg = a;
				}
			;
		@match ControlFlowArg(arg)
			-| Arg(ht) ->> {
				mApplySource[k] = (long)ht;
				}
			-| Constant(c) ->> {
				mApplyConstants[k] = c.getReference();
				mApplySource[k] = (long)-1;
				}
			;
		}
	mApplySignature = new ApplySignature(sigs);
	}

void ApplyArgs::drop()
	{
	(*mRefCount)--;
	if (!*mRefCount)
		{
		delete mRefCount;
		delete mArgs;
		delete [] mApplyIsTupleCall;
		delete [] mApplySource;
		delete [] mApplyConstants;
		delete [] mApplySymbols;
		delete mApplySignature;
		}
	}

JudgmentOnValueTuple ApplyArgs::flattenedApplyTuple(ImmutableTreeVector<JudgmentOnValue> jovs) const
	{
	return getApplyTupleJudgment(*mArgs, jovs, null());
	}

ImmutableTreeVector<JudgmentOnValue> ApplyArgs::jovsInTargetCFG(ImmutableTreeVector<JudgmentOnValue> jovs) const
	{
	return getApplyJovJudgment(*mArgs, jovs, null());
	}

}
}
}

