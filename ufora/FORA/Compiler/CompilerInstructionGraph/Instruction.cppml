/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/
#include "Instruction.hppml"
#include "InstructionGraph.hppml"
#include "Continuation.hppml"
#include "../../Language/FunctionToCFG.hppml"
#include "../../ControlFlowGraph/ControlFlowGraphUtil.hppml"
#include <boost/thread.hpp>
#include "../../../core/Logging.hpp"
#include "../../../core/StringUtil.hpp"
#include "../../Axioms/Axioms.hppml"
#include "../../Interpreter/Instruction.hppml"
#include "../../Interpreter/InstructionGraph.hppml"

namespace Fora {
namespace Compiler {
namespace CompilerInstructionGraph {

Instruction::Instruction()
	{
	}

Instruction::Instruction(
	InstructionGraph* instructionGraphPtr,
	const InstructionPtr inRootInstructionPtr,
	const ControlFlowGraph* controlFlowGraphPtr,
	Nullable<string> label,
	const ImmutableTreeVector<JudgmentOnValue>& jovs
	) :
		mInstructionGraphPtr(instructionGraphPtr),
		mControlFlowGraphPtr(controlFlowGraphPtr),
		mLabel(label),
		mJOVs(jovs),
		mJOVsWithConstantPropagation(jovs),
		mJOA(JudgmentOnAction::Nonterminal(), false),
		mResultJOA(JudgmentOnAction::Unknown(), false),
		mIncomingApplyInstructionPtrs(),
		mIncomingContinuationElementsPtrs(),
		mInstructionBody(InstructionBody::Uninitialized(InstructionPtr(this))),
		mRootInstructionPtr(inRootInstructionPtr),
		mIsInitialized(false),
		mTimesCompiled(0)
	{
	lassert_dump(jovs.size() == (*controlFlowGraphPtr)[label].argCount(),
		"initialized an instruction with graph node "
			<< prettyPrintString((*controlFlowGraphPtr)[label])
			<< " which expects " << (*controlFlowGraphPtr)[label].argCount() << " arguments, "
			<< "but passed it " << jovs.size() << " judgments.\ngraph = "
			<< prettyPrintString(*controlFlowGraphPtr)
			<< "\njovs = " << prettyPrintString(jovs)
		 );

	hashValue(mJOVs);

	mHash = mControlFlowGraphPtr->hash() + hashValue(mLabel) + hashValue(mJOVs);

	if (mRootInstructionPtr)
		mHash = mHash + mRootInstructionPtr->hash();

	if (!inRootInstructionPtr)
		mRootInstructionPtr = this;

	if (!mLabel)
		mHash[0] = 0;
	}

Instruction::~Instruction()
	{
	LOG_CRITICAL << "Instructions should never be deleted! Backtrace: "
		<< Ufora::debug::StackTrace::getStringTrace();
	}

void Instruction::onNewChildInstruction(InstructionPtr ptr)
	{
	lassert(isRootInstruction());

	//see if any of our incoming guys would want to point at us
	std::vector<JOVT> incomingContinuationJOVTs;

	mAllIncomingContinuationElementsByTargetJOVs.judgmentsCoveredBy(
		JOVT::Unnamed(ptr->jovs()),
		incomingContinuationJOVTs
		);

	for (long k = 0; k < incomingContinuationJOVTs.size(); k++)
		{
		//we have to make a copy of the set because we're going to change it as we iterate
		std::set<ContinuationElement*> elements =
			mAllIncomingContinuationElementsByTargetJOVs[incomingContinuationJOVTs[k]];

		for (auto it = elements.begin(); it != elements.end(); ++it)
			(*it)->recomputeTarget();
		}

	//see if any of our incoming guys would want to point at us
	std::vector<JOVT> incomingApplyJOVTs;

	mAllIncomingApplyInstructionPtrs.judgmentsCoveredBy(
		JOVT::Unnamed(ptr->jovs()),
		incomingApplyJOVTs
		);

	for (long k = 0; k < incomingApplyJOVTs.size(); k++)
		{
		//we have to make a copy of the set because we're going to change it as we iterate
		std::set<InstructionPtr> elements =
			mAllIncomingApplyInstructionPtrs[incomingApplyJOVTs[k]];

		for (auto it = elements.begin(); it != elements.end(); ++it)
			(*it)->recomputeApplyTarget();
		}
	}

void Instruction::init()
	{
	lassert(mInstructionBody.isUninitialized());

	initializeInstructionBody();

	if (isRootInstruction())
		{
		mJOA = InstructionJOA(JudgmentOnAction::Nonterminal(), false);

		//seed the continuations with default values so that they're wired up correctly for the
		//interpreter.
		for (long k = 0; k < mContinuationsPtrs.size(); k++)
			if (mContinuationsPtrs[k]->requiresResult())
				mContinuationsPtrs[k]->update( JudgmentOnResult(JOV::Unknown()) );
		}
		else
	if (hasResult())
		{
		//seed the continuations with default values so that they're wired up correctly for the
		//interpreter.
		for (long k = 0; k < mContinuationsPtrs.size(); k++)
			if (mContinuationsPtrs[k]->requiresResult())
				{
				bool isException = mContinuationsPtrs[k]->getIndexInCfgNode() != 0;

				mContinuationsPtrs[k]->update( resultJOA().joa().jorByIsException(isException) );
				}
		}

	mIsInitialized = true;
	}

const ImmutableTreeVector<JudgmentOnValue>& Instruction::jovs(void) const
	{
	return mJOVs;
	}

const Nullable<ImmutableTreeVector<JudgmentOnValue> >&
								Instruction::jovsWithConstantPropagation(void) const
	{
	return mJOVsWithConstantPropagation;
	}

const ImmutableTreeVector<JOV>& Instruction::jovsWithConstantPropagationOrRootJovs() const
	{
	return mJOVsWithConstantPropagation ? *mJOVsWithConstantPropagation : mJOVs;
	}

const ApplyArgs& Instruction::getApplyArgs() const
	{
	@match InstructionBody(mInstructionBody)
		-|	JumpApply(a) ->> { return a; }
		-|	AxiomApply(a) ->> { return a; }
		-|	UnknownApply(a) ->> { return a; }
		;
	}

Nullable<pair<JOV, bool> > Instruction::getConstantPropagationJOV() const
	{
	if (!isApply())
		return null();

	JOVT applyJOVT =  getApplyArgs().flattenedApplyTuple(
		mJOVsWithConstantPropagation ? *mJOVsWithConstantPropagation : mJOVs
		);

	JudgmentOnAction resultJOA;

	if (applyJOVT.computeConstant())
		resultJOA = instructionGraph().getAxioms()->resolveAxiomDirectly(
				*instructionGraph().getTypedForaCompiler(),
				applyJOVT
				);
	else
		{
		auto axiomJOA = instructionGraph().getAxioms()->axiomJOA( applyJOVT );

		if (axiomJOA)
			{
			@match AxiomJOA(*axiomJOA)
				-|	Native(joa) ->> {
					resultJOA = joa;
					}
				-|	_ ->> {
					return null();
					}
			}
		}

	if (resultJOA.size() == 1 && resultJOA.jovAndIsExceptionByIndex(0).first.constant())
		return null() << resultJOA.jovAndIsExceptionByIndex(0);

	return null();
	}

void Instruction::setJovsWithConstantPropagation(
						const Nullable<ImmutableTreeVector<JudgmentOnValue> >& jovs
						)
	{
	if (jovs != mJOVsWithConstantPropagation)
		{
		mJOVsWithConstantPropagation = jovs;

		mInstructionGraphPtr->onInstructionConstantPropJovsChanged(this);
		}
	}

const Nullable<ImmutableTreeVector<JudgmentOnValue> >& Instruction::getCompilerEntrypointJOVs() const
	{
	return mCompilerEntrypointJOVs;
	}

void Instruction::setCompilerEntrypointJOVs(ImmutableTreeVector<JudgmentOnValue> jovs)
	{
	mCompilerEntrypointJOVs = jovs;
	}

void Instruction::clearCompilerEntrypointJOVs()
	{
	mCompilerEntrypointJOVs = null();
	}

const InstructionJOA&	Instruction::joa(void) const
	{
	return mJOA;
	}

bool Instruction::isApply(void) const
	{
	return mInstructionBody.isApply();
	}

bool Instruction::isUnknownApply(void) const
	{
	return mInstructionBody.isUnknownApply();
	}

bool Instruction::hasResult(void) const
	{
	return mInstructionBody.isApply() || mInstructionBody.isCached();
	}

bool Instruction::isJumpApply(void) const
	{
	return mInstructionBody.isJumpApply();
	}

void Instruction::initializeInstructionBodyForBranch(
					uint32_t ix,
					ControlFlowContinuation trueContinuation,
					ControlFlowContinuation falseContinuation
					)
	{
	JudgmentOnValue jov = mJOVs[ix];
	Nullable<bool> which = jov.convertToBoolean();

	if (which)
		{
		addContinuationDuringInit(
			*which ? trueContinuation : falseContinuation, false, *which ? 0 : 1
			);
		mInstructionBody = InstructionBody::Jump(this);
		}
	else
		{
		addContinuationDuringInit(trueContinuation, false, 0);
		addContinuationDuringInit(falseContinuation, false, 1);

		mInstructionBody = InstructionBody::Branch(this, ix);
		}
	}

void Instruction::initializeInstructionBodyForSwitchOnConstant(
					const CSTValue& cstValue,
					const ImmutableTreeMap<CSTValue, ControlFlowContinuation>& branches,
					ControlFlowContinuation otherwise
					)
	{
	if (branches[cstValue])
		{
		addContinuationDuringInit(
			*branches[cstValue],
			false,
			*branches.positionFor(cstValue)
			);
		}
	else
		{
		addContinuationDuringInit(
			otherwise,
			false,
			branches.size()
			);
		}
	mInstructionBody = InstructionBody::Jump(this);
	}

void Instruction::initializeJumpOrSwitchInstructionBody(
		const vector<pair<CSTValue, uword_t> >& continuationIndices,
		const ImmutableTreeVector<CSTValue>& cstValuesToCheck,
		uint32_t ix
		)
	{
	if (continuationIndices.size() == 0)
		{
		mInstructionBody = InstructionBody::Jump(this);
		lassert(mContinuationsPtrs.size() == 1);
		}
	else
		{
		//build the map in reverse order, since if there
		//are duplicate items, we want the first one to dominate
		//the expression
		map<hash_type, map<hash_type, uword_t > > indexMap;
		for (long k = ((long)continuationIndices.size() - 1); k >= 0; k--)
			{
			CSTValue cstValue = continuationIndices[k].first;
			indexMap[cstValue.type().hash()][
						cstValue.type().hashObject(&cstValue.cast<char>())
					] = continuationIndices[k].second;
			}

		mInstructionBody = InstructionBody::Switch(
												this,
												ix,
												cstValuesToCheck,
												indexMap,
												mContinuationsPtrs.size() - 1
												);
		}
	}

void Instruction::initializeInstructionBodyForSwitchOnIndex(
					uint32_t ix,
					const ImmutableTreeMap<CSTValue, ControlFlowContinuation>& branches,
					ControlFlowContinuation otherwise
					)
	{
	JOV jov = mJOVs[ix];
	if (jov.constant())
		{
		initializeInstructionBodyForSwitchOnConstant(*jov.constant(), branches, otherwise);
		}
	else
		{
		ImmutableTreeVector<CSTValue> cstValuesToCheck;
		vector<pair<CSTValue, uword_t> > continuationIndices;

		for (long k = 0; k <= branches.size(); k++)
			if (k == branches.size() || jov.covers(JOV::Constant(branches.pairAtPosition(k).first)))
				{
				addContinuationDuringInit(
					k < branches.size() ?
							branches.pairAtPosition(k).second
						:	otherwise,
					false,
					k
					);

				if (k < branches.size())
					{
					CSTValue cstValue = branches.pairAtPosition(k).first;
					cstValuesToCheck = cstValuesToCheck + cstValue;
					continuationIndices.push_back(
						make_pair(cstValue, mContinuationsPtrs.size() - 1)
						);
					}
				}
		initializeJumpOrSwitchInstructionBody(continuationIndices, cstValuesToCheck, ix);
		}
	}

void Instruction::initializeInstructionBodyForExpandApply(
		const ControlFlowGraph& inGraph,
		const ApplyArgs& applyArgs
		)
	{
	JOVT applyJOVT = applyArgs.flattenedApplyTuple(jovs());

	InstructionPtr instructionPtr;

	if (isRootInstruction())
		instructionPtr = mInstructionGraphPtr->getRootInstruction(inGraph, null());
	else
		instructionPtr = mInstructionGraphPtr->getInstruction(
									inGraph,
									null(),
									applyArgs.jovsInTargetCFG(jovs())
									);

	lassert(instructionPtr);

	if (isRootInstruction())
		mResultJOA = InstructionJOA(JudgmentOnAction::Unknown(), false);
	else
		mResultJOA = InstructionJOA(JudgmentOnAction::Nonterminal(), true);

	mInstructionBody = InstructionBody::JumpApply(
							this,
							applyArgs,
							instructionPtr,
							applyJOVT.extras().isExtras()
							);

	instructionPtr->addIncomingInstruction(this);
	}

void Instruction::initializeInstructionBodyForNativeApply(
		const JudgmentOnAction& joa,
		const ApplyArgs& applyArgs
		)
	{
	JOVT applyJOVT = applyArgs.flattenedApplyTuple(jovs());

	mResultJOASpecializations = JudgmentOnAction();

	if (JOV::Tuple(applyJOVT).constant() && !joa.hasSideEffects())
		//we already know the result of this computation,
		//so we can just compute the result
		{
		JudgmentOnAction resultJOA = instructionGraph().getAxioms()->resolveAxiomDirectly(
														*instructionGraph().getTypedForaCompiler(),
														applyJOVT
														);

		if (resultJOA.size() == 1 && resultJOA.jovAndIsExceptionByIndex(0).first.constant())
			{
			mResultJOA = InstructionJOA(resultJOA, true);

			mInstructionBody = InstructionBody::AxiomApply(
				this,
				applyArgs,
				resultJOA
				);
			}
		else
			{
			mResultJOA = InstructionJOA(joa, true);
			mInstructionBody = InstructionBody::AxiomApply(
				this,
				applyArgs,
				joa
				);
			}
		}
	else
		{
		mResultJOA = InstructionJOA(joa, true);
		mInstructionBody = InstructionBody::AxiomApply(
			this,
			applyArgs,
			joa
			);
		}
	}

bool Instruction::applyIsDeterministic() const
	{
	if (!isApply())
		return false;

	return mInstructionBody.applyIsDeterministic();
	}

void Instruction::initializeInstructionBodyForAxiomApply(
		const AxiomJOA& aJoa,
		const ApplyArgs& applyArgs
		)
	{
	@match AxiomJOA(aJoa)
		-|	Expands() ->> {
			//we need to evaluate the axiom to actually get the signature
			Axiom actualAxiom =
				*instructionGraph().getAxioms()->axiom(
					*instructionGraph().getTypedForaCompiler(),
					applyArgs.flattenedApplyTuple(mJOVs)
					);

			@match Axiom(actualAxiom)
				-| Expands(_, graphFunction) ->> {
					initializeInstructionBodyForExpandApply(
						graphFunction(applyArgs.applySignature()),
						applyArgs
						);
					}
			}
		-|	Native(joa) ->> {
			initializeInstructionBodyForNativeApply(joa, applyArgs);
			}
		;

	}

void Instruction::initializeInstructionBodyForApply(
		const ImmutableTreeVector<ControlFlowApplyArg>& args,
		const ControlFlowContinuation& normalContinuation,
		const ControlFlowContinuation& exceptionalContinuation
		)
	{
	ApplyArgs applyArgs(args);

	JOVT applyJOVT = applyArgs.flattenedApplyTuple(mJOVs);

	Nullable<AxiomJOA> aJoa;

	if (!isRootInstruction())
		aJoa = instructionGraph().getAxioms()->axiomJOA( applyJOVT );

	if (aJoa)
		initializeInstructionBodyForAxiomApply(*aJoa, applyArgs);
	else
		mInstructionBody = InstructionBody::UnknownApply(this, applyArgs);

	addContinuationDuringInit(normalContinuation, true, 0);
	addContinuationDuringInit(exceptionalContinuation, true, 1);
	}

void Instruction::addContinuationDuringInit(
						const ControlFlowContinuation& inContinuation,
						bool hasResult,
						uword_t indexInCFGNode
						)
	{
	mContinuationsPtrs.push_back(new Continuation(this, mContinuationsPtrs.size(), indexInCFGNode));
	mContinuationsPtrs.back()->init(inContinuation, hasResult);
	}

void Instruction::initializeInstructionBodyTupleExpand(
		uword_t inIndex,
		const ControlFlowTupleContinuation& ifMatch,
		const ControlFlowContinuation& ifNoMatch
		)
	{
	//can we tell anything about the tuple expand?
	uword_t arity = ifMatch.arity();
	bool arityExact = ifMatch.arityIsExact();
	Nullable<bool> tupleBranchKnown;

	if (jovs()[inIndex].isTuple())
		{
		const JOVT& tupleJmt = jovs()[inIndex].getTuple().jov();
		tupleBranchKnown =
			arityExact ?
				tupleJmt.arityEqualTo(arity) :
				tupleJmt.arityGreaterThanOrEqualTo(arity)
				;
		}
		else
	if (jovs()[inIndex].disjoint(jovTuple()))
		tupleBranchKnown = false;

	if (tupleBranchKnown)
		{
		addContinuationDuringInit(
 			*tupleBranchKnown ?
				ifMatch.continuation()
			:	ifNoMatch,
			false,
			*tupleBranchKnown ? 0 : 1
			);
		mInstructionBody = InstructionBody::Jump(this);
		}
	else
		{
		addContinuationDuringInit(ifMatch.continuation(), false, 0);
		addContinuationDuringInit(ifNoMatch, false, 1);
		mInstructionBody = InstructionBody::TupleExpand(this, inIndex, arity, arityExact);
		}
	}


void Instruction::initializeInstructionBody()
	{
	@match ControlFlowNodeBody((*mControlFlowGraphPtr)[mLabel].body())
		-|	Jump(cont) ->> {
			mInstructionBody = InstructionBody::Jump(this);
			addContinuationDuringInit(cont, false, 0);
			}
		-|	Branch(Constant(c), trueCont, falseCont) ->> {
			bool which = c.getReference().convertToBoolean();

			addContinuationDuringInit(
				which ? trueCont : falseCont, false, which ? 0 : 1
				);

			mInstructionBody = InstructionBody::Jump(this);
			}
		-|	Branch(Arg(ix), trueCont, falseCont) ->> {
			initializeInstructionBodyForBranch(ix, trueCont, falseCont);
			}
		-|	Switch(Constant(c), conts, otherwise) ->> {
			initializeInstructionBodyForSwitchOnConstant(c, conts, otherwise);
			}
		-|	Switch(Arg(ix), conts, otherwise) ->> {
			initializeInstructionBodyForSwitchOnIndex(ix, conts, otherwise);
			}
		-|	TupleExpand(argIndex, conts, otherwise) ->> {
			initializeInstructionBodyTupleExpand(argIndex, conts, otherwise);
			}
		-|	Cached(arg, normalContinuation, exceptionalContinuation) ->> {
			mResultJOA = InstructionJOA(JudgmentOnAction::Unknown(), false);
			mInstructionBody = InstructionBody::Cached(
				this,
				ApplyArgs(emptyTreeVec() + arg)
				);

			addContinuationDuringInit(normalContinuation, true, 0);
			addContinuationDuringInit(exceptionalContinuation, true, 1);
			}
		-|	Apply(args, normalContinuation, exceptionalContinuation) ->> {
			initializeInstructionBodyForApply(args, normalContinuation, exceptionalContinuation);
			}
		;

	lassert_dump(!mInstructionBody.isUninitialized(),
		"failed to initialize: " <<
			prettyPrintString((*mControlFlowGraphPtr)[mLabel].body())
		);
	}

uword_t Instruction::flowsToCount(void)
	{
	uword_t flowsToCount = 0;

	for (long k = 0; k < mContinuationsPtrs.size(); k++)
		flowsToCount += mContinuationsPtrs[k]->flowsToCount();

	if (mInstructionBody.isJumpApply())
		return flowsToCount + 1;

	return flowsToCount;
	}

InstructionPtr Instruction::flowsTo(uword_t ix)
	{
	if (ix == 0 && mInstructionBody.isJumpApply())
		return mInstructionBody.getJumpApply().target();

	if (mInstructionBody.isJumpApply())
		ix--;

	for (long k = 0; k < mContinuationsPtrs.size(); k++)
		if (ix >= mContinuationsPtrs[k]->flowsToCount())
			ix -= mContinuationsPtrs[k]->flowsToCount();
		else
			return mContinuationsPtrs[k]->flowsTo(ix);

	lassert(false);
	}

string Instruction::toString(bool headerOnly, bool deterministicTrace) const
	{
	ostringstream tr;

	tr 	<< prettyPrintString(hash())
		<< " @graph" << prettyPrintString(mControlFlowGraphPtr->hash()).substr(0,8)
		<< "=" << mControlFlowGraphPtr->graphName()
		<< ":" << prettyPrintString(mLabel)
		<< ". jovHash = " << prettyPrintString(hashValue(mJOVs))
		<< ". tc = " << mTimesCompiled
		<< ". ec = " << executionCount()
		<< ". " << (isRootInstruction() ? "<root>. ":"")
		<< ". " << (isApply() && applyIsDeterministic() ? "<deterministic>. ":"")
		;

	if (headerOnly)
		{
		tr  << ". inst = "
			<< Ufora::substitute(
				Ufora::substitute(
					prettyPrintString((*mControlFlowGraphPtr)[mLabel]), "\n"," "),
				"\t"," ")
			;

		if (getCompilerEntrypointJOVs())
			tr << "compilerEntrypointJovs = " << prettyPrintStringWithoutWrapping(*getCompilerEntrypointJOVs()) << ". ";

		tr << "jovs = " << prettyPrintStringWithoutWrapping(jovsWithConstantPropagationOrRootJovs());

		return tr.str();
		}

	tr << "\ninst:\n" <<
		Ufora::indent(prettyPrintString((*mControlFlowGraphPtr)[mLabel])) << "\n"
		;
	tr << "\t\tjoa = ";

	tr << prettyPrintString(joa()) + "\n\n";

	for (long k = 0; k < jovs().size(); k++)
		{
		tr 	<< "\t\tjov[x" << k << "] = "
			<< (mJOVsWithConstantPropagation && (*mJOVsWithConstantPropagation)[k] != jovs()[k] ?
						"<constantprop> " : "               "
						)
			<< (jovs()[k].constant() ? "[const]" :
				jovs()[k].type() ? "[typed]" : "       ");

		tr	<< prettyPrintString(jovs()[k]);

		if (mJOVsWithConstantPropagation && (*mJOVsWithConstantPropagation)[k] != jovs()[k])
			tr << "\n\t\t\tconstantJOV = " << prettyPrintString((*mJOVsWithConstantPropagation)[k]);

		tr << "\n";
		}

	if (headerOnly)
		return tr.str();

	tr << "\n\t" << Ufora::indent(prettyPrintString((*mControlFlowGraphPtr)[mLabel]));

	tr << "\n\t";
	tr << prettyPrintString(mInstructionBody);

	tr << "\n";

	tr << "getConstantPropagationJOV = " << prettyPrintString(getConstantPropagationJOV()) << "\n";

	tr << "mResultJOA = " << prettyPrintString(mResultJOA) << "\n";

	tr << "mResultJOASpecializations = " << prettyPrintString(mResultJOASpecializations) << "\n";

	if (applyResultIsKnown())
		tr << "\tEVAL IS KNOWN: " + prettyPrintString(*applyResultIsKnown()) + "\n";

	for (long k = 0; k < mContinuationsPtrs.size(); k++)
		tr << mContinuationsPtrs[k]->toString();

	tr << "\n";

	if (mIncomingContinuationElementsPtrs.size())
		{
		tr << "incoming continuations from:\n";
		for (auto it = mIncomingContinuationElementsPtrs.begin(); it != mIncomingContinuationElementsPtrs.end(); ++it)
			{
			tr << "\t";
			tr << "[" << prettyPrintString((*it)->getFilter()) << "] ";

			tr << (*it)->getSourceInstructionPtr()->toString() << "\n";
			}
		}

	if (mIncomingApplyInstructionPtrs.size())
		{
		tr << "incoming applies from:\n";
		for (auto it = mIncomingApplyInstructionPtrs.begin(); it != mIncomingApplyInstructionPtrs.end(); ++it)
			tr << "\t" << (*it)->toString() << "\n";
		}

	return tr.str();
	}

uword_t Instruction::argCount(void) const
	{
	return jovs().size();
	}

long Instruction::graphMaxArgCount(void) const
	{
	return mControlFlowGraphPtr->maxArgCount();
	}

const InstructionBody& Instruction::getInstructionBody(void) const
	{
	return mInstructionBody;
	}

const ControlFlowGraph& Instruction::getGraph(void) const
	{
	return *mControlFlowGraphPtr;
	}

const Nullable<string>& Instruction::getLabel(void) const
	{
	return mLabel;
	}

InstructionJOA Instruction::resultJOA(void) const
	{
	lassert(hasResult());

	if (isRootInstruction())
		return InstructionJOA(JudgmentOnAction::Unknown(), false);

	return mResultJOA;
	}

void Instruction::addIncomingInstruction(InstructionPtr instructionPtrToAdd)
	{
	lassert(!instructionPtrToAdd->isRootInstruction());
	lassert(
		mIncomingApplyInstructionPtrs.find(instructionPtrToAdd) ==
			mIncomingApplyInstructionPtrs.end()
		);

	mIncomingApplyInstructionPtrs.insert(instructionPtrToAdd);

	if (!instructionPtrToAdd->isRootInstruction())
		//install this continuation element in the root
		mRootInstructionPtr->mAllIncomingApplyInstructionPtrs[
				JOVT::Unnamed(instructionPtrToAdd->getApplyJOVsInTargetCFG())
				]
			.insert(instructionPtrToAdd);
	}

void Instruction::dropIncomingInstruction(InstructionPtr instructionPtrToDrop)
	{
	lassert(mIncomingApplyInstructionPtrs.find(instructionPtrToDrop) !=
				mIncomingApplyInstructionPtrs.end());

	mIncomingApplyInstructionPtrs.erase(instructionPtrToDrop);

	if (!instructionPtrToDrop->isRootInstruction())
		{
		JOVT jovt = JOVT::Unnamed(instructionPtrToDrop->getApplyJOVsInTargetCFG());

		set<InstructionPtr>& allIncoming(
			mRootInstructionPtr->mAllIncomingApplyInstructionPtrs[jovt]
			);

		allIncoming.erase(instructionPtrToDrop);

		if (allIncoming.size() == 0)
			mRootInstructionPtr->mAllIncomingApplyInstructionPtrs.erase(jovt);
		}
	}

void Instruction::addIncomingContinuationElement(ContinuationElement* continuationElementPtr)
	{
	lassert(
		mIncomingContinuationElementsPtrs.find(continuationElementPtr) ==
		mIncomingContinuationElementsPtrs.end()
		);
	mIncomingContinuationElementsPtrs.insert(continuationElementPtr);

	if (!continuationElementPtr->getSourceInstructionPtr()->isRootInstruction())
		//install this continuation element in the root
		mRootInstructionPtr->mAllIncomingContinuationElementsByTargetJOVs[
				JOVT::Unnamed(continuationElementPtr->getTargetJOVs())
				]
			.insert(continuationElementPtr);
	}

void Instruction::dropIncomingContinuationElement(ContinuationElement* continuationElementPtr)
	{
	auto continuationElementPtrIterator =
				mIncomingContinuationElementsPtrs.find(continuationElementPtr);

	lassert_dump(
		continuationElementPtrIterator !=
			mIncomingContinuationElementsPtrs.end(),
		"Can't remove continuation " << continuationElementPtr->toString() << "\n"
			<< "coming from " << continuationElementPtr->getSourceInstructionPtr()->toString(false)
			<< "\ngoing to\n"
			<< this->toString(false)
		);

	mIncomingContinuationElementsPtrs.erase(continuationElementPtrIterator);

	if (!continuationElementPtr->getSourceInstructionPtr()->isRootInstruction())
		{
		JOVT jovt = JOVT::Unnamed(continuationElementPtr->getTargetJOVs());

		set<ContinuationElement*>& allIncoming(
			mRootInstructionPtr->mAllIncomingContinuationElementsByTargetJOVs[jovt]
			);

		allIncoming.erase(continuationElementPtr);

		if (allIncoming.size() == 0)
			mRootInstructionPtr->mAllIncomingContinuationElementsByTargetJOVs.erase(jovt);
		}
	}

bool Instruction::isInitialized() const
	{
	return mIsInitialized;
	}

hash_type Instruction::hash() const
	{
	return mHash;
	}

InstructionJOA Instruction::computeJOAFromNeighboringInstructions(void)
	{
	lassert(isInitialized());

	lassert_dump(mContinuationsPtrs.size(), this->toString(false));

	InstructionJOA newJOA = mContinuationsPtrs[0]->joa();
	for (long k = 1; k < mContinuationsPtrs.size(); k++)
		newJOA = newJOA | mContinuationsPtrs[k]->joa();

	if (hasResult() && resultJOA().joa().hasSideEffects())
		newJOA.joa().hasSideEffects() = true;

	if (hasResult() && !resultJOA().isComplete())
		newJOA.isComplete() = false;

	return newJOA;
	}

InstructionJOA Instruction::computeResultJOAFromNeighboringInstructions(void) const
	{
	lassert(isInitialized());


	Nullable<pair<JOV, bool> >	propJOV = getConstantPropagationJOV();

	if (propJOV && propJOV->first.constant())
		return InstructionJOA(
			propJOV->second ?
					JudgmentOnAction::Throws(propJOV->first)
				: 	JudgmentOnAction::Value(propJOV->first),
			true
			);

	@match InstructionBody(mInstructionBody)
		-| JumpApply(_,targetInstruction) ->> {
			return targetInstruction->joa();
			}
		-|	_ ->> {
			return resultJOA();
			}
	}

bool Instruction::recomputeApplyTarget()
	{
	if (isRootInstruction())
		return false;

	@match InstructionBody(mInstructionBody)
		-| JumpApply(applyArgs,targetInstruction,lastIsStar) ->> {
			InstructionPtr newInstruction =
				mInstructionGraphPtr->getInstruction(
					targetInstruction->getGraph(),
					null(),
					getApplyJOVsInTargetCFG()
					);

			lassert(newInstruction);

			if (newInstruction == targetInstruction)
				return false;

			targetInstruction->dropIncomingInstruction(this);

			mInstructionBody = InstructionBody::JumpApply(
				this,
				applyArgs,
				newInstruction,
				lastIsStar
				);

			mInstructionGraphPtr->onInstructionApplyTargetChanged(this);

			newInstruction->addIncomingInstruction(this);

			return true;
			}
		-| _ ->> {
			lassert(false);
			}
	}

void Instruction::resetJoaState(void)
	{
	if (isRootInstruction())
		return;

	setJOA(InstructionJOA(JudgmentOnAction::Nonterminal(), true));

	if (mInstructionBody.isJumpApply())
		setResultJOA(InstructionJOA(JudgmentOnAction::Nonterminal(), true));
	}

bool Instruction::isAxiomApply(void) const
	{
	return mInstructionBody.isAxiomApply();
	}

bool Instruction::setAxiomSpecializations(const JudgmentOnAction& inNewSpecializations)
	{
	lassert(isAxiomApply());

	@match InstructionBody(mInstructionBody)
		-| AxiomApply(_,resultJOA) ->> {
			if (inNewSpecializations == mResultJOASpecializations ||
					inNewSpecializations.covers(resultJOA))
				return false;

			mResultJOASpecializations = inNewSpecializations;
			mResultJOA = InstructionJOA(resultJOA | inNewSpecializations, true);

			mContinuationsPtrs[0]->update( mResultJOA.joa().jorByIsException(false) );
			mContinuationsPtrs[1]->update( mResultJOA.joa().jorByIsException(true) );

			return true;
			}
	}

const JudgmentOnAction& Instruction::getAxiomSpecializations() const
	{
	lassert(isAxiomApply());

	return mResultJOASpecializations;
	}

bool Instruction::setResultJOA(const InstructionJOA& inNewResultJOA)
	{
	lassert(!isRootInstruction());
	lassert(isInitialized());
	lassert(hasResult());

	lassert(isApply());
	lassert(!isAxiomApply());

	if (inNewResultJOA == mResultJOA)
		return false;

	mResultJOA = inNewResultJOA;

	lassert(mContinuationsPtrs.size() == 2);

	mContinuationsPtrs[0]->update( inNewResultJOA.joa().jorByIsException(false) );
	mContinuationsPtrs[1]->update( inNewResultJOA.joa().jorByIsException(true) );

	return true;
	}

bool Instruction::setJOA(const InstructionJOA& inJOA)
	{
	lassert(!isRootInstruction());
	lassert(isInitialized());

	if (mJOA == inJOA)
		return false;

	mJOA = inJOA;

	return true;
	}

InstructionPtr Instruction::rootInstructionPtr(void) const
	{
	return mRootInstructionPtr;
	}

bool Instruction::isRootInstruction(void) const
	{
	return mRootInstructionPtr.get() == this;
	}

Continuation& Instruction::getContinuation(uword_t index)
	{
	lassert(isInitialized());

	lassert(index < mContinuationsPtrs.size());
	return *mContinuationsPtrs[index];
	}

const Continuation&	Instruction::getContinuation(uword_t index) const
	{
	lassert(isInitialized());

	lassert(index < mContinuationsPtrs.size());
	return *mContinuationsPtrs[index];
	}

size_t Instruction::getContinuationCount() const
	{
	lassert(isInitialized());

	return mContinuationsPtrs.size();
	}

void Instruction::ensureInitialized(void)
	{
	if (isInitialized())
		return;

	boost::mutex::scoped_lock lock(mInitializationMutex);

	if (!isInitialized())
		init();
	}

const ordered_instruction_set& Instruction::incomingApplyInstructionPtrs(void) const
	{
	return mIncomingApplyInstructionPtrs;
	}

const set<ContinuationElement*>& Instruction::incomingContinuationElementsPtrs(void) const
	{
	return mIncomingContinuationElementsPtrs;
	}

InstructionGraph& Instruction::instructionGraph(void) const
	{
	return *mInstructionGraphPtr;
	}

Nullable<pair<CSTValue, bool> > Instruction::applyResultIsKnown(void) const
	{
	if (!isApply())
		return null();

	if (isUnknownApply())
		return null();

	if (mResultJOA.isComplete() && mResultJOA.joa().size() == 1 && mResultJOA.joa().jovAndIsExceptionByIndex(0).first.constant())
		return null() << make_pair(
			*mResultJOA.joa().jovAndIsExceptionByIndex(0).first.constant(),
			mResultJOA.joa().jovAndIsExceptionByIndex(0).second
			);

	Nullable<pair<JOV, bool> >	propJOV = getConstantPropagationJOV();

	if (propJOV && propJOV->first.constant())
		return null() << make_pair(*propJOV->first.constant(), propJOV->second);

	if (!applyIsDeterministic())
		return null();

	JudgmentOnAction joa = resultJOA().joa();

	if (!mResultJOA.isComplete())
		return null();

	if (joa.size() == 1 && joa.jovAndIsExceptionByIndex(0).first.constant() && !joa.hasSideEffects())
		{
		return null() <<
			make_pair(
				*joa.jovAndIsExceptionByIndex(0).first.constant(),
				joa.jovAndIsExceptionByIndex(0).second
				);
		}

	return null();
	}

ImmutableTreeVector<JudgmentOnValue> Instruction::getApplyJOVsInTargetCFG(void) const
	{
	return mInstructionBody.applyJovsInTargetCFG();
	}

const ImmutableTreeVector<JOV>& Instruction::getJOVs(void) const
	{
	return mJOVs;
	}

InstructionPtr Instruction::followJumpNodesAsFarAsPossible()
	{
	InstructionPtr i = this;

	while (i->getInstructionBody().isJump())
		{
		lassert(i->flowsToCount() == 1);
		i = i->flowsTo(0);
		lassert(i);
		}

	return i;
	}

Fora::Interpreter::CompilerEntrypointMap& Instruction::getCompilerEntrypointMap() const
	{
	return mInstructionGraphPtr->getInterpreterInstructionGraph()->getInstruction(
		*mControlFlowGraphPtr,
		mLabel
		)->getCompilerEntrypointMap();
	}

bool Instruction::isCompilerEntrypoint() const
	{
	return getCompilerEntrypointMap().hasJumpTarget(JOVT::Unnamed(jovsWithConstantPropagationOrRootJovs()));
	}

long Instruction::executionCount() const
	{
	//in our current model, we're not actually tracking execution statistics, but
	//everything is still wired in codegen as if we were.

	return correspondingInterpreterInstruction()->executionCount();
	}

Fora::Interpreter::Instruction* Instruction::correspondingInterpreterInstruction() const
	{
	return &*mInstructionGraphPtr->getInterpreterInstructionGraph()->getInstruction(
		*mControlFlowGraphPtr,
		mLabel
		);
	}

}
}
}

