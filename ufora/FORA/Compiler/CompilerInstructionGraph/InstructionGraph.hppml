/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/
#pragma once

#include "../../ControlFlowGraph/ControlFlowGraph.hppml"
#include "../../Judgment/JudgmentOnValue.hppml"
#include "../../../core/PolymorphicSharedPtr.hpp"
#include "InstructionPtr.hpp"


class Axioms;
namespace TypedFora {
class Compiler;
};

namespace Fora {
namespace Interpreter {

class CompilerEntrypointMap;
class InstructionGraph;

}
}

namespace Fora {
namespace Compiler {
namespace CompilerInstructionGraph {

class InstructionGraphRoot;

class InstructionGraph : public PolymorphicSharedPtrBase<InstructionGraph> {
public:
	InstructionGraph(
			PolymorphicSharedPtr<Axioms> inAxioms,
			PolymorphicSharedPtr<TypedFora::Compiler> inTypedForaCompiler,
			PolymorphicSharedPtr<Fora::Interpreter::InstructionGraph> inInterpreterGraph
			);

	InstructionPtr createNonrootInstruction(
					const ControlFlowGraph& inGraph,
					Nullable<string> inLabel,
					const ImmutableTreeVector<JudgmentOnValue>& jovs
					);

	//look up best instruction matching 'jovs'. create a root instruction if none is available
	InstructionPtr getInstruction(
					const ControlFlowGraph& controlFlowGraph,
					Nullable<string> inLabel,
					const ImmutableTreeVector<JudgmentOnValue>& jovs
					);

	//find the root instruction for a given node
	InstructionPtr getRootInstruction(
					const ControlFlowGraph& controlFlowGraph,
					Nullable<string> inLabel
					);

	ImmutableTreeSet<ControlFlowGraph> getGraphs(void);

	PolymorphicSharedPtr<Axioms> getAxioms() const
		{
		return mAxioms;
		}

	PolymorphicSharedPtr<Fora::Interpreter::InstructionGraph> getInterpreterInstructionGraph()
		{
		return mInterpreterGraph;
		}

	PolymorphicSharedPtr<TypedFora::Compiler> getTypedForaCompiler() const
		{
		return mTypedForaCompiler;
		}

	void onInstructionContinuationsChanged(InstructionPtr instruction);

	void onInstructionApplyTargetChanged(InstructionPtr instruction);

	void onInstructionConstantPropJovsChanged(InstructionPtr instruction);

	void collectChangedInstructions(
			set<InstructionPtr>& outInstructionsWithChangedContinuations,
			set<InstructionPtr>& outInstructionsWithChangedApplyTargets,
			set<InstructionPtr>& outInstructionsAdded,
			set<InstructionPtr>& outInstructionsFocused //constant-prop jovs changed
			);

	//ensure that joas and resultJoas are stable for all nodes that have changed
	//this function doesn't add any nodes, but may change continuations as it updates things
	void updateJoasAndResultJoasForAllChangedNodes();

	//check that no nodes contain possible loops that could allow us to become stuck
	//in the interpreter
	void verifyAllLoopsHaveEntrypoints();

	std::set<InstructionPtr> verifyAllInstructionsHaveStableConstantpropagation();

private:
	bool updateInstructionJoas(InstructionPtr i);

	bool updateInstructionJovsWithConstantPropagation(InstructionPtr i);

	bool stabilizeJoasOfNodeSet(std::set<InstructionPtr>& workingSet);

	bool stabilizeConstantPropagationValues(std::set<InstructionPtr>& workingSet);

	PolymorphicSharedPtr<Fora::Interpreter::InstructionGraph> mInterpreterGraph;

	set<InstructionPtr> mInstructionsWithChangedContinuations;

	set<InstructionPtr> mInstructionsWithChangedApplyTargets;

	set<InstructionPtr> mInstructionsAdded;

	set<InstructionPtr> mInstructionsFocused;

	void ensureRoot_(const pair<hash_type, Nullable<string> >& p);

	void ensureGraph_(const ControlFlowGraph& controlFlowGraph);

	InstructionPtr createNewInstruction(
					const InstructionPtr inRootInstructionPtr,
					const ControlFlowGraph* controlFlowGraphPtr,
					Nullable<string> label,
					const ImmutableTreeVector<JudgmentOnValue>& jovs
					);

	boost::recursive_mutex mMutex;

	map<hash_type, ControlFlowGraph> mControlFlowGraphs;

	ImmutableTreeSet<ControlFlowGraph> mControlFlowGraphSet;

	map<pair<hash_type, Nullable<string> >, InstructionGraphRoot*> mRootInstructions;

	PolymorphicSharedPtr<Axioms> mAxioms;

	PolymorphicSharedPtr<TypedFora::Compiler> mTypedForaCompiler;
};

}
}
}

