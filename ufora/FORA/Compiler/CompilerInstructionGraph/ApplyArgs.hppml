/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/
#pragma once

#include "../../ControlFlowGraph/ControlFlowGraph.hppml"
#include "../../Language/ApplySignature.hppml"
#include "../../Core/CSTValue.hppml"
#include "../../Core/ImplVal.hppml"
#include "../../Core/ApplyArg.hppml"
#include "../../Judgment/JudgmentOnValue.hppml"

namespace Fora {
namespace Compiler {
namespace CompilerInstructionGraph {

//Holds an ControlFlowNodeBody::Apply argument list and caches key info
//so that we can quickly pack data into tuples during interpretation of FORA
//code
class ApplyArgs {
public:
	ApplyArgs();

	ApplyArgs(const ApplyArgs& in);

	ApplyArgs& operator=(const ApplyArgs& in);

	ApplyArgs(const ImmutableTreeVector<ControlFlowArg>& args);

	ApplyArgs(const ImmutableTreeVector<ControlFlowApplyArg>& args);

	~ApplyArgs()
		{
		drop();
		}

	void drop();

	const ApplySignature& applySignature(void) const { return *mApplySignature; }

	//get the apply tuple in flattened form (e.g. the semantic meaning as a FORA tuple)
	JudgmentOnValueTuple flattenedApplyTuple(
							ImmutableTreeVector<JudgmentOnValue> jovs
							) const;

	//get the apply tuple the way it will be represented in the target control flow graph
	ImmutableTreeVector<JudgmentOnValue> jovsInTargetCFG(
							ImmutableTreeVector<JudgmentOnValue> jovs
							) const;

	uword_t size(void) const { return mApplyCt; }

	bool isTupleCall(uword_t  ix) const { return mApplyIsTupleCall[ix]; }

	bool isConstant(uword_t  ix) const 	{ return mApplySource[ix] == -1; }

	bool isIndex(uword_t ix) const { return mApplySource[ix] >= 0; }

	long index(uword_t  ix) const 	{ return mApplySource[ix]; }

	Nullable<Symbol> symbol(uword_t ix) const { return mApplySymbols[ix]; }

	CSTValue constant(uword_t  ix) const { return mApplyConstants[ix]; }

	ImmutableTreeVector<ControlFlowApplyArg> getApplyArgs() const { return *mArgs; }

private:
	uword_t mApplyCt;

	ImmutableTreeVector<ControlFlowApplyArg>* mArgs;
	uword_t* mRefCount;
	Nullable<Symbol>* mApplySymbols;
	bool* mApplyIsTupleCall;
	long* mApplySource;		//-1 = constant, >= 0 means index
	CSTValue* mApplyConstants;
	ApplySignature*	mApplySignature;
};

}
}
}

template<>
class CPPMLPrettyPrint<Fora::Compiler::CompilerInstructionGraph::ApplyArgs> {
public:
	static void prettyPrint(CPPMLPrettyPrintStream& s,
							const Fora::Compiler::CompilerInstructionGraph::ApplyArgs& args)
		{
		s << "<APPLYARGS>";
		}
};



