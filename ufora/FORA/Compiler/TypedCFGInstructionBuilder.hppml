/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/
#pragma once

#include "../../core/PolymorphicSharedPtr.hpp"
#include "../TypedFora/TypedFora.hppml"
#include "CompilerInstructionGraph/InstructionPtr.hpp"

class Axioms;
namespace TypedFora {
class Compiler;
};

namespace Fora {
namespace Interpreter {

class ContinuationArgs;

}
}


namespace Fora {
namespace Compiler {
namespace CompilerInstructionGraph {

class Instruction;
class Continuation;
class ContinuationElement;
class ApplyArgs;

typedef Fora::Interpreter::ContinuationArgs ContinuationArgs;

}
}
}



namespace TypedCFGInstructionBuilder {

class CallTargetGenerator {
public:
	virtual Nullable<TypedFora::BlockID>
	getTargetBlockID(Fora::Compiler::CompilerInstructionGraph::InstructionPtr inInstruction) = 0;

	virtual Nullable<TypedFora::BlockID>
	getTransferTargetBlockID(Fora::Compiler::CompilerInstructionGraph::InstructionPtr inInstruction) = 0;

	virtual Nullable<TypedFora::CallTarget>
	getTarget(Fora::Compiler::CompilerInstructionGraph::InstructionPtr inInstruction) = 0;

	virtual Nullable<TypedFora::TransferTarget>
	getTransferTarget(Fora::Compiler::CompilerInstructionGraph::InstructionPtr inInstruction) = 0;

	virtual ImmutableTreeVector<TypedFora::Type>
	getTargetSignature(Fora::Compiler::CompilerInstructionGraph::InstructionPtr inInstruction) = 0;

	virtual
	bool hasInlinedTarget(Fora::Compiler::CompilerInstructionGraph::InstructionPtr inInstruction) = 0;

	virtual
	Nullable<TypedFora::Expression>
	getInlinedTarget(const ImmutableTreeVector<TypedFora::Variable>& inVariables,
					Fora::Compiler::CompilerInstructionGraph::InstructionPtr inInstruction
					) = 0;
};


class Builder {
public:
	Builder(	Fora::Compiler::CompilerInstructionGraph::InstructionPtr inInstruction,
				CallTargetGenerator& generator,
				const PolymorphicSharedPtr<Axioms>& inAxioms,
				const PolymorphicSharedPtr<TypedFora::Compiler>& inTypedForaCompiler,
				const ImmutableTreeVector<TypedFora::Variable>& inVariables
				);

	TypedFora::Block getBlock(void);

private:
	TypedFora::Expression interruptExpression();

	ImmutableTreeVector<TypedFora::MetadataVariable>
		metadataVariables();

	ImmutableTreeVector<TypedFora::MetadataStackFrame>
		metadataForContinuation(uword_t indexInCfgNode, const TypedFora::Variable& inResultVar);

	ImmutableTreeVector<TypedFora::MetadataStackFrame>
		metadataForNode();

	TypedFora::Expression getExpression();

	TypedFora::Expression getExpressionForKnownResult();

	TypedFora::Expression getExpressionForBranch();

	TypedFora::Expression getExpressionForSwitch();

	TypedFora::Expression getExpressionForTupleExpand();

	Nullable<TypedFora::Expression> getExpressionShortCircuitApplyIfResultUnused();

	pair<TypedFora::CallTarget, JOVT> getApplyCallTarget(Fora::Compiler::CompilerInstructionGraph::ApplyArgs& outApplyArgs);

	pair<TypedFora::CallTarget, JOVT>
	getExpressionComputeApplyTargetForJumpApply(Fora::Compiler::CompilerInstructionGraph::ApplyArgs& outApplyArgs);

	pair<TypedFora::CallTarget, JOVT>
	getExpressionComputeApplyTargetForAxiomApply(Fora::Compiler::CompilerInstructionGraph::ApplyArgs& outApplyArgs);

	TypedFora::Expression inlinedApplyExpression(
						const ImmutableTreeVector<TypedFora::Variable>& boundVars,
						const TypedFora::Expression& expression,
						const ImmutableTreeVector<TypedFora::Expression>& arguments,
						const TypedFora::Continuation& continuation
						);

	TypedFora::Expression getExpressionForApply();

	pair<ImmutableTreeVector<TypedFora::Continuation>,
		ImmutableTreeVector<TypedFora::Continuation> >
	getExpressionGenerateApplyContinuations(
								const TypedFora::ResultSignature& inSignature
								);

	Nullable<TypedFora::Expression> getExpressionForTailCallRecursion(
							const ImmutableTreeVector<TypedFora::Expression>& args
							);

	ImmutableTreeVector<TypedFora::Expression>
	getExpressionComputeApplyArgs(
						const Fora::Compiler::CompilerInstructionGraph::ApplyArgs& inArgs,
						const JudgmentOnValueTuple& inTargetJovt,
						ImmutableTreeVector<
							pair<TypedFora::Variable,
								TypedFora::Expression> >& outLetBindings
						);

	pair<ImmutableTreeVector<TypedFora::Expression>,
		ImmutableTreeVector<TypedFora::MakeTupleArgument> >
	getExpressionComputeApplyArgsAndTupleExpressions(
					const Fora::Compiler::CompilerInstructionGraph::ApplyArgs& inArgs,
					const JOVT& inTargetJovt
					);

	TypedFora::Expression generateTerminator(	Fora::Compiler::CompilerInstructionGraph::Continuation& tc);

	TypedFora::Continuation generateTerminatorContinuation(
									Fora::Compiler::CompilerInstructionGraph::Continuation& tc,
									const TypedFora::Type& result
									);


	pair<TypedFora::Expression, double>
					generateTerminatorForReturnContinuation(
						Fora::Compiler::CompilerInstructionGraph::Continuation& inContinuation,
						const Nullable<TypedFora::Variable>& resultVar
						);

	pair<TypedFora::Expression, double>
					generateTerminatorTransferToBlock(
						Fora::Compiler::CompilerInstructionGraph::Continuation& inContinuation,
						Fora::Compiler::CompilerInstructionGraph::ContinuationElement* continutionElement,
						TypedFora::BlockID inBlockID,
						const Nullable<TypedFora::Variable>& inResultVar
						);

	Nullable<pair<TypedFora::Expression, double> >
					tryInlineTransferToBlock(
						Fora::Compiler::CompilerInstructionGraph::Continuation& inContinuation,
						Fora::Compiler::CompilerInstructionGraph::ContinuationElement* continutionElement,
						Fora::Compiler::CompilerInstructionGraph::InstructionPtr targetInstruction,
						const Nullable<TypedFora::Variable>& inResultVar
						);

	Nullable<TypedFora::Expression>
					tryInlineTransferToBlockGivenExpressions(
						const ImmutableTreeVector<TypedFora::Expression>& jumpExprs,
						Fora::Compiler::CompilerInstructionGraph::InstructionPtr targetInstruction
						);

	pair<TypedFora::Expression, double>
					generateTerminator(
						Fora::Compiler::CompilerInstructionGraph::Continuation& inContinuation,
						const Nullable<TypedFora::Variable>& resultVar
						);

	pair<TypedFora::Expression, double>
					jumpToTarget(
						Fora::Compiler::CompilerInstructionGraph::Continuation& inContinuation,
						const Nullable<TypedFora::Variable>& inResultVar,
						const TypedFora::TransferTarget& inTarget
						);

	pair<TypedFora::Expression, double>
					generateTransferToInterpreterTerminator(
						Fora::Compiler::CompilerInstructionGraph::Continuation& inContinuation,
						const Nullable<TypedFora::Variable>& resultVar
						);

	Fora::Compiler::CompilerInstructionGraph::ContinuationElement*  terminatorGetContinuationElementForTransfer(
											Fora::Compiler::CompilerInstructionGraph::Continuation& inContinuation,
											const Nullable<TypedFora::Variable>& inResultVar
											);

	ImmutableTreeVector<TypedFora::Expression> jumpExpressions(
						Fora::Compiler::CompilerInstructionGraph::Continuation& inContinuation,
						const Nullable<TypedFora::Variable>& inResultVar
						);

	TypedFora::MakeTupleArgument continuationExpression(
								const Fora::Compiler::CompilerInstructionGraph::ContinuationArgs& contArgs,
								const ControlFlowContinuationTupleArg& inArg,
								const Nullable<TypedFora::Variable>& inResultVar
								);

	ImmutableTreeVector<TypedFora::MakeTupleArgument> makeTupleExpression(
								const Fora::Compiler::CompilerInstructionGraph::ContinuationArgs& contArgs,
								const ImmutableTreeVector<ControlFlowContinuationTupleArg>& inArg,
								const Nullable<TypedFora::Variable>& inResultVar
								);

	TypedFora::Expression continuationExpression(
								const Fora::Compiler::CompilerInstructionGraph::ContinuationArgs& contArgs,
								const ControlFlowContinuationArg& inArg,
								const Nullable<TypedFora::Variable>& inResultVar
								);


	Fora::Compiler::CompilerInstructionGraph::Continuation& getContinuation(uword_t index);



	Fora::Compiler::CompilerInstructionGraph::InstructionPtr mInstruction;

	CallTargetGenerator& mGenerator;

	ImmutableTreeVector<TypedFora::Variable> mVariables;

	ImmutableTreeVector<JudgmentOnValue> mJovs;

	PolymorphicSharedPtr<Axioms> mAxioms;

	PolymorphicSharedPtr<TypedFora::Compiler> mTypedForaCompiler;

};


}

