/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/
#pragma once

#include <set>
#include "CompilerInstructionGraph/Instruction.hppml"
#include <boost/shared_ptr.hpp>
#include <boost/enable_shared_from_this.hpp>

namespace Fora {
namespace Compiler {

class CompiledInstructionGroup;

class InstructionCycle : public boost::enable_shared_from_this<InstructionCycle> {
public:
	typedef CompilerInstructionGraph::InstructionPtr InstructionPtr;
	typedef CompilerInstructionGraph::ordered_instruction_set ordered_instruction_set;

	InstructionCycle();

	InstructionPtr getRepresentativeInstruction() const;

	const std::set<InstructionPtr>& getInstructions() const
		{
		return mInstructions;
		}

	const std::set<boost::shared_ptr<InstructionCycle> >& getDownstreamCycles() const
		{
		return mDownstreamCycles;
		}

	string getGraphName() const;

	bool isInterpreterCrossoverPoint(InstructionPtr instructionPtr) const;

	bool needsInterrupt(InstructionPtr instructionPtr) const;

	bool isCompilerEntrypoint(InstructionPtr instructionPtr) const;

	const ordered_instruction_set& getCompilerEntrypointNodes(void) const;

	bool containsInstruction(InstructionPtr inInstruction) const;

	string toString() const;

	bool wantsToBePartOfCallersGroup() const;

	bool hasCompilerEntrypoint() const;

	static void updateInstructions(
						const std::set<InstructionPtr>& inChangedInstructions,
						std::set<boost::shared_ptr<InstructionCycle> >& outNewCycles,
						std::set<boost::shared_ptr<CompiledInstructionGroup> >& outDeprecatedCigs
						);

	static InstructionCycle& get(InstructionPtr ptr);

	boost::shared_ptr<CompiledInstructionGroup> getCIG() const
		{
		return mCIG;
		}

	//place cycles in newCycles in order so that if one cycle in the set is immediately
	//downstream of another, it shows up before it in the list
	static void orderCyclesDownstreamFirst(
						const std::set<boost::shared_ptr<InstructionCycle> >& newCycles,
						std::vector<boost::shared_ptr<InstructionCycle> >& outCyclesInOrder
						);

private:
	boost::shared_ptr<CompiledInstructionGroup> mCIG;

	void finish();

	vector<InstructionPtr> computeNodeRemovalOrder() const;

	void computeInstructionGraph();

	ordered_instruction_set getRootInstructionPtrs() const;

	vector<pair<double, InstructionPtr> > computeIncomingExternalFrequencies() const;

	static void increaseSetToIncludeAllInstructionsInflowingOrInSameCycle(
										std::set<InstructionPtr>& ioInstructions
										);

	static void reset(InstructionPtr ptr);

	static void insert(InstructionPtr ptr, InstructionCycle& cycle);

	static void insert(InstructionCycle* curCycle, InstructionCycle& intoCycle);

	static InstructionCycle* pickDownstreamCycle(
							InstructionCycle* i,
							const set<InstructionCycle*>& remainingCycles,
							const set<InstructionCycle*>& currentStackSet
							);

	void recomputeDownstreamCycles();

	std::set<InstructionPtr> mInstructions;

	std::set<boost::shared_ptr<InstructionCycle> > mDownstreamCycles;

	std::set<InstructionPtr> mInterruptNodes;

	std::set<InstructionPtr> mCompilerEntrypointNodes;
};

}
}
