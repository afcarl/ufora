/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/
#include "InstructionCycle.hppml"
#include "CompiledInstructionGroup.hppml"
#include "../../core/Logging.hpp"
#include "../../core/math/GraphUtil.hpp"

using namespace Fora::Compiler::CompilerInstructionGraph;


namespace Fora {
namespace Compiler {

InstructionCycle::InstructionCycle()
	{
	}

InstructionPtr InstructionCycle::getRepresentativeInstruction() const
	{
	if (!mInstructions.size())
		return InstructionPtr();

	if (mCompilerEntrypointNodes.size())
		return *mCompilerEntrypointNodes.begin();

	return *mInstructions.begin();
	}

std::string InstructionCycle::getGraphName() const
	{
	std::string graphName = getRepresentativeInstruction()->getGraph().graphName();

	std::vector<std::string> entrypointNames;

	for (auto instruction: mCompilerEntrypointNodes)
		entrypointNames.push_back(
			std::string(instruction->getLabel() ? *instruction->getLabel() : "entry") +
				"_" +
				hashToString(instruction->hash()).substr(16,4)
			);

	std::sort(entrypointNames.begin(), entrypointNames.end());

	for (auto toAdd: entrypointNames)
		graphName = graphName + "_" + toAdd;

	return graphName;
	}

void InstructionCycle::increaseSetToIncludeAllInstructionsInflowingOrInSameCycle(std::set<InstructionPtr>& ioInstructions)
	{
	std::vector<InstructionPtr> toCheck(ioInstructions.begin(), ioInstructions.end());

	std::set<InstructionCycle*> cyclesSeen;

	while (toCheck.size())
		{
		InstructionPtr i = toCheck.back();
		toCheck.pop_back();

		ioInstructions.insert(i);

		const set<ContinuationElement*>& incomingCEs = i->incomingContinuationElementsPtrs();

		for (auto it = incomingCEs.begin(); it != incomingCEs.end(); ++it)
			{
			InstructionPtr source = (*it)->getSourceInstructionPtr();
			if (ioInstructions.find(source) == ioInstructions.end())
				{
				toCheck.push_back(source);
				ioInstructions.insert(source);
				}
			}

		const set<InstructionPtr>& incomingApplys = i->incomingApplyInstructionPtrs();

		for (auto it = incomingApplys.begin(); it != incomingApplys.end(); ++it)
			{
			if (ioInstructions.find(*it) == ioInstructions.end())
				{
				toCheck.push_back(*it);
				ioInstructions.insert(*it);
				}
			}

		InstructionCycle* cycle = &get(i);

		if (cyclesSeen.find(cycle) == cyclesSeen.end())
			{
			for (auto it = cycle->mInstructions.begin(); it != cycle->mInstructions.end(); ++it)
				{
				if (ioInstructions.find(*it) == ioInstructions.end())
					{
					toCheck.push_back(*it);
					ioInstructions.insert(*it);
					}
				}

			cyclesSeen.insert(cycle);
			}
		}
	}

void InstructionCycle::updateInstructions(
							const std::set<InstructionPtr>& inChangedInstructions,
							std::set<boost::shared_ptr<InstructionCycle> >& outNewCycles,
							std::set<boost::shared_ptr<CompiledInstructionGroup> >& outDeprecatedCigs
							)
	{
	//first, loop over all instructions and break any cycles that happen to touch any changed
	//instructions
	std::set<InstructionPtr> changed(inChangedInstructions);

	increaseSetToIncludeAllInstructionsInflowingOrInSameCycle(changed);

	for (auto it = changed.begin(); it != changed.end(); ++it)
		{
		InstructionCycle& cycle = get(*it);

		if (cycle.getCIG())
			outDeprecatedCigs.insert(cycle.getCIG());

		reset(*it);
		}

	//update outflow pointers
	for (auto it = changed.begin(); it != changed.end(); ++it)
		get(*it).recomputeDownstreamCycles();

	//now search for new cycles
	std::set<InstructionCycle*> remainingCycles;
	std::set<InstructionCycle*> currentStackSet;
	std::vector<InstructionCycle*> currentStack;

	for (auto it = changed.begin(); it != changed.end(); ++it)
		remainingCycles.insert(&get(*it));

	while (remainingCycles.size() || currentStack.size())
		{
		if (currentStack.size() == 0)
			{
			currentStack.push_back(*remainingCycles.begin());
			currentStackSet.insert(*remainingCycles.begin());
			remainingCycles.erase(remainingCycles.begin());
			}
		else
			{
			InstructionCycle* i = currentStack.back();

			i->recomputeDownstreamCycles();

			//pick a downstream cycle thats in the unfinished set
			InstructionCycle* p = pickDownstreamCycle(i, remainingCycles, currentStackSet);

			lassert(i != p);

			if (p == 0)
				{
				//this cycle is done.
				i->finish();
				currentStackSet.erase(i);
				currentStack.pop_back();
				}
				else
			if (currentStackSet.find(p) == currentStackSet.end())
				{
				currentStackSet.insert(p);
				currentStack.push_back(p);
				remainingCycles.erase(p);
				}
			else
				{
				//we've found a cycle. i has an outgoing dependency that points at a member of the
				//stack chain. all the nodes in between are part of the cycle.
				std::set<InstructionCycle*> inThisCycle;

				while (currentStack.size() && currentStack.back() != p)
					{
					InstructionCycle* toAdd = currentStack.back();

					inThisCycle.insert(toAdd);
					currentStack.pop_back();
					currentStackSet.erase(toAdd);
					}

				lassert(currentStack.size() && currentStack.back() == p);

				inThisCycle.insert(p);
				currentStack.pop_back();
				currentStackSet.erase(p);

				//every node in 'inThisCycle' should be removed from 'remainingCycles' because
				//we're going to destroy the group and replace it with the new group. We assume
				//that a cycle does not point to itself
				lassert(inThisCycle.size() >= 2);

				for (auto it = inThisCycle.begin(); it != inThisCycle.end(); ++it)
					{
					insert((*it), *p);
					remainingCycles.erase(*it);
					}

				p->recomputeDownstreamCycles();

				currentStackSet.insert(p);
				currentStack.push_back(p);
				}
			}
		}

	for (auto it = changed.begin(); it != changed.end(); ++it)
		outNewCycles.insert(get(*it).shared_from_this());
	}

void InstructionCycle::finish()
	{
	computeInstructionGraph();

	if (!wantsToBePartOfCallersGroup())
		mCIG.reset(new CompiledInstructionGroup(this->shared_from_this()));
	}

bool InstructionCycle::needsInterrupt(InstructionPtr instructionPtr) const
	{
	return mInterruptNodes.find(instructionPtr) != mInterruptNodes.end();
	}

bool InstructionCycle::isInterpreterCrossoverPoint(InstructionPtr instructionPtr) const
	{
	return needsInterrupt(instructionPtr);
	}

bool InstructionCycle::isCompilerEntrypoint(InstructionPtr instructionPtr) const
	{
	return mCompilerEntrypointNodes.find(instructionPtr) != mCompilerEntrypointNodes.end();
	}

const ordered_instruction_set& InstructionCycle::getCompilerEntrypointNodes() const
	{
	return mCompilerEntrypointNodes;
	}

bool InstructionCycle::containsInstruction(InstructionPtr inInstruction) const
	{
	return mInstructions.find(inInstruction) != mInstructions.end();
	}

string InstructionCycle::toString() const
	{
	std::ostringstream s;

	ordered_instruction_set instructions = mInstructions;

	InstructionPtr p;

	while (instructions.size() || p)
		{
		if (!p)
			{
			p = *instructions.begin();
			instructions.erase(p);
			}

		InstructionPtr nextP;

		if (mCompilerEntrypointNodes.find(p) != mCompilerEntrypointNodes.end())
			s << "[Entrypoint] ";
		else
			s << "             ";

		if (mCIG)
			s << "[   CIG] ";
		else
			s << "[NO CIG] ";

		s << p->toString() << "\n";

		for (long k = 0; k < p->flowsToCount(); k++)
			{
			InstructionPtr targetInstructionPtr = p->flowsTo(k);

			if (containsInstruction(targetInstructionPtr))
				{
				if (!nextP && instructions.find(targetInstructionPtr) != instructions.end())
					{
					nextP = targetInstructionPtr;
					instructions.erase(targetInstructionPtr);
					}

				s 	<< "                  ->"
					<< prettyPrintString(targetInstructionPtr->hash())
					<< "\n"
					;
				}
			else
				s 	<< "                  ->("
					<< prettyPrintString(targetInstructionPtr->hash())
					<< ")"
					<< "\n"
					;
			}

		p = nextP;
		}

	return s.str();
	}

bool InstructionCycle::wantsToBePartOfCallersGroup() const
	{
	return !hasCompilerEntrypoint();
	}

bool InstructionCycle::hasCompilerEntrypoint() const
	{
	for (auto	it = mInstructions.begin(),
				it_end = mInstructions.end();
				it != it_end;
				++it)
		if (!(*it)->isRootInstruction() && isCompilerEntrypoint(*it))
			return true;
	return false;
	}

void InstructionCycle::recomputeDownstreamCycles()
	{
	mDownstreamCycles.clear();

	for (auto it = mInstructions.begin(); it != mInstructions.end(); ++it)
		{
		InstructionPtr i = *it;

		for (long k = 0; k < i->flowsToCount(); k++)
			{
			InstructionPtr target = i->flowsTo(k);
			InstructionCycle* targetCycle = &get(target);

			if (targetCycle != this)
				mDownstreamCycles.insert(targetCycle->shared_from_this());
			}
		}
	}

InstructionCycle& InstructionCycle::get(InstructionPtr ptr)
	{
	boost::shared_ptr<InstructionCycle>& cyclePtr(
		ptr->storageFor<boost::shared_ptr<InstructionCycle> >()
		);

	if (!cyclePtr)
		{
		cyclePtr.reset(new InstructionCycle());
		cyclePtr->mInstructions.insert(ptr);
		cyclePtr->recomputeDownstreamCycles();
		}

	return *cyclePtr;
	}

void InstructionCycle::reset(InstructionPtr ptr)
	{
	boost::shared_ptr<InstructionCycle>& cyclePtr(
		ptr->storageFor<boost::shared_ptr<InstructionCycle> >()
		);

	cyclePtr.reset(new InstructionCycle());
	cyclePtr->mInstructions.insert(ptr);
	cyclePtr->recomputeDownstreamCycles();
	}

void InstructionCycle::insert(InstructionPtr ptr, InstructionCycle& cycle)
	{
	boost::shared_ptr<InstructionCycle>& cyclePtr(
		ptr->storageFor<boost::shared_ptr<InstructionCycle> >()
		);

	if (cyclePtr)
		if (&*cyclePtr == &cycle)
			return;

	cyclePtr = cycle.shared_from_this();
	cyclePtr->mInstructions.insert(ptr);
	}

InstructionCycle* InstructionCycle::pickDownstreamCycle(
							InstructionCycle* i,
							const set<InstructionCycle*>& remainingCycles,
							const set<InstructionCycle*>& currentStackSet
							)
	{
	for (auto it = i->mDownstreamCycles.begin(); it != i->mDownstreamCycles.end(); ++it)
		if (remainingCycles.find(&**it) != remainingCycles.end() ||
					currentStackSet.find(&**it) != currentStackSet.end())
			return &**it;

	return 0;
	}

void InstructionCycle::insert(InstructionCycle* curCycle, InstructionCycle& intoCycle)
	{
	std::set<InstructionPtr> instructions = curCycle->mInstructions;

	for (auto it = instructions.begin(); it != instructions.end(); ++it)
		insert(*it, intoCycle);
	}


void InstructionCycle::computeInstructionGraph(void)
	{
	TwoWaySetMap<InstructionPtr, InstructionPtr> instructionGraph;
	ordered_instruction_set required;

	for (auto it = mInstructions.begin(), it_end = mInstructions.end(); it != it_end; ++it)
		{
		InstructionPtr instructionPtr = *it;

		//lassert(!instructionPtr->isRootInstruction());

		for (long k = 0; k < instructionPtr->flowsToCount(); k++)
			{
			InstructionPtr targetInstructionPtr = instructionPtr->flowsTo(k);

			if (containsInstruction(targetInstructionPtr))
				instructionGraph.insert(instructionPtr, targetInstructionPtr);
			}
		}

	vector<InstructionPtr> nodeRemovalOrder = computeNodeRemovalOrder();

	std::set<InstructionPtr> coveringNodes;

	minimumGraphCovering(
		instructionGraph,
		coveringNodes,
		required,
		true,
		nodeRemovalOrder
		);

	lassert(nodeRemovalOrder.size() == mInstructions.size());

	for (auto nodePtr: coveringNodes)
		mInterruptNodes.insert(nodePtr->followJumpNodesAsFarAsPossible());

	mCompilerEntrypointNodes = mInterruptNodes;

	for (auto it = mInstructions.begin(), it_end = mInstructions.end(); it != it_end; ++it)
		if (!(*it)->getLabel())
			mCompilerEntrypointNodes.insert(*it);
	}

vector<InstructionPtr> InstructionCycle::computeNodeRemovalOrder() const
	{
	vector<InstructionPtr> nodeRemovalOrder;

	if (mInstructions.size() > 1)
		{
		//remove nodes with external incoming continuations last. we'll have to
		//infer this from interpreter data

		auto incomingExternalFrequencies = computeIncomingExternalFrequencies();

		std::sort(incomingExternalFrequencies.begin(), incomingExternalFrequencies.end());
		for (long k = 0; k < incomingExternalFrequencies.size(); k++)
			nodeRemovalOrder.push_back(incomingExternalFrequencies[k].second);
		}
	else
		{
		nodeRemovalOrder.push_back(*mInstructions.begin());
		}

	return nodeRemovalOrder;
	}


vector<pair<double, InstructionPtr> > InstructionCycle::computeIncomingExternalFrequencies() const
	{
	auto rootInstructionPtrs = getRootInstructionPtrs();

	vector<pair<double, InstructionPtr> > incomingExternalFrequencies;
	for (auto	it = mInstructions.begin(),
				it_end = mInstructions.end();
				it != it_end;
				++it)
		{
		double incomingExternalFrequency = 0.0;
		auto incomingContinuationElementPtrs =
						(*it)->rootInstructionPtr()->incomingContinuationElementsPtrs();

		for (auto	conn_it = incomingContinuationElementPtrs.begin(),
					conn_it_end = incomingContinuationElementPtrs.end();
					conn_it != conn_it_end;
					++conn_it
					)
			if (rootInstructionPtrs.find((*conn_it)->getSourceInstructionPtr()) ==
					rootInstructionPtrs.end())
				incomingExternalFrequency +=
						(*conn_it)->getSourceInstructionPtr()->executionCount() + 1;

		incomingExternalFrequencies.push_back(make_pair( incomingExternalFrequency, *it ) );
		}
	return incomingExternalFrequencies;
	}

ordered_instruction_set InstructionCycle::getRootInstructionPtrs() const
	{
	ordered_instruction_set rootInstructionPtrs;
	for (auto	it = mInstructions.begin(),
				it_end = mInstructions.end();
				it != it_end;
				++it)
		rootInstructionPtrs.insert( (*it)->rootInstructionPtr() );
	return rootInstructionPtrs;
	}

void InstructionCycle::orderCyclesDownstreamFirst(
					const std::set<boost::shared_ptr<InstructionCycle> >& newCycles,
					std::vector<boost::shared_ptr<InstructionCycle> >& outCyclesInOrder
					)
	{
	std::vector<boost::shared_ptr<InstructionCycle> > currentStack;
	std::set<boost::shared_ptr<InstructionCycle> > currentStackSet;

	std::set<boost::shared_ptr<InstructionCycle> > currentCycles(newCycles);

	while (currentCycles.size() || currentStack.size())
		{
		if (currentStack.size() == 0)
			{
			boost::shared_ptr<InstructionCycle> cycle = *currentCycles.begin();
			currentStack.push_back(cycle);
			currentStackSet.insert(cycle);
			}
		else
			{
			boost::shared_ptr<InstructionCycle> cycle = currentStack.back();

			boost::shared_ptr<InstructionCycle> downstreamCycle;

			for (auto it = cycle->mDownstreamCycles.begin(); it != cycle->mDownstreamCycles.end(); ++it)
				if (currentCycles.find(*it) != currentCycles.end())
					downstreamCycle = *it;

			if (downstreamCycle)
				{
				lassert(currentStackSet.find(downstreamCycle) == currentStackSet.end());

				currentStack.push_back(downstreamCycle);
				currentStackSet.insert(downstreamCycle);
				}
			else
				{
				outCyclesInOrder.push_back(cycle);
				currentCycles.erase(cycle);
				currentStackSet.erase(cycle);
				currentStack.pop_back();
				}
			}
		}

	lassert(outCyclesInOrder.size() == newCycles.size());
	}

}
}

