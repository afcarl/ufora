/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/
#pragma once

#include "../TypedFora/TypedFora.hppml"
#include "../../core/PolymorphicSharedPtr.hpp"
#include "../Interpreter/InstructionPtr.hpp"
#include "CompilerInstructionGraph/InstructionGraph.hppml"

template<class T>
class Nullable;

class Axioms;

namespace TypedFora {
class Compiler;
}

namespace Fora {
namespace Interpreter {

class Continuation;
class ContinuationElement;
class ContinuationArgs;
class ApplyArgs;
class InstructionBody;

}
}

namespace Fora {
namespace Compiler {

class InstructionCycle;
class Compiler;

//compiled representation of an instruction group.
class CompiledInstructionGroup : public boost::enable_shared_from_this<CompiledInstructionGroup> {
public:
	typedef Fora::Compiler::CompilerInstructionGraph::InstructionPtr InstructionPtr;

	typedef Fora::Compiler::CompilerInstructionGraph::ordered_instruction_set ordered_instruction_set;

	CompiledInstructionGroup(boost::shared_ptr<InstructionCycle> inCycle);

	//build our graph
	void initialize(void);

	//define our graph in the compiler. graph must be initialized
	void define(void);

	//register our jump targets set them in the Instruction objects so that the interpreter
	//can find them
	void compileAndLinkToInstructions(bool blockUntilCompiled);

	boost::shared_ptr<InstructionCycle> getRootInstructionCycle(void) const;

	bool isInitialized(void) const;

	bool isDefined(void) const;

	bool compileHasBeenRequested(void) const;

	bool generatesAnEntrypoint(void) const;

	//return the callable for this group if it's defined
	const TypedFora::Callable& getCallable() const;

	//does this CIG always want to be inlined into callers?
	bool alwaysWantsToBeInlined(void) const;

	std::string toString(void) const;

	std::string getLinkerName(void) const;

	static boost::shared_ptr<CompiledInstructionGroup> get(InstructionPtr ptr);

	void unlinkFromInstruction();

private:
	ImmutableTreeVector<TypedFora::Type>
	computeCallSignatureForInstruction(InstructionPtr instructionPtr) const;

	string toGraphVisString();

	friend class CompiledInstructionGroup_BuilderGenerator;

	void writeGraphString(ostringstream& str, InstructionPtr inst);

	void dumpInstructionsToFile();

	//during initialization, add a node to the graph as an entrypoint
	void addEntrypointInstruction(InstructionPtr instructionPtr);

	//during initialization, add a node to the graph as an entrypoint
	void addInstruction(InstructionPtr instructionPtr);

	bool containsNode(InstructionPtr instructionPtr);

	//Computes the CFG for this instruction group.
	TypedFora::Callable build(void);

	TypedFora::Block getBlock(InstructionPtr instructionPtr);

	TypedFora::Block getCallBlock(
						InstructionPtr instructionPtr,
						ImmutableTreeMap<TypedFora::BlockID, TypedFora::Block>& ioBlocks
						);

	TypedFora::CallTarget getCallTarget(InstructionPtr inInstruction) const;

	TypedFora::TransferTarget getTransferTarget(InstructionPtr inInstruction) const;

	void computeInlineableInstructions(void);

	void assignSignatures(void);

	InstructionPtr getSingleIncomingInstruction(InstructionPtr inst);

	TypedFora::Callable 	buildTypedCfg();

//members
	mutable boost::recursive_mutex mMutex;

	TypedFora::Callable mCallable;

	bool mAlwaysWantsToBeInlined;

	InstructionCycle* mRootCycle;

	PolymorphicSharedPtr<TypedFora::Compiler> mTypedJitCompiler;

	PolymorphicSharedPtr<Axioms> mAxioms;

	//all instructions represented in this CFG
	ordered_instruction_set mInstructions;

	//for all entrypoint instructions, what block represents them
	map<InstructionPtr, TypedFora::BlockID> mEntrypointInstructionBlockMapping;

	map<InstructionPtr, TypedFora::BlockID> mBlockMapping;

	TypedFora::ResultSignature mResultSignature;

	map<InstructionPtr, ImmutableTreeVector<TypedFora::Type> > mCallSignatures;

	set<TypedFora::BlockID> mEntrypointBlockIDs;

	//for all graphs, what's the linker name?
	std::string mLinkerName;

	ordered_instruction_set mInlineableInstructions;

	set<boost::shared_ptr<CompiledInstructionGroup> > mDownstreamCompiledGroups;

	bool mDefined;

	bool mCurrentlyBeingDefined;

	bool mInitialized;

	bool mCompileRequested;

};



}
}

