/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/
#include "Term.hppml"
#include "Trace.hppml"
#include "../../core/Logging.hpp"
#include "../ControlFlowGraph/ControlFlowGraphUtil.hppml"
#include "../Judgment/ControlFlowGraphJudgmentUtil.hppml"
#include "../Axioms/Axiom.hppml"

namespace Fora {
namespace JudgmentOnInterpreterTrace {

ImmutableTreeVector<JOV> relaxedJOV(ImmutableTreeVector<JOV> jovs)
	{
	ImmutableTreeVector<JudgmentOnValue> result;

	for (auto jov: jovs)
		result = result + relaxedJOV(jov);

	return result;
	}

Result relaxedResult(Result res)
	{
	return Result(relaxedJOV(res.value()), res.isException());
	}

const static int32_t minimumTermsInNonloopToTriggerCompilation = 500;

Term::Term(Trace* inSourceTrace) :
		mTrace(inSourceTrace),
		mFlowsTo(new DependencyGraph::Mutable<Term*>()),
		mFlowsToReverse(new DependencyGraph::Mutable<Term*>()),
		mNextTermInCurrentFrame(new DependencyGraph::Mutable<Term*>()),
		mFlowType(new DependencyGraph::Mutable<FlowType>()),
		mResult(new DependencyGraph::Mutable<Nullable<Result> >()),
		mIsExpansionApplyTerm(false),
		mLocationAndJudgmentHash(
			DependencyGraph::bind(
				mTrace->mDependencyGraph,
				boost::bind(&Term::computeLocationAndJudgmentHash, this)
				)
			),
		mLoopEntrypoint(
			DependencyGraph::bind(
				mTrace->mDependencyGraph,
				boost::bind(&Term::computeLoopEntryPoint, this)
				)
			),
		mStableMachineCodeTermSource(
			DependencyGraph::bind(
				mTrace->mDependencyGraph,
				boost::bind(&Term::computeStableMachineCodeTermSource, this)
				)
			),
		mFirstTermInCurrentFrame(
			DependencyGraph::bind(
				mTrace->mDependencyGraph,
				boost::bind(&Term::computeFirstTermInStackframe, this)
				)
			),
		mUniqueIdComputation(
			DependencyGraph::bind(
				mTrace->mDependencyGraph,
				boost::bind(&Term::evalFrameUniqueId, this)
				)
			),
		mPriorTermInCurrentFrame(
			DependencyGraph::bindWithPrior(
				mTrace->mDependencyGraph,
				boost::bind(&Term::computePriorTermInCurrentFrame, this, boost::arg<1>())
				)
			),
		mFirstAndNextTermInCurrentFrame(
			DependencyGraph::bind(
				mTrace->mDependencyGraph,
				boost::bind(&Term::computeFirstAndNextTermInCurrentFrame, this)
				)
			),
		mIndex(0),
		mIsMachineCodeTerm(false),
		mEvalFrameUniqueId(0),
		mIsInitialized(false)
	{
	mFirstTermInCurrentFrame->initializeDirtyable();
	mPriorTermInCurrentFrame->initializeDirtyable();
	mFirstAndNextTermInCurrentFrame->initializeDirtyable();
	mLocationAndJudgmentHash->initializeDirtyable();
	mStableMachineCodeTermSource->initializeDirtyable();
	mLoopEntrypoint->initializeDirtyable();
	}

void Term::addToIndices()
	{
	mTrace->mFirstAndNextInStackframeIndex.add(this, mFirstAndNextTermInCurrentFrame);
	mTrace->mLoopEntrypointIndex.add(this, mLoopEntrypoint);
	mTrace->mTermsByUniqueIdIndex.add(this, mUniqueIdComputation);
	}

pair<Term*, Term*> Term::computeFirstAndNextTermInCurrentFrame()
	{
	return make_pair(firstTermInCurrentFrame(), flowsToInCurrentFrame());
	}

bool Term::flowsToReverseIsInCurrentOrHigherStackframe() const
	{
	Term* rev = flowsToReverse();

	if (!rev)
		return false;

	if (rev->flowBetweenMachineCodeTermsHasUnknownRelationship())
		return false;

	return rev->flowsToInCurrentFrame() != 0;
	}

Term* Term::computePriorTermInCurrentFrame_()
	{
	Term* rev = flowsToReverse();

	if (!rev)
		return 0;

	if (rev->flowsToIsInCurrentStackframe_())
		return rev;

	Nullable<uint64_t> priorFrameId = rev->evalFrameUniqueId();
	Nullable<uint64_t> frameId = evalFrameUniqueId();

	if (!frameId)
		return 0;

	if (priorFrameId && frameId && priorFrameId == frameId)
		return rev;

	const auto& othersWithSameId = mTrace->mTermsByUniqueIdIndex.get(frameId);

	Term* candidate = 0;

	for (auto term: othersWithSameId)
		if (term.first->index() < index() && (!candidate || term.first->index() > candidate->index()))
			candidate = (Term*)term.first;

	return candidate;
	}

Term* Term::computePriorTermInCurrentFrame(Term* inPriorValue)
	{
	if (inPriorValue)
		return inPriorValue;

	Term* result = computePriorTermInCurrentFrame_();

	if (result)
		result->mNextTermInCurrentFrame->set(this);

	return result;
	}

Term* Term::computeFirstTermInStackframe()
	{
	Term* reverse = flowsToReverseInCurrentFrame();

	if (!reverse)
		return this;

	return reverse->firstTermInCurrentFrame();
	}

Term* Term::computeLastTermInStackframe()
	{
	Term* reverse = flowsToInCurrentFrame();

	if (!reverse)
		return this;

	return reverse->lastTermInCurrentFrame();
	}

Term* Term::computeStableMachineCodeTermSource()
	{
	if (isMachineCodeTerm())
		{
		if (flowsToReverse() && flowsToReverse()->stableMachineCodeTermSource() &&
				!flowsToReverse()->flowBetweenMachineCodeTermsHasUnknownRelationship())
			return flowsToReverse()->stableMachineCodeTermSource();
		return this;
		}
	else
		{
		if (flowsToReverse() && flowsToReverse()->isMachineCodeTerm() && !flowsToReverseIsChildStackframe())
			return flowsToReverse()->stableMachineCodeTermSource();

		if (flowsToReverse() && flowsToReverse()->stableMachineCodeTermSource())
			{
			if (location().label())
				{
				if (flowsToReverseInCurrentFrame())
					{
					if (flowsToReverseInCurrentFrame()->stableMachineCodeTermSource() &&
							flowsToReverseInCurrentFrame()->stableMachineCodeTermSource() ==
								flowsToReverse()->stableMachineCodeTermSource()
							)
						return flowsToReverseInCurrentFrame()->stableMachineCodeTermSource();
					else
						return 0;
					}
					else
				if (flowsToReverseIsChildStackframe() && wasEverMachineCodeFrame())
					return flowsToReverse()->stableMachineCodeTermSource();
				else
					return 0;
				}
			else
				return flowsToReverse()->stableMachineCodeTermSource();
			}
		}

	return 0;
	}

Term* Term::computeLoopEntryPoint() const
	{
	if (!isMachineCodeTerm() && flowsTo() &&
				(flowsTo()->isMachineCodeTerm())
			&& stableMachineCodeTermSource())
		return stableMachineCodeTermSource();

	if (!isMachineCodeTerm() &&
			index() - firstTermInCurrentFrame()->index() > minimumTermsInNonloopToTriggerCompilation &&
			flowsToIsParentStackframe() &&
			firstTermInCurrentFrame() &&
			!firstTermInCurrentFrame()->location().label()
			)
		return firstTermInCurrentFrame();

	return 0;
	}

//check if 'toFind' flows down to 'term'
bool isPriorTerm(const Term* toFind, const Term* term)
	{
	while (true)
		{
		if (term->firstTermInCurrentFrame() == toFind->firstTermInCurrentFrame())
			return term->index() > toFind->index();

		term = term->firstTermInCurrentFrame();
		if (term->flowsToReverseIsParentStackframe())
			term = term->flowsToReverse();
		else
			return false;
		}
	}

Term* Term::lastTermInCurrentFrame() const
	{
	if (firstTermInCurrentFrame() != this)
		return firstTermInCurrentFrame()->lastTermInCurrentFrame();

	const auto& terms = mTrace->mFirstAndNextInStackframeIndex
		.get(make_pair<Term*,Term*>((Term*)this, 0));

	if (terms.size() != 1)
		return (Term*)this;
	if (terms.begin()->second == 0)
		return (Term*)this;

	return terms.begin()->first;
	}

Nullable<uint64_t> Term::evalFrameUniqueId() const
	{
	if (!mIsMachineCodeTerm)
		return null() << mEvalFrameUniqueId;

	Term* rev = flowsToReverse();

	if (rev && !rev->mIsMachineCodeTerm && rev->mFlowType->get() == FlowType::flows_to_is_same_stackframe)
		return null() << rev->mEvalFrameUniqueId;

	Term* next = flowsTo();

	if (next && !next->mIsMachineCodeTerm && mFlowType->get() == FlowType::flows_to_is_same_stackframe)
		return null() << next->mEvalFrameUniqueId;

	return null();
	}

Term* Term::upApplyTermIn() const
	{
	Term* term = firstTermInCurrentFrame()->flowsToReverse();

	if (!term)
		return 0;

	if (term->flowsToIsChildStackframe_())
		return term;

	return 0;
	}

Term* Term::upApplyTermOut() const
	{
	Term* term = lastTermInCurrentFrame();

	if (term->flowsToIsParentStackframe_() && term->flowsTo())
		return term->flowsTo();

	return 0;
	}

Term* Term::correspondingApplyTerm() const
	{
	if (mIsMachineCodeTerm)
		return 0;

	Term* result = 0;

	if (flowsToIsChildStackframe())
		result = flowsTo()->upApplyTermOut();

	if (flowsToReverse() && flowsToReverseIsChildStackframe())
		result = flowsToReverse()->upApplyTermIn();

	if (result && result->mIsMachineCodeTerm)
		return 0;

	return result;
	}

void Term::initializeAsInterpreterLocation(
		const ControlFlowGraphJumpPoint& location,
		const ImmutableTreeVector<JOV>& jovs,
		uint64_t frameId,
		Nullable<Result> result,
		Nullable<pair<TypedFora::MetadataInstruction, long> > wasEverMachineCodeFrame
		)
	{
	lassert(!mIsInitialized);

	mWasEverMachineCodeFrame = wasEverMachineCodeFrame;
	mLocation = location;
	mJovs = relaxedJOV(jovs);

	mEvalFrameUniqueId = frameId;

	if (result)
		mResult->set(null() << relaxedResult(*result));

	if (mWasEverMachineCodeFrame && mWasEverMachineCodeFrame->second == 0)
		@match TypedFora::MetadataInstruction(wasEverMachineCodeFrame->first)
			-| NodeWithResult(jumpPoint,_,jovs, machineResult) ->> {
				lassert_dump(
					jumpPoint.label() == location.label(),
					prettyPrintString(jumpPoint.label()) << " vs. " << prettyPrintString(location.label())
					);
				lassert_dump(
					jovs.size() == mJovs.size(),
					prettyPrintString(jovs) << " vs. " << prettyPrintString(mJovs)
					);

				mJovs = relaxedJOV(jovs);

				if (machineResult.type())
					mResult->set(null() << Result(machineResult, result->isException()));
				}
			-| Node(jumpPoint, jovs) ->> {
				lassert_dump(
					jumpPoint.label() == location.label(),
					prettyPrintString(jumpPoint.label()) << " vs. " << prettyPrintString(location.label())
					);
				lassert_dump(
					jovs.size() == mJovs.size(),
					prettyPrintString(jovs) << " vs. " << prettyPrintString(mJovs)
					);

				mJovs = relaxedJOV(jovs);
				}

	mIsInitialized = true;
	}


void Term::initializeAsMachineCodeTerm(
		const ControlFlowGraphJumpPoint& location,
		const ImmutableTreeVector<JOV>& jovsOfInstruction,
		const ImmutableTreeVector<JOV>& jovsOfData,
		Nullable<Result> result
		)
	{
	lassert(!mIsInitialized);

	mLocation = location;

	mIsMachineCodeTerm = true;

	mJovs = relaxedJOV(jovsOfInstruction);

	if (result)
		mResult->set(null() << relaxedResult(*result));

	mIsInitialized = true;
	}

void Term::setFlowsToMachineCodeFromInterpreterTerm(Term* targetTerm)
	{
	lassert(!mIsMachineCodeTerm);
	lassert(!result());
	lassert(!flowsTo());
	lassert(targetTerm);
	lassert(targetTerm->mIsMachineCodeTerm);

	mFlowsTo->set(targetTerm);
	targetTerm->mIndex = mIndex + 1;
	mFlowType->set(FlowType::flows_to_is_same_stackframe);
	targetTerm->mFlowsToReverse->set(this);

	targetTerm->addToIndices();
	if (mIndex == 0)
		addToIndices();
	}

void Term::setFlowsToMachineCodeTermFromMachineCodeTerm(Term* targetTerm)
	{
	lassert(mIsMachineCodeTerm);
	lassert(targetTerm);
	lassert(targetTerm->mIsMachineCodeTerm);
	lassert(!flowsTo());

	mFlowsTo->set(targetTerm);
	targetTerm->mIndex = mIndex + 1;

	mFlowType->set(FlowType::flows_to_is_unknown_machinecode_relationship);

	targetTerm->mFlowsToReverse->set(this);

	targetTerm->addToIndices();
	if (mIndex == 0)
		addToIndices();
	}

void Term::setFlowsToInterpreterFromMachineCodeTerm(Term* targetTerm)
	{
	lassert(mIsMachineCodeTerm);
	lassert(targetTerm);
	lassert(!targetTerm->mIsMachineCodeTerm);
	lassert(!flowsTo());

	mFlowsTo->set(targetTerm);
	targetTerm->mIndex = mIndex + 1;

	mFlowType->set(FlowType::flows_to_is_same_stackframe);
	targetTerm->mFlowsToReverse->set(this);

	targetTerm->addToIndices();
	if (mIndex == 0)
		addToIndices();
	}


void Term::setFlowsToInterpreterFromMachineCodeTermAsReturn(Term* targetTerm)
	{
	lassert(mIsMachineCodeTerm);
	lassert(targetTerm);
	lassert(!targetTerm->mIsMachineCodeTerm);
	lassert(!flowsTo());

	mFlowsTo->set(targetTerm);
	targetTerm->mIndex = mIndex + 1;

	mFlowType->set(FlowType::flows_to_is_parent_stackframe);
	targetTerm->mFlowsToReverse->set(this);

	targetTerm->addToIndices();
	if (mIndex == 0)
		addToIndices();
	}

bool Term::flowBetweenMachineCodeTermsHasUnknownRelationship() const
	{
	return
		mFlowType->get() == FlowType::flows_to_is_unknown_machinecode_relationship
			&& !flowsToInCurrentFrame()
			&& !flowsTo()->flowsToReverseInCurrentFrame()
			;
	}

bool Term::flowsToIsInCurrentStackframe() const
	{
	return flowsTo() && flowsTo() == flowsToInCurrentFrame();
	}

bool Term::flowsToIsChildStackframe() const
	{
	return flowsTo() && flowsTo()->upApplyTermIn() == this;
	}

bool Term::flowsToIsParentStackframe() const
	{
	return flowsTo() && upApplyTermOut() == flowsTo();
	}

bool Term::flowsToReverseIsChildStackframe() const
	{
	return flowsToReverse() && flowsToReverse()->flowsToIsParentStackframe();
	}

bool Term::flowsToReverseIsParentStackframe() const
	{
	return flowsToReverse() && flowsToReverse()->flowsToIsChildStackframe();
	}

bool Term::flowsToIsInCurrentStackframe_() const
	{
	return flowsTo() && mFlowType->get() == FlowType::flows_to_is_same_stackframe;
	}

bool Term::flowsToIsParentStackframe_() const
	{
	return flowsTo() && mFlowType->get() == FlowType::flows_to_is_parent_stackframe;
	}

bool Term::flowsToIsChildStackframe_() const
	{
	return flowsTo() && mFlowType->get() == FlowType::flows_to_is_child_stackframe;
	}

Term* Term::flowsToInCurrentFrame() const
	{
	Term* result = mNextTermInCurrentFrame->get();

	if (result && result->flowsToReverseInCurrentFrame() == this)
		return result;

	return 0;
	}

Term* Term::flowsToReverseInCurrentFrame() const
	{
	return mPriorTermInCurrentFrame->get();
	}

long Term::depth() const
	{
	const Term* term = this;
	long depth = 0;

	while (true)
		{
		if (term->upApplyTermIn())
			{
			depth++;
			term = term->upApplyTermIn();
			}
			else
		if (term->upApplyTermOut())
			{
			depth++;
			term = term->upApplyTermOut();
			}
		else
			{
			term = term->firstTermInCurrentFrame();
			if (term->mIsMachineCodeTerm && term->flowsToReverse() &&
					term->flowsToReverse()->flowBetweenMachineCodeTermsHasUnknownRelationship())
				{
				term = term->flowsToReverse();
				}
			else
				return depth;
			}
		}
	}

void Term::setFlowsTo(Term* targetTerm, long whichContinuation)
	{
	lassert(!flowsTo());
	lassert(!targetTerm->flowsToReverse());

	if (mWhichContinuation)
		lassert(*mWhichContinuation == whichContinuation);

	mWhichContinuation = whichContinuation;

	mFlowsTo->set(targetTerm);
	targetTerm->mIndex = mIndex + 1;

	mFlowType->set(FlowType::flows_to_is_same_stackframe);

	targetTerm->mFlowsToReverse->set(this);

	targetTerm->addToIndices();
	if (mIndex == 0)
		addToIndices();
	}

void Term::setWhichContinuation(long whichContinuation)
	{
	if (mWhichContinuation)
		lassert(*mWhichContinuation == whichContinuation);

	mWhichContinuation = whichContinuation;
	}

void Term::setFlowsToAsReturn(Term* targetTerm, long whichContinuation)
	{
	lassert(!flowsTo());
	lassert(!targetTerm->flowsToReverse());

	if (mWhichContinuation)
		lassert(*mWhichContinuation == whichContinuation);

	mWhichContinuation = whichContinuation;

	mFlowsTo->set(targetTerm);
	targetTerm->mIndex = mIndex + 1;

	mFlowType->set(FlowType::flows_to_is_parent_stackframe);

	targetTerm->mFlowsToReverse->set(this);

	targetTerm->addToIndices();
	if (mIndex == 0)
		addToIndices();
	}

void Term::setResult(const Result& inResult)
	{
	lassert(!result());
	lassert(!flowsTo());
	lassert(!mIsMachineCodeTerm);

	mResult->set(null() << relaxedResult(inResult));
	}

void Term::setFlowsToAsApply(Term* targetTerm)
	{
	lassert(targetTerm);

	lassert(!flowsTo());
	lassert(!targetTerm->flowsToReverse());

	mFlowsTo->set(targetTerm);
	targetTerm->mIndex = mIndex + 1;

	mFlowType->set(FlowType::flows_to_is_child_stackframe);

	targetTerm->mFlowsToReverse->set(this);

	targetTerm->addToIndices();
	if (mIndex == 0)
		addToIndices();
	}

hash_type Term::computeLocationAndJudgmentHash()
	{
	return
		hashValue(mJovs) +
		hashValue(location()) +
		hash_type(result() ? 1 : 0)
		;
	}

bool Term::flowsToIsChildStackframeButNotAValidApply() const
	{
	if (!flowsTo())
		return false;
	if (!flowsToIsChildStackframe())
		return false;
	if (mIsMachineCodeTerm)
		return true;
	if (flowsTo()->mIsMachineCodeTerm)
		return true;
	if (flowsTo()->location().label())
		return true;

	return false;
	}

void Term::validateInternalConsistency() const
	{
	lassert(mJovs.size() == nodeBodyArgCount());

	if (flowsTo())
		{
		lassert(flowsTo()->flowsToReverse() == this);

		if (!flowBetweenMachineCodeTermsHasUnknownRelationship())
			{
			if (!isMachineCodeTerm() && !flowsTo()->isMachineCodeTerm())
				{
				if (flowsToIsParentStackframe())
					{
					lassert_dump(
						upApplyTermOut() == flowsTo(),
						this << ": " << upApplyTermOut() << " != " << flowsTo()
							<< ". last term in cur frame = " << lastTermInCurrentFrame()
						);
					if (upApplyTermIn())
						{
						lassert(flowsTo()->correspondingApplyTerm() == upApplyTermIn());
						}
					}
					else
				if (flowsToIsChildStackframe())
					{
					lassert(flowsTo()->upApplyTermIn() == this);
					if (flowsTo()->upApplyTermOut())
						{
						lassert_dump(
							flowsTo()->upApplyTermOut() == correspondingApplyTerm(),
							"for " << this << ", " << flowsTo()->upApplyTermOut() << " != " << correspondingApplyTerm()
							);
						}
					}
				else
					{
					lassert(flowsToIsInCurrentStackframe());
					lassert(flowsTo()->flowsToReverseInCurrentFrame() == this);
					lassert(upApplyTermIn() == flowsTo()->upApplyTermIn());
					lassert(upApplyTermOut() == flowsTo()->upApplyTermOut());
					lassert_dump(
						firstTermInCurrentFrame() == flowsTo()->firstTermInCurrentFrame(),
						firstTermInCurrentFrame() << " vs " << flowsTo()->firstTermInCurrentFrame()
						);
					}
				}
			}
		}

	if (flowsToReverse())
		lassert(flowsToReverse()->flowsTo() == this);

	if (correspondingApplyTerm() && !mIsMachineCodeTerm && !correspondingApplyTerm()->isMachineCodeTerm())
		{
		if (result())
			lassert(!correspondingApplyTerm()->result());

		if (!result())
			lassert(correspondingApplyTerm()->result());
		}
	}

bool Term::shouldAddToInstructionGraph() const
	{
	if (flowsToReverse() && flowsToReverse()->flowsToIsInCurrentStackframe() &&
			flowsToReverse()->isMachineCodeTerm() && isExpansionApplyTerm())
		return false;

	return flowsToReverse() && !flowsToReverseIsChildStackframe();
	}


}
}

