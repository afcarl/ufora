/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/
#pragma once

#include <sstream>

#include "../Tracer/InterpreterTraceTerm.hppml"
#include "../Axioms/Axioms.hppml"
#include "../../core/containers/MapWithIndex.hpp"
#include "../../core/DependencyGraph.hpp"
#include "Result.hppml"

namespace Fora {
namespace JudgmentOnInterpreterTrace {

class Term;

class Trace {
public:
	Trace(
		PolymorphicSharedPtr<Axioms> inAxioms,
		PolymorphicSharedPtr<TypedFora::Compiler> inCompiler
		);

	void addTraceTerm(const InterpreterTraceTerm& inTraceTerm);

	size_t size();

	Term* startTerm() const
		{
		return mInitialTerm;
		}

	Term* endTerm() const
		{
		return mEndTerm;
		}

	void dumpToTextStream(std::ostream& stream);

	void dumpToTextStream(std::ostream& stream, const Term* startTerm, const Term* endTerm, bool outermostOnly = false);

	Nullable<pair<const Term*, const Term*> > searchForLoop();

	void validateTerms();

	const std::vector<InterpreterTraceTerm>& getTraceTerms() const
		{
		return mTermsAdded;
		}

private:
	std::vector<InterpreterTraceTerm> mTermsAdded;

	Trace(const Trace&); //not implemented
	Trace& operator=(const Trace&); //not implemented

	Term* allocateTerm();

	JOV searchForMachineCodeReturnJOV();

	long mLastRecompute;

	void validateTerms(Term* termStart, Term* termStop);

	void rollFrontTermForward();

	bool rollFrontTermForwardOnce();

	void rollFrontTermForward(
					const ControlFlowContinuation& continuation,
					long continuationIndex,
					Nullable<JOV> resultJOV
					);

	void rollFrontTermForward(
				const ImmutableTreeVector<JOV>& newJOVs,
				Nullable<std::string> newLabel,
				long continuationIndex
				);

	void addInitializeTerm(const InterpreterTraceTerm& inTraceTerm);

	void addAxiomResultTerm(const InterpreterTraceTerm& inTraceTerm);

	void addBranchTerm(const InterpreterTraceTerm& inTraceTerm);

	void addNewStackFrameTerm(const InterpreterTraceTerm& inTraceTerm);

	void addReturnToStackFrame(const InterpreterTraceTerm& inTraceTerm);

	void addTransferToMachineCodeFrame(const InterpreterTraceTerm& inTraceTerm);

	void addReturnToMachineCodeFrame(const InterpreterTraceTerm& inTraceTerm);

	void addTransferToInterpreterFromMachineCodeTerm(const InterpreterTraceTerm& inTraceTerm);

	void popCurrentStackframe(const JOV& inJOV, bool isException, long whichContinuation);

	void insertContinuationStackframeRightBefore(
			Term* firstTermInFrame,
			const ControlFlowGraphJumpPoint& location,
			const ImmutableTreeVector<JOV>& jovsInTargetFrame,
			const JOV& resultJOV,
			uint64_t frameUniqueId,
			bool isException,
			Nullable<pair<TypedFora::MetadataInstruction, long> > wasEverMachineCodeFrame
			);

	JudgmentOnValue calculateReturnJOV(Term* term);

	DependencyGraph::Graph mDependencyGraph;

	DependencyGraph::Index<Term*, pair<Term*, Term*> > mFirstAndNextInStackframeIndex;

	DependencyGraph::Index<Term*, Nullable<uint64_t> > mTermsByUniqueIdIndex;

	DependencyGraph::Index<Term*, Term*> mLoopEntrypointIndex;

	Term* mInitialTerm;

	Term* mEndTerm;

	std::vector<boost::shared_ptr<Term> > mTerms;

	friend class Term;

	PolymorphicSharedPtr<Axioms> mAxioms;

	PolymorphicSharedPtr<TypedFora::Compiler> mCompiler;

	Nullable<pair<const Term*, const Term*> > mLoop;

	void checkForLoops();
};

}
}
