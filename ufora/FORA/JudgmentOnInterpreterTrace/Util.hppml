/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/
#pragma once

#include "../Judgment/JudgmentOnValue.hppml"
#include "../ControlFlowGraph/ControlFlowGraph.hppml"
#include "Result.hppml"

namespace Fora {
namespace JudgmentOnInterpreterTrace {

void updateJov(JudgmentOnValue& ioJov, JOV toUpdateWith);

void updateJovList(ImmutableTreeVector<JudgmentOnValue>& ioJovs, long index, JOV jov);

//'tupleCallJovt' contains a tuple that's part of 'ioTargetJovt', which is more relaxed.
//return the subset of tupleCallJovt that corresponds, and remove it from ioTargetJovt
//preconditions: ioTargetJovt covers tupleCallJovt
//postconditions: the return value is covered by tupleCallJovt
//	and the return value, if merged with ioTargetJovt, is covered by ioTargetJovt
JudgmentOnValueTuple extractTupleMergeAndRemoveFromTarget(
						const JOVT& tupleCallJovt,
						JOVT& ioTargetJovt
						);

JOV weakestTupleMatching(const JOV& sourceJOV, const ControlFlowGraphTupleExpandInfo& tupleInfo);

void updateTupleJovForIndex(	const ImmutableTreeVector<JOV>& origJovs,
								ImmutableTreeVector<JOV>& ioJovs,
								const ControlFlowGraphTupleExpandInfo& tupleInfo,
								long index,
								const JOV& targetJov
								);

ImmutableTreeVector<JOV> intersectJovList(
							const ImmutableTreeVector<JudgmentOnValue>& first,
							const ImmutableTreeVector<JudgmentOnValue>& second
							);

JOVT intersectJovts(const JudgmentOnValueTuple& toUpdate, const JudgmentOnValueTuple& intersectWith);

ImmutableTreeVector<JOV> typedJovs(const ImmutableTreeVector<JOV>& in);

void updateTupleJovForRemainingElts(
								const ImmutableTreeVector<JOV>& origJovs,
								ImmutableTreeVector<JOV>& ioJovs,
								const ControlFlowGraphTupleExpandInfo& tupleInfo,
								const JOV& targetJov
								);

JOV weakestJOVDisjointFrom(
					const ImmutableTreeMap<CSTValue, ControlFlowContinuation>& branches,
					const JOV& jovToWeaken
					);
//update 'ioJovs' with as much information as we can given that they became 'targetJovs' under
//'applyArgs'. We include 'sourceJovs' so that we can use the source structure in cases where
//we're using TupleCall
void impliedJudgmentsAtSourceOfApplyTuple(
								const ImmutableTreeVector<JOV>& sourceJovs,
								ImmutableTreeVector<JOV>& ioJovs,
								const ImmutableTreeVector<ControlFlowApplyArg>& applyArgs,
								const JOVT& targetJovs
								);

void impliedJudgmentsAtSource(	const ControlFlowNodeBody& nodeBody,
								const ImmutableTreeVector<JOV>& origJovs,
								const Nullable<Result>& origResult,
								ImmutableTreeVector<JOV>& ioJovs,
								Nullable<Result>& ioResult,
								const ControlFlowContinuation& continuation,
								const ImmutableTreeVector<JOV>& targetJovs,
								const Nullable<Result>& result
								);

void impliedJudgmentsAtSource(	const ControlFlowNodeBody& nodeBody,
								const ImmutableTreeVector<JOV>& origJovs,
								const Nullable<Result>& origResult,
								ImmutableTreeVector<JOV>& ioJovs,
								Nullable<Result>& ioResult,
								const ControlFlowContinuationArg& continuationArg,
								const JOV& targetJov
								);

void impliedJudgmentsAtSource(	const ControlFlowNodeBody& nodeBody,
								const ImmutableTreeVector<JOV>& origJovs,
								const Nullable<Result>& origResult,
								ImmutableTreeVector<JOV>& ioJovs,
								Nullable<Result>& ioResult,
								ImmutableTreeVector<ControlFlowContinuationTupleArg> args,
								JOVT targetJovt
								);


ImmutableTreeVector<JudgmentOnValue> unflattenApplyTupleJudgment(
										JudgmentOnValueTuple flattenedJovt,
										const ImmutableTreeVector<JudgmentOnValue>& unflattenedJOVs,
										const ImmutableTreeVector<ControlFlowApplyArg>& applyArgs
										);

}
}

