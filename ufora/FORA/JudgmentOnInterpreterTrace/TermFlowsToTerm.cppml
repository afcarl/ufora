/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/
#include "TermFlowsToTerm.hppml"
#include "Term.hppml"
#include "../Axioms/Axiom.hppml"
#include "../Judgment/JudgmentOnAction.hppml"
#include "../Judgment/ControlFlowGraphJudgmentUtil.hppml"

#include "Util.hppml"

namespace Fora {
namespace JudgmentOnInterpreterTrace {


bool termFlowsToTerm(
			const Term& sourceTerm,
			const Term& destTerm,
			ControlFlowContinuation continuation
			)
	{
	return true;
	}

bool termFlowsToTerm(
			const Term& sourceTerm,
			const Term& destTerm,
			ControlFlowContinuation continuation,
			JudgmentOnAction targetJOA
			)
	{
	return true;
	}

bool termFlowsToTerm(
			const Term& sourceTerm,
			const Term& destTerm,
			ControlFlowTupleContinuation continuation,
			Nullable<JudgmentOnAction> targetJOA
			)
	{
	return true;
	}

bool termFlowsToTerm(
			PolymorphicSharedPtr<Axioms> inAxioms,
			PolymorphicSharedPtr<TypedFora::Compiler> compiler,
			const Term& sourceTerm,
			const Term& destTerm
			)
	{
	const ControlFlowGraphJumpPoint& location(sourceTerm.location());
	const ControlFlowNode& node = location.graph()[location.label()];

	@match ControlFlowNodeBody(node.body())
		-| Jump(continuation) ->> {
			return termFlowsToTerm(sourceTerm, destTerm, continuation);
			}
		-| Branch(arg, ifTrue, ifFalse) ->> {
			lassert(sourceTerm.whichContinuation());

			return termFlowsToTerm(
				sourceTerm,
				destTerm,
				*sourceTerm.whichContinuation() == 0 ? ifTrue : ifFalse
				);
			}
		-| TupleExpand(arg, ifMatch, ifNoMatch) ->> {
			lassert(sourceTerm.whichContinuation());

			if (*sourceTerm.whichContinuation() == 0)
				return termFlowsToTerm(
					sourceTerm,
					destTerm,
					ifMatch
					);
			else
				return termFlowsToTerm(
					sourceTerm,
					destTerm,
					ifNoMatch
					);
			}
		-| Switch(arg, branches, otherwise) ->> {
			lassert(sourceTerm.whichContinuation());

			long which = *sourceTerm.whichContinuation();

			return termFlowsToTerm(
				sourceTerm,
				destTerm,
				which == branches.size() ? otherwise : branches.pairAtPosition(which).second
				);
			}
		-| Apply(applyArgs, ifNormal, ifException) ->> {
			JOVT applyTuple = getApplyTupleJudgment(applyArgs, sourceTerm.jovs(), null());

			Nullable<AxiomJOA> joa = inAxioms->axiomJOA(applyTuple);

			if (!joa)
				return false;

			return false;
			}
		-| _ ->> {
			}

	return false;
	}

}
}

