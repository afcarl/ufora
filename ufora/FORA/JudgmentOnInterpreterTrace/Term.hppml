/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/
#pragma once

#include "../Judgment/JudgmentOnAction.hppml"
#include "../Judgment/JudgmentOnValue.hppml"
#include "../ControlFlowGraph/ControlFlowGraph.hppml"
#include "../Tracer/InterpreterTraceTerm.hppml"
#include "../../core/containers/ImmutableTreeMap.hppml"
#include "../../core/DependencyGraph.hpp"
#include "Result.hppml"

namespace Fora {
namespace JudgmentOnInterpreterTrace {

class Trace;

class Term;

class Term {
public:
	Trace* getTrace() const
		{
		return mTrace;
		}

	ImmutableTreeVector<JOV> rawJovs() const
		{
		return mJovs;
		}

	ImmutableTreeVector<JOV> jovs() const
		{
		if (flowsToReverseIsChildStackframe() && correspondingApplyTerm())
			return correspondingApplyTerm()->mJovs;
		else
			return mJovs;
		}

	const ControlFlowNodeBody& nodeBody() const
		{
		return mLocation.graph()[mLocation.label()].body();
		}

	long nodeBodyArgCount() const
		{
		return mLocation.graph()[mLocation.label()].argCount();
		}

	const ControlFlowGraphJumpPoint& location() const
		{
		return mLocation;
		}

	bool flowsToIsChildStackframeButNotAValidApply() const;

	Term* stableMachineCodeTermSource() const
		{
		return mStableMachineCodeTermSource->get();
		}

	long depth() const;

	Term* flowsTo() const
		{
		return mFlowsTo->get();
		}

	Term* flowsToReverse() const
		{
		return mFlowsToReverse->get();
		}

	Term* flowsToInCurrentFrame() const;

	Term* flowsToReverseInCurrentFrame() const;

	bool isMachineCodeTerm() const
		{
		return mIsMachineCodeTerm;
		}

	bool isInitialized() const
		{
		return mIsInitialized;
		}

	bool isExpansionApplyTerm() const
		{
		return mIsExpansionApplyTerm;
		}

	bool shouldAddToInstructionGraph() const;

	bool flowsToIsInCurrentStackframe() const;

	bool flowsToIsChildStackframe() const;

	bool flowsToIsParentStackframe() const;

	bool flowsToReverseIsChildStackframe() const;

	bool flowsToReverseIsParentStackframe() const;

	bool flowsToReverseIsInCurrentOrHigherStackframe() const;

	Term* upApplyTermIn() const;

	Term* upApplyTermOut() const;

	//if we're an interpreter apply term, the corresponding interpreter term on the other side
	//of the stackframe.
	Term* correspondingApplyTerm() const;

	Term* firstTermInCurrentFrame() const
		{
		Term* result = mFirstTermInCurrentFrame->get();

		if (!result)
			return (Term*)this;
		else
			return result;
		}

	Term* loopEntrypoint() const
		{
		return mLoopEntrypoint->get();
		}

	Term* lastTermInCurrentFrame() const;

	const Nullable<Result>& result() const
		{
		return mResult->get();
		}

	uint64_t getFrameUniqueId() const
		{
		return mEvalFrameUniqueId;
		}

	void setResult(const Result& inResult);

	void setWhichContinuation(long whichContinuation);

	Nullable<int32_t> whichContinuation() const
		{
		return mWhichContinuation;
		}

	hash_type locationAndJudgmentHash() const
		{
		return mLocationAndJudgmentHash->get();
		}

	void validateInternalConsistency() const;

	bool flowBetweenMachineCodeTermsHasUnknownRelationship() const;

	Nullable<uint64_t> evalFrameUniqueId() const;

	long index() const
		{
		return mIndex;
		}

	Nullable<pair<TypedFora::MetadataInstruction, long> > wasEverMachineCodeFrame() const
		{
		return mWasEverMachineCodeFrame;
		}

	void setIsExpansionApplyTerm()
		{
		mIsExpansionApplyTerm = true;
		}

private:
	void addToIndices();

	//these functions only look at mFlowType - they don't take any larger structure into
	//account
	bool flowsToIsInCurrentStackframe_() const;
	bool flowsToIsParentStackframe_() const;
	bool flowsToIsChildStackframe_() const;

	Term* computeLoopEntryPoint() const;

	Term* computeFirstTermInStackframe();

	Term* computeLastTermInStackframe();

	Term* computePriorTermInCurrentFrame_();

	Term* computePriorTermInCurrentFrame(Term* inPriorValue);

	pair<Term*, Term*> computeFirstAndNextTermInCurrentFrame();

	Term* computeStableMachineCodeTermSource();

	ImmutableTreeVector<JOV> computeSourceJovs();

	enum class FlowType {
		flows_to_is_unset,
		flows_to_is_same_stackframe,
		flows_to_is_child_stackframe,
		flows_to_is_parent_stackframe,
		flows_to_is_unknown_machinecode_relationship
	};

	friend class Trace;

	Term(Trace* inSourceTrace);

	void initializeAsInterpreterLocation(
		const ControlFlowGraphJumpPoint& location,
		const ImmutableTreeVector<JOV>& jovs,
		uint64_t frameId,
		Nullable<Result> result,
		Nullable<pair<TypedFora::MetadataInstruction, long> > wasEverMachineCodeFrame
		);

	void initializeAsMachineCodeTerm(
		const ControlFlowGraphJumpPoint& location,
		const ImmutableTreeVector<JOV>& jovsOfInstruction,
		//if any data elements have been nulled out because of an apply operation, this will be
		//different from 'jovsOfInstruction'
		const ImmutableTreeVector<JOV>& jovsOfData,
		Nullable<Result> result
		);

	void setFlowsToMachineCodeFromInterpreterTerm(Term* targetTerm);

	void setFlowsToMachineCodeTermFromMachineCodeTerm(Term* targetTerm);

	void setFlowsToInterpreterFromMachineCodeTerm(Term* targetTerm);

	void setFlowsToInterpreterFromMachineCodeTermAsReturn(Term* targetTerm);

	void setFlowsTo(Term* targetTerm, long whichContinuation);

	void setFlowsToAsApply(Term* targetTerm);

	void setFlowsToAsReturn(Term* targetTerm, long whichContinuation);

	Trace* mTrace;

	ControlFlowGraphJumpPoint mLocation;

	ImmutableTreeVector<JOV> mJovs;

	//which continuation we took if we have a populated 'mFlowsToNext'. Otherwise null.
	Nullable<int32_t> mWhichContinuation;

	//which term does execution flow go to next
	boost::shared_ptr<DependencyGraph::Mutable<Term*> > mFlowsTo;

	//the single term that flows into us. mFlowsTo and mFlowsToReverse form a linked list
	//that actually traces the full execution flow
	boost::shared_ptr<DependencyGraph::Mutable<Term*> > mFlowsToReverse;

	//is the term we're flowing into one that's directly in a child stackframe?
	boost::shared_ptr<DependencyGraph::Mutable<FlowType> > mFlowType;

	long mIndex;

	//the first instruction in this stackframe
	boost::shared_ptr<DependencyGraph::ComputedProperty<Term*> > mFirstTermInCurrentFrame;

	//the first instruction in this stackframe
	boost::shared_ptr<DependencyGraph::ComputedProperty<Term*> > mPriorTermInCurrentFrame;

	//updated in reverse when we recompute mPriorTermInCurrentFrame
	boost::shared_ptr<DependencyGraph::Mutable<Term*> > mNextTermInCurrentFrame;

	boost::shared_ptr<DependencyGraph::ComputedProperty<std::pair<Term*, Term*> > >
		mFirstAndNextTermInCurrentFrame;

	//corresponding stable term
	boost::shared_ptr<DependencyGraph::ComputedProperty<Term*> > mStableMachineCodeTermSource;

	boost::shared_ptr<DependencyGraph::ComputedProperty<Term*> > mLoopEntrypoint;

	boost::shared_ptr<DependencyGraph::ComputedProperty<Nullable<uint64_t> > > mUniqueIdComputation;

	//if we're an axiomApply or the second half of an expand apply, the actual observed
	//result we saw
	boost::shared_ptr<DependencyGraph::Mutable<Nullable<Result> > > mResult;

	//is this a machine code term?
	bool mIsMachineCodeTerm;

	//if we're not a machine code term, then this is the unique id of the frame
	uint64_t mEvalFrameUniqueId;

	//if we were ever a machine code term, and if so, which one and how many instructions ago?
	Nullable<pair<TypedFora::MetadataInstruction, long> > mWasEverMachineCodeFrame;

	bool mIsInitialized;

	bool mIsExpansionApplyTerm;

	boost::shared_ptr<DependencyGraph::ComputedProperty<hash_type> > mLocationAndJudgmentHash;

	hash_type computeLocationAndJudgmentHash();

	Nullable<Result> computeResult();

};



}
}

template<>
class CPPMLEquality<Fora::JudgmentOnInterpreterTrace::Term*, void> {
public:
		static char cmp(const Fora::JudgmentOnInterpreterTrace::Term* lhs,
							const Fora::JudgmentOnInterpreterTrace::Term* rhs)
			{
			if (lhs < rhs)
				return -1;
			if (lhs > rhs)
				return 1;
			return 0;
			}
};

template<>
class CPPMLPrettyPrint<Fora::JudgmentOnInterpreterTrace::Term*> {
public:
		static void prettyPrint(CPPMLPrettyPrintStream s, Fora::JudgmentOnInterpreterTrace::Term* t)
			{
			s << (void*)t;
			}
};

