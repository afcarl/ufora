/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/
`test dataAsVector_0: (let f = 0.0; f.dataAsVector == Vector.uniform(8, 0u8));
`test dataAsVector_1: (let f = 1.0; f.dataAsVector == [0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 240u8, 63u8]);

f: fun(val, typeString) { 
	assertions.assertEqual(val, val.dataAsVector`(`Member, Symbol("dataAs" + typeString)));
	};

`test _0: f(0.0, "Float64");
`test _1: f(1.0, "Float64");
`test _3: f(0.0f32, "Float32");
`test _4: f(1.0f32, "Float32");
`test _5: f(0, "Int64");
`test _6: f(1, "Int64");
`test _7: f(0s32, "Int32");
`test _8: f(1s32, "Int32");
`test _9: f(0s16, "Int16");
`test _10: f(1s16, "Int16");
`test _11: f(0u, "UInt64");
`test _12: f(1u, "UInt64");
`test _13: f(0u32, "UInt32");
`test _14: f(1u32, "UInt32");
`test _15: f(0u16, "UInt16");
`test _16: f(1u16, "UInt16");

g: fun(val, typeString) {
	let vec = val.dataAsVector;

	assertions.assertEqual(
		vec, 
		vec`(`Member, Symbol("dataAs" + typeString)).dataAsVector
		);
	};

`test _17: g(0.0, "Float64");
`test _18: g(1.0, "Float64");
`test _19: g(0.0f32, "Float32");
`test _20: g(1.0f32, "Float32");
`test _21: g(0, "Int64");
`test _22: g(1, "Int64");
`test _23: g(0s32, "Int32");
`test _24: g(1s32, "Int32");
`test _25: g(0s16, "Int16");
`test _26: g(1s16, "Int16");
`test _27: g(0u, "UInt64");
`test _28: g(1u, "UInt64");
`test _29: g(0u32, "UInt32");
`test _30: g(1u32, "UInt32");
`test _31: g(0u16, "UInt16");
`test _32: g(1u16, "UInt16");

h: fun(val, typeString) {
	assertions.assertThrows(
		fun() {
			val.dataAsVector`(`Member, Symbol("dataAs" + typeString))
			}
		)
	};	

`test _33: h(1.0f32, "Float64");
`test _34: 1.0.dataAsVector.dataAsInt64 is not nothing;
`test _35: (let x = 1; x.dataAsVector.dataAsFloat64 is not nothing);
`test _36: h(1.0, "Float32");
`test _37: h(1.0f32, "Int64");
`test _38: h(1u16, "Int32");
`test _39: h(1, "Int16");
`test _40: h(1.0f32, "UInt64");
`test _41: h(1u16, "UInt32");
`test _42: h(1, "UInt16");


