/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/
`test leftJoin_1: (
    let dfLeft = dataframe.DataFrame(
        key: ['foo', 'foo', 'bar'],
        lval: [1, 2, 3]
        )
    let dfRight = dataframe.DataFrame(
        key: ['foo', 'baz', 'foo'],
        rval: [4,5,6]
        )

    let leftJoin = dfLeft.join(dfRight, on: "key");

    let expectedResult =         
        dataframe.DataFrame(
            lval: [      3,     1,     1,     2,     2],
            rval: [nothing,     4,     6,     4,     6],
            key:  [  'bar', 'foo', 'foo', 'foo', 'foo']
            );

    dataframe.assertFramesEqual(leftJoin, expectedResult)

    for ix in sequence(1, 4)
        {
        leftJoin = dfLeft.join(dfRight, on: "key", chunkSize: ix);

        assertions.assertEqual(leftJoin.columnNames, expectedResult.columnNames)

        dataframe.assertFramesEqual(leftJoin, expectedResult)
        }

    true
    );

`test leftJoin_2: (
    let n = 8
    let aCol = Vector.range(n);
    let bCol = Vector.range(n, { _ + n });
    let cCol = Vector.range(n, { _ + n * 2 });
    let dCol = Vector.range(n, { _ + n * 3 });
    let keyCol = Vector.range(n, { if (_ < n / 2) 0 else 1 });

    let dfLeft = dataframe.DataFrame(
        A: aCol, B: bCol, C: cCol, D: dCol, key: keyCol
        );
    let dfRight = dataframe.DataFrame(
        E: [-1, -2],
        F: [-3, -4],
        key: [0, 1]
        );

    let leftJoin = dfLeft.join(dfRight, on: "key", how: `left);

    let expectedResult = 
        dataframe.DataFrame(
            A: aCol, B: bCol, C: cCol, D: dCol,
            E: [-1, -1, -1, -1, -2, -2, -2, -2],
            F: [-3, -3, -3, -3, -4, -4, -4, -4],
            key: [0, 0, 0, 0, 1, 1, 1, 1]
            );

    dataframe.assertFramesEqual(leftJoin, expectedResult)

    for ix in sequence(1, 8)
        {
        leftJoin = dfLeft.join(dfRight, on: "key", chunkSize: ix);

        dataframe.assertFramesEqual(leftJoin, expectedResult)
        }

    true
    );

`test leftJoin_3: (
    let dfLeft = dataframe.DataFrame(
        key:  [0, 1, 2],
        lval: [1, 2, 3]
        )
    let dfRight = dataframe.DataFrame(
        key:  [3, 4, 5],
        rval: [4, 5, 6]
        )
    
    let leftJoin = dfLeft.join(dfRight, on: "key");

    let expectedResult = 
        dataframe.DataFrame(
            lval: [1, 2, 3],
            rval: [nothing, nothing, nothing],
            key:  [0, 1, 2]
            );

    dataframe.assertFramesEqual(leftJoin, expectedResult)

    for ix in sequence(1, 3)
        {
        leftJoin = dfLeft.join(dfRight, on: "key", chunkSize: ix);

        dataframe.assertFramesEqual(leftJoin, expectedResult)
        }

    true
    );

`test leftJoin_4: (
    let dfLeft = dataframe.DataFrame(
        key:  [3, 4, 5],
        lval: [4, 5, 6]
        )
    let dfRight = dataframe.DataFrame(
        key:  [0, 1, 2],
        rval: [1, 2, 3]
        )
    
    let leftJoin = dfLeft.join(dfRight, on: "key");
    
    let expectedResult = 
        dataframe.DataFrame(
            lval: [4, 5, 6],
            rval: [nothing, nothing, nothing],
            key:  [3, 4, 5]
            );

    dataframe.assertFramesEqual(leftJoin, expectedResult)

    for ix in sequence(1, 3)
        {
        leftJoin = dfLeft.join(dfRight, on: "key", chunkSize: ix);

        dataframe.assertFramesEqual(leftJoin, expectedResult)
        }

    true
    );

`test rightJoin_1: (
    let dfLeft = dataframe.DataFrame(
        key: ['foo', 'foo', 'bar'],
        lval: [1, 2, 3]
        )
    let dfRight = dataframe.DataFrame(
        key: ['foo', 'baz', 'foo'],
        rval: [4,5,6]
        )

    let rightJoin = dfLeft.join(dfRight, on: "key", how: `right);

    let expectedResult =
        dataframe.DataFrame(
            lval: [ nothing,     1,     2,     1,     2],
            rval: [      5,     4,     4,     6,     6],
            key:  [  'baz', 'foo', 'foo', 'foo', 'foo']
            );

    dataframe.assertFramesEqual(rightJoin, expectedResult)

    for ix in sequence(1, 3)
        {
        rightJoin = dfLeft.join(dfRight, on: "key", how: `right, chunkSize: ix);

        dataframe.assertFramesEqual(rightJoin, expectedResult)
        }

    true
    );

`test rightJoin_2: (
    let n = 8
    let aCol = Vector.range(n);
    let bCol = Vector.range(n, { _ + n });
    let cCol = Vector.range(n, { _ + n * 2 });
    let dCol = Vector.range(n, { _ + n * 3 });
    let keyCol = Vector.range(n, { if (_ < n / 2) 0 else 1 });

    let dfRight = dataframe.DataFrame(
        A: aCol, B: bCol, C: cCol, D: dCol, key: keyCol
        );
    let dfLeft = dataframe.DataFrame(
        E: [-1, -2],
        F: [-3, -4],
        key: [0, 1]
        );

    let rightJoin = dfLeft.join(dfRight, on: "key", how: `right);

    let expectedResult = 
        dataframe.DataFrame(
            E: [-1, -1, -1, -1, -2, -2, -2, -2],
            F: [-3, -3, -3, -3, -4, -4, -4, -4],
            A: aCol, B: bCol, C: cCol, D: dCol, key: keyCol
            );

    dataframe.assertFramesEqual(rightJoin, expectedResult);

    for ix in sequence(1, 8)
        {
        rightJoin = dfLeft.join(dfRight, on: "key", chunkSize: ix, how: `right);

        dataframe.assertFramesEqual(rightJoin, expectedResult)
        }

    true
    );

`test innerJoin_1: (
    let dfLeft = dataframe.DataFrame(
        key: ['foo', 'foo', 'bar'],
        lval: [1, 2, 3]
        )
    let dfRight = dataframe.DataFrame(
        key: ['foo', 'baz', 'foo'],
        rval: [4,5,6]
        )

    let innerJoin = dfLeft.join(dfRight, on: "key", how: `inner);

    let expectedResult = 
        dataframe.DataFrame(
            lval: [    1,     1,     2,     2],
            rval: [    4,     6,     4,     6],
            key:  ['foo', 'foo', 'foo', 'foo']
            );

    dataframe.assertFramesEqual(innerJoin, expectedResult)

    for ix in sequence(1, 3)
        {
        innerJoin = dfLeft.join(dfRight, on: "key", how: `inner, chunkSize: ix);

        dataframe.assertFramesEqual(innerJoin, expectedResult)
        }

    true
    );

`test innerJoin_2: (
    let n = 8
    let aCol = Vector.range(n);
    let bCol = Vector.range(n, { _ + n });
    let cCol = Vector.range(n, { _ + n * 2 });
    let dCol = Vector.range(n, { _ + n * 3 });
    let keyCol = Vector.range(n, { if (_ < n / 2) 0 else 1 });

    let dfLeft = dataframe.DataFrame(
        A: aCol, B: bCol, C: cCol, D: dCol, key: keyCol
        );
    let dfRight = dataframe.DataFrame(
        E: [-1, -2],
        F: [-3, -4],
        key: [0, 1]
        );

    let innerJoin = dfLeft.join(dfRight, on: "key", how: `inner);

    let expectedResult = 
        dataframe.DataFrame(
            A: aCol, B: bCol, C: cCol, D: dCol,
            E: [-1, -1, -1, -1, -2, -2, -2, -2],
            F: [-3, -3, -3, -3, -4, -4, -4, -4],
            key: [0, 0, 0, 0, 1, 1, 1, 1]
            );

    dataframe.assertFramesEqual(innerJoin, expectedResult);

    for ix in sequence(1, 8)
        {
        innerJoin = dfLeft.join(dfRight, on: "key", chunkSize: ix, how: `inner);

        dataframe.assertFramesEqual(innerJoin, expectedResult)
        }

    true
    );

`test outerJoin_1: (
    let dfLeft = dataframe.DataFrame(
        key: ['foo', 'foo', 'bar'],
        lval: [1, 2, 3]
        )
    let dfRight = dataframe.DataFrame(
        key: ['foo', 'baz', 'foo'],
        rval: [4,5,6]
        )

    let outerJoin = dfLeft.join(dfRight, on: "key", how: `outer);

    let expectedResult = 
        dataframe.DataFrame(
            lval: [      3, nothing,     1,     1,     2,     2],
            rval: [nothing,       5,     4,     6,     4,     6],
            key:  [  'bar',   'baz', 'foo', 'foo', 'foo', 'foo']
            );

    dataframe.assertFramesEqual(
        outerJoin, expectedResult
        )

    for ix in sequence(1, 3)
        {
        outerJoin = dfLeft.join(dfRight, on: "key", chunkSize: ix, how: `outer);

        dataframe.assertFramesEqual(outerJoin, expectedResult)
        }

    true
    );

`test outerJoin_2: (
    let n = 8
    let aCol = Vector.range(n);
    let bCol = Vector.range(n, { _ + n });
    let cCol = Vector.range(n, { _ + n * 2 });
    let dCol = Vector.range(n, { _ + n * 3 });
    let keyCol = Vector.range(n, { if (_ < n / 2) 0 else 1 });

    let dfLeft = dataframe.DataFrame(
        A: aCol, B: bCol, C: cCol, D: dCol, key: keyCol
        );
    let dfRight = dataframe.DataFrame(
        E: [-1, -2],
        F: [-3, -4],
        key: [0, 1]
        );

    let outerJoin = dfLeft.join(dfRight, on: "key");

    let expectedResult =
        dataframe.DataFrame(
            A: aCol, B: bCol, C: cCol, D: dCol,
            E: [-1, -1, -1, -1, -2, -2, -2, -2],
            F: [-3, -3, -3, -3, -4, -4, -4, -4],
            key: [0, 0, 0, 0, 1, 1, 1, 1]
            );

    dataframe.assertFramesEqual(outerJoin, expectedResult);

    for ix in sequence(1, 8)
        {
        outerJoin = dfLeft.join(dfRight, on: "key", chunkSize: ix, how: `outer);

        dataframe.assertFramesEqual(outerJoin, expectedResult)
        }

    true
    );

`test outerJoin_3: (
    let dfLeft = dataframe.DataFrame(key: [0, 2, 2], lval: [0, 1, 2]);
    let dfRight = dataframe.DataFrame(key: [1, 2, 2], rval: [3, 4, 5]);

    let outerJoin = dfLeft.join(dfRight, on: "key", how: `outer);
    
    let expectedResult =
        dataframe.DataFrame(
            lval: [0, nothing, 1, 1, 2, 2],
            rval: [nothing, 3, 4, 5, 4, 5],
            key:  [0,       1, 2, 2, 2, 2]
            );

    dataframe.assertFramesEqual(outerJoin, expectedResult)

    for ix in sequence(1, 3)
        {
        outerJoin = dfLeft.join(dfRight, on: "key", how: `outer, chunkSize: ix);

        dataframe.assertFramesEqual(outerJoin, expectedResult)
        }

    true
    );

`test outerJoin_4: (
    let dfLeft = dataframe.DataFrame(
        key:  [0, 2, 2, 3, 5],
        lval: [1, 2, 3, 4, 5]
        )
    let dfRight = dataframe.DataFrame(
        key:  [1, 2, 2, 4,  5],
        rval: [6, 7, 8, 9, 10]
        )
    
    let outerJoin = dfLeft.join(dfRight, on: "key", how: `outer);

    let expectedResult = 
        dataframe.DataFrame(
            lval: [1, nothing, 2, 2, 3, 3,       4, nothing,  5],
            rval: [nothing, 6, 7, 8, 7, 8, nothing,       9, 10],
            key:  [0,       1, 2, 2, 2, 2,       3,       4,  5]
            );

    dataframe.assertFramesEqual(outerJoin, expectedResult)

    for ix in sequence(1, 5)
        {
        outerJoin = dfLeft.join(dfRight, on: "key", how: `outer, chunkSize: ix);

        dataframe.assertFramesEqual(outerJoin, expectedResult)
        }

    true
    );

`test outerJoin_5: (
    let dfLeft = dataframe.DataFrame(
        key:  [0, 1, 2],
        lval: [1, 2, 3]
        )
    let dfRight = dataframe.DataFrame(
        key:  [3, 4, 5],
        rval: [4, 5, 6]
        )
    
    let outerJoin = dfLeft.join(dfRight, on: "key", how: `outer);

    let expectedResult =
        dataframe.DataFrame(
            lval: [      1,       2,       3, nothing, nothing, nothing],
            rval: [nothing, nothing, nothing,       4,       5,       6],
            key:  [      0,       1,       2,       3,       4,       5]
            );

    dataframe.assertFramesEqual(outerJoin, expectedResult);

    for ix in sequence(1, 3)
        {
        outerJoin = dfLeft.join(dfRight, on: "key", how: `outer, chunkSize: ix);

        dataframe.assertFramesEqual(outerJoin, expectedResult)
        }

    true
    );

`test outerJoin_6: (
    let dfLeft = dataframe.DataFrame(
        key:  [3, 4, 5],
        lval: [4, 5, 6]
        )
    let dfRight = dataframe.DataFrame(
        key:  [0, 1, 2],
        rval: [1, 2, 3]
        )
    
    let outerJoin = dfLeft.join(dfRight, on: "key", how: `outer);

    let expectedResult =
        dataframe.DataFrame(
            lval: [nothing, nothing, nothing,       4,       5,       6],
            rval: [      1,       2,       3, nothing, nothing, nothing],
            key:  [      0,       1,       2,       3,       4,       5]
            );

    dataframe.assertFramesEqual(outerJoin, expectedResult);

    for ix in sequence(1, 3)
        {
        outerJoin = dfLeft.join(dfRight, on: "key", how: `outer, chunkSize: ix);

        dataframe.assertFramesEqual(outerJoin, expectedResult)
        }

    true
    );

`test outerJoin_7: (
    let dfLeft = dataframe.DataFrame(
        key: [0,2,3,4,5,7,8]
        );
    let dfRight = dataframe.DataFrame(
        key: [0,1,2,4,6,7,9]
        );
    let outerJoin = dfLeft.join(dfRight, on: "key", how: `outer);
    let expectedResult = dataframe.DataFrame(
        key: [0,1,2,3,4,5,6,7,8,9]
        );

    dataframe.assertFramesEqual(outerJoin, expectedResult);
    dataframe.assertFramesEqual(
        dfRight.join(dfLeft, on: "key", how: `outer),
        expectedResult
        );
    );

`test outerJoin_8: (
    let dfLeft = dataframe.DataFrame(
        key: [0,2,3,4,4,4,9,10,11,12,13,14,15,15,15]
        )
    let dfRight = dataframe.DataFrame(
        key: [0,1,2,4,5,6,7,8,9]
        )
    let outerJoin = dfLeft.join(dfRight, on: "key", how: `outer);
    let expectedResult = dataframe.DataFrame(
        key: [0,1,2,3,4,4,4,5,6,7,8,9,10,11,12,13,14,15,15,15]
        );

    dataframe.assertFramesEqual(outerJoin, expectedResult);
    dataframe.assertFramesEqual(
        dfRight.join(dfLeft, on: "key", how: `outer),
        expectedResult
        )
    );

`test joiningWithRenamedColumns: (
    let df = dataframe.DataFrame(a: [1,2,3], b: [4,5,6]);
    let df2 = dataframe.DataFrame(a: [-1,-2,-3], b: [-4,-5,6]);

    let leftJoin = df.join(df2, on: "b", leftSuffix: "_left", rightSuffix: "_right");
    
    dataframe.assertFramesEqual(
        leftJoin,
        dataframe.DataFrame(
            a_left: [1,2,3],
            a_right: [nothing, nothing, -3],
            b: [4,5,6]
            )
        )
    );

`test selfJoining_1: (
    let nPoints = 10
    let aCol = Vector.range(nPoints);
    let bCol = Vector.range(nPoints, { -_ });
    let df = dataframe.DataFrame(a: aCol, b: bCol);

    let leftJoin = df.join(df, on: "a", leftSuffix: "_left", rightSuffix: "_right");

    dataframe.assertFramesEqual(
        leftJoin, 
        dataframe.DataFrame(
            b_left: bCol,
            b_right: bCol,
            a: aCol
            )
        );
    );

