/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/
`test complex_1: (math.Complex(3,4) - math.Complex(-2,4) == math.Complex(5,0));
`test complex_2: (math.Complex(7.6,4) + math.Complex(3,-2.4) == math.Complex(10.6,1.6));
`test complex_3: (
	assertions.assertClose(math.Complex(7.6,4) * math.Complex(3,-2.4),
						   math.Complex(32.4,-6.24))
);
`test complex_4: (
	assertions.assertClose(math.Complex(7.6,4) / math.Complex(3,-2.4),
											math.Complex(0.894309,2.04878), atol:0.001, rtol:0.001)
);
`test complex_5: (
	assertions.assertClose(math.Complex(7.6,4) / 9.8,
						   math.Complex(0.775510,0.408163), atol:0.001, rtol:0.001)
);
`test complex_6: (
	assertions.assertClose(9.8 / math.Complex(7.6,4),
						   math.Complex(1.00976,-0.531453), atol:0.001, rtol:0.001)
);
`test complex_7: (
	assertions.assertClose(math.Complex(7.6,4) ** math.Complex(3,-2.4),
						   math.Complex(-1710.36,1086.55), atol:0.001, rtol:0.001)
);
`test complex_8: (
	assertions.assertClose(3.6 ** math.Complex(3,-2.4),
						   math.Complex(-46.5502,-3.13997), atol:0.001, rtol:0.001)
);
`test complex_9: (
	assertions.assertClose(math.Complex(3,-2.4) ** 3.6,
						   math.Complex(-96.2248,-83.1314), atol:0.001, rtol:0.001)
);
`test complex_conj: ( 
	math.Complex(1,1).conj == math.Complex(1,-1); 
);
`test complex_phase: ( 
	assertions.assertClose(math.Complex(0,1).phase, math.halfPi); 
);
`test complex_polar: ( 
	let res = math.Complex.i.polar; 
	assertions.assertClose(res[0], 1.0) and assertions.assertClose(res[1], math.halfPi);
);
`test complex_rect: ( 
	assertions.assertClose(
		math.Complex.i, 
		math.Complex.rect(1.0, math.halfPi), atol:0.001, rtol:0.001) 
);

`test sqrt_1: ( math.sqrt(4) == 2 );
`test sqrt_2: ( math.sqrt(144) == 12 );

`test absoluteValue_1: ( math.abs(-72.3) == 72.3 );
`test absoluteValue_2: ( math.abs(24) == 24 );
`test absoluteValue_3: ( math.abs(0) == 0 );
`test absoluteValue_4: ( math.abs(math.Complex(1,1)) == math.sqrt(2) );

`test sign_1: ( math.sign(-72.3) == -1 );
`test sign_2: ( math.sign(24.1) == 1 );
`test sign_3: ( math.sign(0) == 0 );

`test hypot_1: ( 
	assertions.assertClose(math.hypot(67.0e20,83.0e28),8.3e29)
);
`test hypot_2: ( 
	assertions.assertClose(math.hypot(3,4),5)
);

`test log_1: ( 
	assertions.assertClose(math.log(math.Complex(2,3)),
						   math.Complex(1.28247468,0.9827937)) 
);
`test log_2: ( 
	assertions.assertClose(math.log(math.Complex(-7,12)),
						   math.Complex(2.631345,2.0988708)) 
);
`test log_3: ( 
	assertions.assertClose(math.log(math.Complex(0,-3)),
						   math.Complex(1.0986122886,-1.5707963267)) 
);
`test log_10_1: ( 
	assertions.assertClose(math.log_10(100),2) 
);
`test log_10_2: ( 
	assertions.assertClose(math.log_10(1000),3) 
);
`test logB_1: ( 
	assertions.assertClose(math.logB(9,3),2) 
);
`test logB_2: ( 
	assertions.assertClose(math.logB(64,4),3) 
);
`test log1p_1: ( 
	assertions.assertClose(math.log1p(2.0e-15), 2.0e-15, atol:0.001, rtol:0.001) 
);
`test log1p_2: ( 
	assertions.assertClose(math.log1p(0.003),0.00299551, atol:0.001, rtol:0.001) 
);

`test exp_1: ( 
	assertions.assertClose(math.exp(math.Complex(2,3)),
						   math.Complex(-7.31511001,1.04274366)) 
);
`test exp_2: ( 
	assertions.assertClose(math.exp(math.Complex(-7,12)),
						   math.Complex(7.694952e-4,-4.8929117e-4)) 
);
`test exp1m: (
	assertions.assertClose(math.expm1(2.5e-6),2.5e-6, atol:0.001, rtol:0.001)
);

`test sin_1: (
	assertions.assertClose(
		math.sin(math.Complex(4.3,5.6)),
		math.Complex(-123.879,-54.1926), 
		atol:0.001, rtol:0.001)
);
`test sin_2: (
	assertions.assertClose(
		math.sin(math.Complex(-11,2.1)),
		math.Complex(4.14427,0.0177995), 
		atol:0.001, rtol:0.001)
);
`test cos_1: (
	assertions.assertClose(
		math.cos(math.Complex(4.3,5.6)),
		math.Complex(-54.1941,123.876), 
		atol:0.001, rtol:0.001)
);
`test cos_2: (
	assertions.assertClose(
		math.cos(math.Complex(-11,2.1)),
		math.Complex(0.0183415,-4.02182), 
		atol:0.001, rtol:0.001)
);
`test tan_1: (
	assertions.assertClose(
		math.tan(math.Complex(4.3,5.6)),
		math.Complex(0.0000200850,1.00002), 
		atol:0.001, rtol:0.001
	)
);
`test tan_2: (
	assertions.assertClose(
		math.tan(math.Complex(-11,2.1)),
		math.Complex(0.000273605,1.03045), 
		atol:0.001, rtol:0.001
	)
);
`test tan_3: (
	assertions.assertClose(math.tan(4.7676),-18.0939, atol:0.001, rtol:0.001)
);
`test cotan_1: (
	assertions.assertClose(
		math.cotan(math.Complex(4.3,5.6)),
		math.Complex(2.00842e-5,-0.999981), atol:0.001, rtol:0.001)
);
`test cotan_2: (
	assertions.assertClose(
		math.cotan(math.Complex(-11,2.1)),
		math.Complex(0.000257675,-0.970453), atol:0.001, rtol:0.001)
);
`test cotan_3: (
	assertions.assertClose(math.cotan(4.7676), -0.0552672, atol:0.001, rtol:0.001)
);
`test sec_1: (
	assertions.assertClose(
		math.sec(math.Complex(4.3,5.6)),
		math.Complex(-0.00296430,-0.00677575), 
		atol:0.001, rtol:0.001)
);
`test sec_2: (
	assertions.assertClose(
		math.sec(math.Complex(-11,2.1)),
		math.Complex(0.00113392,0.248639), 
		atol:0.001, rtol:0.001)
);
`test sec_3: (
	assertions.assertClose(math.sec(4.7676),18.1215, atol:0.001, rtol:0.001)
);
`test csc_1: (
	assertions.assertClose(
		math.csc(math.Complex(4.3,5.6)),
		math.Complex(-0.00677568,0.00296411), atol:0.001, rtol:0.001)
);
`test csc_2: (
	assertions.assertClose(
		math.csc(math.Complex(-11,2.1)),
		math.Complex(0.241292,-0.00103634), atol:0.001, rtol:0.001)
);
`test csc_3: (
	assertions.assertClose(math.csc(4.7676),-1.00153, atol:0.001, rtol:0.001)
);

`test sinh_1: (
	assertions.assertClose(
		math.sinh(math.Complex(4.3,5.6)),
		math.Complex(28.5743,-23.2664), 
		atol:0.001, rtol:0.001)
);
`test sinh_2: (
	assertions.assertClose(
		math.sinh(math.Complex(-11,2.1)),
		math.Complex(15113.6,25842.0), 
		atol:0.001, rtol:0.001)
);
`test sinh_3: (
	assertions.assertClose(math.sinh(4.7676),58.814, atol:0.001, rtol:0.001)
);
`test cosh_1: (
	assertions.assertClose(
		math.cosh(math.Complex(4.3,5.6)),
		math.Complex(28.5848,-23.2578), 
		atol:0.001, rtol:0.001)
);
`test cosh_2: (
	assertions.assertClose(
		math.cosh(math.Complex(-11,2.1)),
		math.Complex(-15113.6,-25842.0), 
		atol:0.001, rtol:0.001)
);
`test cosh_3: (
	assertions.assertClose(math.cosh(4.7676),58.8225, atol:0.001, rtol:0.001)
);
`test tanh_1: (
	assertions.assertClose(math.tanh(math.Complex(4.3,5.6)),math.Complex(0.99992519,-0.00036051763))
);
`test tanh_2: (
	assertions.assertClose(
		math.tanh(math.Complex(-11,2.1)),
		math.Complex(-1.0000000002735,4.8624656166605e-10),
		atol:0.001, rtol:0.001
	)
);
`test tanh_3: (
	assertions.assertClose(math.tanh(4.7676),0.99985548)
);
`test coth_1: (
	assertions.assertClose(math.coth(math.Complex(4.3,5.6)),math.Complex(1.0000747,0.00036057153))
);
`test coth_2: (
	assertions.assertClose(
		math.coth(math.Complex(-11,2.1)),
		math.Complex(-0.99999999972649,4.8624656140006e-10), atol:0.001, rtol:0.001)
);
`test coth_3: (
	assertions.assertClose(math.coth(4.7676),1.0001445)
);
`test sech_1: (
	assertions.assertClose(
		math.sech(math.Complex(4.3,5.6)),
		math.Complex(0.0210489,0.0171263), 
		atol:0.001, rtol:0.001)
);
`test sech_2: (
	assertions.assertClose(
		math.sech(math.Complex(-11,2.1)),
		math.Complex(-0.0000168636,0.0000288341), 
		atol:0.001, rtol:0.001)
);
`test sech_3: (
	assertions.assertClose(math.sech(4.7676),0.0170003, atol:0.001, rtol:0.001)
);
`test csch_1: (
	assertions.assertClose(
		math.csch(math.Complex(4.3,5.6)),
		math.Complex(0.0210443,0.0171352), 
		atol:0.001, rtol:0.001) 
);
`test csch_2: (
	assertions.assertClose(
		math.csch(math.Complex(-11,2.1)),
		math.Complex(0.0000168636,-0.0000288341), 
		atol:0.001, rtol:0.001) 
);
`test csch_3: (
	assertions.assertClose(math.csch(4.7676), 0.0170027, atol:0.001, rtol:0.001) 
);

`test asin_1: (
	assertions.assertClose(math.asin(math.Complex(5,0)),math.Complex(1.5707963267,-2.2924316695)) 
);
`test asin_2: (
	assertions.assertClose(math.asin(.567), 0.602859, atol:0.001, rtol:0.001) 
);
`test asin_3: (
	assertions.assertClose(math.asin(0.356), 0.363984, atol:0.001, rtol:0.001) 
);
`test asin_4: (
	assertions.assertClose(
		math.asin(math.Complex(4.7,-8.3)),math.Complex(0.512899,-2.94989), 
		atol:0.001, rtol:0.001) 
);
`test acos_1: (
	assertions.assertClose(
		math.acos(math.Complex(5,0)),math.Complex(0.0,2.292431669561177), atol:0.0001) 
);
`test acos_2: (
	assertions.assertClose(math.acos(.567),0.967937) 
);
`test acos_3: (
	assertions.assertClose(math.acos(0.356), 1.206812, atol:0.001, rtol:0.001) 
);
`test acos_4: (
	assertions.assertClose(
		math.acos(math.Complex(4.7,-8.3)),
		math.Complex(1.05790,2.94989), atol:0.001, rtol:0.001) 
);
`test atan_1: (
	assertions.assertClose(math.atan(5),1.373400766) 
);
`test atan_2: (
	assertions.assertClose(math.atan(.567), 0.515801, atol:0.001, rtol:0.001) 
);
`test atan_3: (
	assertions.assertClose(math.atan(0.356),0.342010) 
);
`test atan_4: (
	assertions.assertClose(
		math.atan(math.Complex(4.7,-8.3)),
		math.Complex(1.51875,-0.0912363), atol:0.001, rtol:0.001) 
);
`test acot_1: (
	assertions.assertClose(math.acot(5),0.19739555984) 
);
`test acot_2: (
	assertions.assertClose(math.acot(.567), 1.05500, atol:0.001, rtol:0.001) 
);
`test acot_3: (
	assertions.assertClose(math.acot(0.356), 1.228786, atol:0.001, rtol:0.001) 
);
`test acot_4: (
	assertions.assertClose(
		math.acot(math.Complex(4.7,-8.3)),
		math.Complex(0.0520450,0.0912363), atol:0.001, rtol:0.001) 
);
`test asec_1: (
	assertions.assertClose(math.asec(5),1.36943840) 
);
`test asec_2: (
	assertions.assertClose(
		math.asec(math.Complex(.567,0)),
		math.Complex(0.0,1.16827), atol:0.001, rtol:0.001) 
);
`test asec_3: (
	assertions.assertClose(
		math.asec(math.Complex(0.356,0)),
		math.Complex(0.0,1.69267), atol:0.001, rtol:0.001) 
);
`test asec_4: (
	assertions.assertClose(math.asec(math.Complex(4.7,-8.3)),math.Complex(1.519328,-0.09122323)) 
);
`test acsc_1: (
	assertions.assertClose(math.acsc(5), 0.2013579207, atol:0.001, rtol:0.001) 
);
`test acsc_2: (
	assertions.assertClose(
		math.acsc(math.Complex(.567,0)),
		math.Complex(1.57080,-1.16827), 
		atol:0.001, rtol:0.001) 
);
`test acsc_3: (
	assertions.assertClose(
		math.acsc(math.Complex(0.356,0)),
		math.Complex(1.57080,-1.69267), atol:0.001, rtol:0.001) 
);
`test acsc_4: (
	assertions.assertClose(
		math.acsc(math.Complex(4.7,-8.3)),
		math.Complex(0.0514682,0.0912232), atol:0.001, rtol:0.001) 
);

`test asinh_1: (
	assertions.assertClose(math.asinh(5),2.31243834) 
);
`test asinh_2: (
	assertions.assertClose(math.asinh(.567), 0.540322, atol:0.001, rtol:0.001) 
);
`test asinh_3: (
	assertions.assertClose(math.asinh(60),4.787561179) 
);
`test asinh_4: (
	assertions.assertClose(
		math.asinh(math.Complex(4.7,-8.3)),
		math.Complex(2.94706,-1.05318), atol:0.001, rtol:0.001) 
);
`test acosh_1: (
	assertions.assertClose(math.acosh(5),2.292431669561177) 
);
`test acosh_2: (
	assertions.assertClose(
		math.acosh(math.Complex(0.567, 0.0)),
		math.Complex(0.0,0.967937), atol:0.001, rtol:0.001) 
);
`test acosh_3: (
	assertions.assertClose(math.acosh(60),4.787422291) 
);
`test acosh_4: (
	assertions.assertClose(
		math.acosh(math.Complex(4.7,-8.3)),
		math.Complex(2.94989,-1.05790), atol:0.001, rtol:0.001) 
);
`test atanh_1: (
	assertions.assertClose(math.atanh(math.Complex(5,0)),math.Complex(0.2027325540,-1.5707963267)) 
);
`test atanh_2: (
	assertions.assertClose(math.atanh(.567), 0.643090, atol:0.001, rtol:0.001) 
);
`test atanh_3: (
	assertions.assertClose(math.atanh(math.Complex(60,0)),math.Complex(0.01666821013,-1.57079632679)) 
);
`test atanh_4: (
	assertions.assertClose(
		math.atanh(math.Complex(4.7,-8.3)),
		math.Complex(0.0512771,-1.47958), atol:0.001, rtol:0.001) 
);
`test acoth_1: (
	assertions.assertClose(math.acoth(5),0.20273255) 
);
`test acoth_2: (
	assertions.assertClose(
		math.acoth(math.Complex(.567,0)),
		math.Complex(0.643090,-1.57080), atol:0.001, rtol:0.001) 
);
`test acoth_3: (
	assertions.assertClose(math.acoth(60),0.016668210) 
);
`test acoth_4: (
	assertions.assertClose(
		math.acoth(math.Complex(4.7,-8.3)),
		math.Complex(0.0512771,0.0912171), atol:0.001, rtol:0.001) 
);
`test asech_1: (
	assertions.assertClose(
		math.asech(math.Complex(5, 0)),
		math.Complex(0,1.36943840), atol:0.001, rtol:0.001) 
);
`test asech_2: (
	assertions.assertClose(math.asech(.567), 1.16827, atol:0.001, rtol:0.001) 
);
`test asech_3: (
	assertions.assertClose(math.asech(math.Complex(60,0)),math.Complex(0,1.55412888)) 
);
`test asech_4: (
	assertions.assertClose(math.asech(math.Complex(4.7,-8.3)),math.Complex(0.09122323,1.519328)) 
);
`test acsch_1: (
	assertions.assertClose(math.acsch(5),0.19869011) 
);
`test acsch_2: (
	assertions.assertClose(math.acsch(.567), 1.33266, atol:0.001, rtol:0.001) 
);
`test acsch_3: (
	assertions.assertClose(math.acsch(60), 0.016665895, atol:0.001, rtol:0.001) 
);
`test acsch_4: (
	assertions.assertClose(
		math.acsch(math.Complex(4.7,-8.3)),
		math.Complex(0.0518522,0.0912328), atol:0.001, rtol:0.001) 
);

`test ceil_1: (math.ceil(3.4) is 4.0);
`test ceil_2: (math.ceil(3) is 3.0);
`test ceil_3: (math.ceil(-4.2) is -4.0);
`test ceil_4: (math.ceil(-4) is -4.0);
`test floor_1: (math.floor(3.4) is 3.0);
`test floor_2: (math.floor(3) is 3.0);
`test floor_3: (math.floor(-4.2) is -5.0);
`test floor_4: (math.floor(-4) is -4.0);
`test round_1: (math.round(3.5) is 4.0);
`test round_2: (math.round(3.1) is 3.0);
`test round_3: (math.round(-4.2) is -4.0);
`test round_4: (math.round(-4.5) is -4.0);

`test lcm_1: (math.lcm(34,54) is 918);
`test lcm_2: (math.lcm(128,356) is 11392);
`test lcm_3: (math.lcm(21,49,14,63,70,77,28,35) is 97020);
`test gcd_1: (math.gcd(42,63) is 21);
`test gcd_2: (math.gcd(128,356) is 4);
`test gcd_3: (math.gcd(21,49,14,63,70,77,28,35) is 7);

`test erf_1: (
	assertions.assertClose(math.erf(3),0.9999779) 
);
`test erf_2: (
	assertions.assertClose(math.erf(0.05), 0.0563720, atol:0.001, rtol:0.001) 
);
`test erf_3: (
	assertions.assertClose(math.erf(0.278), 0.305792, atol:0.001, rtol:0.001) 
);
`test erfc_1: (
	assertions.assertClose(math.erfc(3), 2.209049699e-5, atol:0.001, rtol:0.001) 
);
`test erfc_2: (
	assertions.assertClose(math.erfc(5.0e-6),0.99999435810) 
);
`test erfc_3: (
	assertions.assertClose(math.erfc(0.278), 0.694208, atol:0.001, rtol:0.001) 
);
`test erfinv_1: (
	assertions.assertClose(math.erfinv(-0.999),-2.3267537655) 
);
`test erfinv_2: (
	assertions.assertClose(math.erfinv(0.0056), 0.00496291152, atol:0.001, rtol:0.001) 
);
`test erfinv_3: (
	assertions.assertClose(math.erfinv(0.278), 0.2515794809928, atol:0.001, rtol:0.001) 
);
`test erfcinv_1: (
	assertions.assertClose(math.erfcinv(0.0056), 1.958917173, atol:0.001, rtol:0.001) 
);
`test erfcinv_2: (
	assertions.assertClose(math.erfcinv(0.68), 0.291655475817, atol:0.001, rtol:0.001) 
);
`test erfcinv_3: (
	assertions.assertClose(math.erfcinv(0.278),0.76708579, atol:0.001, rtol:0.001) 
);


`test tgamma_1: (
	assertions.assertClose(math.tgamma(5),24) 
);
`test tgamma_2: (
	assertions.assertClose(math.tgamma(14.67f32),3.62052e10f32, atol:0.01, rtol:0.01) 
);
/*`test tgamma_3: (
	assertions.assertClose(math.tgamma(math.Complex(30.3,14.9)),math.Complex(4.26222e29,5.28771e29)) 
);*/
/*`test tgamma_4: (
	assertions.assertClose(math.tgamma(math.Complex(7.3,6.5)),math.Complex(62.5818,52.0128)) 
);*/
`test lgamma_1: (
	assertions.assertClose(math.lgamma(3), 0.69314718055, atol:0.001, rtol:0.001) 
);
`test lgamma_2: (
	assertions.assertClose(math.lgamma(375.4f32),1847.92f32, atol:0.001, rtol:0.001) 
);
/*`test lgamma_3: (
	assertions.assertClose(math.lgamma(math.Complex(80,325.8)),math.Complex(-50.0617,1674.64)) 
);*/
/*`test lgamma_4: (
	assertions.assertClose(math.lgamma(math.Complex(3.3,6.4)),math.Complex(-3.85431,9.28968)) 
);*/
`test digamma_1: (
	assertions.assertClose(math.digamma(4.4), 1.36368548) 
);
`test digamma_2: (
	assertions.assertClose(math.digamma(108.39f32), 4.68111, atol:0.001, rtol:0.001) 
);
`test tgammaRatio_1: (
	assertions.assertClose(math.tgammaRatio(34.23, 33.3423), 22.4552, atol:0.001) 
);
`test tgammaRatio_2: (
	assertions.assertClose(math.tgammaRatio(4.25f32, 3.75f32), 1.87319f32, atol:0.001) 
);
`test gammaP_1: (
	assertions.assertClose(math.gammaP(10.0, 8.0), 0.28338, atol:0.001, rtol:0.001) 
);
`test gammaP_2: (
	assertions.assertClose(math.gammaP(12.0f32, 18.0f32), 0.94511f32, atol:0.001, rtol:0.001) 
);
`test gammaPInv_1: (
	assertions.assertClose(math.gammaP(10.0, math.gammaPInv(10.0, 0.80)), 0.80) 
);
`test gammaPInv_2: (
	assertions.assertClose(math.gammaPInv(12.0f32, math.gammaP(12.0f32, 0.75f32)), 0.75f32) 
);
`test gammaPDeriv_1: (
	assertions.assertClose(math.gammaPDerivative(5.5, 4.4), 0.18441, atol:0.001, rtol:0.001) 
);
`test gammaPDeriv_2: (
	assertions.assertClose(math.gammaPDerivative(33.3f32, 66.6f32), 1.258e-06f32, atol:0.001, rtol:0.001) 
);
`test gammaPInva_1: (
	assertions.assertClose(math.gammaP(math.gammaPInva(4.4, 0.8), 4.4), 0.80) 
);
`test gammaPInva_2: (
	assertions.assertClose(math.gammaP(math.gammaPInva(40.4f32, 0.55f32), 40.4f32), 0.55f32) 
);
`test gammaQ_1: (
	assertions.assertClose(math.gammaQ(0.5f32, 10.6f32), 4.1376e-06f32, atol:0.001, rtol:0.001) 
);
`test gammaQ_2: (
	assertions.assertClose(math.gammaQ(100.0, 200.0), 1.8439e-15, atol:0.001, rtol:0.001) 
);
`test gammaQInv_1: (
	assertions.assertClose(math.gammaQInv(10.0, math.gammaQ(10.0, 20.0)), 20.0) 
);
`test gammaQInv_2: (
	assertions.assertClose(math.gammaQInv(8.0f32, math.gammaQ(8.0f32, 5.0f32)), 5.0f32) 
);
`test tgammaLower_1: (
	assertions.assertClose(math.tgammaLower(0.4, 15.0), 2.2182, atol:0.001) 
);
`test tgammaLower_2: (
	assertions.assertClose(math.tgammaLower(39, 15), 9.1759e+37, atol:0.001, rtol:0.001) 
);
`test tgammaIncomplete_1: ( assertions.assertClose(math.tgamma(1.3,2.5), 0.11869, atol:0.001, rtol:0.001) 
);
`test tgammaIncomplete_2: ( assertions.assertClose(math.tgamma(1.3f32,2.5), 0.11869, atol:0.001, rtol:0.001) 
);

`test beta_1: (
	assertions.assertClose(math.beta(0.1, 25.0), 6.9077, atol:0.001, rtol:0.001) 
);
`test beta_2: (
	assertions.assertClose(math.beta(0.2f32, 20.0f32), 2.5318f32, atol:0.001, rtol:0.001) 
);
`test betac_1: (
	assertions.assertClose(math.beta(532.132, 199.88, 0.5), math.betac(199.88, 532.132, 0.5)) 
);
`test betac_2: (
	assertions.assertClose(
		math.beta(52.132f32, 19.88f32, 0.35f32), 
		math.betac(19.88f32, 52.132f32, 0.65f32), atol:0.001, rtol:0.001) 
);
`test ibeta_1: (
	assertions.assertClose(math.ibeta(5, 5, 0.6), 0.73343, atol:0.001, rtol:0.001) 
);
`test ibeta_2: (
	assertions.assertClose(math.ibeta(5.0f32, 5.0f32, 0.6f32), 0.73343f32, atol:0.001, rtol:0.001) 
);
`test ibetac_1: (
	assertions.assertClose(
		math.ibeta(5.0, 5.0, 0.6) + math.ibetac(5.0, 5.0, 0.6), 1.0, atol:0.001, rtol:0.001) 
);
`test ibetac_2: (
	assertions.assertClose(
		math.ibeta(9.0f32, 4.0f32, 0.6f32) + math.ibetac(9.0f32, 4.0f32, 0.6f32), 
		1.0f32, atol:0.001, rtol:0.001) 
);
`test ibetaInv_1: (
	assertions.assertClose(math.ibetaInv(5, 5, math.ibeta(5,5,0.6)), 0.6) 
);
`test ibetaInv_2: (
	assertions.assertClose(math.ibeta(5.0f32, 5.0f32, math.ibetaInv(5.0f32,5.0f32,0.6f32)), 0.6f32) 
);
`test ibetaInvb_1: (
	assertions.assertClose(math.ibeta(5.0, math.ibetaInvb(5.0, 0.2, 0.5), 0.2), 0.5) 
);
`test ibetaInvb_2: (
	assertions.assertClose(math.ibeta(5.0f32, math.ibetaInvb(5.0f32, 0.2f32, 0.5f32), 0.2f32), 0.5f32) 
);
`test ibetacInvb_1: (
	assertions.assertClose(math.ibetac(5.0, math.ibetacInvb(5.0, 0.2, 0.5), 0.2), 0.5) 
);
`test ibetacInvb_2: (
	assertions.assertClose(
		math.ibetac(5.0f32, math.ibetacInvb(5.0f32, 0.2f32, 0.5f32), 0.2f32), 0.5f32, 
		atol:0.001, rtol:0.001) 
);
`test ibetacInv_1: (
	assertions.assertClose(math.ibetac(1.1, 2.2, math.ibetacInv(1.1, 2.2, 0.4)), 0.4) 
);
`test ibetacInv_2: (
	assertions.assertClose(
		math.ibetac(11.1f32, 12.2f32, math.ibetacInv(11.1f32, 12.2f32, 0.4f32)), 
		0.4f32, atol:0.001, rtol:0.001) 
);
`test ibetaInva_1: (
	assertions.assertClose(math.ibeta(math.ibetaInva(66.6, 0.4, 0.123), 66.6, 0.4), 0.123) 
);
`test ibetaInva_2: (
	assertions.assertClose(
		math.ibeta(math.ibetaInva(66.6f32, 0.4f32, 0.123f32), 66.6f32, 0.4f32), 
		0.123f32, atol:0.001, rtol:0.001) 
);
`test ibetacInva_1: (
	assertions.assertClose(math.ibetac(math.ibetacInva(66.6, 0.4, 0.123), 66.6, 0.4), 0.123) 
);
`test ibetacInva_2: (
	assertions.assertClose(
		math.ibetac(math.ibetacInva(66.6f32, 0.4f32, 0.123f32), 66.6f32, 0.4f32), 
		0.123f32, atol:0.001, rtol:0.001) 
);
`test ibetaDerivative_1: (
	assertions.assertClose(math.ibetaDerivative(4,5,0.2), 0.9175, atol:0.001, rtol:0.001) 
);
`test ibetaDerivative_2: (
	assertions.assertClose(math.ibetaDerivative(4,5f32, 0.2), 0.9175f32, atol:0.001, rtol:0.001) 
);

`test integrationTrapz_1:
    (
	let v = Vector.range(100, fun(x) {(x*math.pi)/100});
	let y = v.apply(math.sin);
	assertions.assertClose(math.integration.trapz(y)*(math.pi/100),2.0, atol:0.001, rtol:0.001)
	);
`test integrationTrapz_2: (math.integration.trapz([2,2]) == 2);
`test integrationTrapz_3: (math.integration.trapz([2]) == 0);
`test integrationTrapz_4: (math.integration.trapz([1,4,9,19],[-5,6,2,1]) == 36.5);
`test integrationTrapz_5: (
	assertions.assertClose(math.integration.trapz(math.sin,0,math.pi),2.0, atol:0.001, rtol:0.001) 
);
`test integrationTrapz_6:
    (
	let f = fun(x) { x ** 2 };
	assertions.assertClose(math.integration.trapz(f,0,10,10000),333.33, atol:0.001, rtol:0.001)
	);

`test integrationQuad_1: (
	assertions.assertClose(math.integration.quad(math.sin,0,math.pi,1.0e-6,10),2.0, atol:0.001, rtol:0.001) 
);
`test integrationQuad_2: (
	assertions.assertClose(math.integration.quad(math.sin,0,2.0 * math.pi,1.0e-6,10),0.0, atol:0.001, rtol:0.001) 
);
`test integrationQuad_3:
    (
	let f = fun(x){ [math.cos(x),math.sin(x)] };
	assertions.assertClose(math.integration.quad(f,0,math.pi,1.0e-6,10)[0],0.0, atol:0.001, rtol:0.001) 
	assertions.assertClose(math.integration.quad(f,0,math.pi,1.0e-6,10)[1],2.0, atol:0.001, rtol:0.001)
	);
    
`test binomQuantile_1:
    (
    `binomQuantile(50.0, 0.5, 0.95, `integerRoundOutwards) == 31 and
    `binomQuantile(50.0, 0.5, 0.05, `integerRoundOutwards) == 18
    );
`test binomQuantile_2:
    (
    `binomQuantile(50.0, 0.5, 0.95, `integerRoundInwards) == 30 and 
    `binomQuantile(50.0, 0.5, 0.05, `integerRoundInwards) == 19
    );
`test binomQuantile_3:
    (
    `binomQuantile(50.0, 0.5, 0.95, `integerRoundDown) == 30 and 
    `binomQuantile(50.0, 0.5, 0.05, `integerRoundDown) == 18
    );
`test binomQuantile_4:
    (
    `binomQuantile(50.0, 0.5, 0.95, `integerRoundUp) == 31 and 
    `binomQuantile(50.0, 0.5, 0.05, `integerRoundUp) == 19
    );
`test binomQuantile_5:
    (
    `binomQuantile(50.0, 0.5, 0.95, `integerRoundNearest) == 30 and 
    `binomQuantile(50.0, 0.5, 0.05, `integerRoundNearest) == 19
    );
`test binomQuantile_6:
    (
    assertions.assertClose(`binomQuantile(50.0, 0.5, 0.95, `real), 30.299)
    assertions.assertClose(`binomQuantile(50.0, 0.5, 0.05, `real), 18.701)
    );
    
`test hypergeometric_1:
    (
    assertions.assertClose(`hypergeometricPdf(200u32, 50u32, 1000u32, 20.0), 0.000459, atol:0.001, rtol:0.001)
    assertions.assertClose(`hypergeometricCdf(200u32, 50u32, 1000u32, 20.0), 0.99978, atol:0.001, rtol:0.001) 
    `hypergeometricQuantile(200u32, 50u32, 1000u32, 0.99978, `Nothing) == 20.0;
    );
    
`test hypergeometric_2:
    (
    assertions.assertClose(`hypergeometricPdf(200u32, 50u32, 1000u32, 20.0f32), 0.000459f32, atol:0.001, rtol:0.001)
    assertions.assertClose(`hypergeometricCdf(200u32, 50u32, 1000u32, 20.0f32), 0.99978f32, atol:0.001, rtol:0.001)  
    `hypergeometricQuantile(200u32, 50u32, 1000u32, 0.99978f32, `integerRoundDown) == 19.0f32;
    );

`test modifiedBesselI_1:
    (
	let v = 0.5;
	let x = 10.0;
	
	//a special case, see: 
	//http://www.boost.org/doc/libs/1_53_0/libs/math/doc/sf_and_dist/html/math_toolkit/special/bessel/mbessel.html
	assertions.assertClose(
		math.modifiedBesselI(v, x),
		math.sqrt(2.0 / math.pi / x) * math.sinh(x)
		);

	);

`test modifiedBesselK:
    (
	let v = 0.5;	
	let x = 10.0;

	//a special case, see:
	//http://en.wikipedia.org/wiki/Bessel_function#Modified_Bessel_functions_:_I.CE.B1.2C_K.CE.B1

	let res1 = math.modifiedBesselK(v, x);
	let res2 = 
	    math.sqrt(math.pi / 2.0 / x) * math.exp(-x)
		;

	assertions.assertClose(res1, res2)	
	);

