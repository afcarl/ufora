/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/
/**************
objects and function closures
***************/

`test  functionClosure_1 : (let z = 20; fun() { z }() is 20 );

`test  functionClosure_2 : (let z = 20; fun(x) { z }(10) is 20 );

`test  functionClosure_3 : (let z = 20; fun(x = 10) { z }() is 20 );

`test  functionClosure_4 : (let z = 20; fun(a, x = 30) { z }(10) is 20 );

`test  functionClosure_5 : (let z = 20; fun(a, x = 30) { z }(10,30) is 20 );

`test  functionClosure_6 : (let z = 20; fun(a, x = 30) { x }(10) is 30 );

`test  functionClosure_7 : (let z = 20; fun(a, x = 30) { x }(10,30) is 30 );

`test  functionClosure_8 : (let z = 20; fun(a, x = 30) { a }(10) is 10 );

`test  functionClosure_9 : (let z = 20; fun(a, x = 30) { a }(10,30) is 10 );

`test  functionClosure_10 : (let z = 20; fun(a, x = 30, *args) { z }(10,30,40,50,60) is 20 );

`test  functionClosure_11 : (let z = 20; fun(a, *args) { z }(10,30,40,50,60) is 20 );

`test  functionClosure_12 : (let z = 20; fun(a, x = 30, *args) { size(args) }(10,30,40,50,60) is 3 );

`test  functionClosure_13 : (let z = 20; fun(a, *args) { size(args) }(10,30,40,50,60) is 4 );

`test  functionClosure_14 : (  
	let x = 1;
	let f = fun(a,b) { a+b+x };
	f(0,100) is 101
	);

`test  functionClosure_15 : (  
	fun() {
		let x = 1;
		let f = fun(a,b) { a+b+x };
		f(0, 100)
		} () is 101
	);

`test  functionClosure_16 : (  
	let adder = fun(x) { fun(y) { x + y } };
	let x = 0;
	let res = 0;
	while (x < 100)
		{
		res = adder(x)(res);
		x = x + 1
		};
	res is 4950 
	);

`test  object_2 :   object { x: 20; }.x  is 20;

`test  object_3 : (let x_ = 10; object { x: x_; }.x is 10 );

`test  object_4 : (let x = 10; object { f: fun() { x } }.f() is 10 );

opO:
	fun(x) {
		object {
			operator +(other) { x + other };
			left operator * () { 1.0 / x };
			right operator % () { x ** 10.0 };
			//means "other+self" was called, and other deferred to self
			reverse operator +(other) { other + x };
			}
		}
		;
			
`test  objectOperator_1: opO(20) + 30 is 50;
`test  objectOperator_2: 20 + opO(20) is 40;
`test  objectOperator_3: (opO(2) %) is 2 ** 10.0;
`test  objectOperator_4: (*opO(2)) is 1.0 / 2;

`test  objectMemberSelf_1 : (let c = object { s: self; }; c is c.s );

//object pattern matching syntax
o: object {
	operator match(#A) { (20,) };
	operator match(#B) { (30,) };
	operator match(#D) { throw "tried to match #D" };
    };

`test  objectPatmatch_0 : o `(`MatchFilter, #A) is (20,);
`test  objectPatmatch_1 : match (o) with (#A(x)) { x is 20 };
`test  objectPatmatch_2 : match (o) with (#B(x)) { x is 30 };
`test  objectPatmatch_3 : match (o) with (#C(x)) { false } (_) { true };
`test  objectPatmatch_4 : 
	try {
		match (o) with (#D(x)) { false } 
		} 
	catch("tried to match #D")
		{
		true
		}
	;

//how object calls get translated into FORA operations
o2: object {
	//means to place the raw arguments of any call into 'args'
	...(*args) { args };
	};
`test  objectTranslate_1: o2() is (`Call,);
`test  objectTranslate_2: o2[1] is (`GetItem,1);
`test  objectTranslate_3: (o2[1]=2) is (`SetItem,1,2);
`test  objectTranslate_4: o2.hello is (`Member,`hello);
`test  objectTranslate_5: match (o2) with (#A(*x)) { x is (`MatchFilter, #A) };

`test objectMetadata_1:
	match(`ExtractMetadata("metastring" object {}))
		with ((user: "metastring", kind: `object, ...)) { true };
`test objectMetadata_2:
	match(`ExtractMetadata(`TypeJOV("metastring" object {})))
		with ((user: {String}, kind: `object, ...)) { true }
			(_) { false }
		;

`test objectMembers: `ExtractMemberNames(object{x:10}) is (`x,);
`test objectMembers_2: `ExtractMemberNames(object{x:10; y:20; }) is (`x,`y);
`test objectMembers_3: `ExtractMemberNames(object{y:20; x:10; }) is (`y,`x);

//object type conversion
oConv: object {
	convert(Int64) { 10 };
	convert(String) { "oConv" };
	convert((x,y)) { (x(),y()) };
    };

`test objectConversion_1: Int64(oConv) is 10;
`test objectConversion_2: String(oConv) is "oConv";

`test objectStringification_1: `TypeJOV(String(fun(x){x})) is String;

oGetitem: object {
	operator()() { "call" };
	operator[]() { "getitem" };
	operator[]=(x) { ("setitem",x) };
	operator[]=(x, y) { (x,"setitem",y) };
    };

`test operatorGetitem_1: oGetitem() is "call";
`test operatorGetitem_2: oGetitem[] is "getitem";
`test operatorGetitem_3: (oGetitem[] = 3) is ("setitem",3);
`test operatorGetitem_4: (oGetitem[1] = 3) is (1,"setitem",3);

`test object_complex_members: 
object { x: (1;2) }.x is 2;

`test object_members_are_dicts: 
	object { x: {1:2} }.x is {1:2}
	;
	
`test object_depth2_members:
	(let o = object { x: 10; ..x: 20; ...x: 30};
	o.x is 10 and o..x is 20 and o...x is 30)
	;

`test recursive_let_rebinds_self: (
    // from issue 243
    let self = 42
    let f = fun(x:) { self } (x) { f(x:x) };

    f(1337) is self
    );
