/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/
`test fit_1: (

	let X = [-1.0, -1.0, 
			 -2.0, -1.0, 
			 1.0, 1.0,
			 2.0, 1.0];
	let Y = [1.0, 1.0, -1.0, -1.0]

	X = math.Matrix(X, (4, 2), `row);
	Y = math.Matrix(Y, (4,1));
	
	let fit = math.svm.SVC(X, Y);
	
	// these answers are coming from python scikit-learn
	assertions.assertAllClose(
		fit.dualCoefficients, 
		[ 0.64232232,  0.61147298, -0.6417532 , -0.61204211], 
		atol:0.001,
		rtol:0.001,
		msg:"dual coef ")
	assertions.assertAllClose(
		fit.intercept, 
		[2.59949366e-06], 
		atol:0.001,
		rtol:0.001,
		msg: "intercept ");

	assertions.assertEqual(fit.supportVectorIndices, [0,1,2,3]);
	assertions.assertEqual(fit.nSupportVectorsByClass, [2, 2]);

	assertions.assertEqual(fit.supportVectors(), X);
);

`test predict_1: (

	let X = [-1.0, -1.0, 
			 -2.0, -1.0, 
			 1.0, 1.0,
			 2.0, 1.0];
	let Y = [1.0, 1.0, -1.0, -1.0]

	X = math.Matrix(X, (4, 2), `row);
	Y = math.Matrix(Y, (4,1));
	
	let fit = math.svm.SVC(X, Y);

	assertions.assertEqual(fit.predict(X), Y);
);

`test integral_X: (
	let X = [-1, -1, 
			 -2, -1, 
			 1, 1,
			 2, 1];
	let Y = [1.0, 1.0, -1.0, -1.0]

	X = math.Matrix(X, (4, 2), `row);
	Y = math.Matrix(Y, (4,1));
	
	let fit = math.svm.SVC(X, Y);

	assertions.assertEqual(fit.predict(X), Y);
);

`test bad_input: (
	let X = [];
	let Y = [1.0, 1.0, -1.0, -1.0]
	
	try { 
		math.svm._libsvm(X, Y, nSamples: 4, nFeatures: 0)
		}
	catch (e) { return true }

	false;
);

`test integral_input: (

	let X = [-1.0, -1.0, 
			 -2.0, -1.0, 
			 1.0, 1.0,
			 2.0, 1.0];
	let Y = [1.0, 1.0, -1.0, -1.0]

	X = math.Matrix(X, (4, 2), `row);
	Y = math.Matrix(Y, (4,1));
	
	let fit = math.svm.SVC(X, Y);

	assertions.assertEqual(fit.predict(X.apply(Int64)), Y);
	);

`test fit_2: (

	let X = [-2., -1., -1., -1., -1., -2., 1., 1., 1., 2., 2., 1.];
	let Y = [1., 1., 1., 2., 2., 2.];

	X = math.Matrix(X, (6, 2), `row);
	Y = math.Matrix(Y, (6, 1));

	let fit = math.svm.SVC(X, Y, kernel:'linear');

	assertions.assertAllClose(fit.dualCoefficients, [0.25, -0.25]);
	assertions.assertEqual(fit.supportVectorIndices, [1, 3]);
	assertions.assertEqual(fit.supportVectors(), math.Matrix([-1., -1., 1., 1.], (2,2), `row));
	assertions.assertEqual(fit.intercept, [0.0]);
	assertions.assertEqual(fit.predict(X), Y);
);

`test linear_iris: (
	let fit = math.svm.SVC(iris_X, iris_y, kernel:'linear');

	assertions.assertAllClose(
		fit.dualCoefficients, 
		[ 0.67075289,  0.        ,  0.07709756, -0.        , -0.        ,
           -0.        , -0.        , -0.        , -0.        , -0.        ,
           -0.        , -0.        , -0.        , -0.        , -0.74785045,
           -0.2036925 , -0.        , -0.        , -0.        , -0.        ,
           -0.        , -0.        , -0.        , -0.        , -0.        ,
           -0.        , -0.        ,
		  0.04382042,  0.15987209,  0.        ,  1.        ,  1.        ,
           1.        ,  1.        ,  1.        ,  1.        ,  1.        ,
           0.24326189,  1.        ,  1.        ,  1.        ,  0.        ,
           -1.        , -1.        , -1.        , -1.        , -1.        ,
           -1.        , -0.43785982, -1.        , -1.        , -0.64510535,
          -0.16029672, -1.        ],
		atol:0.001,
		rtol:0.01,
		msg:"dual coef "
	);
	assertions.assertAllClose(
		fit.intercept, 
		[ 1.4528445 ,  1.50771313,  6.78097119], 
		atol:0.001,
		rtol:0.001,
		msg:"intercept ");
	assertions.assertEqual(
		fit.supportVectorIndices, 
		[ 23,  24,  41,  52,  56,  63,  66,  68,  70,  72,  76,  77,  83,
		  84,  98, 106, 110, 119, 123, 126, 127, 129, 133, 138, 146, 147, 149],
		"supportVectorIndices "		
		);
	assertions.assertEqual(fit.nSupportVectorsByClass, [3,12,12]);
	assertions.assertEqual(fit.nClasses, 3);
	assertions.assertEqual(fit.supportVectorsData_,
				 [ 5.1,  3.3,  1.7,  0.5,
				   4.8,  3.4,  1.9,  0.2,
				   4.5,  2.3,  1.3,  0.3,
				   6.9,  3.1,  4.9,  1.5,
				   6.3,  3.3,  4.7,  1.6,
				   6.1,  2.9,  4.7,  1.4,
				   5.6,  3. ,  4.5,  1.5,
				   6.2,  2.2,  4.5,  1.5,
				   5.9,  3.2,  4.8,  1.8,
				   6.3,  2.5,  4.9,  1.5,
				   6.8,  2.8,  4.8,  1.4,
				   6.7,  3. ,  5. ,  1.7,
				   6. ,  2.7,  5.1,  1.6,
				   5.4,  3. ,  4.5,  1.5,
				   5.1,  2.5,  3. ,  1.1,
				   4.9,  2.5,  4.5,  1.7,
				   6.5,  3.2,  5.1,  2. ,
				   6. ,  2.2,  5. ,  1.5,
				   6.3,  2.7,  4.9,  1.8,
				   6.2,  2.8,  4.8,  1.8,
				   6.1,  3. ,  4.9,  1.8,
				   7.2,  3. ,  5.8,  1.6,
				   6.3,  2.8,  5.1,  1.5,
				   6. ,  3. ,  4.8,  1.8,
				   6.3,  2.5,  5. ,  1.9,
				   6.5,  3. ,  5.2,  2. ,
				   5.9,  3. ,  5.1,  1.8]
				);
	assertions.assertEqual(fit.supportVectorsLabels, [0, 1, 2]);

	let predictions = fit.predict(iris_X);

	let correctValues = 
		zipWith(fun(x,y) { if (x == y) 1.0 else 0.0 },
				predictions, iris_y
			   );
	
	assertions.assertTrue(correctValues.sum() / iris_y.dim[0] > 0.95, msg: "linear prediction accuracy on iris")
);

`test gaussian_rbf_iris: (
	//TODO add some more checks to this test

	let fit = math.svm.SVC(iris_X, iris_y);

	let predictions = fit.predict(iris_X);

	let correctValues = 
		zipWith(fun(x,y) { if (x == y) 1.0 else 0.0 },
				predictions, iris_y
			   );
	
	assertions.assertTrue(correctValues.sum() / iris_y.dim[0] > 0.95, msg: "rbf prediction accuracy on iris")
);

`test SVR_basic: (
	let X = math.Matrix([0., 0., 2., 2.], (2,2), `row);
	let y = math.Matrix([0.5, 2.5], (2,1));

	let fit = math.svm.SVR(X, y);

	assertions.assertAllClose(fit.dualCoefficients, [-0.91679162,  0.91679162]);
	assertions.assertAllClose(fit.intercept, [1.5]);
	assertions.assertAllClose(fit.supportVectorIndices, [0, 1]);
	assertions.assertEqual(fit.supportVectors(), X);

	let prediction = fit.predict(math.Matrix([1., 1.], (1,2), `row));
	assertions.assertEqual(
		prediction,
		math.Matrix([1.5], (1,1))
	)
);

`test dont_die_on_predict_if_nSupport_is_zero: (
	let X = math.Matrix([0., 0., 2., 2.], (2,2), `row);
	let y = math.Matrix([0.5, 0.5], (2,1));


	try {
		math.svm.SVR(X, y);
		
		return false
		}
	catch (e)
		{
		return e == "the number of classes has to be greater than one"
		}
	
);

`test SVR_1: (
	/*
	  X and y correspond to the following python code:

	  import numpy as np
	  np.random.seed(42)
	  X = np.sort(5 * np.random.rand(40, 1), axis=0)
	  y = np.sin(X).ravel()
	  y[::5] += 3 * (0.5 - np.random.rand(8))
	  
	 */

	let X = 
		[ 0.10292247,
		  0.23225206,
		  0.29041806,
		  0.32525796,
		  0.48836057,
		  0.6974693 ,
		  0.7799726 ,
		  0.7800932 ,
		  0.85262062,
		  0.90912484,
		  0.91702255,
		  0.99836891,
		  1.06169555,
		  1.4561457 ,
		  1.46072324,
		  1.52121121,
		  1.52306885,
		  1.83180922,
		  1.87270059,
		  2.15972509,
		  2.20076247,
		  2.28034992,
		  2.57117219,
		  2.62378216,
		  2.96207284,
		  2.99329242,
		  3.00557506,
		  3.03772426,
		  3.05926447,
		  3.42116513,
		  3.54036289,
		  3.65996971,
		  3.92587981,
		  4.04198674,
		  4.1622132 ,
		  4.33088073,
		  4.74442769,
		  4.75357153,
		  4.82816017,
		  4.84954926];

	X = math.Matrix(X, (size(X), 1));
	
	let y = 
		[ 1.23662615,  0.2301697 ,  0.2863528 ,  0.31955324,  0.46917873,
          0.65674931,  0.70325994,  0.70334567,  0.75300739,  0.78896631,
          2.19062873,  0.84058858,  0.87318314,  0.99343481,  0.99394807,
		  -0.2291903 ,  0.99886126,  0.96612909,  0.95477201,  0.83153619,
          1.53170751,  0.75865278,  0.53998599,  0.49497885,  0.17855712,
		  -0.33980962,  0.13559858,  0.10368173,  0.08223521, -0.27594475,
          0.17658141, -0.49547106, -0.70632074, -0.78357182, -0.85243263,
		  -0.9883082 , -0.9994868 , -0.99915212, -0.993306  , -0.99060827]

	y = math.Matrix(y, (size(y), 1));

	/****************
	Gaussian rbf fit
	*****************/

	let rbf_fit = math.svm.SVR(X, y, kernel:"rbf", C:1e3, gamma:0.1);

	assertions.assertEqual(rbf_fit.nSupportVectors, 13, msg: "rbf nSupportVectors");
	assertions.assertEqual(
		rbf_fit.supportVectorIndices,
		[ 0,  1,  2, 10, 15, 18, 19, 20, 25, 29, 30, 35, 39],
		msg:"rbf supportVectorIndices"
		);
	assertions.assertEqual(
		rbf_fit.supportVectors(),
		math.Matrix(
			[ 0.10292247,
			  0.23225206,
			  0.29041806,
			  0.91702255,
			  1.52121121,
			  1.87270059,
			  2.15972509,
			  2.20076247,
			  2.99329242,
			  3.42116513,
			  3.54036289,
			  4.33088073,
			  4.84954926 ], (13, 1)
			),
		msg: "rbf supportVectors"
		);

	// these answers differ slightly from calling sklearn o_O
	assertions.assertAllClose(
		rbf_fit.dualCoefficients,
		[1000.0, -1000.0, -465.95901699808, 1000.0, -1000.0, -34.0822810586999, -42.6054012723407, 
		 1000.0, -1000.0, -225.925614866894, 1000.0, -322.667791860759, 91.2401060567739],
		msg: "dual coef "
		);

	assertions.assertEqual(rbf_fit.params.gamma, 0.1, msg:"rbf gamma");
	assertions.assertAllClose(
		rbf_fit.intercept,
		[ 0.08331325],
		atol:0.001
		);
	assertions.assertEqual(rbf_fit.nClasses, 2, "nClasses")

	assertions.assertAllClose(
		rbf_fit.predict(X),
		math.Matrix(
			[ 0.22484107,  0.33556594,  0.38580641,  0.41588592,  0.55490074,
			  0.7224697 ,  0.78318714,  0.78327313,  0.83338459,  0.87005439,
			  0.87500337,  0.92330123,  0.95732596,  1.08776481,  1.08838281,
			  1.09451973,  1.09464826,  1.0661546 ,  1.05503377,  0.9316865 ,
			  0.90799294,  0.85812715,  0.63763645,  0.59239522,  0.27594804,
			  0.2452753 ,  0.23317137,  0.20140892,  0.18007377, -0.17654822,
			  -0.28939163, -0.39827747, -0.61980917, -0.70592653, -0.78745663,
			  -0.88793716, -1.06234495, -1.06503844, -1.08516056, -1.0903268 ],
			(X.dim[0], 1)
			),
		atol:0.01,
		rtol:0.01,
		msg:"predictions "
		);

	/****************
	Linear fit
	*****************/

	let linear_fit = math.svm.SVR(X, y, kernel:"linear", C:1e3);

	assertions.assertEqual(linear_fit.nSupportVectors, 34, msg: "linear nSupportVectors");
	assertions.assertEqual(
		linear_fit.supportVectorIndices,
		[ 1,  2,  3,  4,  5,  6,  7,  8, 10, 12, 13, 14, 15, 16, 17, 18, 19,
		  20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 35, 36, 37]
		);
	assertions.assertEqual(
		linear_fit.supportVectors(),
		math.Matrix(
			[ 0.23225206,
			  0.29041806,
			  0.32525796,
			  0.48836057,
			  0.6974693 ,
			  0.7799726 ,
			  0.7800932 ,
			  0.85262062,
			  0.91702255,
			  1.06169555,
			  1.4561457 ,
			  1.46072324,
			  1.52121121,
			  1.52306885,
			  1.83180922,
			  1.87270059,
			  2.15972509,
			  2.20076247,
			  2.28034992,
			  2.57117219,
			  2.62378216,
			  2.96207284,
			  2.99329242,
			  3.00557506,
			  3.03772426,
			  3.05926447,
			  3.54036289,
			  3.65996971,
			  3.92587981,
			  4.04198674,
			  4.1622132 ,
			  4.33088073,
			  4.74442769,
			  4.75357153], (34, 1)
			),
		msg: "linear supportVectors"
		);

	assertions.assertAllClose(
		linear_fit.dualCoefficients,
		[-1000.        , -1000.        , -1000.        , -1000.        ,
         -1000.        , -1000.        , -1000.        , -1000.        ,
         1000.        ,   609.17517233,  1000.        ,  1000.        ,
         -1000.        ,  1000.        ,  1000.        ,  1000.        ,
         1000.        ,  1000.        ,  1000.        ,  1000.        ,
         1000.        ,  1000.        , -1000.        ,  1000.        ,
         1000.        ,  1000.        ,  1000.        ,  -609.17517233,
         -1000.        , -1000.        , -1000.        , -1000.        ,
         -1000.        , -1000.        ],
		atol: 0.001,
		rtol: 0.001,
		msg:"linear dualCoefficients "
		);

	assertions.assertAllClose(
		linear_fit.intercept,
		[ 1.25151294],
		atol: 0.001,
		rtol: 0.001,
		msg:"linear intercept "
		);
	assertions.assertEqual(linear_fit.nClasses, 2, "linear nClasses ")
	
	assertions.assertAllClose(
		linear_fit.predict(X),
		math.Matrix(
			[ 1.20516508,  1.14692561,  1.1207324 ,  1.10504336,  1.03159529,
			  0.93742983,  0.90027709,  0.90022278,  0.86756237,  0.84211749,
			  0.83856101,  0.80192926,  0.77341212,  0.59578404,  0.59372269,
			  0.56648386,  0.56564733,  0.42661593,  0.4082018 ,  0.27894944,
			  0.26046957,  0.22462989,  0.09366733,  0.06997611, -0.08236234,
			  -0.09642109, -0.10195218, -0.11642955, -0.1261295 , -0.28909995,
			  -0.34277687, -0.396638  , -0.51638215, -0.56866721, -0.62280738,
			  -0.69876143, -0.88498915, -0.88910679, -0.92269541, -0.93232731],			
			(X.dim[0], 1)
			),
		atol: 0.001,
		rtol: 0.001,
		msg:"linear predict "
		);

	/****************
	Degree 2 poly fit
	*****************/

	let poly_fit = math.svm.SVR(X, y, kernel:"poly", C:1e3, degree:2);
	
	assertions.assertEqual(poly_fit.nSupportVectors, 32, msg: "poly nSupportVectors");
	assertions.assertEqual(
		poly_fit.supportVectorIndices,
		[ 0,  1,  2,  3,  4,  5,  6,  7,  8, 10, 13, 14, 15, 16, 17, 18, 19,
		  20, 21, 22, 23, 25, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39],
		msg: "poly supportVectorIndices"
		);
	assertions.assertEqual(
		poly_fit.supportVectors(),
		math.Matrix(
			[ 0.10292247,
			  0.23225206,
			  0.29041806,
			  0.32525796,
			  0.48836057,
			  0.6974693 ,
			  0.7799726 ,
			  0.7800932 ,
			  0.85262062,
			  0.91702255,
			  1.4561457 ,
			  1.46072324,
			  1.52121121,
			  1.52306885,
			  1.83180922,
			  1.87270059,
			  2.15972509,
			  2.20076247,
			  2.28034992,
			  2.57117219,
			  2.62378216,
			  2.99329242,
			  3.42116513,
			  3.54036289,
			  3.65996971,
			  3.92587981,
			  4.04198674,
			  4.1622132 ,
			  4.33088073,
			  4.75357153,
			  4.82816017,
			  4.84954926], (32, 1)
			),
		msg:"poly support vectors "
		);

	assertions.assertAllClose(
		poly_fit.dualCoefficients,
		[ 1000.        , -1000.        , -1000.        , -1000.        ,
          -1000.        , -1000.        , -1000.        , -1000.        ,
          -207.41232506,  1000.        ,  1000.        ,  1000.        ,
          -1000.        ,  1000.        ,  1000.        ,  1000.        ,
          1000.        ,  1000.        ,  1000.        ,  1000.        ,
          1000.        , -1000.        , -1000.        ,  1000.        ,
          -1000.        , -1000.        , -1000.        , -1000.        ,
          -1000.        ,   207.41232506,  1000.        ,  1000.        ],
		atol: 0.001,
		rtol: 0.001,
		msg:"poly dualCoefficients "
		);

	assertions.assertAllClose(
		poly_fit.intercept,
		[ 0.91634204 ],
		atol: 0.001,
		rtol: 0.001,
		msg:"poly intercept "
		);

	assertions.assertAllClose(
		poly_fit.predict(X),
		math.Matrix(
			[ 0.91540511,  0.91157107,  0.90888211,  0.90698489,  0.89524756,
			  0.87331535,  0.86253409,  0.86251745,  0.85204375,  0.8432391 ,
			  0.84196347,  0.82818239,  0.81664373,  0.72880051,  0.72761955,
			  0.71166608,  0.7111659 ,  0.61955272,  0.6061544 ,  0.5037843 ,
			  0.48795716,  0.45641305,  0.33161912,  0.30744573,  0.14031069,
			  0.1238661 ,  0.11734908,  0.10016477,  0.08854886, -0.11888563,
			  -0.19227961, -0.26845178, -0.44686492, -0.5286903 , -0.61593199,
			  -0.7426345 , -1.07458553, -1.08226708, -1.14547979, -1.1637883 ],
			(X.dim[0], 1)
			),
		atol: 0.01,
		rtol: 0.01,
		msg:"poly predict "
		);
);

iris_X:
math.Matrix(
"""5.1,3.5,1.4,0.2,
 4.9,3.0,1.4,0.2,
 4.7,3.2,1.3,0.2,
 4.6,3.1,1.5,0.2,
 5.0,3.6,1.4,0.2,
 5.4,3.9,1.7,0.4,
 4.6,3.4,1.4,0.3,
 5.0,3.4,1.5,0.2,
 4.4,2.9,1.4,0.2,
 4.9,3.1,1.5,0.1,
 5.4,3.7,1.5,0.2,
 4.8,3.4,1.6,0.2,
 4.8,3.0,1.4,0.1,
 4.3,3.0,1.1,0.1,
 5.8,4.0,1.2,0.2,
 5.7,4.4,1.5,0.4,
 5.4,3.9,1.3,0.4,
 5.1,3.5,1.4,0.3,
 5.7,3.8,1.7,0.3,
 5.1,3.8,1.5,0.3,
 5.4,3.4,1.7,0.2,
 5.1,3.7,1.5,0.4,
 4.6,3.6,1.0,0.2,
 5.1,3.3,1.7,0.5,
 4.8,3.4,1.9,0.2,
 5.0,3.0,1.6,0.2,
 5.0,3.4,1.6,0.4,
 5.2,3.5,1.5,0.2,
 5.2,3.4,1.4,0.2,
 4.7,3.2,1.6,0.2,
 4.8,3.1,1.6,0.2,
 5.4,3.4,1.5,0.4,
 5.2,4.1,1.5,0.1,
 5.5,4.2,1.4,0.2,
 4.9,3.1,1.5,0.1,
 5.0,3.2,1.2,0.2,
 5.5,3.5,1.3,0.2,
 4.9,3.1,1.5,0.1,
 4.4,3.0,1.3,0.2,
 5.1,3.4,1.5,0.2,
 5.0,3.5,1.3,0.3,
 4.5,2.3,1.3,0.3,
 4.4,3.2,1.3,0.2,
 5.0,3.5,1.6,0.6,
 5.1,3.8,1.9,0.4,
 4.8,3.0,1.4,0.3,
 5.1,3.8,1.6,0.2,
 4.6,3.2,1.4,0.2,
 5.3,3.7,1.5,0.2,
 5.0,3.3,1.4,0.2,
 7.0,3.2,4.7,1.4,
 6.4,3.2,4.5,1.5,
 6.9,3.1,4.9,1.5,
 5.5,2.3,4.0,1.3,
 6.5,2.8,4.6,1.5,
 5.7,2.8,4.5,1.3,
 6.3,3.3,4.7,1.6,
 4.9,2.4,3.3,1.0,
 6.6,2.9,4.6,1.3,
 5.2,2.7,3.9,1.4,
 5.0,2.0,3.5,1.0,
 5.9,3.0,4.2,1.5,
 6.0,2.2,4.0,1.0,
 6.1,2.9,4.7,1.4,
 5.6,2.9,3.6,1.3,
 6.7,3.1,4.4,1.4,
 5.6,3.0,4.5,1.5,
 5.8,2.7,4.1,1.0,
 6.2,2.2,4.5,1.5,
 5.6,2.5,3.9,1.1,
 5.9,3.2,4.8,1.8,
 6.1,2.8,4.0,1.3,
 6.3,2.5,4.9,1.5,
 6.1,2.8,4.7,1.2,
 6.4,2.9,4.3,1.3,
 6.6,3.0,4.4,1.4,
 6.8,2.8,4.8,1.4,
 6.7,3.0,5.0,1.7,
 6.0,2.9,4.5,1.5,
 5.7,2.6,3.5,1.0,
 5.5,2.4,3.8,1.1,
 5.5,2.4,3.7,1.0,
 5.8,2.7,3.9,1.2,
 6.0,2.7,5.1,1.6,
 5.4,3.0,4.5,1.5,
 6.0,3.4,4.5,1.6,
 6.7,3.1,4.7,1.5,
 6.3,2.3,4.4,1.3,
 5.6,3.0,4.1,1.3,
 5.5,2.5,4.0,1.3,
 5.5,2.6,4.4,1.2,
 6.1,3.0,4.6,1.4,
 5.8,2.6,4.0,1.2,
 5.0,2.3,3.3,1.0,
 5.6,2.7,4.2,1.3,
 5.7,3.0,4.2,1.2,
 5.7,2.9,4.2,1.3,
 6.2,2.9,4.3,1.3,
 5.1,2.5,3.0,1.1,
 5.7,2.8,4.1,1.3,
 6.3,3.3,6.0,2.5,
 5.8,2.7,5.1,1.9,
 7.1,3.0,5.9,2.1,
 6.3,2.9,5.6,1.8,
 6.5,3.0,5.8,2.2,
 7.6,3.0,6.6,2.1,
 4.9,2.5,4.5,1.7,
 7.3,2.9,6.3,1.8,
 6.7,2.5,5.8,1.8,
 7.2,3.6,6.1,2.5,
 6.5,3.2,5.1,2.0,
 6.4,2.7,5.3,1.9,
 6.8,3.0,5.5,2.1,
 5.7,2.5,5.0,2.0,
 5.8,2.8,5.1,2.4,
 6.4,3.2,5.3,2.3,
 6.5,3.0,5.5,1.8,
 7.7,3.8,6.7,2.2,
 7.7,2.6,6.9,2.3,
 6.0,2.2,5.0,1.5,
 6.9,3.2,5.7,2.3,
 5.6,2.8,4.9,2.0,
 7.7,2.8,6.7,2.0,
 6.3,2.7,4.9,1.8,
 6.7,3.3,5.7,2.1,
 7.2,3.2,6.0,1.8,
 6.2,2.8,4.8,1.8,
 6.1,3.0,4.9,1.8,
 6.4,2.8,5.6,2.1,
 7.2,3.0,5.8,1.6,
 7.4,2.8,6.1,1.9,
 7.9,3.8,6.4,2.0,
 6.4,2.8,5.6,2.2,
 6.3,2.8,5.1,1.5,
 6.1,2.6,5.6,1.4,
 7.7,3.0,6.1,2.3,
 6.3,3.4,5.6,2.4,
 6.4,3.1,5.5,1.8,
 6.0,3.0,4.8,1.8,
 6.9,3.1,5.4,2.1,
 6.7,3.1,5.6,2.4,
 6.9,3.1,5.1,2.3,
 5.8,2.7,5.1,1.9,
 6.8,3.2,5.9,2.3,
 6.7,3.3,5.7,2.5,
 6.7,3.0,5.2,2.3,
 6.3,2.5,5.0,1.9,
 6.5,3.0,5.2,2.0,
 6.2,3.4,5.4,2.3,
5.9,3.0,5.1,1.8""".split(",").apply(Float64),
	(150, 4), `row)
	.apply(Float64);
;

iris_y:
math.Matrix(
"""0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 1,
 1,
 1,
 1,
 1,
 1,
 1,
 1,
 1,
 1,
 1,
 1,
 1,
 1,
 1,
 1,
 1,
 1,
 1,
 1,
 1,
 1,
 1,
 1,
 1,
 1,
 1,
 1,
 1,
 1,
 1,
 1,
 1,
 1,
 1,
 1,
 1,
 1,
 1,
 1,
 1,
 1,
 1,
 1,
 1,
 1,
 1,
 1,
 1,
 1,
 2,
 2,
 2,
 2,
 2,
 2,
 2,
 2,
 2,
 2,
 2,
 2,
 2,
 2,
 2,
 2,
 2,
 2,
 2,
 2,
 2,
 2,
 2,
 2,
 2,
 2,
 2,
 2,
 2,
 2,
 2,
 2,
 2,
 2,
 2,
 2,
 2,
 2,
 2,
 2,
 2,
 2,
 2,
 2,
 2,
 2,
 2,
 2,
 2,
2""".split(",").apply(Float64),	(150, 1), `row)
.apply(Float64)
;

