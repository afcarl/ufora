/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/
randomEdgesForOne: fun(n, N, count) {
    let unif = iterator(math.random.UniformReal(0, N, n + 1));
    
    let v = []
    while (size(v) < count) {
        let val = Int64(pull unif) 
        if (val != n and val not in v)
            v = v :: val
        }
    v
    };

randomEdgeGraph: fun(N, count) {
    Vector.range(N, fun(ix) {
        (ix, randomEdgesForOne(ix, N, count))
        })
    };

`test normalizing_graph_edges_doesnt_crash_or_throw: (
    let g = randomEdgeGraph(100000, 3)

    let edges = fun(g, ix, hops) {
        if (hops <= 0)
            return [ix]
        
        let neighborhood = edges(g, ix, hops-1)
        let final = neighborhood
        
        let ix2 = 0
        while (ix2 < size(neighborhood)) {
            let e = neighborhood[ix2]
            ix2 = ix2 + 1
            if (e >= size(g))
                throw "somehow we got an invalid edge"
            
            final = final + g[e][1]
            }
        
        final
        };

    size(Vector.range(size(g), fun(ix) {
        size(edges(g, ix, 3))
        })) > 0
    );

