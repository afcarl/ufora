/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/
`test   datetimeCreation_1:
    DateTime("2012-01-31 12:34:56.789123") is DateTime.fromString("2012-01-31 12:34:56.789123");
    
`test   datetimeCreation_2:
    DateTime.fromString("2012-01-31 12:34:56.789123") is DateTime("2012-01-31 12:34:56.789123");
    
`test   datetimeCreation_3:
    DateTime.fromString("2012-01-31 12:34:56.789123") is DateTime("2012-Jan-31 12:34:56.789123");

`test   datetimeCreation_4:
    DateTime("2012-Jan-31 12:34:56.789123") is DateTime.fromISOString("20120131T123456.789123");

`test   datetimeCreation_5:
    DateTime.fromDateString("1999/12/13") is DateTime.fromDateString("1999-12-13");
    
`test   datetimeCreation_6:
    DateTime.fromDateString("1999-12-13") is DateTime.fromDateString("1999 12 13");

`test   datetimeCreation_7:
    DateTime.fromDateString("1999-12-13") is DateTime("1999-Dec-13 00:00:00");
    
`test   datetimeCreation_8:
    DateTime.bySecondsSinceEpoch(0) is DateTime("1970-Jan-01 00:00:00");
    
`test   datetimeCreation_9:
    DateTime.epoch() is DateTime("1970-Jan-01 00:00:00");
    
`test   datetimeCreation_10:
    DateTime("2000-12-31") is DateTime("2000-Dec-31 00:00:00");
    
`test   datetimeCreation_11:
    DateTime("2000-Dec-31") is DateTime("2000-Dec-31 00:00:00");
    
`test   datetimeCreation_12:
    DateTime("2000/dec/31") is DateTime("2000-Dec-31 00:00:00");
    
`test   datetimeCreation_13:
    DateTime("2000/dec-31") is DateTime("2000-Dec-31 00:00:00");
    
`test   datetimeCreation_14:
    DateTime.fromUndelimitedDateString("20020125") is DateTime("2002-Jan-25 00:00:00");
    
`test   datetimeMembers_0:
    (
    let d0 = DateTime("2012-01-31 12:34:56.789123");
    let t0 = TimeDuration("12:34:56.789123");
    d0.year() is 2012;
    );
    
`test   datetimeMembers_1:
    (
    let d0 = DateTime("2012-01-31 12:34:56.789123");
    let t0 = TimeDuration("12:34:56.789123");
    d0.month() is 1;
    );
    
`test   datetimeMembers_2:
    (
    let d0 = DateTime("2012-01-31 12:34:56.789123");
    let t0 = TimeDuration("12:34:56.789123");
    d0.day() is 31;
    );
    
`test   datetimeMembers_3:
    (
    let d0 = DateTime("2012-01-31 12:34:56.789123");
    let t0 = TimeDuration("12:34:56.789123");
    d0.timeOfDay() is t0;
    );
    
`test   datetimeMembers_4:
    (
    let d0 = DateTime("2012-01-31 12:34:56.789123");
    let t0 = TimeDuration("12:34:56.789123");
    d0.isoString() is "20120131T123456.789123"
    );
    
`test   datetimeMembers_5:
    (
    let d0 = DateTime("2012-01-31 12:34:56.789123");
    let t0 = TimeDuration("12:34:56.789123");
    d0.isoExtendedString() is "2012-01-31T12:34:56.789123"
    );
    
`test   datetimeMembers_6:
    (
    let d0 = DateTime("2012-01-31 12:34:56.789123");
    let t0 = TimeDuration("12:34:56.789123");
    d0.secondsSinceEpoch() is 1328013296
    );
    
`test   datetimeMembers_7:
    (
    let d0 = DateTime("2012-01-31 12:34:56.789123");
    d0.floatSecondsSinceEpoch() - 1328013296.79 < 0.001 is true;
    328013296.79 - d0.floatSecondsSinceEpoch() < 0.001 is true;
    );
    
`test   datetimeOperators_1:
    (
    let d0 = DateTime("2012-01-31 12:34:56.789123");
    let t0 = TimeDuration("12:34:56.789123");
    d0 - t0 is DateTime("2012-Jan-31 00:00:00");
    );
    
`test   datetimeOperators_2:
    (
    let d0 = DateTime("2012-01-31 12:34:56.789123");
    let t0 = TimeDuration("12:34:56.789123");
    d0 + t0 is DateTime("2012-Feb-01 01:09:53.578246");
    );
    
`test   datetimeOperators_3:
    (
    let d0 = DateTime("2012-01-31 12:34:56.789123");
    let d3 = DateTime.fromDateString("1999/12/13");
    d3 < d0 is true;
    );
    
`test   datetimeOperators_4:
    (
    let d0 = DateTime("2012-01-31 12:34:56.789123");
    let d3 = DateTime.fromDateString("1999/12/13");
    d3 - d0 is TimeDuration("-106380:34:56.789123");
    );
    
`test   datetimeOperators_5:
    (
    let d0 = DateTime("2012-01-31 12:34:56.789123");
    let t0 = TimeDuration("12:34:56.789123");
    d0 - t0 is DateTime("2012-Jan-31 00:00:00");
    );
    
`test   datetimeOperators_6:
    (
    let d0 = DateTime("2012-01-31 12:34:56.789123");
    let t0 = TimeDuration("12:34:56.789123");
    d0 + t0 is DateTime("2012-Feb-01 01:09:53.578246");
    );
    
`test   datetimeStrptime_1:
    DateTime.strptime("2005-Apr-01", "%Y-%b-%d") is DateTime("2005-Apr-01 00:00:00");
    
`test   datetimeStrptime_2:
    DateTime.strptime("20050401", "%Y%m%d") is DateTime("2005-Apr-01 00:00:00");
    
`test   datetimeStrptime_3:
    DateTime.strptime("2005-04-01", "%Y-%m-%d") is DateTime("2005-Apr-01 00:00:00");
    
`test   datetimeStrptime_4:
    DateTime.strptime("2001-11-12 18:31:01", "%Y-%m-%d %H:%M:%S") is DateTime("2001-Nov-12 18:31:01");
    
`test   datetimeStrptime_5:
    DateTime.strptime("2005-10-15 13:12:11-07:00", "%Y-%m-%d %H:%M:%S") is DateTime("2005-Oct-15 13:12:11");
    
`test   datetimeStrptime_6:
    DateTime.strptime(("2005-10-15 13:12:11-07:00", "%Y-%m-%d %H:%M:%S")) is DateTime("2005-Oct-15 13:12:11");
    
`test datetimeStrptime_7:
DateTime.strptime("03 10 1983", "%d %m %Y") is DateTime("1983-Oct-03 00:00:00");

`test datetimeStrptime_8:
DateTime.strptime("3 10 1983", "%d %m %Y") is DateTime("1983-Oct-03 00:00:00");

`test datetimeStrptime_9:
DateTime.strptime("03 1983", "%d %Y") is DateTime("1983-Jan-03 00:00:00");

`test datetimeStrptime_10:
DateTime.strptime("03 1983", "%m %Y") is DateTime("1983-Mar-01 00:00:00");

`test datetimeStrptime_11:
DateTime.strptime("1983", "%Y") is DateTime("1983-Jan-01 00:00:00");

`test datetimeStrptime_12:
DateTime.strptime("1983", "") is DateTime("1970-Jan-01 00:00:00");

`test datetimeStrptime_13:
DateTime.strptime("2002-05-12", "%F") is DateTime("2002-May-12 00:00:00");

`test datetimeStrptime_14:
DateTime.strptime("20051015T131211", "%Y%m%dT%H%M%S") is DateTime("2005-Oct-15 13:12:11");

`test datetimeStrptime_15:
DateTime.strptime("2005-10-15 13:12:11", "%Y-%m-%d %H:%M:%S") is DateTime("2005-Oct-15 13:12:11");

`test datetimeStrptime_16:
DateTime.strptime("2005-Oct-15 13:12:11", "%Y-%b-%d %H:%M:%S") is DateTime("2005-Oct-15 13-12-11");

`test datetime_constructors_1:
DateTime(year:1970, month:1, day:1) is DateTime("1970-Jan-01 00:00:00");

`test datetime_constructors_2:
DateTime(year:1970, month:1, day:1, hours:3, minutes:59, seconds:55) is 
DateTime("1970-Jan-01 03:59:55");

`test datetimeStrptime_17:
try {
	DateTime.strptime("%Y-%b-%d", "2005-NotAMonth-1")
	return false
} catch (e) {
	return true;
};

`test strptime_18: (
    assertions.assertThrows(
        fun() {
            DateTime.strptime("202-10-02T12:34:56", "%Y-%m-%dT%H:%M:%S")
            }
        )
    );

`test strftime_1: (
    DateTime("2005-Oct-15 13:12:11").strftime("%Y%m%dT%H%M%S") 
        is "20051015T131211";
    );
`test strftime_2: (
    DateTime.epoch().strftime("%I:%M%p") is "12:00AM"
    );

`test   datetimeEpoch:
    DateTime.epoch() is DateTime("1970-Jan-01 00:00:00");
    
`test datetimeMaxMin: (
    let d0 = DateTime.epoch();
    let dateTimes = Vector.range(10, { d0 + TimeDuration.fromSeconds(_) });

    assertions.assertEqual(min(dateTimes), d0);
    assertions.assertEqual(max(dateTimes), dateTimes[-1]);
    );

`test dayOfWeek: (
    let dt = DateTime.epoch();
    assertions.assertEqual(dt.dayOfWeek(), "Thursday")

    dt = dt + TimeDuration.fromDays(1);
    assertions.assertEqual(dt.dayOfWeek(), "Friday")
    dt = dt + TimeDuration.fromDays(1);
    assertions.assertEqual(dt.dayOfWeek(), "Saturday")
    dt = dt + TimeDuration.fromDays(1);
    assertions.assertEqual(dt.dayOfWeek(), "Sunday")
    dt = dt + TimeDuration.fromDays(1);
    assertions.assertEqual(dt.dayOfWeek(), "Monday")
    dt = dt + TimeDuration.fromDays(1);
    assertions.assertEqual(dt.dayOfWeek(), "Tuesday")
    dt = dt + TimeDuration.fromDays(1);
    assertions.assertEqual(dt.dayOfWeek(), "Wednesday")
    );

`perf dateTimeEquality: (
    let d = DateTime.epoch();
    let t = TimeDuration.fromSeconds(1);

    let tr = true;

    for ix in sequence(100000) {
        tr = (d == d + ix * t)
        }

    true
    );

`test overflow_in_total_seconds: (
    let d = DateTime("2045-1-1");

    assertions.assertEqual(DateTime.bySecondsSinceEpoch(d.secondsSinceEpoch()), d)
    assertions.assertEqual(d.secondsSinceEpoch(), 2366841600)
    );

`test strftime: (
    let dt = DateTime("2012-01-31 12:34:56.789123");
    let oneDay = TimeDuration.fromDays(1);

    assertions.assertEqual(dt.strftime("%a"), 'Tue')
    assertions.assertEqual(dt.strftime("%A"), 'Tuesday')
    assertions.assertEqual(dt.strftime("%b"), 'Jan')
    assertions.assertEqual(dt.strftime("%B"), 'January')
    assertions.assertEqual(dt.strftime("%c"), 'Tue Jan 31 12:34:56 2012')
    assertions.assertEqual((dt + oneDay).strftime("%c"), 'Wed Feb  1 12:34:56 2012')
    assertions.assertEqual(dt.strftime("%C"), '20')
    assertions.assertEqual(dt.strftime("%d"), '31')
    assertions.assertEqual((dt + oneDay).strftime("%d"), '01')
    assertions.assertEqual(dt.strftime("%D"), '01/31/12')
    assertions.assertEqual(dt.strftime("%e"), '31')
    assertions.assertEqual((dt + oneDay).strftime("%e"), ' 1')
    assertions.assertEqual(dt.strftime("%F"), '2012-01-31')
    assertions.assertEqual(dt.strftime("%g"), '12')
    assertions.assertEqual(DateTime("2001-01-31 12:34:56.789123").strftime("%g"), '01')
    assertions.assertEqual(dt.strftime("%G"), '2012')
    assertions.assertEqual(dt.strftime("%h"), 'Jan')
    assertions.assertEqual(dt.strftime("%H"), '12')
    assertions.assertEqual((dt - TimeDuration.fromHours(11)).strftime("%H"), '01')
    assertions.assertEqual(dt.strftime("%I"), '12')
    assertions.assertEqual(dt.strftime("%j"), '031')
    assertions.assertEqual(dt.strftime("%m"), '01')
    assertions.assertEqual(dt.strftime("%M"), '34')
    assertions.assertEqual(dt.strftime("%n"), '\n')
    assertions.assertEqual(dt.strftime("%p"), 'PM')
    assertions.assertEqual(dt.strftime("%r"), '12:34:56 PM')
    assertions.assertEqual(dt.strftime("%R"), '12:34')
    assertions.assertEqual(dt.strftime("%t"), '\t')
    assertions.assertEqual(dt.strftime("%T"), '12:34:56')
    assertions.assertEqual(dt.strftime("%u"), '2')
    assertions.assertEqual(dt.strftime("%U"), '05')
    assertions.assertEqual(dt.strftime("%V"), '05')
    assertions.assertEqual(dt.strftime("%w"), '2')
    assertions.assertEqual(dt.strftime("%W"), '05')
    assertions.assertEqual(dt.strftime("%x"), '01/31/12')
    assertions.assertEqual(dt.strftime("%X"), '12:34:56')
    assertions.assertEqual(dt.strftime("%y"), '12')
    assertions.assertEqual(dt.strftime("%Y"), '2012')
    assertions.assertEqual(dt.strftime("%%"), '%')
    assertions.assertEqual(dt.strftime("%z"), '')
    );

