/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/

`test nothingToTuple:  iter.toTuple(nothing)  is ();
`test nothingToVector: iter.toVector(nothing) is [];

`test vectorToVector: iter.toVector([1,2,3,4,5]) == [1,2,3,4,5];
`test tupleToVector:  iter.toVector((1,2,3,4,5)) == [1,2,3,4,5];
`test vectorToTuple:  iter.toTuple ([1,2,3,4,5]) == (1,2,3,4,5);
`test tupleToTuple:   iter.toTuple ((1,2,3,4,5)) == (1,2,3,4,5);


`test length: iter.length((1, 2, 3)) is 3;


`test get:    iter.get([1, 2, 3], 1) is 2;
`test getInf: iter.get(sequence(), 15) is 15;


`test append:    iter.toTuple(iter.append((1, 2, 3), 4, 5)) is (1, 2, 3, 4, 5);
`test appendInf: iter.get(iter.append(sequence(), `infinityPlusOne), 50) is 50;


`test chainArgs: iter.toTuple(iter.chain([1,2], (3,), [], [42])) is (1,2,3,42);
`test chainIter: iter.toTuple(iter.chain( [[0,0], [1], (1,)] ))  is (0,0,1,1);


`test repeatToTuple: iter.toTuple(iter.repeat(`h, 5)) is (`h, `h, `h, `h, `h);
`test repeatInfGet:  iter.get(iter.repeat("hi"), 50) is "hi";


`test iterate: iter.get(iter.iterate(fun (x) { x + 1 }, 0), 40) is 40;


`test cycleTuple:  iter.get(iter.cycle((0, 1, 2)), 15) is 0;
`test cycleTuple1: iter.get(iter.cycle((0, 1, 2)), 16) is 1;
`test cycleArgs:   iter.get(iter.cycle(0, 1, 2), 15) is 0;
`test cycleArgs1:  iter.get(iter.cycle(0, 1, 2), 16) is 1;
`test cycleInf:    iter.get(iter.cycle(sequence()), 188) is 188;


`test subseqStart:    iter.toTuple(iter.subseq([0,1,2,3,4,5], 3)) is (3, 4, 5);
`test subseqInfStart: iter.get(iter.subseq(sequence(), 3), 10)     is 13;
`test subseq:     iter.toTuple(iter.subseq((0,1,2,3), 1, 3))  is (1, 2);
`test subseqLen:  iter.toTuple(iter.subseq((0,1,2,3), 1, 4))  is (1, 2, 3);
`test subseqZero: iter.toTuple(iter.subseq((0,1,2,3), 0, 4))  is (0, 1, 2, 3);
`test subseqInf:  iter.toTuple(iter.subseq(sequence(), 5, 9)) is (5, 6, 7, 8);


`test forall1:   iter.forall([1, 2, 3, 0, 1], fun (x) { x > 0 }) is false;
`test forall2:   iter.forall([1, 2, 3, 0, 1], fun (x) { x < 5 }) is true;
`test forallInf: iter.forall(sequence(), fun (x) { x < 5 }) is false;

`test exists1:   iter.exists([1, 2, 3, 0, 1], fun (x) { x > 5 }) is false;
`test exists2:   iter.exists([1, 2, 3, 0, 1], fun (x) { x < 2 }) is true;
`test existsInf: iter.exists(sequence(), fun (x) { x > 5 }) is true;


`test takeWhile1:
	(1, 2, 3) is
		iter.toTuple(iter.takeWhile(
			fun (x) { x > 0 },
			[1, 2, 3, 0, 1, 2]
			))
		;
`test takeWhile2:
	() is
		iter.toTuple(iter.takeWhile(
			fun (x) { x > 1 },
			[1, 2, 3, 0, 1, 2]
			));
`test takeWhile3:
	(1, 2, 3, 0, 1, 2) is
		iter.toTuple(iter.takeWhile(
			fun (x) { x < 4 },
			[1, 2, 3, 0, 1, 2]
			));
`test takeWhileInf:
	(0, 1, 2, 3) is
		iter.toTuple(iter.takeWhile(
			fun (x) { x < 4 },
			sequence()
			));

`test dropWhile1:
	(0, 1, 2) is
		iter.toTuple(iter.dropWhile(
			fun (x) { x > 0 },
			[1, 2, 3, 0, 1, 2]
			));
`test dropWhile2:
	(1, 2, 3, 0, 1, 2) is
		iter.toTuple(iter.dropWhile(
			fun (x) { x > 1 },
			[1, 2, 3, 0, 1, 2]
			));
`test dropWhile3:
	() is
		iter.toTuple(iter.dropWhile(
			fun (x) { x < 4 },
			[1, 2, 3, 0, 1, 2]
			));
`test dropWhileInf:
	7 is iter.get(
		iter.dropWhile(
			fun (x) { x < 4 },
			sequence()
			),
		3
		);

`test span: (
	let (i1, i2) =
		iter.span(
			fun (x) { x > 0 },
			[1, 2, 3, 0, -1, 1, 2]
			)
	let t1 = iter.toTuple(i1), t2 = iter.toTuple(i2);
	t1 is (1, 2, 3) and t2 is (0, -1, 1, 2)
	);


`test filter:
	(1, 2, 3, 1, 2) is
		iter.toTuple(iter.filter(
			fun (x) { x > 0 },
			[1, 2, 3, 0, -1, 1, 2]
			));
`test filterEmpty:
	() is
		iter.toTuple(iter.filter(
			fun (x) { x > 4 },
			[1, 2, 3, 0, -1, 1, 2]
			));
`test filterFull:
	(1, 2, 3, 0, -1, 1, 2) is
		iter.toTuple(iter.filter(
			fun (x) { x > -2 },
			[1, 2, 3, 0, -1, 1, 2]
			));

`test filterNot:
	(1, 2, 3, 1, 2) is
		iter.toTuple(iter.filterNot(
			fun (x) { x <= 0 },
			[1, 2, 3, 0, -1, 1, 2]
			));
`test filterNotEmpty:
	() is
		iter.toTuple(iter.filterNot(
			fun (x) { x <= 4 },
			[1, 2, 3, 0, -1, 1, 2]));
`test filterNotFull:
	(1, 2, 3, 0, -1, 1, 2) is
		iter.toTuple(iter.filterNot(
			fun (x) { x <= -2 },
			[1, 2, 3, 0, -1, 1, 2]
			));


`test zip1: iter.zip((), (), [1], [1, 2]) is nothing;
`test zip2:
	iter.toTuple(iter.zip((1, 2), (`a, `b), (7, 8, 9)))
		is ((1, `a, 7), (2, `b, 8));
`test zip3:
	iter.toTuple(iter.zip((`a, `b), sequence(), [1, 2]))
		is ((`a, 0, 1), (`b, 1, 2));
`test zipInf:
	iter.get(iter.zip(sequence(), sequence(), sequence()), 9) is (9, 9, 9);


`test map1:
	iter.toTuple(iter.map(fun (x) { x + 1 }, (0, 1, 2, 3)))
		is (1, 2, 3, 4);
`test map2:
	iter.toTuple(iter.map(fun (x, y) { x + y }, (1, 2, 3), [3, 2, 1, `a]))
		is (4, 4, 4);
`test mapInf:
	iter.get(iter.map(fun (x, y) { x * y }, sequence(), sequence()), 16)
		is 256;


`test starMap:
	iter.toTuple(iter.starMap(fun (x, y) { x + y }, [(1, 2), (3, 4)]))
		is (3, 7);
`test starMapInf:
	iter.get(
		iter.starMap(
			fun (x, y) { x * y },
			iter.map(fun (x) { (x, x) }, sequence())),
		20)
		is 400;


`test zipApply0:
	iter.toTuple(iter.zipApply([fun(){1}, fun(){2}, fun(){"hi"}]))
		is (1, 2, "hi");
`test zipApply1: (
	//_ + 0, _ + 1, _ + 2, etc.
	let adders = iter.iterate(
		fun (f) { fun (x) { f(x) + 1 } },
		fun (x) { x }
		)
	let i = iter.zipApply(adders, iter.repeat(0))
	iter.toTuple(iter.subseq(i, 0, 5)) is (0, 1, 2, 3, 4)
	);
`test zipApply2: (
	let funs = (
		fun (x, y) { x + y },
		fun (x, y) { x * y },
		fun (x, y) { x - y }
		)
	let args1 = (1, 2, 3, 4)
	let args2 = (0, 2, 2)
	iter.toTuple(iter.zipApply(funs, args1, args2))
		is (1, 4, 1)
	);

`test coIterate1: (
	iter.toVector(iter.coiterate(sequence(10), sequence(10))) == 
	iter.toVector(sequence(10))
	);

`test coIterate2: (
	iter.toVector(iter.coiterate(sequence(10), sequence(11))) == 
	iter.toVector(sequence(10))
	);

`test coIterate3: (
	iter.toVector(iter.coiterate(sequence(10), sequence(9)))[,9] == 
	iter.toVector(sequence(9))
	);

`test coIterate4: (
	let s = fun() { 
		let res = nothing; 
		while (true) 
			res = res + (yield res)
		};  

	iter.toVector(iter.coiterate(s(), sequence(15)))[,10] == 
		[nothing, 0, 1, 3, 6, 10, 15, 21, 28, 36]
	);
