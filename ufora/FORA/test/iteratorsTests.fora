/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/

empty:
	object
		{
		...(`Iter)    { self };
		...(`Next, _) { nothing };
		}
	;

iter: fun
	() { nothing }
	(*args)
		{
		object
			{
				...(`Iter)    { self };
				...(`Next, _) { (args[0], iter(*args[1,])) };
			}
		}
	;

iterable: fun (*args)
	{
	object
		{
		...(`Iter) { iter(*args) }
		}
	};

iterEq: fun (i, j)
	{
	match (i`(`Next, ()), j`(`Next, ())) with
		(nothing, nothing) { true }
		((x, i1), (y, j1)) { x == y and iterEq(i1, j1) }
		(...) { false }
	};

isValidIter: fun
	(i) { isValidIter(i, ()) }
	(i, argsTuple)
		{
		match (i`(`Next, argsTuple)) with
			((_, i1)) { true }
			(nothing) { true }
		}
	;

isValidIterAllTheWay: fun
	(i) { isValidIterAllTheWay(i, ()) }
	(i, argsTuple)
		{
		let isValidIterResult = fun
			(nothing) { true }
			((_, i1)) { isValidIterAllTheWay(i1) }
		isValidIter(i, argsTuple) and isValidIterResult(i`(`Next, argsTuple))
		};


//This should be true for every iterator:
forYieldIdentity: fun (i)
	{
	let forYield = fun (i) { for x in i { yield x } }
	iterEq(i, forYield(i))
	};


`test
sumTest: (
	let f = fun ()
		{
		let i = 1;
		while (i <= 10)
			{
			yield i
			i = i + 1
			}
		}
	let sum = 0
	for i in f() { sum = sum + i }
	sum is 55
    );


//Tests for nothing:
`test
nothingIsEmpty:
	nothing`(`Next, ()) is nothing;

`test
nothingIsValidValidAllTheWay:
	isValidIterAllTheWay(nothing);

`test
forWorksOnNothing: (
	for i in nothing
		{
		throw "nothing is empty, so you shouldn't be seeing this"
		}
	true
    );

`test
forYieldNothing: forYieldIdentity(nothing);

`test
forYieldEmpty: forYieldIdentity(empty);

`test
nothingEqEmpty: iterEq(nothing, empty);


//Iter123 tests:
`test
iter123IsValidAllTheWay:
	isValidIterAllTheWay(iter(1, 2, 3));

`test
iter123EqIter123:
	iterEq(iter(1, 2, 3), iter(1, 2, 3));

`test
forWorksOnIter123: (
	for i in iter(1, 2, 3) { }
	true
    );

`test
forYieldIter123: forYieldIdentity(iter(1, 2, 3));

`test
forSumIter123:
	6 is (
		let sum = 0;
		for i in iter(1, 2, 3) { sum = sum + i }
		sum
		);


//Sequence tests:
`test
sequenceIsValidAllTheWay: isValidIterAllTheWay(sequence(0, 10));

`test
forWorksOnSequence: (
	for x in sequence(0, 10) { }
	true
    );

`test
forYieldSequence: forYieldIdentity(sequence(0, 10));

`test
forSumSequence:
	45 is (
		let sum = 0
		for x in sequence(0, 10) { sum = sum + x }
		sum
		);


//Vector tests:
`test
vectorIterIsValidAllTheWay:
	isValidIterAllTheWay([1, 2, 3]`(`Iter));

`test
vectorIterEqIter123:
	iterEq([1, 2, 3]`(`Iter), iter(1, 2, 3));

`test
forWorksOnVectorIter: (
	for i in [1, 2, 3]`(`Iter) { }
	true
    );

`test
forWorksOnVector: (
	for i in [1, 2, 3] { }
	true
    );

`test
forYieldVectorIter: forYieldIdentity([1, 2, 3]`(`Iter));

`test
forSumVectorIter:
	6 is (
		let sum = 0;
		for i in [1, 2, 3]`(`Iter) { sum = sum + i }
		sum
		);

`test
forSumVector:
	6 is (
		let sum = 0;
		for i in [1, 2, 3] { sum = sum + i }
		sum
		);

`test
emptyVectorGivesEmptyIter:
	[]`(`Iter) is nothing;


//Tuple tests:
`test
tupleIterIsValidAllTheWay:
	isValidIterAllTheWay((1, 2, 3)`(`Iter));

`test
tupleIterEqIter123:
	iterEq((1, 2, 3)`(`Iter), iter(1, 2, 3));

`test
forWorksOnTupleIter: (
	for i in (1, 2, 3)`(`Iter) { }
	true
    );

`test
forWorksOnTuple: (
	for i in (1, 2, 3) { }
	true
    );

`test
forYieldTupleIter: forYieldIdentity((1, 2, 3)`(`Iter));

`test
forSumTupleIter:
	6 is (
		let sum = 0;
		for i in (1, 2, 3)`(`Iter) { sum = sum + i }
		sum
		);

`test
forSumTuple:
	6 is (
		let sum = 0;
		for i in (1, 2, 3) { sum = sum + i }
		sum
		);

`test
emptyTupleGivesEmptyIter:
	()`(`Iter) is nothing;


//String tests:
`test
stringIterIsValidAllTheWay:
	isValidIterAllTheWay("hello"`(`Iter));

`test
stringIterEqIterHello:
	iterEq("hello"`(`Iter), iter("h"[0], "e"[0], "l"[0], "l"[0], "o"[0]));

`test
forWorksOnStringIter: (
	for i in "hello"`(`Iter) { }
	true
	);

`test
forWorksOnString: (
	for i in "hello" { }
	true
	);

`test
forYieldStringIter: forYieldIdentity("hello"`(`Iter));

`test
emptyStringGivesEmptyIter:
	""`(`Iter) is nothing;


//Dictionary tests:
`test
dictIterIsValidAllTheWay:
	isValidIterAllTheWay({"a": 1, "b": 2, "c": 3}`(`Iter));

`test
forWorksOnDictIter: (
	for i in {"a": 1, "b": 2, "c": 3}`(`Iter) { }
	true
    );

`test
forWorksOnDict: (
	for i in {"a": 1, "b": 2, "c": 3} { }
	true
    );

`test
forYieldDictIter: forYieldIdentity({"a": 1, "b": 2, "c": 3}`(`Iter));

`test
emptyDictGivesEmptyIter:
	{:}`(`Iter) is nothing;


`test
operatorIterator:
	isValidIterAllTheWay(object { operator iterator() { } }`(`Iter));

`test
operatorIterator5:
	isValidIterAllTheWay(object { operator iterator() { let i = 0; while (i < 5) { yield i; i = i + 1 } } }`(`Iter));


`test
pullParse0:
	try {
		`Function("pull i")()
		false
		}
	catch (...) { true }
	;

`test
pullParse1:
	try {
		`Function("let i = nothing; pull i")
		true
		}
	catch (...) { false }
	;

`test
pullParse2:
	try {
		`Function("let i = nothing; fun () { pull i }")
		false
		}
	catch (...) { true }
	;


`test
pull0:
	try {
		let i = nothing
		pull i //no such element
		false
		}
	catch (...) { true }
	;

`test
pull1:
	try {
		let i = nothing
		pull i
		false
		}
	catch (...) { true }
	;

`test
pull2: (
	let i = sequence(); //Semicolon is mandatory here...
	(pull i) is 0 and (pull i) is 1 //Parens are mandatory because pull is not an operand. Why?
    );                              //Because pull-with *cannot* be an operand; also, because
                                    //`pull i + 1` looks like `pull (i + 1)`, even though the latter
`test                               //is invalid. Also, for consistency with break, return, yield.
pull3: (
	let i = iterator([1, 2, 3]); //Semicolon is mandatory here...
	(pull i) is 1 and (pull i) is 2 and (pull i) is 3
    );

`test
pull4: (
	let i = iterator([1, 2, 3]); //Semicolon is mandatory here...
	(pull i with "vworp!") is 1 and (pull i with "pow!") is 2 and (pull i with "emergence!") is 3
    );

`test
pull5: (
	let o = object {
		operator iterator() {
			let prev = nothing
			while (true)
				prev = (yield prev);
			}
		}
	let i = iterator(o); //Sigh.
	(pull i with "vworp!") is nothing and (pull i with "pow!") is "vworp!" and (pull i with "emergence!") is "pow!"
		and (let last = pull i; last is "emergence!")
    );


`test
hasNext0:
	hasNext(sequence());
`test
hasNext1:
	not hasNext(nothing);

`test
iterator0:
	isValidIterAllTheWay(iterator((1, 2, 3)));
	

`test zipWith_1: (
    let iter = builtin.iter;

    let f = fun(x, y) { (y, x) };

    let v1 = Vector.range(10);
    let v2 = Vector.range(20, { _ + 20 });

    zipWith(f, v1, v2) == iter.toVector(iter.map(f, v1, v2))
    );

`test zipWith_2: (
    let iter = builtin.iter;

    let f = fun(x, y, z) { (y, x, z) };

    let v1 = Vector.range(10);
    let v2 = Vector.range(20, { _ + 20 });
    let v3 = Vector.range(30, { _ + 30 });

    zipWith(f, v1, v2, v3) == iter.toVector(iter.map(f, v1, v2, v3))
    );

thingsAndWhetherIterable: 
	[(10, false), ([1,2,3], true), (sequence(10), true), ((fun() { yield 10 })(), true)];

`test isIterable: (
	for (thing, isIterable) in thingsAndWhetherIterable {
		if ((match (thing) with (filters.IsIterable(...) x)  { true } (...) { false }) != isIterable)
			return false
		if (filters.IsIterable(thing) != isIterable)
			return false
		}
	return true;
    );

