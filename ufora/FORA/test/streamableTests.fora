/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/
generateDataFrame: fun(pointCount=100000) {
    let scaled = fun(x,p){ return 2*math.pi*x/p};
    let columns = [
        Vector.range(pointCount),
        Vector.range(pointCount, fun(x){ scaled(x,10) }),
        Vector.range(pointCount, fun(x){ math.sin(scaled(x,10)) }),
        Vector.range(pointCount, fun(x){ math.cos(scaled(x,10)) })
        ];
    return dataframe.DataFrame(columns)
 };

generateVectorOfTuples: fun(pointCount=100000) {
    let scaled = fun(x,p){ return 2*math.pi*x/p};
    return Vector.range(pointCount, fun(x){ 
                      ( X: scaled(x,10), 
                        Y: math.sin(scaled(x,10)),
                        Z: math.cos(scaled(x,10)) ) } )
};


`test dfStreamingChunkCount: (
    let df = generateDataFrame();
    let s1 = getStream( df );
    assertions.assertEqual( s1.getChunkCount(), 10 );
);

`test dfStreamingExatnessOfSequentialAndParallelStreaming: (
    let df = generateDataFrame();
    let s1 = getStream( df );
    assertions.assertEqual( s1.getChunk(0), s1.getChunk(0,parallelMode:false) );
    assertions.assertEqual( s1.getChunk(6), s1.getChunk(6,parallelMode:false) );
);

`test dfStreamingReturnEmptyVecOnNonExistentChunk: (
    let df = generateDataFrame();
    let s1 = getStream( df );
    assertions.assertEqual( size(s1.getChunk(20)), 0  );
);


`test dfStreamingFullLoop:
(
    let df = generateDataFrame(100);
    let s1 = getStream(df);

    let nChunks = s1.getChunkCount();
    let allSymbs = [];
    for j in sequence(nChunks){
        allSymbs = allSymbs + s1.getChunk(j);
        };

    // parse values back into a DataFrame
    
    let derivedDF = parsing.csv(
        allSymbs, 
        hasHeaders: true, 
        columnTypes: {"C0": Int64, "C1": Float64, "C2": Float64, "C3": Float64}
        ); 

    assertions.assertEqual(df.columnNames, derivedDF.columnNames);    
    assertions.assertEqual(df.numRows, derivedDF.numRows);
    
    for j in sequence(df.numRows){
        for k in sequence(df.numColumns){
            assertions.assertClose(
                df[j][k], derivedDF[j][k],  atol:1.e-10, rtol:1.e-8
                )
            }
        };

    true
);


`test vectorOfTuplesStreamingChunkCount: (
    let vot = generateVectorOfTuples();
    let s1 = getStream( vot );
    assertions.assertEqual( s1.getChunkCount(), 10 );
);

`test vectorOfTuplesStreamingExatnessOfSequentialAndParallelStreaming: (
    let vot = generateVectorOfTuples();
    let s1 = getStream( vot );
    assertions.assertEqual( s1.getChunk(0), s1.getChunk(0,parallelMode:false) );
    assertions.assertEqual( s1.getChunk(6), s1.getChunk(6,parallelMode:false) );
);

`test vectorOfTuplesStreamingReturnEmptyVecOnNonExistentChunk: (
    let vot = generateVectorOfTuples();
    let s1 = getStream( vot );
    assertions.assertEqual( size(s1.getChunk(20)), 0  );
);

`test vectorOfTuplesStreamingFullLoop:
(
    let vot = generateVectorOfTuples(100);
    let df1 = dataframe.DataFrame(vot)
    let s1 = getStream( vot );

    let nChunks = s1.getChunkCount();
    let allSymbs = [];
    for j in sequence( nChunks ){
        allSymbs = allSymbs + s1.getChunk(j);
    };

    // parse values back into a DataFrame
    
    let df2 = parsing.csv(allSymbs, defaultColumnType: Float64)

    assertions.assertEqual(df1.numRows, df2.numRows);
    assertions.assertEqual(df1.numColumns, df2.numColumns);
    for ix in sequence(df1.numColumns) {
        assertions.assertAllClose(
            df1.getColumn(ix).dataVec, df2.getColumn(ix).dataVec
            );
        }
    true
);

`test dfLargeStreamingFullLoop:
(
    let df = generateDataFrame(45000);
    let s1 = getStream( df );

    let nChunks = s1.getChunkCount();

    let allSymbs = [];
    for j in sequence( nChunks ){
        allSymbs = allSymbs + s1.getChunk(j);
    };

    // parse values back into a DataFrame
    
    let derivedDF = parsing.csv( allSymbs, 
                                 hasHeaders: true, 
                                 columnTypes: {"C0":Int64, "C1":Float64, "C2":Float64, "C3":Float64} ); 

    assertions.assertEqual( df.columnNames, derivedDF.columnNames);
    
    assertions.assertEqual( df.numRows, derivedDF.numRows );
    
    for j in sequence( df.numRows ){
        for k in sequence( df.numColumns ){
            assertions.assertClose( df[j][k], derivedDF[j][k],  atol:1.e-10, rtol:1.e-8 )
        }
    };
    true
);


