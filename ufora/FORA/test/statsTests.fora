/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/
eps : 1e-4;

checkTol :
    fun(computed, actual)
        {
        math.abs(computed - actual) <= eps
        };

testSeq1 : [4,78,1,0,5,3,7,10,2,3,18, 12];    

testSeq2 :
[-6.764481867594705, 6.53600457373912, -1.3510646476953525, 3.849561317965451, -6.781426647887045,
 0.646092033310699, 1.0176462426872157, -1.2974707002633323, -3.8047408570687846, -7.989372457261674,
 -3.0656024626050327, -3.5920283220014593, 9.274802166806031, -0.7345332218359713, -3.975458203163158,
 9.924512961827897, -2.7880993216340055, 5.3305917894246075, 4.750422777440429, 8.370299110828814,
 -4.710463716892372, 5.213124060363283, -5.175955925139444, 3.099471297291363, -9.25199777593244,
 5.481979701823647, -6.765806666281429, -0.622947104344096, 9.284317310329, -9.640839202712684,
 5.071535321304069]
;

testSeq3 : (Vector.range(31));

`test harmonicMean1: ( checkTol(math.stats.harmonicMean([1,2,4]), 1.714285) );

`test testMedian1: (math.stats.median(testSeq1) == 4.5);
`test testMedian2: (math.stats.median(testSeq2) == -0.7345332218359713);
`test testMedian3: assertions.assertEqual(math.stats.median([1.0]), 1.0);

`test testQuantile1: (math.stats.quantile(testSeq1, 0.42) == 3.62);
`test testQuantile2: (checkTol(math.stats.quantile(testSeq2, 0.42), -1.925879));

`test testMean1: (checkTol(math.stats.mean(testSeq1), 11.91667));
`test testMean2: (checkTol(math.stats.mean(testSeq2), -0.01490092));

`test testVar1: (checkTol(math.stats.var(testSeq1), 460.0833));
`test testVar2: (checkTol(math.stats.var(testSeq2), 34.5656));
`test testVar3: (checkTol(math.stats.varNs(testSeq1), 460.0833));
`test testVar4: (checkTol(math.stats.varNs(testSeq2), 34.5656));

`test testCor: (checkTol(math.stats.cor(testSeq2, testSeq3), 0.08475667));

`test testCorSpearman: (checkTol(math.stats.corSpearman(testSeq2, testSeq3), 0.07379032));

`test testCorKendall: (checkTol(math.stats.corKendall(testSeq2, testSeq3), 0.02795699));

`test testRank1: (math.stats.rank(testSeq1) == [6.0, 12.0, 2.0, 1.0, 7.0, 4.5, 8.0, 9.0, 3.0, 4.5, 11.0, 10.0]);
`test testRank2: (math.stats.rank(testSeq1, ties:`max) == [6, 12, 2, 1, 7, 5, 8, 9, 3, 5, 11, 10]);
`test testRank3: (math.stats.rank(testSeq1, ties:`min) == [6, 12, 2, 1, 7, 4, 8, 9, 3, 4, 11, 10]);

`test testSummary_numeric:
    (
    let s = math.stats.summary(testSeq1)

    assertions.assertAllClose(
        s, 
        (
            mean: 11.91667,
            sd: math.sqrt(460.0833),
            min: 0,
            firstQuantile: 2.75,
            median: 4.5,
            thirdQuantile: 10.5,
            max: 78
            ),
        atol:0.001
        )
    );

`test summary_categorical_1:
    (
	let v = [`hai, `bai, `hai, `hai, `bai, `haro];

	assertions.assertEqual(
        math.stats.summary(v), 
        [(category: `hai, count: 3), (category: `bai, count: 2), (category: `haro, count: 1)]
        );
	);

`test summary_categorical_2: (
    let (d0, d1, d2) = (DateTime.epoch(), 
                        DateTime.epoch() + TimeDuration.fromSeconds(1), 
                        DateTime.epoch() + TimeDuration.fromMinutes(3))
    let v = [d0, d0, d0, d1, d1, d2]

    assertions.assertEqual(
        math.stats.summary(v),
        [(category: d0, count: 3), (category: d1, count: 2), (category: d2, count: 1)]
        );
    );

`test testSummary_mixedTypes: (
    let v = [1, 2.0];
    let summary = math.stats.summary(v);
    assertions.assertEqual(summary.mean, 1.5)
    );

`test testSummary_Series: (
    let v = [1, 2.0];
    let summary = math.stats.summary(dataframe.Series(v));
    assertions.assertEqual(summary.mean, 1.5)
    );

`test testCov1: (
	  checkTol(math.stats.cov([0.0, 1.1, 1.9], [-0.1, 0.9, 2.2]), 1.085)
     );

`test fivePointQuantiles: (
    let v = iter.toVector(
        iter.subseq(
            math.random.Normal(0, 100, 290393), 
            0, 100000
            )
        );

    let trueQuantiles = math.stats.fivePointQuantiles(v, estimate:false);
    let estimatedQuantiles = 
        math.stats.estimateFivePointQuantiles(v, estimate:true, cutoffSize:1000);

    assertions.assertAllClose(
        trueQuantiles, estimatedQuantiles, atol:1
        );
    );

`test chunkedLoopSum: (
    let v = Vector.range(100);
    let expectedSum = v.sum();
    assertions.assertEqual(expectedSum, 100 * 99 / 2);
    assertions.assertEqual(math.stats.chunkedLoopSum_(v, splitSize: 3), expectedSum)
    assertions.assertEqual(math.stats.chunkedLoopSum_(v, splitSize: 13), expectedSum)
    assertions.assertEqual(math.stats.chunkedLoopSum_(v, splitSize: 23), expectedSum)
    assertions.assertEqual(math.stats.chunkedLoopSum_(v, splitSize: 50), expectedSum)
    );

`test mode: (
    let vals = [1,2,2,3,3,3,4,4,4,4];

    assertions.assertEqual(math.stats.mode(vals), (mode: 4, count: 4))
    );

