/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/

//how to use 'yield'
sequence: fun(top) {
	let x = 0;
	while (x < top)
		{
		yield x;
		x = x + 1
		}
	};


//basic iteration
`test	foreach_1:	(
	let s = 0;
	for x in sequence(10) {
		s = s + x
		};
	s is 45
    );

//adapting an iterator
pairs: fun(p) {
	//a process is either a pair of (val, nextCallable) or
	//_ if there's nothing left
	match (p) with
		//if it's valid, take the first one and then just show pairs
		((val, nextP)) {
			for v2 in nextP() {
				yield (val, v2);
				val = v2
				}
			}
		//there wasn't even a regular value in the iterator
		(nothing) {
			return nothing
			}
		//p() didn't return an iterator!
		(*args) {
			throw "process " + String(p) + " didn't yield an interator"
			}
	};
//passing an iterator to a function
sum: fun(p) {
	let res = nothing;
	for x in p {
		res = res + x
		};
	res
	};
	
`test	iterAdapter:	sum(sequence(10)) is 45;

//if we sum pairs, we'll be adding up tuples. There are 9 pairs, so
//the new tuple will have size 18
//`test	iterAdapter_2:	size(sum(pairs(sequence(10)))) == 18;

`test	listComprehension:
	[p for p in sequence(10)].sum() is 45;

`test	listComprehension_2: [p for p in sequence(10)].sum() is 45;
`test	listComprehension_3: [p for p in sequence(10) if p % 2 == 0].sum() is 20;




//using break
`test	break_1:	(
	let x = 0;
	while (x < 100) {
		x = x + 1
		if (x > 9)
			break
		}
	x
	) is 10
	;

//verify that the break breaks from
//the correct loop. this should go up by 3's, so we'll get 12
`test	break_2:	(
	let x = 0;
	while (x < 100) {
	
		let subX = 0;
		
		while (subX < 100) {
			subX = subX + 1
			x = x + 1
			if (subX > 3)
				break
			}
		
		if (x > 9)
			break
		
		}
	x
	) is 12;


`test if_true: (
	let res = 0
	for ix in sequence(1000000) 
		if (true)
			res = res + ix

	res > 0
    );




