/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/
/*
The following two examples were generated from the examples in the scipy.optimize.slsqp source:
https://github.com/scipy/scipy/blob/v0.12.0/scipy/optimize/slsqp.py
*/

func_1: fun(x) {
    math.exp(x[0]) * (4.0 * x[0] ** 2.0 + 2 * x[1] ** 2.0 + 
                       4.0 * x[0] * x[1] + 2.0 * x[1] + 1)
    };
f_eqcon_1: fun(x) {
    [x[0] ** 2.0 + x[1] - 1.0]
    };
jeqcon_1: fun(x) {
    [2.0 * x[0], 1.0]
        };
fieqcon_1: fun(x) {
    [x[0] * x[1] + 10.0]
    };

// note that the python source had an error here, at the time of writing, but it doesn't
// seem to affect the answer
jieqcon_1: fun(x) {
    [x[1], x[0]]
    };

fmin_bounds_constraints: fun(papply) {
    let res = math.optimize.fmin_slsqp(
        func_1,
        [-1.0, 1.0], 
        bounds: [(0.1, 1e12), (0.2, 1e12)],
		papply_gradients:papply
        );

    assertions.assertAllClose(res.x, [0.1, 0.2], msg: "res.x");
    assertions.assertClose(res.fx, 1.76827346892, msg: "res.fx");
    assertions.assertTrue(res.success, msg:"res.success")
    };

`test fmin_bounds_constrants_serial_gradients: fmin_bounds_constraints(false);
`test fmin_bounds_constrants_papply_gradients: fmin_bounds_constraints(true);	

fmin_slsqp_equality_and_inequality_constraints: fun(papply) { 
    let res = math.optimize.fmin_slsqp(
        func_1,
        [-1.0, 1.0], 
        f_eqcons:f_eqcon_1, 
        fprime_eqcons:jeqcon_1,
        f_ieqcons:fieqcon_1, 
        fprime_ieqcons:jieqcon_1,
		papply_gradients:papply
        )

    assertions.assertAllClose(res.x, [-0.75287901, 0.4331732 ], atol:0.0001, msg: "res.x");
    assertions.assertClose(res.fx, 1.50931095558, msg: "res.fx");
    assertions.assertTrue(res.success, msg:"res.success");
    };

`test fmin_slsqp_equality_and_inequality_constraints_serial_gradients: 
    fmin_slsqp_equality_and_inequality_constraints(false);
`test fmin_slsqp_equality_and_inequality_constraints_papply_gradients: 
    fmin_slsqp_equality_and_inequality_constraints(true);

fmin_bounds_constraints_with_args: fun(papply) {
    let func_1 = fun(x, *args) {
        math.exp(x[0]) * (args[0] * x[0] ** 2.0 + args[1] * x[1] ** 2.0 + 
                       args[2] * x[0] * x[1] + args[3] * x[1] + args[4])
        };

    let res = math.optimize.fmin_slsqp(
        func_1,
        [-1.0, 1.0], 
        bounds: [(0.1, 1e12), (0.2, 1e12)],
        args: (4.0, 2.0, 4.0, 2.0, 1.0)
        );

    assertions.assertAllClose(res.x, [0.1, 0.2], msg: "res.x");
    assertions.assertClose(res.fx, 1.76827346892, msg: "res.fx");
    assertions.assertTrue(res.success, msg:"res.success")
    };

`test fmin_bounds_constraints_with_args_serial_gradients: fmin_bounds_constraints_with_args(false);
`test fmin_bounds_constraints_with_args_papply_gradients: fmin_bounds_constraints_with_args(true);

`test fmin_slsqp_equality_and_inequality_constraints_with_args: (
    let func_1 = fun(x, *args) {
        math.exp(x[0]) * (args[0] * x[0] ** 2.0 + args[1] * x[1] ** 2.0 + 
                       args[2] * x[0] * x[1] + args[3] * x[1] + args[4])
        };

    let res = math.optimize.fmin_slsqp(
        func_1,
        [-1.0, 1.0], 
        f_eqcons:f_eqcon_1, 
        fprime_eqcons:jeqcon_1,
        f_ieqcons:fieqcon_1, 
        fprime_ieqcons:jieqcon_1,
        args: (4.0, 2.0, 4.0, 2.0, 1.0)
        )

    assertions.assertAllClose(res.x, [-0.75287901, 0.4331732 ], atol:0.0001, msg: "res.x");
    assertions.assertClose(res.fx, 1.50931095558, msg: "res.fx");
    assertions.assertTrue(res.success, msg:"res.success");
    );

f_eqcon_bad: fun(x) {
    x[0] ** 2.0 + x[1] - 1.0
    };

`test fmin_slsqp_equality_and_inequality_constraints_bad_eqcon: (
    try {
        math.optimize.fmin_slsqp(
            func_1,
            [-1.0, 1.0], 
            f_eqcons:f_eqcon_bad, 
            fprime_eqcons:jeqcon_1,
            f_ieqcons:fieqcon_1, 
            fprime_ieqcons:jieqcon_1
            )
        }
    catch (...) {
        return true;
        }

    throw "expected this test to throw: f_eqcons should be vector-valued, not scalar"
    );

jeqcon_1_integers_instead_of_floats: 
fun(x) {
    [2.0 * x[0], 1]
    };

`test fmin_slsqp_equality_and_inequality_constraints_with_an_integral_derivative: (
    let res = 
        math.optimize.fmin_slsqp(
            func_1,
            [-1.0, 1.0], 
            f_eqcons:f_eqcon_1, 
            fprime_eqcons:jeqcon_1_integers_instead_of_floats,
            f_ieqcons:fieqcon_1, 
            fprime_ieqcons:jieqcon_1
            );

    assertions.assertAllClose(res.x, [-0.75287901, 0.4331732 ], atol:0.0001, msg: "res.x");
    assertions.assertClose(res.fx, 1.50931095558, msg: "res.fx");
    assertions.assertTrue(res.success, msg:"res.success");
    );

`test fmin_slsqp_equality_and_inequality_constraints_with_numeric_derivatives_1: (
    let res = math.optimize.fmin_slsqp(
        func_1,
        [-1.0, 1.0], 
        f_eqcons:f_eqcon_1, 
        f_ieqcons:fieqcon_1
        );

    assertions.assertAllClose(res.x, [-0.75287901, 0.4331732 ], atol:0.0001, msg: "res.x");
    assertions.assertClose(res.fx, 1.50931095558, msg: "res.fx");
    assertions.assertTrue(res.success, msg:"res.success");
	assertions.assertEqual(res.geval, 7, msg:"geval")
	assertions.assertEqual(res.feval, 7, msg:"feval")
    );

eqcon_1: fun(x) {
    x[0] ** 2.0 + x[1] - 1.0
    };
ieqcon_1: fun(x) {
    x[0] * x[1] + 10.0
    };

`test fmin_slsqp_equality_and_inequality_constraints_with_numeric_derivatives_2: (
    let res = math.optimize.fmin_slsqp(
        func_1,
        [-1.0, 1.0], 
        eqcons:[eqcon_1], 
        ieqcons:[ieqcon_1]
        );

    assertions.assertAllClose(res.x, [-0.75287901, 0.4331732 ], atol:0.0001, msg: "res.x");
    assertions.assertClose(res.fx, 1.50931095558, msg: "res.fx");
    assertions.assertTrue(res.success, msg:"res.success");
    assertions.assertEqual(res.geval, 7, msg:"geval")
    assertions.assertEqual(res.feval, 7, msg:"feval")
    );


/*
The following set of examples comes from
http://docs.scipy.org/doc/scipy/reference/tutorial/optimize.html#tutorial-sqlsp
*/

func_2: 
fun(x) {
    -1.0 * (2.0 * x[0] * x[1] + 2.0 * x[0] - x[0] ** 2.0 - 2.0 * x[1] ** 2.0)
	};
func_derivative_2:
fun(x) {
    let dfdx0 = -1.0 * (-2.0 * x[0] + 2.0 * x[1] + 2.0);
    let dfdx1 = -1.0 * (2.0 * x[0] - 4.0 * x[1]);
    [dfdx0, dfdx1]
	};
f_eqcon_2: 
fun(x) {
	[x[0] ** 3.0 - x[1]]
    };
f_eqcon_3:
fun(x) {
	[x[0] - x[1]]
    };
jeqcon_2:
fun(x) { 
    [3.0 * (x[0] ** 2.0), -1.0]
    };
jeqcon_3:
fun(x) {
	[1.0, -1.0]
    };
f_ieqcon_2:
fun(x) {
    [x[1] - 1.0]
    };
jieqcon_2:
fun(x) {
    [0.0, 1.0]
    };


`test unconstrained_optimization_2: (
    let res = math.optimize.fmin_slsqp(
        func_2, [-1.0, 1.0], fprime: func_derivative_2
		);

	assertions.assertAllClose(res.x, [2.0, 1.0], msg:"res.x ");
	assertions.assertClose(res.fx, -2.0, msg:"res.fx ");
    assertions.assertTrue(res.success, msg:"res.success ");
	assertions.assertEqual(res.iter, 4, msg:"iter ")
	assertions.assertEqual(res.feval, 5, msg:"feval ")
	assertions.assertEqual(res.geval, 4, msg:"geval ")
    );

`test unconstrained_optimization_numeric_derivative_2: (
    let res = math.optimize.fmin_slsqp(
        func_2, [-1.0, 1.0]
		);

	assertions.assertAllClose(res.x, [2.0, 1.0], atol:0.001, msg:"res.x");
	assertions.assertClose(res.fx, -2.0, msg:"res.fx");
        assertions.assertTrue(res.success, msg:"res.success");
	assertions.assertEqual(res.iter, 4, msg:"iter")
	assertions.assertEqual(res.feval, 5, msg:"feval")
	assertions.assertEqual(res.geval, 4, msg:"geval")
    );

`test constrained_optimization_equality_numeric_deriv_2: (
	let res = math.optimize.fmin_slsqp(
		func_2, [-1.0, 1.0], 
		f_eqcons: f_eqcon_3
	    );

	assertions.assertTrue(res.success, msg:"res.success")
	assertions.assertAllClose(res.x, [1.0, 1.0], atol:0.0001, msg:"res.x")
    );

`test constrained_optimization_equality_exact_deriv_2: (
	let res = math.optimize.fmin_slsqp(
		func_2, [-1.0, 1.0], 
		f_eqcons: f_eqcon_3,
		fprime: func_derivative_2
	    );

	assertions.assertTrue(res.success, msg:"res.success")
	assertions.assertAllClose(res.x, [1.0, 1.0], msg:"res.x")
    );

`test constrained_optimization_inequality_exact_deriv_2: (
	let res = math.optimize.fmin_slsqp(
		func_2, [-1.0, 1.0],
		fprime: func_derivative_2,
		f_ieqcons: f_ieqcon_2
	    );

	assertions.assertTrue(res.success, msg:"res.success")
	assertions.assertAllClose(res.x, [2.0, 1.0], msg:"res.x")
    );	

/*
this is supposed to correspond to 
https://github.com/scipy/scipy/blob/master/scipy/optimize/tests/test_slsqp.py: 
test_minimize_inequality_given_vector_constraints

but I don't understand fprime_ieqcon2

`test constrained_optimization_inequality_given_vector_constraints: (
	let res = math.optimize.fmin_slsqp(
		func_2, [-1.0, 1.0], 
		fprime: func_derivative_2,
		fprime_ieqcons: 
		)
	)
*/

`test minimize_bound_equality_given2: (
	let res = math.optimize.fmin_slsqp(
		func_2, [-1.0, 1.0],
		fprime: func_derivative_2,
		bounds: [(-0.8, 1.0), (-1.0, 0.8)],
		f_eqcons: f_eqcon_3,
		fprime_eqcons: jeqcon_3
	    );

	assertions.assertTrue(res.success, msg:"res.success")
	assertions.assertAllClose(res.x, [0.8, 0.8], msg:"res.x")
    );	

`test constrained_optimization_2: (
    let res = math.optimize.fmin_slsqp(
        func_2, 
        [-1.0, 1.0], 
        fprime: func_derivative_2, 
        f_eqcons: f_eqcon_2, 
		fprime_eqcons: jeqcon_2,
        f_ieqcons: f_ieqcon_2,
		fprime_ieqcons: jieqcon_2
        )

        assertions.assertAllClose(res.x, [1.00000009, 1.0], msg:"res.x ");
	assertions.assertClose(res.fx, -1.0, atol:0.0001, msg:"res.fx ");
        assertions.assertTrue(res.success, msg:"res.success ");
	assertions.assertEqual(res.iter, 9, msg:"iter ")
	assertions.assertEqual(res.feval, 14, msg:"feval ")
	assertions.assertEqual(res.geval, 9, msg:"geval ")
    );

`test constrained_optimization_with_some_numeric_derivatives_2: (
    let res = math.optimize.fmin_slsqp(
        func_2, 
        [-1.0, 1.0], 
        f_eqcons: f_eqcon_2, 
		fprime_eqcons: jeqcon_2,
        f_ieqcons: f_ieqcon_2
        )

    assertions.assertAllClose(res.x, [1.00000009, 1.0], msg:"res.x");
	assertions.assertClose(res.fx, -1.0, atol:0.0001, msg:"res.fx ");
    assertions.assertTrue(res.success, msg:"res.success ");
	assertions.assertEqual(res.iter, 9, msg:"iter")
	assertions.assertEqual(res.feval, 14, msg:"feval")
	assertions.assertEqual(res.geval, 9, msg:"geval")
    );

`test one_dimensional_1: (
	let res = math.optimize.fmin_slsqp(
		{ _[0] ** 2.0 }, [3.0],
		f_ieqcons: { [_[0] - 1] }
	    );

    assertions.assertTrue(res.success, msg:"res.success");
	assertions.assertClose(res.x[0], 1.0)
    );

`test one_dimensional_2: (
	let res = math.optimize.fmin_slsqp(
		{ _[0] ** 2.0 - 1.0 }, [0.0],
		bounds: [[0.0, 1.0]]
	    );

    assertions.assertTrue(res.success, msg:"res.success");
	assertions.assertClose(res.x[0], 0.0)
    );

`test lots_o_calls: (
	let funcFactory = 
		fun(c) { 
			fun(x) {
				math.exp(c * x[0]) * (4.0 * x[0] ** 2.0 + 2 * x[1] ** 2.0 + 
                       4.0 * x[0] * x[1] + 2.0 * x[1] + 1)
			}
		};

   	let N = 100.0	
    let serialResults = [];
	for ix in sequence(N)
   		serialResults = serialResults :: math.optimize.fmin_slsqp(
    		funcFactory(ix), [-1.0, 1.0]).x

	let parallelResults = Vector.range(
		100.0, 
		{ 
			math.optimize.fmin_slsqp(
		    	funcFactory(_),
		    	[-1.0, 1.0]
	        	).x
		    }			
   	 	);
	
	for Ix in sequence(25)
	    {
		let ix = 0
		for val in iter.zip(serialResults, parallelResults)
	    	{
	        assertions.assertAllClose(
				val[0], val[1], atol: 0.0, 
				msg:"serial on left, parallel on right (ix = "  + String(ix) + ")"
		   		);
			ix = ix + 1
		    }
		}

	true
    );

`test a_quadratic_program:
(
	let A_symmetric = math.Matrix([1,4,5, 4,2,6, 5,6,3], (3,3));
	let Q = A_symmetric * A_symmetric + math.Matrix.diagonal(3, 1.0);

	let func = fun(x) { (math.Matrix(x).T() * Q * math.Matrix(x))[0,0] };

	let res = math.optimize.fmin_slsqp(func, [2,-1,4]);

	assertions.assertAllClose(res.x, [0,0,0], atol: 1e-6)
);

`test integral_function_1:
(
	let func = { let x = _[0]; x * x };
	let res = math.optimize.fmin_slsqp(func, [4], bounds:[(1,5)])
	assertions.assertAllClose(res.x, [1])
);

`test integral_function_2:
(
	let func = { 1 };
	let res = math.optimize.fmin_slsqp(func, [4], bounds:[(1,5)])
	assertions.assertClose(res.fx, 1)
);

`test workspace_overwrite: (
    // see ontime 631

    let c = 1000000000000.0;

    let f = fun(x) { return ((x[0] - 1.0) ** 3 + 1.0) * c };

    let res = math.optimize.fmin_slsqp(f, [.006])
    
    assertions.assertEqual(res.x, [0.006]);
    assertions.assertClose(res.fx, 17892216000.0)
    assertions.assertEqual(res.mode, [4])
    assertions.assertEqual(res.iter, 1)
    assertions.assertEqual(res.message, "Inequality constraints incompatible")
    assertions.assertEqual(res.success, false)
    assertions.assertEqual(res.feval, 1)
    assertions.assertEqual(res.geval, 1)
    );

