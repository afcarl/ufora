/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/
assertTrue: fun(condition, msg:="")
{
		if (not condition)
			throw "assert True failed: " + String(msg)
	true;
    };

assertEqual: fun(x, y, msg:="")
    {
		assertTrue(x == y, msg:msg);
    };

`test quickselect_0: (
	let permutations = [[0,1,2], [0,2,1], 
						[1,0,2], [1,2,0],
						[2,0,1], [2,1,0]];

	for permutation in permutations {
		for k in sequence(3) {
			assertEqual(
				sorting.quickSelect(permutation, k), k, 
				msg:"perm = " + String(permutation) + ", k = " + String(k)
		        )
		    }
	    }

	true;
	);

`test quickSelect_1: 
	try {
		sorting.quickSelect([], 0)
	    }
	catch (e) {
		e == "can't request the 0-th smallest element in a vector of size 0"
    	}
    ;

`test quickSelect_big_0: (
	let v = iter.toVector(iter.subseq(math.random.Normal(0, 1, 32134), 0, 200000)).apply(Int64);

	let sorted = sort(v);
	let check_k = fun(k) {
    	let selected = sorting.quickSelect(v, k);
		assertEqual(selected, sorted[k])
	    }
		
	check_k(10);
	check_k(1000);
	check_k(100000);

	true
);

`test nSmallest_big_0: (
	let v = iter.toVector(iter.subseq(math.random.Normal(0, 1, 32134), 0, 200000)).apply(Int64);

	let sorted = sort(v);
	let check_n = fun(n) {
    	let nSmallest = sorting.nSmallest(v, n);
		assertEqual(nSmallest, sorted[,n])
	    }
		
	check_n(10);
	check_n(1000);
	check_n(100000);

	true
);

`test quickSelect_big_1: (
	let v = iter.toVector(iter.subseq(math.random.Normal(0, 10000, 32134), 0, 200000)).apply(Int64);

	let sorted = sort(v);
	let check_k = fun(k) {
    	let selected = sorting.quickSelect(v, k);
		assertEqual(selected, sorted[k])
	    }
		
	check_k(10);
	check_k(1000);
	check_k(100000);

	true
);

`test nSmallest_big_1: (
	let v = iter.toVector(iter.subseq(math.random.Normal(0, 10000, 32134), 0, 200000)).apply(Int64);

	let sorted = sort(v);
	let check_n = fun(n) {
    	let nSmallest = sorting.nSmallest(v, n);
		assertEqual(nSmallest, sorted[,n])
	    }
		
	check_n(10);
	check_n(1000);
	check_n(100000);

	true
);

`test nsmallest_0: (
	let permutations = [[0,1,2], [0,2,1], 
						[1,0,2], [1,2,0],
						[2,0,1], [2,1,0]];

	for permutation in permutations {
		for n in sequence(3) {
			assertEqual(
				sorting.nSmallest(permutation, n), [0,1,2][,n], 
				msg:"perm = " + String(permutation) + ", k = " + String(n)
		        )
		    }
	    }

	true;
	);

`test nLargest_0: (
	let permutations = [[0,1,2], [0,2,1], 
						[1,0,2], [1,2,0],
						[2,0,1], [2,1,0]];

	for permutation in permutations {
		for n in sequence(3) {
			assertEqual(
				sorting.nLargest(permutation, n), [0,1,2][3 - n,], 
				msg:"perm = " + String(permutation) + ", k = " + String(n)
		        )
		    }
	    }

	true;
	);

`test nLargest_big_0: (
	let v = iter.toVector(iter.subseq(math.random.Normal(0, 1, 32134), 0, 200000)).apply(Int64);

	let sorted = sort(v);

	let check_n = fun(n) {
    	let nLargest = sorting.nLargest(v, n);

		let sorted_ = sorted[size(v) - n,];

		assertTrue(sorting.isSorted(nLargest), msg:"nLargest is not sorted!")
		assertTrue(sorting.isSorted(sorted_), msg:"sorted_ is not sorted!")

		assertEqual(nLargest,  sorted[size(v) - n,])
	    }
		
	check_n(10);
	check_n(1000);
	check_n(100000);

	true
);

`test nLargest_big_1: (
	let v = iter.toVector(iter.subseq(math.random.Normal(0, 10000, 32134), 0, 200000)).apply(Int64);

	let sorted = sort(v);
	let check_n = fun(n) {
    	let nLargest = sorting.nLargest(v, n);
		assertEqual(nLargest, sorted[size(v) - n,])
	    }
		
	check_n(10);
	check_n(1000);
	check_n(100000);

	true
);

`test quickselect_on_random_0: (
	let vals = iter.toVector(
		iter.subseq(
			math.random.Normal(0, 1, 349234),
			0, 1000
		)
	);

	let tenth = sorting.quickSelect(vals, 10);
	let sortedTenth = sorting.sort(vals)[10];

	assertEqual(
		tenth, sortedTenth, 
		msg: "tenth = " + String(tenth) + ", sortedTenth = " + String(sortedTenth)
	    );
	true
    );

`test nsmallest_on_random_1: (
	let vals = iter.toVector(
		iter.subseq(
			math.random.Normal(0, 1, 349234),
			0, 1000
		)
	);

	let least10_0 = sorting.nSmallest(vals, 10);
	let least10_1 = sorting.sort(vals)[,10];

	assertEqual(least10_0, least10_1);

	true;
    );

/*

// The following tests result in sporadic lang test failures;
// ontime defect 150

`test quickSelect_exhaustive: (
	let n = 5;

	let v = Vector.range(n);

	for permutation in allPermutations(v) {
		for k in sequence(n) {
			assertEqual(
				sorting.quickSelect(permutation, k), k, 
				msg:"perm = " + String(permutation) + ", k = " + String(k)
		        )
		    }
	    }
	
	true;
    );
	
`test nsmallest_exhaustive: (
	let n = 5;

	let v = Vector.range(n);

	for permutation in allPermutations(v) {
		for k in sequence(n) {
			assertEqual(
				sorting.nSmallest(permutation, k), v[,k], 
				msg:"perm = " + String(permutation) + ", k = " + String(k)
		        )
		    }
	    }
	
	true;
    );

allPermutations: 
fun(vec) {
	let mv = MutableVector.create(size(vec), 0);
	
	for ix in sequence(size(vec)) {
		mv[ix] = vec[ix]
	    }

	let swap = fun(i, j) {
		let tmp = mv[i];
		mv[i] = mv[j];
		mv[j] = tmp;
	    };

	let permute = fun(i, n) {
		if (i == n)
    		{
			yield iter.toVector(mv)
    		}	
		else {
			for j in sequence(i, n) {
				swap(i, j)
				for val in permute(i + 1, n)
			    	yield iter.toVector(val)
				swap(i, j)
			    }
		    }
	    };

	permute(0, size(mv))
    };
*/

