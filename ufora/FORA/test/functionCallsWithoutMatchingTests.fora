/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/
/*****
function calls and pattern-matching in 'match' statements
*****/

`test  t_14 : (  fun(x=-.5){x}() is -0.5);


`test  functionVarargs_5 : (  fun(x,y) { x+y }(*(10,20)) is 30 );

`test  functionVarargs_6 : (  fun(a,x,y,b,c) { String(x+y)+a+b+c }("a",*(10,20),*("b","c")) is '30abc' );

`test  functionVarargs_8 : (  (fun(*args,x) { x })(1,*(2,3)) is 3 );

`test  functionDefaultArgs1_1 : (  (fun(x = 10) { x })() is 10 );

`test  functionDefaultArgs2_1 : (  (fun(x,y = 10) { x })(20) is 20 );

`test  functionDefaultArgs3_1 : (  (fun(x,y = 10) { x })(20) is 20 );

`test  functionDefaultArgs4_1 : (  (fun(x,y = 10) { y })(20) is 10 );

`test  functionDefaultArgs5_1 : (  (fun(x,y = 10, *args) { Int64(size(args)) })(10) is 0 );

`test  functionDefaultArgs6_1 : (  (fun(x,y = 10, *args) { Int64(size(args)) })(10,20) is 0 );

`test  functionDefaultArgs7_1 : (  (fun(x,y = 10, *args) { Int64(size(args)) })(10,20,30) is 1 );

`test  functionDefaultArgs8_1 : (  (fun(x,y = 10, *args) { args[0] })(10,20,30) is 30 );

`test  functionDefaultArgs9_1 : (  (fun(x,y = x*2) { y })(10) is 20 );

`test  functionDefaultArgs10_1 : (  let z = 20; fun(x,y = z) { y }(10) is 20 );

`test  functionDefaultArgs11_1 : (  let z = 20; fun(x,*args) { z + size(args) }(10) is 20 );

`test  functionDefaultArgs12_1 : (  let z = 20; fun(x,*args) { z + size(args) }(10, 20) is 21 );

`test  functionDefaultBinding_1 : (  (let z = 5; fun(y = z) { y })() is 5 );

`test  functionDefaultBinding_2 : (  let z = 5; fun(x, z = x) { z } (10) is 10 );

`test  functionDefaultBinding_6 : (  fun(x, y = 10) { y }(0) is 10 );

`test  functionChain2_1 : (  fun () {0}  (a) { 1 }  (a,b) { 2 }() is 0 );

`test  functionChain3_1 : (  fun () {0}  (a) { 1 }  (a,b) { 2 }(10) is 1 );

`test  functionChain4_1 : (  fun () {0}  (a) { 1 }  (a,b) { 2 }(10,10) is 2 );

`test  patternMatchingStruct_1 : (  (fun (a:x,c:y) { x } (a:x, b:y) { x + 10 })(a:10,b:20) is 20 );

`test  patternMatchingStruct_2 : (  (fun (a:x,c:y) { x } (a:x, b:y) { x + 10 })(a:10,c:20) is 10 );

`test  patternMatchingStruct_3 : (  (fun (a:x, *args) { x })(a:10,b:20) is 10 );

`test  patternMatchingStruct_4 : (  (fun (a:x, *args) { x + args.b })(a:10,b:20) is 30 );

`test  patternMatchingStruct_5 : (  (fun ((a:x,c:y)) { x } ((a:x, b:y)) { x + 10 })((a:10,b:20)) is 20 );

`test  patternMatchingStruct_6 : (  (fun ((a:x,c:y)) { x } ((a:x, b:y)) { x + 10 })((a:10,c:20)) is 10 );

`test  patternMatchingStruct_7 : (  (fun ((a:x, *args)) { x })((a:10,b:20)) is 10 );

`test  patternMatchingStruct_8 : (  (fun ((a:x, *args)) { x + args.b })((a:10,b:20)) is 30 );

// Working with named tuple arguments and default values.
// Note that the order of elements in named tuples is not important
`test  patternMatchingStructOrder_1: ((fun(x, y:y=0, z:z=0){ x + y + z**2 })(10) is 10.0 );

`test  patternMatchingStructOrder_2: ((fun(x, y:y=0, z:z=2){ x + y + z**2 })(10) is 14.0 );

`test  patternMatchingStructOrder_3: ((fun(x, y:y=0, z:z=2){ x + y + z**2 })(10, z:3) is 19.0 );

`test  patternMatchingStructOrder_4: ((fun(x, y:y=1, z:z=2){ x + y + z**2 })(10, z:3, y:10) is 29.0 );

`test  patternMatchingStructOrder_5: ((fun(x, y:y=1, z:z=2){ x + y**2 + z**3 })(z:3, y:2, 10) is 41.0 );


// For namedArgs tests...
pow: 
	fun(a, b)
		{
		b ** a // reverse order from x,y case below
		}
	(x:x, y:y)
		{
		x ** y
		};

`test	functionNamedArgs_1: pow(2, 3) is 9.0;

`test	functionNamedArgs_2: pow(x:3, y:2) is 9.0;

