/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/

testConvertsProperly:
#Markdown("""
`testConvertsProperly(x)`

Returns `true` if a numeric value `x` converts to a string and back to itself correctly, 
otherwise, throws an exception.
""")
fun(x) {
	let converted = `TypeJOV(x)(String(x));

	if (converted is x)
		return true

	throw "%s converted to %s".format(x, converted)
	};


`test test_precision: testConvertsProperly(1.0);
`test test_precision_1: testConvertsProperly(1.1);
`test test_precision_2: testConvertsProperly(1.01);
`test test_precision_3: testConvertsProperly(1.001);
`test test_precision_4: testConvertsProperly(1.0001);
`test test_precision_5: testConvertsProperly(1.00001);
`test test_precision_6: testConvertsProperly(1.000001);
`test test_precision_7: testConvertsProperly(1.0000001);
`test test_precision_8: testConvertsProperly(1.00000001);
`test test_precision_9: testConvertsProperly(1.000000001);
`test test_precision_10: testConvertsProperly(1.0000000001);
`test test_precision_11: testConvertsProperly(1.00000000001);
`test test_precision_12: testConvertsProperly(1.000000000001);
`test test_precision_13: testConvertsProperly(1.0000000000001);
`test test_precision_14: testConvertsProperly(1.00000000000001);

//this fails: see FORA-1003
//`test test_precision_15: testConvertsProperly(1.000000000000001);

`test test_precision_16: testConvertsProperly(1.0000000000000001);
`test test_precision_17: testConvertsProperly(1.00000000000000001);

`test test_conversion_0: String(1.0) is "1.0";
`test test_conversion_1: String(1.1) is "1.1";
`test test_conversion_2: String(1.01) is "1.01";
`test test_conversion_3: String(1.001) is "1.001";
`test test_conversion_4: String(1.0001) is "1.0001";
`test test_conversion_5: String(1.00001) is "1.00001";
`test test_conversion_6: String(1.000001) is "1.000001";
`test test_conversion_7: String(1.0000001) is "1.0000001";
`test test_conversion_8: String(1.00000001) is "1.00000001";
`test test_conversion_9: String(1.000000001) is "1.000000001";
`test test_conversion_10: String(1.0000000001) is "1.0000000001";
`test test_conversion_11: String(1.00000000001) is "1.00000000001";
`test test_conversion_12: String(1.000000000001) is "1.000000000001";
`test test_conversion_13: String(1.0000000000001) is "1.0000000000001";
`test test_conversion_14: String(1.00000000000001) is "1.00000000000001";
`test test_conversion_15: String(1.000000000000001) is "1.0";
`test test_conversion_16: String(1.0000000000000001) is "1.0";
`test test_conversion_17: String(1.00000000000000001) is "1.0";

/*
//this fails: see FORA-1002

`test test_precision_f32: testConvertsProperly(1.0f32);
`test test_precision_f32_1: testConvertsProperly(1.1f32);
`test test_precision_f32_2: testConvertsProperly(1.01f32);
`test test_precision_f32_3: testConvertsProperly(1.001f32);
`test test_precision_f32_4: testConvertsProperly(1.0001f32);
`test test_precision_f32_5: testConvertsProperly(1.00001f32);
`test test_precision_f32_6: testConvertsProperly(1.000001f32);
`test test_precision_f32_7: testConvertsProperly(1.0000001f32);
`test test_precision_f32_8: testConvertsProperly(1.00000001f32);
`test test_precision_f32_9: testConvertsProperly(1.000000001f32);
`test test_precision_f32_10: testConvertsProperly(1.0000000001f32);
`test test_precision_f32_11: testConvertsProperly(1.00000000001f32);
`test test_precision_f32_12: testConvertsProperly(1.000000000001f32);
*/
