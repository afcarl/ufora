/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/
`test groupBySorted: (
    let df = dataframe.DataFrame([[0,0,0,1,1,2,3,3,3,3], Vector.range(10)])

    let groupBy = dataframe.GroupBySorted(df, key: "C0");

    assertions.assertEqual(groupBy.groupKeys(), [0,1,2,3])

    let expectedGroups = (df[0,3], df[3,5], df[5,6], df[6,10]);

    let ix = 0;
    for (key, group) in groupBy {
        assertions.assertEqual(key, ix)
        dataframe.assertFramesEqual(expectedGroups[ix], group)
        dataframe.assertFramesEqual(expectedGroups[ix], groupBy.getGroup(ix))
        ix = ix + 1
        }

    let groups = groupBy.groups()
    assertions.assertEqual(size(expectedGroups), size(groups))
    for ix in sequence(size(expectedGroups))
        {
        dataframe.assertFramesEqual(expectedGroups[ix], groups[ix])
        }

    true
    );

`test groupBy: (
    let df = dataframe.DataFrame([Vector.range(10, { _ % 3 }), Vector.range(10)]);

    let groupBy = df.groupBy("C0");

    assertions.assertEqual(groupBy.groupKeys(), [0, 1, 2]);

    dataframe.assertFramesEqual(
        groupBy.getGroup(0),
        dataframe.DataFrame([[0,0,0,0], [0,3,6,9]])
        )

    dataframe.assertFramesEqual(
        groupBy.getGroup(1),
        dataframe.DataFrame([[1,1,1], [1,4,7]])
        )

    dataframe.assertFramesEqual(
        groupBy.getGroup(2),
        dataframe.DataFrame([[2,2,2], [2,5,8]])
        )

    );

`test groupBy_2: (
    let df = dataframe.DataFrame(
        A: ['foo', 'bar', 'foo', 'bar', 
            'foo', 'bar', 'foo', 'foo'], 
        B: ['one', 'one', 'two', 'three', 
            'two', 'two', 'one', 'three'], 
        C: Vector.range(8),
        D: Vector.range(8, { _ + 8 })
        );

    let groupBy = df.groupBy("A")

    assertions.assertAllEqual(groupBy.groupKeys(), ['bar', 'foo'])

    dataframe.assertFramesEqual(
        groupBy.getGroup('bar'),
        dataframe.DataFrame(
            A: ['bar', 'bar', 'bar'],
            B: ['one', 'three', 'two'],
            C: [1, 3, 5],
            D: [9, 11, 13]
            )
        );
    dataframe.assertFramesEqual(
        groupBy.getGroup('foo'),
        dataframe.DataFrame(
            A: ['foo', 'foo', 'foo', 'foo', 'foo'],
            B: ['one', 'two', 'two', 'one', 'three'],
            C: [0, 2, 4, 6, 7],
            D: [8, 10, 12, 14, 15]
            )
        )
    );

`test groupByMultipleCols: (
    let df = dataframe.DataFrame(a: [1,1,1,2], b: [3,3,4,5], c: [6,7,8,9])
    let groupBy = df.groupBy(("a", "b"));

    assertions.assertEqual(groupBy.groupKeys(), [(1,3), (1,4), (2,5)])
    dataframe.assertFramesEqual(
        groupBy.getGroup((1,3)),
        dataframe.DataFrame(a: [1, 1], b: [3, 3], c: [6, 7])
        )
    dataframe.assertFramesEqual(
        groupBy.getGroup((1,4)),
        dataframe.DataFrame(a: [1], b: [4], c: [8])
        )
    dataframe.assertFramesEqual(
        groupBy.getGroup((2,5)),
        dataframe.DataFrame(a: [2], b: [5], c: [9])
        )
    );

`test groupByMultipleCols_2: (
    let df = dataframe.DataFrame(
        A: ['foo', 'bar', 'foo', 'bar', 
            'foo', 'bar', 'foo', 'foo'], 
        B: ['one', 'one', 'two', 'three', 
            'two', 'two', 'one', 'three'], 
        C: Vector.range(8),
        D: Vector.range(8, { _ + 8 })
        );
    
    let groupBy = df.groupBy(keys: ("A", "B"))

    assertions.assertAllEqual(
        groupBy.groupKeys(),
        [("bar", "one"), ("bar", "three"), ("bar", "two"), 
         ("foo", "one"), ("foo", "three"), ("foo", "two")]
        )

    dataframe.assertFramesEqual(
        groupBy.getGroup(("bar", "one")),
        dataframe.DataFrame(A: ['bar'], B: ['one'], C: [1], D: [9])
        )
    dataframe.assertFramesEqual(
        groupBy.getGroup(("bar", "three")),
        dataframe.DataFrame(A: ['bar'], B: ['three'], C: [3], D: [11])
        )
    dataframe.assertFramesEqual(
        groupBy.getGroup(("bar", "two")),
        dataframe.DataFrame(A: ['bar'], B: ['two'], C: [5], D: [13])
        )
    dataframe.assertFramesEqual(
        groupBy.getGroup(("foo", "one")),
        dataframe.DataFrame(A: ['foo', 'foo'], B: ['one', 'one'], C: [0, 6], D: [8, 14])
        )
    dataframe.assertFramesEqual(
        groupBy.getGroup(("foo", "three")),
        dataframe.DataFrame(A: ['foo'], B: ['three'], C: [7], D: [15])
        )
    dataframe.assertFramesEqual(
        groupBy.getGroup(("foo", "two")),
        dataframe.DataFrame(A: ['foo', 'foo'], B: ['two', 'two'], C: [2, 4], D: [10, 12])
        )
    );

