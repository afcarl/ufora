/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/

"Get columns from rows."
columnsFromRows:
fun(rows) {
    let numColumns = size(rows[0]);
    Vector.range(numColumns, fun(colIndex){
        rows ~~ {_[colIndex]}
        });
    };

"Test to make sure the dimensions of the resulting dataframe are what are expected."
test_size:
fun (data, numExpectedRows:, numExpectedColumns:, columnTypes:=nothing, hasHeaders:=true) {
    let results = parsing.csv(data, columnTypes:columnTypes, hasHeaders:hasHeaders);

    assertions.assertEqual(results.numRows, numExpectedRows);
    assertions.assertEqual(results.numColumns, numExpectedColumns)
    };

"Test to see whether the values in the dataframe equal the given vectors representing rows and columns."
test_values:
fun (data, expectedColumns:, columnTypes:=nothing, hasHeaders:=true) {
    let results = parsing.csv(data, columnTypes:columnTypes, hasHeaders:hasHeaders);
    let expectedResults = dataframe.DataFrame(expectedColumns);

    dataframe.assertFramesEqual(results, expectedResults, checkNames:false)
    };

"Return a vector of vectors, where the inside vectors are columns."
extractColumns: fun(dataframe.DataFrame(df)) {
    Vector.range(df.numColumns, {df.getColumn(_).dataVec})
    };


simple_csv: """x,y
1,2,
3,41
5,6
""";

simple_csv_2: " \n   " + simple_csv[,-1];

simple_expected_headers: ["x", "y"];
simple_expected_rows:
[ [1, 2],
  [3, 41],
  [5, 6] ];
simple_expected_columns:
columnsFromRows(simple_expected_rows);

`test test_parsing_csv_simple_headers: 
    assertions.assertEqual(parsing.getHeaders(simple_csv), simple_expected_headers);
`test test_parsing_csv_simple_headers_2: 
    assertions.assertEqual(parsing.getHeaders(simple_csv_2), simple_expected_headers);

`test
test_parsing_csv_simple_1: 
    test_size(
        simple_csv, 
        numExpectedRows:3, 
        numExpectedColumns:2, 
        columnTypes:[Float64, Float64]
        );

`test
test_parsing_csv_simple_2: 
test_values(
    simple_csv, 
    expectedColumns:simple_expected_columns, 
    columnTypes:[Float64, Float64]
    );

`test
test_parsing_csv_simple_3: 
    test_size(
        simple_csv_2, 
        numExpectedRows:3,  
        numExpectedColumns:2, 
        columnTypes:[Float64, Float64]
        );

`test
test_parsing_csv_simple_4:
test_values(
    simple_csv_2, 
    expectedColumns:simple_expected_columns, 
    columnTypes:[Float64, Float64]
    );


strings_csv: """p,q,r
a,"b,",c
d,e,f
g,h,"j\"
""";
strings_csv_2: " \n " + strings_csv[,-1];

strings_expected_headers:
    ["p", "q", "r"];
strings_expected_rows: [
    ["a", "b,", "c"],
    ["d", "e", "f"],
    ["g", "h", "j"]
    ];
strings_expected_columns: columnsFromRows(strings_expected_rows);

`test
test_parsing_csv_strings_headers: parsing.getHeaders(strings_csv) == strings_expected_headers;
`test
test_parsing_csv_strings_headers_2: parsing.getHeaders(strings_csv_2) == strings_expected_headers;

`test
test_parsing_csv_strings_1: 
    test_size(
        strings_csv, 
        numExpectedRows:3, 
        numExpectedColumns:3
        );

`test
test_parsing_csv_strings_2:
test_values(
    strings_csv, 
    expectedColumns:strings_expected_columns
    );

`test
test_parsing_csv_strings_3: 
    test_size(
        strings_csv_2, 
        numExpectedRows:3, 
        numExpectedColumns:3
        );

`test
test_parsing_csv_strings_4:
test_values(
    strings_csv_2, 
    expectedColumns:strings_expected_columns
    );


// Note that "today, blah" in the 3rd data row has two spaces at the end.
complicated_csv: """a,b,c,d
1,2.07638946  ,"3",hello
   4,   "5"   ,-6,world
7,8,9,"today, blah"  
10,11,,empty float
77,88,99,row too long,,extra!
99,88,77,trailing comma ok,
44,,55,one empty element
12,,,two empty elements
13,"14 12",15,last_row_good
""";
complicated_csv_2: complicated_csv[,-1];

complicated_expected_headers: ["a", "b", "c", "d"];

complicated_expected_rows_1: [
    [1, "2.07638946", 3, "hello"],
    [4, "5", -6, "world"],
    [7, "8", 9, "today, blah"],
    [10, "11", math.nan, "empty float"],
    [99, "88", 77, "trailing comma ok"],
    [44, "", 55.0, "one empty element"],
    [12, "", math.nan, "two empty elements"],
    [13, "14 12", 15, "last_row_good"]
    ];

complicated_expected_columns_1: columnsFromRows(complicated_expected_rows_1);

complicated_expected_rows_2: [
    [1, "2.07638946", nothing, "hello"],
    [4, "5", nothing, "world"],
    [7, "8", nothing, "today, blah"],
    [10, "11", nothing, "empty float"],
    [99, "88", nothing, "trailing comma ok"],
    [44.0, "", nothing, "one empty element"],
    [12.0, "", nothing, "two empty elements"],
    [13, "14 12", nothing, "last_row_good"]
    ];

complicated_expected_columns_2: columnsFromRows(complicated_expected_rows_2);

`test
test_parsing_csv_complicated_headers:
    parsing.getHeaders(complicated_csv) == complicated_expected_headers;

`test
test_parsing_csv_complicated_1_size:
    test_size(
        complicated_csv,
        numExpectedRows:8,
        numExpectedColumns:4,
        columnTypes:[Float64, String, Float64, String]
        );

`test
test_parsing_csv_complicated_2_values: (
    test_values(
        complicated_csv, 
        expectedColumns:complicated_expected_columns_1, 
        columnTypes:[Float64, String, Float64, String]
        )
    );

`test
test_parsing_csv_complicated_headers_2:
    parsing.getHeaders(complicated_csv_2) == complicated_expected_headers;

`test
test_parsing_csv_complicated_3_size:
    test_size(
        complicated_csv_2, 
        numExpectedRows:8, 
        numExpectedColumns:4, 
        columnTypes:[Float64, String, Float64, String]
        );

`test
test_parsing_csv_complicated_4_values:
    test_values(
        complicated_csv_2,
        expectedColumns:complicated_expected_columns_1, 
        columnTypes:[Float64, String, Float64, String]
        );

`test
test_parsing_csv_complicated_5_size:
    test_size(
        complicated_csv, 
        numExpectedRows:8, 
        numExpectedColumns:4, 
        columnTypes:[Float64, String, Nothing, String]
        );

`test
test_parsing_csv_complicated_6_values:
    test_values(
        complicated_csv, 
        expectedColumns:complicated_expected_columns_2, 
        columnTypes:[Float64, String, Nothing, String]
        );

`test
test_parsing_csv_complicated_7_size:
    test_size(
        complicated_csv_2, 
        numExpectedRows:8, 
        numExpectedColumns:4, 
        columnTypes:[Float64, String, Nothing, String]
        );

`test
test_parsing_csv_complicated_8_values:
    test_values(
        complicated_csv_2,
        expectedColumns:complicated_expected_columns_2,
        columnTypes:[Float64, String, Nothing, String]
        );


headerless_csv: """
1,2,3,4
5,6,7,88,
9,10,11,1222
""";
headerless_expected_headers: ["C0", "C1", "C2", "C3"];
headerless_expected_rows: [
    ["1", "2", "3", "4"],
    ["5", "6", "7", "88"],
    ["9", "10", "11", "1222"]
    ];
headerless_expected_columns: columnsFromRows(headerless_expected_rows);

`test
test_parsing_csv_headerless_headers: (
    let results = parsing.csv(headerless_csv, hasHeaders:false);
    results.columnNames == headerless_expected_headers
    );

`test
test_parsing_csv_headerless_1_size: 
    test_size(
        headerless_csv, 
        numExpectedRows:3, 
        numExpectedColumns:4, 
        hasHeaders:false
        );

`test
test_parsing_csv_headerless_2_values:
    test_values(
        headerless_csv, 
        expectedColumns:headerless_expected_columns, 
        hasHeaders:false
        );

mac_os9_csv: "a,b,c\r1,2,3 \r 5,6,7";

`test
test_parsing_csv_mac_os9_line_endings_headers:
    parsing.getHeaders(mac_os9_csv) == ["a", "b", "c"];

`test
test_parsing_csv_mac_os9_line_endings_size:
    test_size(
        mac_os9_csv, 
        numExpectedRows:2, 
        numExpectedColumns:3, 
        columnTypes:[Float64, Float64, Float64]
        );

`test
test_parsing_csv_mac_os9_line_endings_values:
    test_values(
        mac_os9_csv,
        expectedColumns:[[1,5], [2,6], [3,7]],
        columnTypes: [Float64, Float64, Float64]
        );

windows_csv: "a,b,c\r\n1,2,3 \r\n 5,6,7";

`test
test_parsing_csv_windows_line_endings_headers:
    parsing.getHeaders(windows_csv) == ["a", "b", "c"];

`test
test_parsing_csv_windows_line_endings_size:
    test_size(
        windows_csv, 
        numExpectedRows:2, 
        numExpectedColumns:3, 
        columnTypes:[Float64, Float64, Float64]
        );

`test
test_parsing_csv_windows_line_endings_values:
    test_values(
        windows_csv,
        expectedColumns:[[1,5], [2,6], [3,7]],
        columnTypes: [Float64, Float64, Float64]
        );

`test
test_parsing_csv_windows_line_endings_strings:
    test_values(
        windows_csv,
        expectedColumns:[['1','5'], ['2','6'], ['3','7']],
        columnTypes: [String, String, String]
        );


empty_nan_csv:
"""x,y,z
1,,3
4,5,6
  ,8,9
""";

`test
test_parsing_csv_empty_nan_size: (
    let results = parsing.csv(
        empty_nan_csv,
        columnTypes:[Float64, Float64, Float64]
        );
    assertions.assertEqual(results.numRows, 3)
    assertions.assertEqual(results.numColumns, 3)
    );

`test
test_parsing_csv_empty_nan_values: (
    let results = parsing.csv(
        empty_nan_csv,
        columnTypes:[Float64, Float64, Float64]
        );
    let expectedRows = [
        [1, math.nan, 3],
        [4,5,6],
        [math.nan,8,9]
        ];
    let expectedColumns = [
        [1,4,math.nan],
        [math.nan,5,8],
        [3,6,9]
        ];

    assertions.assertEqual(extractColumns(results), expectedColumns)
    );

`test
test_parsing_csv_util_whitespace_offset:
    parsing.getFirstNonwhitespaceCharacterOffset(" \n\r   hello") == 6;

`test
test_parsing_csv_util_datarow_offset_nix:
    parsing.getFirstDataRowOffsetWithHeaders("x,y,z\n1,2,3") == 6;

`test
test_parsing_csv_util_datarow_offset_windows:
    parsing.getFirstDataRowOffsetWithHeaders("x,y,z\r\n1,2,3") == 7;

`test
test_parsing_csv_util_datarow_offset_mac:
    parsing.getFirstDataRowOffsetWithHeaders("x,y,z\r1,2,3") == 6;

`test
test_parsing_csv_util_next_newline_nix_lower:
    parsing.findNextNewline("x,y,z\n1,2,3\n4,5,6", 6) == 6;

`test
test_parsing_csv_util_next_newline_nix_lower_2:
    parsing.findNextNewline("x,y,z\n1,2,3\n4,5,6", 7) == 12;

`test
test_parsing_csv_util_next_newline_nix_upper:
    parsing.findNextNewline("x,y,z\n1,2,3\n4,5,6", 6, useAsUpperRange:true) == 11; // '\n'

`test
test_parsing_csv_util_next_newline_mac_lower:
    parsing.findNextNewline("x,y,z\r1,2,3\r4,5,6", 6) == 6;

`test
test_parsing_csv_util_next_newline_mac_lower_2:
    parsing.findNextNewline("x,y,z\r1,2,3\r4,5,6", 7) == 12;

`test
test_parsing_csv_util_next_newline_mac_upper:
    parsing.findNextNewline("x,y,z\r1,2,3\r4,5,6", 6, useAsUpperRange:true) == 11; // '\r'

`test
test_parsing_csv_util_next_newline_windows_lower:
    parsing.findNextNewline("x,y,z\r\n1,2,3\r\n4,5,6", 7) == 7; // '4'

`test
test_parsing_csv_util_next_newline_windows_lower_2:
    parsing.findNextNewline("x,y,z\r\n1,2,3\r\n4,5,6", 8) == 14; // '4'

`test
test_parsing_csv_util_next_newline_windows_upper:
    parsing.findNextNewline("x,y,z\r\n1,2,3\r\n4,5,6", 7, useAsUpperRange:true) == 12; // '\r'

`test whitespace_1: (
    let df1 = parsing.csv("a,b,c\n4, 5,6", columnTypes: [Float64, Float64, Float64]);
    let df2 = parsing.csv("a,b,c\n4, 5,6", columnTypes: [Float64, Float64, Float64]);

    dataframe.assertFramesEqual(df1, df2)
    );

`test whitespace_2: (
    let df1 = parsing.csv("a,b,c\n4, 5,6", columnTypes: [Int64, Int64, Int64]);
    let df2 = parsing.csv("a,b,c\n4, 5,6", columnTypes: [Int64, Int64, Int64]);

    dataframe.assertFramesEqual(df1, df2)
    );

`test whitespace_3: (
    let df1 = parsing.csv("a,b\n1, 2", columnTypes: [Int64, Int64]);
    let df2 = parsing.csv("a,b\n1,2", columnTypes: [Int64, Int64])

    dataframe.assertFramesEqual(df1, df2)
    );

`test whitespace_4: (
    assertions.assertRaises(
        Exception,
        fun() { 
            parsing.csv("a,b,c\n4,,6", columnTypes: [Int64, Int64, Int64])
            }
        );
    assertions.assertRaises(
        Exception,
        fun() {
            parsing.csv("a,b,c\n4, ,6", columnTypes: [Int64, Int64, Int64])
            }
        );
    );

`test lots_o_nas: (
    let df = parsing.csv(
"""a,b
1,
2, 
,3
 ,4
na,5
6,na
  na ,7
8, na
na,9
10,na
NA,11
11,NA
  NA ,12
13, NA      """,
        defaultColumnType: Float64
        );

    let nan = math.nan;
    let expectedDf = dataframe.DataFrame(
        [[1,2,nan,nan,nan,6,nan,8,nan,10,nan,11,nan,13],
         [nan,nan,3,4,5,nan,7,nan,9,nan,11,nan,12,nan]],
        columnNames:["a", "b"]
        )

    dataframe.assertFramesEqual(df, expectedDf)
    assertions.assertIs(df[0][0], 1.0)
    assertions.assertIs(df[0][-1], math.nan)
    );

`test lots_o_nas_float32: (
    let df = parsing.csv(
"""a,b
1,
2, 
,3
 ,4
na,5
6,na
  na ,7
8, na
na,9
10,na
NA,11
11,NA
  NA ,12
13, NA      """,
        defaultColumnType: Float32
        );

    let nan = math.nan;
    let expectedDf = dataframe.DataFrame(
        [[1,2,nan,nan,nan,6,nan,8,nan,10,nan,11,nan,13],
         [nan,nan,3,4,5,nan,7,nan,9,nan,11,nan,12,nan]],
        columnNames:["a", "b"]
        )

    dataframe.assertFramesEqual(df, expectedDf)
    assertions.assertIs(df[0][0], 1f32)
    assertions.assertIs(df[0][-1], Float32(math.nan))
    );


bigish_csv: (
    let datastr = """1228690805332.0,fx_EURUSD,6000000.0,1.271850,1.272750,5000000.0
    1228690805975.3,fx_EURUSD,6000000.0,1.271850,1.272640,50000.0
    1228690806069.2,fx_EURUSD,1000000.0,1.272300,1.272400,1000000.0
    1228690809816.8,fx_EURUSD,1000000.0,1.272300,1.272400,1000000.0
    1228690809982.0,fx_EURUSD,1000000.0,1.272300,1.272400,1000000.0
    1228690810059.6,fx_EURUSD,1000000.0,1.272000,1.272400,1000000.0
    1228690811573.3,fx_EURUSD,1000000.0,1.272100,1.272400,1000000.0
    1228690811582.8,fx_EURUSD,1000000.0,1.272100,1.272400,1000000.0
    1228690811585.1,fx_EURUSD,1000000.0,1.272100,1.272400,1000000.0
    1228690812204.5,fx_EURUSD,1000000.0,1.272100,1.272400,1000000.0
    1228690812205.0,fx_EURUSD,1000000.0,1.272100,1.272400,1000000.0
    1228690815441.4,fx_EURUSD,1000000.0,1.272100,1.272400,1000000.0
    1228690815797.9,fx_EURUSD,1000000.0,1.272100,1.272400,1000000.0
    1228690815804.0,fx_EURUSD,1000000.0,1.272100,1.272400,1000000.0
    1228690815841.9,fx_EURUSD,1000000.0,1.272100,1.272400,1000000.0
    1228690816078.5,fx_EURUSD,1000000.0,1.272200,1.272400,1000000.0
    1228690826817.5,fx_EURUSD,1000000.0,1.272200,1.272400,1000000.0
    1228690826824.2,fx_EURUSD,1000000.0,1.272200,1.272400,1000000.0
    1228690826946.6,fx_EURUSD,1000000.0,1.272200,1.272400,1000000.0
    1228690827073.0,fx_EURUSD,1000000.0,1.272200,1.272500,6000000.0
    """

    for ix in sequence(10) { datastr = datastr + datastr }

    datastr.dataAsVector
    );

(`perf, `callResult) 
csv_perf: (let data = bigish_csv; fun() { parsing.csv(data) });

`test failedConversions: (
    let data = "A,B\n10,asdf\n12,lkjh"
    let shouldThrow = { parsing.csv(data, columnTypes:{"A": Integer, "B" : String}) };
    let throwMessage = "Can't call builtin.assertions.assertRaises with arguments (<eval>(...*),):"
    assertions.assertThrows(throwMessage, shouldThrow);
    );

`test nonstandardSeparators: (
    let row = "A|B|C\n"
    let csv = row + row;
    csv = csv + csv;
    csv = csv + csv;
    csv = csv[,-2]

    let df1 = parsing.parseSeparatedValues(
        csv, hasHeaders: false, separator: "|"
        );

    let df2 = parsing.csv(csv.replace("|", ","), hasHeaders: false);

    dataframe.assertFramesEqual(df1, df2)
    );

`test whitespace_in_first_row: (
    let s = "a,b,c\n\n\n\n1,2,3\n4,5,6";
    dataframe.assertFramesEqual(
        parsing.csv(s, defaultColumnType: Int64),
        dataframe.DataFrame(
            a: [1, 4],
            b: [2, 5], 
            c: [3, 6]
            )
        )
    );

`test quotes_as_values_1: (
    let dfComputed = parsing.csv('"",""', hasHeaders: false)

    let dfExpected = 
        dataframe.DataFrame(
            C0: [""], 
            C1: [""]
            )
    dataframe.assertFramesEqual(
        dfComputed, dfExpected
        )
    );

`test quotes_as_values_2: (
    let dfComputed = parsing.csv('"",""\n"",""', hasHeaders: false)

    let dfExpected = 
        dataframe.DataFrame(
            C0: ["", ""], 
            C1: ["", ""]
            );

    dataframe.assertFramesEqual(
        dfComputed, dfExpected
        )
    );

`test quotes_as_values_3: (
    let csvString = "\"01/02/1900\",\"\",\"A\"\n\"01/03/1900\",\"B\",\"\"\n\"01/04/1900\",\"C\",\"D\""
    let dfComputed = parsing.csv(csvString, hasHeaders: false);
    
    let dfExpected = dataframe.DataFrame(
        C0: ["01/02/1900", "01/03/1900", "01/04/1900"],
        C1: ["", "B", "C"],
        C2: ["A", "", "D"]
        )

    dataframe.assertFramesEqual(dfExpected, dfComputed)
    );

`test quotes_as_values_4: (
    let csvString = 
'''"Symbol","Date","Time","Open","High","Low","Close","Volume"
AA,01/02/1991,0931,7.13,7.13,7.13,7.13,83200
AA,01/02/1991,0931,7.16,7.16,7.16,7.16,3200'''

    let expectedColumnNames = 
        ["Symbol","Date","Time","Open","High","Low","Close","Volume"];

    assertions.assertEqual(
        parsing.getHeaders(csvString),
        expectedColumnNames
        );

    let dfComputed = parsing.csv(
        csvString,
        columnTypes: [String, String, String, 
            Float64, Float64, Float64, Float64, Float64]
        );
    
    let dfExpected = dfComputed.withColumnNames(
        expectedColumnNames
        );

    dataframe.assertFramesEqual(dfExpected, dfComputed)
    );

`test bad_row_1: (
    let s = "a,b,c\n1,2,3\n4,5,6,7";
    let computedDf = parsing.csv(s, defaultColumnType: Float64);
    let expectedDf = dataframe.DataFrame(a: [1], b: [2], c: [3])

    dataframe.assertFramesEqual(computedDf, expectedDf)
    );

`test bad_row_2: (
    let s = "a,b,c\n1,2,3\n4,5,6,7\n\n\n\n\n";
    let computedDf = parsing.csv(s, defaultColumnType: Float64);
    let expectedDf = dataframe.DataFrame(a: [1], b: [2], c: [3])

    dataframe.assertFramesEqual(computedDf, expectedDf)
    );

`test bad_row_3: (
    let s = "a,b,c\n1,2,3\n4,5,6,7\n8,9,0";
    let computedDf = parsing.csv(s, defaultColumnType: Float64);
    let expectedDf = dataframe.DataFrame(a: [1,8], b: [2,9], c: [3,0])

    dataframe.assertFramesEqual(computedDf, expectedDf)
    );


