/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/
filter_test:
fun (filterToTest, matchingValue) {
    match (matchingValue) with
        (filterToTest(...)) { true }
        (...) { false }
    };

filter_test_fail:
fun (filterToTest, matchingValue) {
    match (matchingValue) with
        (filterToTest(...)) { false }
        (...) { true }
    };


`test
filters_int: filter_test(filters.IsInteger, 1);
`test
filters_uint8: filter_test(filters.IsInteger, 1u8);
`test
filters_uint16: filter_test(filters.IsInteger, 1u16);
`test
filters_uint32: filter_test(filters.IsInteger, 1u32);
`test
filters_uint64: filter_test(filters.IsInteger, 1u64);
`test
filters_int8: filter_test(filters.IsInteger, 1s8);
`test
filters_int16: filter_test(filters.IsInteger, 1s16);
`test
filters_int32: filter_test(filters.IsInteger, 1s32);
`test
filters_int_fail: filter_test_fail(filters.IsInteger, "fail");

`test
filters_float: filter_test(filters.IsFloat, 1.0);
`test
filters_float32: filter_test(filters.IsFloat, 1.0f32);
`test
filters_float_fail: filter_test_fail(filters.IsFloat, "fail");

`test
filters_numeric_float: filter_test(filters.IsNumeric, 1.0);
`test
filters_numeric_float32: filter_test(filters.IsNumeric, 1.0f32);
`test
filters_numeric_int: filter_test(filters.IsNumeric, 1);
`test
filters_numeric_uint32: filter_test(filters.IsNumeric, 1u32);
`test
filters_numeric_uint16: filter_test(filters.IsNumeric, 1u16);
`test
filters_numeric_uint8: filter_test(filters.IsNumeric, 1u8);
`test
filters_numeric_int32: filter_test(filters.IsNumeric, 1s32);
`test
filters_numeric_int16: filter_test(filters.IsNumeric, 1s16);
`test
filters_numeric_int8: filter_test(filters.IsNumeric, 1s8);
`test
filters_numeric_fail: filter_test_fail(filters.IsNumeric, "fail");

`test
filters_string: filter_test(filters.IsString, "hello");
`test
filters_string_2: filter_test(filters.IsString, "");
`test
filters_string_fail: filter_test_fail(filters.IsString, nothing);

`test
filters_symbol: filter_test(filters.IsSymbol, `hello);
`test
filters_symbol_fail: filter_test_fail(filters.IsSymbol, nothing);

`test
filters_datetime: filter_test(filters.IsDateTime, DateTime("2013-01-01"));
`test
filters_datetime_fail: filter_test_fail(filters.IsDateTime, nothing);

`test
filters_timeduration: filter_test(filters.IsTimeDuration, TimeDuration("12:34:56.789123"));
`test
filters_timeduration_fail: filter_test_fail(filters.IsTimeDuration, nothing);

`test
filters_tuple: filter_test(filters.IsTuple, (1,2,3));
`test
filters_tuple_empty: filter_test(filters.IsTuple, ());
`test
filters_tuple_named: filter_test(filters.IsTuple, (a:1, b:2));
`test
filters_tuple_fail: filter_test_fail(filters.IsTuple, "fail");

`test
filters_dictionary: filter_test(filters.IsDictionary, {"a":1, "b":2});
`test
filters_dictionary_empty: filter_test(filters.IsDictionary, {:});
`test
filters_dictionary_fail: filter_test_fail(filters.IsDictionary, "fail");

`test
filters_vector: filter_test(filters.IsVector, [1,2,3]);
`test
filters_vector_paged: filter_test(filters.IsVector, [1,2,3].paged);
`test
filters_vector_empty: filter_test(filters.IsVector, []);
`test
filters_vector_multitype_1: filter_test(filters.IsVector, [1, 2, 3, 4.5]);
`test
filters_vector_multitype_2: filter_test(filters.IsVector, [1, "hello", `hello, 4.5]);
`test
filters_vector_multitype_3: filter_test(filters.IsVector, [nothing, "hello"]);
`test
filters_vector_fail: filter_test_fail(filters.IsVector, MutableVector.create(10, 1.0));
`test
filters_vector_fail_2: filter_test_fail(filters.IsVector, nothing);

`test
filters_function: filter_test(filters.IsFunction, fun(x){x});
`test
filters_function_shorthand: filter_test(filters.IsFunction, {_});
`test
filters_function_fail: filter_test_fail(filters.IsFunction, nothing);

`test
filters_object: filter_test(filters.IsObject, object {});
`test
filters_object_fail: filter_test_fail(filters.IsObject, nothing);
`test
filters_class: filter_test(filters.IsClass, class {});
`test
filters_class_fail: filter_test_fail(filters.IsClass, nothing);
`test
filters_instance: filter_test(filters.IsInstance, class{}());
`test
filters_instance_fail: filter_test_fail(filters.IsInstance, object {});
`test
filters_module: filter_test(filters.IsModule, math);

`test
filters_mutable: filter_test(filters.IsMutableVector, MutableVector.create(5, 0.0));
`test
filters_mutable_fail: filter_test_fail(filters.IsMutableVector, []);

`test
filters_alternative: filter_test(filters.IsAlternative, #Tag("hello"));
`test
filters_alternative_fail: filter_test_fail(filters.IsAlternative, #Tag);
`test
filters_tag: filter_test(filters.IsTag, #Tag);
`test
filters_tag_Fail: filter_test_fail(filters.IsTag, #Alt("hello"));






