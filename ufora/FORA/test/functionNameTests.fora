/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/
`test _1: (
    assertions.assertEqual(
        eval("String(fun(){})"), 
        "<eval>.<unnamed function>"
        )
    );

`test _2: (
    assertions.assertEqual(
        eval("String(let f = fun(){}; f)"),
        "<eval>.f"
        )
    );

`test _3: (
    assertions.assertEqual(
        eval("String(fun(){fun(){}}())"), 
        "<eval>.<unnamed function>.<unnamed function>"
        )
    );

`test _4: (
    assertions.assertEqual(
        eval("String(let f = fun(){fun(){}}; f())"),
        "<eval>.f.<unnamed function>"
        )
    );

`test _5: (
    assertions.assertEqual(
        eval("String(let f = (2; fun(){}); f)"),
        "<eval>.f"
        )
    );

`test _6: (
    assertions.assertEqual(
        eval("String(let f = (1; 2; 3; fun(){}); f)"),
        "<eval>.f"
        )
    );

`test _7: 
    assertions.assertEqual(
        eval("String(let f = (let g = fun(){}; fun(){}); f)"),
        "<eval>.f"
        );

`test _1_lambda: 
    assertions.assertEqual(
        eval("String({})"), 
        "<eval>.<unnamed lambda>"
        );

`test _2_lambda: 
    assertions.assertEqual(
        eval("String(let f = {}; f)"),
        "<eval>.f"
        );

`test _4_lambda: 
    assertions.assertEqual(
        eval("String(let f = {{}}; f(2))"),
        "<eval>.f.<unnamed lambda>"
        );

`test _5_lambda: 
    assertions.assertEqual(
        eval("String(let f = (2; {}); f)"),
        "<eval>.f"
        );

`test _1_objects: 
    assertions.assertEqual(
        eval("String(object{})"),
        "<eval>.<unnamed object>"
        );

`test _1_classes: 
    assertions.assertEqual(
        eval("String(class{})"),
        "<eval>.<unnamed class>"
        );

`test _2_classes:
assertions.assertEqual(
    String(eval("let c = (1;2;3;class{}()); c")),
    "<eval>.<unnamed class>.<instance>"
    );

`test _3_classes: (
    assertions.assertEqual(
        eval("String(let c = (1; 2; 3; class {}); c)"),
        "<eval>.c"
        )
    );

`test _4_classes:
assertions.assertEqual(
    eval("String(let C = (1;2;3;class{}); C)"),
    "<eval>.C"
    );

`test object_members_1:
    assertions.assertEqual(
        eval("let o = object { m: fun() {} }; String(o.m)"),
        "<eval>.o.m"
        );

`test object_members_2:
    assertions.assertEqual(
        eval("""
            let o = object { 
                m: fun() {}; 
                n: fun() {
                    object { 
                        p: (let f = {}; f);
                        }
                    };
                };
                String(o.n().p)"""
            ),
        "<eval>.o.n.<unnamed object>.f"
        );

`test braxExamples_1:
assertions.assertEqual(
    eval("String(let f = fun() { {_} }; {_}; f())"),
    "<eval>.f.<unnamed lambda>"
    );

`test braxExamples_2:
assertions.assertEqual(
    eval("String(let f = fun() { {_} }; {_}; f)"),
    "<eval>.f"
    );


`test braxExamples_3:
assertions.assertEqual(
    eval("String(let f = fun() { {_} } {_}; f())"),
    "<eval>.f.<unnamed lambda>"
    );

`test braxExamples_4:
assertions.assertEqual(
    eval("String(let f = fun() { {_} } {_}; f)"),
    "<eval>.f"
    );

`test tuples_1:
assertions.assertEqual(
    eval("let t = (fun(){}, x: fun(){}); String(t[0])"),
    "<eval>.<unnamed function>"
    );

`test tuples_2:
assertions.assertEqual(
    eval("let t = (fun(){}, x: fun(){}); String(t[1])"),
    "<eval>.x"
    );

`test tuples_3:
assertions.assertEqual(
    eval("let t = (fun(){}, x: fun(){}); String(t.x)"),
    "<eval>.x"
    );

`test vectors_1:
assertions.assertEqual(
    eval("let v = [fun(){}, fun(){}]; String(v[0])"),
    "<eval>.<unnamed function>"
    );

`test vectors_2:
assertions.assertEqual(
    eval('let v = [fun(){}, fun(){{}}]; String(v[1]())'),
    "<eval>.<unnamed function>.<unnamed lambda>"
    );

`test assignments_1:
assertions.assertEqual(
    eval('let f = fun(){}; f = {}; String(f)'),
    "<eval>.<unnamed lambda>"
    );

`test modules_1:
assertions.assertEqual(
    String(math.sin),
    "builtin.math.trigonometry.sin"
    );

`test unnamed_tuples_1:
assertions.assertEqual(
    eval("String((fun(){},)[0])"),
    "<eval>.<unnamed function>"
    );

`test unnamed_tuples_2:
assertions.assertEqual(
    eval("String((x:fun(){},)[0])"),
    "<eval>.x"
    );

`test unnamed_vectors:
assertions.assertEqual(
    eval("String([fun(){}][0])"),
    "<eval>.<unnamed function>"
    );

`test unnamed_classes:
assertions.assertEqual(
    eval("String(class { static f:fun(){} }.f)"),
    "<eval>.<unnamed class>.f"
    );

`test unnamed_objects:
assertions.assertEqual(
    eval("String(object { f:fun(){} }.f)"),
    "<eval>.<unnamed object>.f"
    );

`test complicated_1:
assertions.assertEqual(
    String(eval("let f = (let g = fun(){}; g); f")),
    "<eval>.g"
    );

`test complicated_2:
assertions.assertEqual(
    String(eval("let f = (let g = (let h = fun(){}; h) g); f")),
    "<eval>.h"
    );

`test complicated_3:
assertions.assertEqual(
    String(eval("let f = (1;2;3; let g = (let h = (4;5;6; fun(){}); 7;8; h) 9; g); 10; f")),
    "<eval>.h"
    );


