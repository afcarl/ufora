/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/

`test   timedurCreation_1: TimeDuration.fromString("31:41:56.26") is TimeDuration("31:41:56.26");
`test   timedurCreation_2: TimeDuration.fromHours(24) is TimeDuration("24:00:00");
`test   timedurCreation_3: TimeDuration.fromHours(0.5) is TimeDuration("00:30:00");
`test   timedurCreation_4: TimeDuration.fromMinutes(60) is TimeDuration("01:00:00");
`test   timedurCreation_5: TimeDuration.fromMinutes(0.5) is TimeDuration("00:00:30");
`test   timedurCreation_6: TimeDuration.fromSeconds(3661) is TimeDuration("01:01:01");
`test   timedurCreation_7: TimeDuration.fromSeconds(0.5) is TimeDuration("00:00:00.500000");
`test   timedurCreation_8: TimeDuration(0.0) is TimeDuration("00:00:00.00");
`test   timedurCreation_9: TimeDuration(0.0) is TimeDuration.fromFloat(0.000);
`test   timedurCreation_10: TimeDuration.fromMilliseconds(555) is TimeDuration("00:00:00.555000");
`test   timedurCreation_11: TimeDuration.fromMicroseconds(123456) is TimeDuration("00:00:00.123456");

`test   timedurMembers_1: (
    let t = TimeDuration("12:34:56.789123")
    t.hours() is 12 
    );
                            
`test   timedurMembers_2: (
    let t = TimeDuration("12:34:56.789123")
    t.minutes() is 34
    );
                            
`test   timedurMembers_3: (
    let t = TimeDuration("12:34:56.789123")
    t.seconds() is 56
    );
                                
`test   totalYears: (
    let t = TimeDuration.fromYears(3.3)
    assertions.assertEqual(t.totalYears(), 3)
    assertions.assertEqual((-t).totalYears(), -3)
    );
                            
`test   totalWeeks: (
    let t = TimeDuration.fromWeeks(2.7)
    assertions.assertEqual(t.totalWeeks(), 2)
    assertions.assertEqual((-t).totalWeeks(), -2)
    );
                            
`test   totalDays: (
    let t = TimeDuration("12:34:56.789123")
    assertions.assertEqual(t.totalHours(), 12)
    assertions.assertEqual((-t).totalHours(), -12)
    );
                            
`test   totalHours: (
    let t = TimeDuration("12:34:56.789123")
    assertions.assertEqual(t.totalHours(), 12)
    assertions.assertEqual((-t).totalHours(), -12)
    );
                            
`test   totalSeconds: (
    let t = TimeDuration("12:34:56.789123")
    assertions.assertEqual(t.totalSeconds(), 45296)
    assertions.assertEqual((-t).totalSeconds(), -45296)
    );
                            
`test   fractionalSeconds: (
    let t = TimeDuration("12:34:56.789123")
    t.fractionalSeconds() is 789123
    );
                            
`test   totalMilliseconds: (
    let t = TimeDuration("12:34:56.789123")
    assertions.assertEqual(t.totalMilliseconds(), 45296789)
    assertions.assertEqual((-t).totalMilliseconds(), -45296789)
    );
                            
`test   totalMicroseconds: (
    let t = TimeDuration("12:34:56.789123")
    assertions.assertEqual(t.totalMicroseconds(), 45296789123)
    assertions.assertEqual((-t).totalMicroseconds(), -45296789123)
    );                              
                            
`test   timedurMembers_8: (
    assertions.assertEqual(TimeDuration.fromDays(1), TimeDuration("24:00:00"))
    assertions.assertEqual(TimeDuration.fromDays(0.5), TimeDuration("12:00:00"))
    );
    
`test   timedurMembers_9: (
    assertions.assertEqual(TimeDuration.fromYears(1), TimeDuration("8760:00:00"))
    assertions.assertEqual(TimeDuration.fromYears(0.5), TimeDuration("4380:00:00"))
    );
    
`test   timedurMembers_10: (
    assertions.assertEqual(TimeDuration.fromWeeks(1), TimeDuration("168:00:00"))
    assertions.assertEqual(TimeDuration.fromWeeks(0.5), TimeDuration("84:00:00"))
    );
                            
`test   timedurOperators_1: (
    let t0 = TimeDuration("12:34:56.789123");
    let t1 = TimeDuration.fromString("31:41:56.26");
    t1 - t0 is TimeDuration("19:06:59.470877")
    );
                            
`test   timedurOperators_2: (
    let t0 = TimeDuration("12:34:56.789123");
    let t1 = TimeDuration.fromString("31:41:56.26");
    t0 * 2 is TimeDuration("25:09:53.578246")
    );
                            
`test   timedurOperators_3: (
    let t0 = TimeDuration("12:34:56.789123");
    let t1 = TimeDuration.fromString("31:41:56.26");
    t0 < t1 is true
    t0 >= t1 is false
    );
                            
`test timedurationMaxMin: (
    let timeDurations = Vector.range(10, { TimeDuration.fromWeeks(_) });
    
    assertions.assertEqual(min(timeDurations), timeDurations[0])
    assertions.assertEqual(max(timeDurations), timeDurations[-1])
    );

`perf timeDurationEquality: (
    let td = TimeDuration.fromSeconds(1);
    let tr = true;
    for ix in sequence(10000000) {
        tr = (td == TimeDuration.fromSeconds(ix));
        }
    true;
    );

`test division_1: (
    let td = TimeDuration.fromHours(1);
    assertions.assertEqual(
        (2 * td) / td, 2.0
        )

    td = TimeDuration.fromMinutes(1);
    assertions.assertEqual(
        (td * 3) / td, 3.0
        )

    td = TimeDuration.fromMicroseconds(1);
    assertions.assertEqual(
        (4.0 * td) / td, 4.0
        )

    td = TimeDuration.fromDays(1);
    assertions.assertEqual(
        (td * 5s32) / td, 5.0
        )

    td = TimeDuration.fromHours(1);
    assertions.assertEqual(
        (6f32 * td) / td, 6.0
        )

    assertions.assertEqual(
        td / TimeDuration.fromHours(0), math.inf
        );
    );

`test is_negative: (
    let t = TimeDuration("12:34:56.789123");
    assertions.assertFalse(t.isNegative());
    assertions.assertTrue((-t).isNegative());

    t = TimeDuration.fromHours(0);
    assertions.assertFalse(t.isNegative());
    );

`test overflow_in_total_seconds: (
    let n = 2465300000;
    TimeDuration.fromSeconds(n).totalSeconds() is n
    );

