/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/

//a bunch of ways of producing 500K of 1's and 500K of 2's
waysToProduceOnesAndTwos: [
	[if (x >= 500000) 2 else 1 for x in sequence(1000000)],
	Vector.uniform(500000, 1).paged + Vector.uniform(500000, 2).paged,
	(Vector.uniform(500000, 2).paged + Vector.uniform(500000, 1).paged)[,,-1],
	Vector.uniform(500010, 1).paged[,-10] + Vector.uniform(500010, 2).paged[,-10],
	Vector.uniform(500010, 1)[,-10].paged + Vector.uniform(500010, 2)[,-10].paged,
	Vector.uniform(500010, 1)[10,].paged + Vector.uniform(500010, 2)[10,].paged,
	(Vector.uniform(500010, 1).paged + Vector.uniform(500010, 2).paged)[10,-10],
	(Vector.uniform(500010, 2).paged + Vector.uniform(500010, 1).paged)[10,-10][,,-1],
	(Vector.uniform(500000, 2).paged + [if (x < 20) 2 else 1 for x in sequence(40)].paged[,,2] + 
		Vector.uniform(500000, 1).paged)[10,-10][,,-1]
	];

`test wholeSumsAreSame: (
	let ways = waysToProduceOnesAndTwos;

	for index in sequence(size(ways)) {
		let onesAndTwos = ways[index];
		assertions.assertEqual(sumForward(onesAndTwos, 0, 1000000), 1500000, msg: index)
		assertions.assertEqual(sumBackward(onesAndTwos, 0, 1000000), 1500000, msg: index)
		}
	//if we get here without throwing, good!
	true
	);

ones: Vector.uniform(1000000, 1);
onesAndTwos: Vector.uniform(500002, 1).paged[1,-1] + 
			 Vector.uniform(500002, 2).paged[1,-1];

sumForward: fun(v, low, high) {
	let res = 0
	while (low < high) {
		res = res + v[low]
		low = low + 1
		}
	res
	};

sumBackward: fun(v, low, high) {
	let res = 0
	while (low < high) {
		high = high - 1
		res = res + v[high]
		}
	res
	};


`test vector_slicing_1: sumForward(ones, 0, 1000000) == 1000000;
`test vector_slicing_2: sumBackward(ones, 0, 1000000) == 1000000;
`test vector_slicing_3: sumForward(ones, 10, 1000000 - 10) == 1000000 - 20;
`test vector_slicing_4: sumBackward(ones, 10, 1000000 - 10) == 1000000 - 20;
`test vector_slicing_5: sumForward(ones[10,], 10, 1000000 - 20) == 1000000 - 30;
`test vector_slicing_6: sumBackward(ones[,-10], 10, 1000000 - 20) == 1000000 - 30;

`test vector_slicing_reversed_1: sumForward(ones[,,-1], 0, 1000000) == 1000000;
`test vector_slicing_reversed_2: sumBackward(ones[,,-1], 0, 1000000) == 1000000;
`test vector_slicing_reversed_3: sumForward(ones[,,-1], 10, 1000000 - 10) == 1000000 - 20;
`test vector_slicing_reversed_4: sumBackward(ones[,,-1], 10, 1000000 - 10) == 1000000 - 20;
`test vector_slicing_reversed_5: sumForward(ones[10,][,,-1], 10, 1000000 - 20) == 1000000 - 30;
`test vector_slicing_reversed_6: sumBackward(ones[,-10][,,-1], 10, 1000000 - 20) == 1000000 - 30;

`test vector_onesAndTwos_slicing_1: sumForward(onesAndTwos, 0, 1000000) == 1500000;
`test vector_onesAndTwos_slicing_2: sumBackward(onesAndTwos, 0, 1000000) == 1500000;
`test vector_onesAndTwos_slicing_3: sumForward(onesAndTwos, 10, 1000000 - 10) == 1500000 - 30;
`test vector_onesAndTwos_slicing_4: sumBackward(onesAndTwos, 10, 1000000 - 10) == 1500000 - 30;
`test vector_onesAndTwos_slicing_5: sumForward(onesAndTwos[10,], 10, 1000000 - 20) == 1500000 - 40;
`test vector_onesAndTwos_slicing_6: sumBackward(onesAndTwos[,-10], 10, 1000000 - 20) == 1500000 - 50;

`test vector_onesAndTwos_slicing_reversed_1: sumForward(onesAndTwos[,,-1], 0, 1000000) == 1500000;
`test vector_onesAndTwos_slicing_reversed_2: sumBackward(onesAndTwos[,,-1], 0, 1000000) == 1500000;
`test vector_onesAndTwos_slicing_reversed_3: sumForward(onesAndTwos[,,-1], 10, 1000000 - 10) == 1500000 - 30;
`test vector_onesAndTwos_slicing_reversed_4: sumBackward(onesAndTwos[,,-1], 10, 1000000 - 10) == 1500000 - 30;
`test vector_onesAndTwos_slicing_reversed_5: sumForward(onesAndTwos[10,][,,-1], 10, 1000000 - 20) == 1500000 - 40;
`test vector_onesAndTwos_slicing_reversed_6: sumBackward(onesAndTwos[,-10][,,-1], 10, 1000000 - 20) == 1500000 - 50;

