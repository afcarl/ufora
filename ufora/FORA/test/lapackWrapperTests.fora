/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/
`test getrf_1: (
    let A = [
        1.000, 1.200, 1.400, 1.600, 1.800, 2.000, 2.200, 2.400, 2.600,
        1.200, 1.000, 1.200, 1.400, 1.600, 1.800, 2.000, 2.200, 2.400,
        1.400, 1.200, 1.000, 1.200, 1.400, 1.600, 1.800, 2.000, 2.200,
        1.600, 1.400, 1.200, 1.000, 1.200, 1.400, 1.600, 1.800, 2.000,
        1.800, 1.600, 1.400, 1.200, 1.000, 1.200, 1.400, 1.600, 1.800,
        2.000, 1.800, 1.600, 1.400, 1.200, 1.000, 1.200, 1.400, 1.600,
        2.200, 2.000, 1.800, 1.600, 1.400, 1.200, 1.000, 1.200, 1.400,
        2.400, 2.200, 2.000, 1.800, 1.600, 1.400, 1.200, 1.000, 1.200,
        2.600, 2.400, 2.200, 2.000, 1.800, 1.600, 1.400, 1.200, 1.000
        ];
    let expectedIpiv = [9,9,9,9,9,9,9,9,9];
    let expectedLu = [    
        2.600,  0.400,  0.500,  0.500,  0.600,  0.700,  0.800,  0.800,  0.900,
        2.400,  0.300, -0.400, -0.300, -0.300, -0.200, -0.200, -0.100, -0.100,
        2.200,  0.600,  0.400,  0.000,  0.000,  0.000,  0.000,  0.000,  0.000,
        2.000,  0.800,  0.800,  0.400,  0.000,  0.000,  0.000,  0.000,  0.000,
        1.800,  1.100,  1.200,  0.800,  0.400,  0.000,  0.000,  0.000,  0.000,
        1.600,  1.400,  1.600,  1.200,  0.800,  0.400,  0.000,  0.000,  0.000,
        1.400,  1.700,  2.000,  1.600,  1.200,  0.800,  0.400,  0.000,  0.000,
        1.200,  1.900,  2.400,  2.000,  1.600,  1.200,  0.800,  0.400,  0.000,
        1.000,  2.200,  2.800,  2.400,  2.000,  1.600,  1.200,  0.800,  0.400
        ];

    let (computedLu, computedIpiv) = math.blasWrappers.getrf(9, 9, A);

    if (computedIpiv != expectedIpiv)
        return computedIpiv;
    
    assertions.assertAllClose(expectedLu, computedLu, atol:0.1)
	)
    ;
    
`test getrf_2: (
    let A = [0.0];
    try { math.blasWrappers.getrf(1, 1, A); false; }
    catch (...) { true; }
	)
    ;

`test gelsd_1: (
    let A =[
        0.120, -6.910, -3.330, 3.970,
        -8.190, 2.220, -8.940, 3.330,
        7.690, -5.120, -6.720, -2.740,
        -2.260, -9.080, -4.400, -7.920,
        -4.710, 9.960, -9.980, -3.200
        ];    
    let B = [
        7.300, 1.330, 2.680, -9.620, 0.0,
        0.470, 6.580, -1.710, -0.790, 0.0,
        -6.280, -3.420, 3.460, 0.410, 0.0
        ];
    let expectedCoeffs = [
        -0.690, -0.800, 0.380, 0.290, 0.290,
        -0.240, -0.080, 0.120, -0.240, 0.350,
        0.060, 0.210, -0.650, 0.420, -0.300
        ];        
    let expectedRank = 4s32;    
    let expectedSingularValues = [ 18.66, 15.99, 10.01, 8.51 ];
    
    let (computedCoeffs, computedSingularValues, computedRank) =
                            math.blasWrappers.gelsd(4, 5, 3, A, B);
                               
    if (expectedRank != computedRank)
        return "ranks don't match";
    
    assertions.assertAllClose(expectedSingularValues, computedSingularValues, atol:0.01);
	assertions.assertAllClose(expectedCoeffs, computedCoeffs, atol:0.01);                         
	);
    
`test gelsd_2: (
    let A = [
        1.440, -9.960, -7.550,  8.340,  7.080, -5.450,
       -7.840, -0.280,  3.240,  8.090,  2.520, -5.700,
       -4.390, -3.240,  6.270,  5.280,  0.740, -1.190,
        4.530,  3.830, -6.640,  2.060, -2.470,  4.700
        ];
        
    let B = [
        8.580,  8.260,  8.480, -5.280,  5.720,  8.930,
        9.350, -4.430, -0.700, -0.260, -7.360, -2.520
        ];
        
    let (computedC, computedS, computedR) = math.blasWrappers.gelsd(6, 4, 2, A, B);
    
    let expectedC = [
        -0.45, -0.85, 0.71, 0.13, 13.12, -4.82,
         0.25, -0.90, 0.63, 0.14, -7.49, -7.14
         ];
    let expectedS = [19.74, 15.17, 7.48, 4.34];
    let expectedR = 4s32;

    if (expectedR != computedR) 
        throw ("rank mismatch", expectedR, computedR);  

	assertions.assertAllClose(computedC, expectedC, atol:0.01);
	assertions.assertAllClose(computedS, computedS, atol:0.01);
	);
    
`test gelsd_3: (
    let a = math.Matrix([1., 2., 3., 3., 4., 6.], (2,3), `row)
    let b = [2., 1.];

    let res = math.blasWrappers.gelsd(
        a.dim[0],
        a.dim[1],
        1,
        a.columnMajorData(),
        b)

    assertions.assertAllClose(
        res[0],
        [-3.0, 0.769230769230769, 1.15384615384615]
        )
    assertions.assertAllClose(
        res[1],
        [8.65021758175354, 0.41681625246854]
        )
    assertions.assertEqual(
        res[2],
        2
        )
    );

`test getri_1:
	math.blasWrappers.getri(2,[2.0, 0.0, 0.0, 100.0]) == [0.5, 0.0, 0.0, 0.01]
	;
    
`test getri_2: (
    // This test will fail if getrf does not form a contiguous copy of the input vector.    
    let data = [2.0, 0.0] + [0.0, 2.0];
    
    math.blasWrappers.getri(2, data) == [0.5, 0.0, 0.0, 0.5];    
	);
    
`test getri_3: (
    let A = [0.0, 0.0, 0.0, 0.0];
    
    try {
        math.blasWrappers.getri(2, A, 2);
        return false;
        }
    catch (e)
        {
        return true;
        }
	);
    
`test gesvd_1: (
    let A = [
        1.000, 1.200, 1.400, 1.600, 1.800, 2.000, 2.200, 2.400, 2.600,
        1.200, 1.000, 1.200, 1.400, 1.600, 1.800, 2.000, 2.200, 2.400,
        1.400, 1.200, 1.000, 1.200, 1.400, 1.600, 1.800, 2.000, 2.200,
        1.600, 1.400, 1.200, 1.000, 1.200, 1.400, 1.600, 1.800, 2.000,
        1.800, 1.600, 1.400, 1.200, 1.000, 1.200, 1.400, 1.600, 1.800,
        2.000, 1.800, 1.600, 1.400, 1.200, 1.000, 1.200, 1.400, 1.600,
        2.200, 2.000, 1.800, 1.600, 1.400, 1.200, 1.000, 1.200, 1.400,
        2.400, 2.200, 2.000, 1.800, 1.600, 1.400, 1.200, 1.000, 1.200,
        2.600, 2.400, 2.200, 2.000, 1.800, 1.600, 1.400, 1.200, 1.000
        ];
    let expectedS = [14.423, 3.3163, 0.93998, 0.4, 0.24617, 0.17041, 0.13386, 0.11325, 0.10315];
    let expectedU = [
            -0.373, -0.342, -0.321, -0.308, -0.304, -0.308, -0.321, -0.342, -0.373,
            -0.464, -0.408, -0.303, -0.161,  0.000,  0.161,  0.303,  0.408,  0.464,
             0.429,  0.199, -0.116, -0.381, -0.485, -0.381, -0.116,  0.199,  0.429,
            -0.408,  0.000,  0.408,  0.408,  0.000, -0.408, -0.408,  0.000,  0.408,
             0.346, -0.255, -0.441,  0.089,  0.475,  0.089, -0.441, -0.255,  0.346,
            -0.303,  0.408,  0.161, -0.464,  0.000,  0.464, -0.161, -0.408,  0.303,
             0.225, -0.473,  0.242,  0.234, -0.473,  0.234,  0.242, -0.473,  0.225,
            -0.161,  0.408, -0.464,  0.303,  0.000, -0.303,  0.464, -0.408,  0.161,
            -0.078,  0.234, -0.361,  0.444, -0.473,  0.444, -0.361,  0.234, -0.078    
            ];
    let expectedVT = [
            -0.373,  0.464, -0.429,  0.408, -0.346,  0.303, -0.225,  0.161,  0.078,
            -0.342,  0.408, -0.199,  0.000,  0.255, -0.408,  0.473, -0.408, -0.234,
            -0.321,  0.303,  0.116, -0.408,  0.441, -0.161, -0.242,  0.464,  0.361,
            -0.308,  0.161,  0.381, -0.408, -0.089,  0.464, -0.234, -0.303, -0.444,
            -0.304,  0.000,  0.485,  0.000, -0.475,  0.000,  0.473,  0.000,  0.473,
            -0.308, -0.161,  0.381,  0.408, -0.089, -0.464, -0.234,  0.303, -0.444,
            -0.321, -0.303,  0.116,  0.408,  0.441,  0.161, -0.242, -0.464,  0.361,
            -0.342, -0.408, -0.199,  0.000,  0.255,  0.408,  0.473,  0.408, -0.234,
            -0.373, -0.464, -0.429, -0.408, -0.346, -0.303, -0.225, -0.161,  0.078
            ];
            
    let (computedS, computedU, computedVT) = 
        math.blasWrappers.gesvd("A", "A", 9, 9, A);
            
    assertions.assertAllClose(computedS, expectedS, atol:0.01);            
    assertions.assertAllClose(computedU, expectedU, atol:0.01);        
    assertions.assertAllClose(computedVT, expectedVT, atol:0.01);
	); 

`test   syev_1: (
    let A = [
         1.96,  -6.49,  -0.47,  -7.20,  -0.65,
        -6.49,   3.80,  -6.39,   1.50,  -6.34,
        -0.47,  -6.39,   4.17,  -1.51,   2.67,
        -7.20,   1.50,  -1.51,   5.70,   1.80,
        -0.65,  -6.34,   2.67,   1.80,  -7.10
        ];    
    let expectedEigenvalues = [-11.07, -6.23, 0.86, 8.87, 16.09];    
    let expectedEigenvectors = [
        -0.300, -0.510, -0.080,  0.000, -0.800,
        -0.610, -0.290, -0.380, -0.450,  0.450,
         0.400, -0.410, -0.660,  0.460,  0.170,
        -0.370, -0.360,  0.500,  0.620,  0.310,
         0.490, -0.610,  0.400, -0.460,  0.160 
        ];    
    
    let (computedEigenvectors, computedEigenvalues) =
        math.blasWrappers.syev('V', 'U', 5, A);
        
    assertions.assertAllClose(computedEigenvalues, expectedEigenvalues, atol:0.01);        
    assertions.assertAllClose(computedEigenvectors, expectedEigenvectors, atol:0.01);
	);
    
`test   syev_2: (
    let A = [
         1.96,  -6.49,  -0.47,  -7.20,  -0.65,
        -6.49,   3.80,  -6.39,   1.50,  -6.34,
        -0.47,  -6.39,   4.17,  -1.51,   2.67,
        -7.20,   1.50,  -1.51,   5.70,   1.80,
        -0.65,  -6.34,   2.67,   1.80,  -7.10
        ];    
    let expectedEigenvalues = [-11.07, -6.23, 0.86, 8.87, 16.09];
    
    let computedEigenvalues = math.blasWrappers.syev('N', 'L', 5, A);
    
    assertions.assertAllClose(computedEigenvalues, expectedEigenvalues, atol:0.01);
	);
    
`test   geev_1: (
    let A = [
        -1.010,  3.980,  3.300,  4.430,  7.310,
         0.860,  0.530,  8.260,  4.960, -6.430,
        -4.600, -7.040, -3.890, -7.660, -6.160,
         3.310,  5.290,  8.200, -7.330,  2.470,
        -4.810,  3.550, -1.510,  6.180,  5.580
        ];

    let expectedWr = [ 2.86, 2.86, -0.69, -0.69, -10.46];
    let expectedWi = [10.76, -10.76, 4.70, -4.70, 0.0];
    let expectedVl = [
        0.040,  0.620, -0.040,  0.280, -0.040,
        0.290,  0.000, -0.580,  0.010,  0.340,
       -0.130,  0.690, -0.390, -0.020, -0.400,
       -0.330,  0.000, -0.070, -0.190,  0.220,
        0.040,  0.560, -0.130, -0.800,  0.180   
        ];
    let expectedVr = [
        0.110,  0.410,  0.100,  0.400,  0.540,
        0.170, -0.260, -0.510, -0.090,  0.000,
        0.730, -0.030,  0.190, -0.080, -0.290,
        0.000, -0.020, -0.290, -0.080, -0.490,
        0.460,  0.340,  0.310, -0.740,  0.160
        ];
                        
    let (wr, wi, vl, vr) = math.blasWrappers.geev('V', 'V', 5, A);
    
	assertions.assertAllClose(wr, expectedWr, atol:0.01);
    assertions.assertAllClose(wi, expectedWi, atol:0.01);
    assertions.assertAllClose(vl, expectedVl, atol:0.01);
    assertions.assertAllClose(vr, expectedVr, atol:0.01);
	);
    
`test   geev_2: (
    let A = [
         1.96,  -6.49,  -0.47,  -7.20,  -0.65,
        -6.49,   3.80,  -6.39,   1.50,  -6.34,
        -0.47,  -6.39,   4.17,  -1.51,   2.67,
        -7.20,   1.50,  -1.51,   5.70,   1.80,
        -0.65,  -6.34,   2.67,   1.80,  -7.10
        ];    
    let expectedWr = [16.09, -11.07, -6.23, 0.86, 8.87];
    let expectedWi = [0.0, 0.0, 0.0, 0.0, 0.0];   
    
    let (wr, wi) = math.blasWrappers.geev('N', 'N', 5, A);
    
	assertions.assertAllClose(wr, expectedWr, atol:0.01);
    assertions.assertAllClose(wi, expectedWi, atol:0.01);
	);
    
`test   lange_1: (
    let A = [
        1.000,  1.000,  4.000,  0.000,  0.000,  0.000,  0.000,  0.000,  0.000,
        1.000,  1.000,  1.000,  5.000,  0.000,  0.000,  0.000,  0.000,  0.000,
        1.000,  1.000,  1.000,  1.000,  6.000,  0.000,  0.000,  0.000,  0.000,
        1.000,  1.000,  1.000,  1.000,  1.000,  7.000,  0.000,  0.000,  0.000,
        0.000,  1.000,  1.000,  1.000,  1.000,  1.000,  8.000,  0.000,  0.000,
        0.000,  0.000,  1.000,  1.000,  1.000,  1.000,  1.000,  9.000,  0.000,
        0.000,  0.000,  0.000,  1.000,  1.000,  1.000,  1.000,  1.000, 10.000,
        0.000,  0.000,  0.000,  0.000,  1.000,  1.000,  1.000,  1.000, 11.000,
        0.000,  0.000,  0.000,  0.000,  0.000,  1.000,  1.000,  1.000, 12.000
        ];
        
    let expectedNorm = 15.0;
    
    let computedNorm = math.blasWrappers.lange('1', 9, 9, A);
        
    assertions.assertClose(expectedNorm, computedNorm);
	);
    
`test  gecon_1: (
    let A = [
        1.000,  1.000,  4.000,  0.000,  0.000,  0.000,  0.000,  0.000,  0.000,
        1.000,  1.000,  1.000,  5.000,  0.000,  0.000,  0.000,  0.000,  0.000,
        1.000,  1.000,  1.000,  1.000,  6.000,  0.000,  0.000,  0.000,  0.000,
        1.000,  1.000,  1.000,  1.000,  1.000,  7.000,  0.000,  0.000,  0.000,
        0.000,  1.000,  1.000,  1.000,  1.000,  1.000,  8.000,  0.000,  0.000,
        0.000,  0.000,  1.000,  1.000,  1.000,  1.000,  1.000,  9.000,  0.000,
        0.000,  0.000,  0.000,  1.000,  1.000,  1.000,  1.000,  1.000, 10.000,
        0.000,  0.000,  0.000,  0.000,  1.000,  1.000,  1.000,  1.000, 11.000,
        0.000,  0.000,  0.000,  0.000,  0.000,  1.000,  1.000,  1.000, 12.000
        ];
        
    let expectedRcond = 0.0000544;
    
    let computedRcond = math.blasWrappers.gecon('1', 9, A);    
   
    assertions.assertClose(expectedRcond, computedRcond, atol:0.0001)
	);
    
`test   potrf_1: (
    let A = [
         4.16, -3.12,  0.56, -0.10,
        -3.12,  5.03, -0.83,  1.18,
         0.56, -0.83,  0.76,  0.34,
        -0.10,  1.18,  0.34,  1.18
        ];

    let computedResult = math.blasWrappers.potrf('U', 4, A);
    
    let expectedResult = [
        2.0396,    -3.12,       0.56,      -0.10,
       -1.5297,     1.6401,    -0.83,       1.18,
        0.2746,    -0.2500,     0.7887,     0.34,
       -0.0490,     0.6737,     0.6617,     0.5347
        ];
        
    assertions.assertAllClose(computedResult, expectedResult, atol:0.01);
	);
    
`test   potrf_2: (
    let A = [
         4.16, -3.12,  0.56, -0.10,
        -3.12,  5.03, -0.83,  1.18,
         0.56, -0.83,  0.76,  0.34,
        -0.10,  1.18,  0.34,  1.18
        ];

    let computedResult = math.blasWrappers.potrf('L', 4, A);

    let expectedResult = [
        2.040, -1.530,  0.275, -0.049,
       -3.120,  1.640, -0.250,  0.674,
        0.560, -0.830,  0.789,  0.662,
       -0.100,  1.180,  0.340,  0.535
        ];

    assertions.assertAllClose(computedResult, expectedResult, atol:0.01);
	);
    
`test   potrf_3: (
    //A has a negative eigenvalue, so the function should throw
    let A = [1.0, 0.0, 0.0, -1.0];
    
    try {
        math.blasWrappers.potrf('L', 2, A, 2);
        return false;
        }
    catch (e)
        {
        return true;
        }
	);

`test   geqrf_1: (
    let A = [
        0.500,  0.500,  0.500,  0.500,
        0.500, -1.500,  0.500, -1.500,
        1.207, -0.500,  0.207, -0.500,
        0.000,  2.414,  0.000, -0.414,
        1.707,  0.707,  0.293, -0.707
    ];
    
    let expectedTau =  [1.500000, 1.666667, 1.989949, 0.000000];
    let expectedQ = [
        -1.000,  0.333,  0.333,  0.333,
         1.000,  2.000, -0.200,  0.400,
        -0.207,  1.207,  0.707,  0.071,
        -1.000, -1.000,  0.000, -2.000,
        -1.000,  1.000,  1.000, -1.000
    ];
    
    let (computedTau, computedQ) = math.blasWrappers.geqrf(4, 5, A);
        
	assertions.assertAllClose(computedTau, expectedTau, atol:0.01);
    assertions.assertAllClose(computedQ, expectedQ, atol:0.01);
	);
    
`test   geqrf_2: (
    let A = [
        0.000,  2.000,  2.000,  0.000,  2.000,  2.000,
        2.000, -1.000, -1.000,  1.500, -1.000, -1.000
    ];
    
    let expectedTau = [1.0, 1.4];
    let expectedQ = [
        -4.000,  0.500,  0.500,  0.000,  0.500,  0.500,
         2.000,  2.500,  0.286, -0.429,  0.286,  0.286
    ];

    let (computedTau, computedQ) = math.blasWrappers.geqrf(6, 2, A);
    
    assertions.assertAllClose(computedTau, expectedTau, atol:0.01);
    assertions.assertAllClose(computedQ, expectedQ, atol:0.01);
	);
    
`test   gesv_1: (
    let A = [-2.0,4.0,3.0,7.0];
    let n = 2;
    let nrhs = 1;
    let B = [0.0,0.0];
    let computedX = math.blasWrappers.gesv(n,nrhs,A,B);
    let expectedX = [0.0,0.0];
    
    assertions.assertAllClose(computedX,expectedX)
	);
    
`test   gesv_2: (
    let A = [1.0,3.0,6.0,5.0,2.0,5.0,8.0,7.0,15.0];
    let n = 3;
    let nrhs = 1;
    let B = [4.0,0.0,7.0];
    let computedX = math.blasWrappers.gesv(n,nrhs,A,B);
    let expectedX = [28.25, 26.75, -19.75];
    
    assertions.assertAllClose(computedX,expectedX)
	);
    
`test   gesv_3: (
    let A = [-5.0,48.0,8.0,
            8.0,0.0,99.0,
            29.0,-5.0,2.0];
    let n = 3;
    let nrhs = 1;
    let B = [3.0,-18.0,2.4];
    let computedX = math.blasWrappers.gesv(n,nrhs,A,B);
    let expectedX = [-0.37246079928488957,
                        0.053847815561100972,
                        0.024376326865060152];

    assertions.assertAllClose(computedX,expectedX)
	);

