/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/

`test	constantMatching_1: match (1) with (1) { true } (_) { false };
`test	constantMatching_2: match ("asdf") with ("asdf") { true } (_) { false };
`test	constantMatching_3: match (`A) with (`A) { true } (_) { false };
`test	constantMatching_4: match (#A) with (#A) { true } (_) { false };

`test	p1:	match (1) with (x if x == 1) { true } (x) { false };
`test	p2:	match (1) with (x if x == 0) { false } (x) { true };

`test	p3:	match (1) with ({Int64}) { true } (x) { false };

//"or" in patterns
`test	orPattern_1:	match (1) with ({Int64} or {String}) { true } (x) { false };

`test	orPattern_2:	match ("hello") with ({Int64} or {String}) { true } (x) { false };

`test	orPattern_3:	match (0) with (0 or 1) { true } (x) { false };
`test	orPattern_4:	match (1) with (0 or 1) { true } (x) { false };
`test	orPattern_5:	match (2) with (0 or 1) { false } (x) { true };

`test	orPattern_6:	match ("asdf") with ({Int64} or {String} val) { true } (x) { false };
`test	orPattern_7:	match (10) with ({Int64} or {String}  val) { true } (x) { false };

`test	orPattern_8: 	match ((1,2)) with ((x,y) or (y,z)) { y is 2 };

`test	orPattern_9: 	match (1) with (1 or 2 and 3 or 4 and 4) { true } (_) { false };
`test	orPattern_10: 	match (2) with (1 or 2 and 3 or 4 and 4) { false } (_) { true };
`test	orPattern_11: 	match (4) with (1 or 2 and 3 or 4 and 4) { true } (_) { false };

`test	p6_9:	match ((1,2,3)) with ((_,_,_) or (_,_)) {true} (_) {false};

//tuple patterns
`test	p7_1:		match (1,2) with (x,...) { true } (...) { false };
`test	p7_2:		match (1,2) with (x,...) { true } (...) { false };
`test	p7_3:		match (1,2) with (x,y,...) { true } (...) { false };
`test	p7_4:		match (1,2) with (x,y,z,...) { false } (...) { true };

f: fun (x) { 1 } (x,y) { 2 } (x,y,z) {3} (*args) { size(args) };

`test	arity_1: 	f("hello") is 1;
`test	arity_2: 	f("hello", "darkness") is 2;
`test	arity_3: 	f("hello", "darkness", "my") is 3;
`test	arity_4: 	f("hello", "darkness", "my", "old") is 4;
`test	arity_5: 	f("hello", "darkness", "my", "old", "friend") is 5;
`test	arity_6: 	f("hello", "darkness", *("my", "old", "friend")) is 5;
`test	arity_7: 	f("hello", *("darkness", "my"), "old", "friend") is 5;

`test switchPatWorks: (
	let inc = fun(x) {
		if (x is 2) { 1 } else
		if (x is 3) { 2 } else
		if (x is 4) { 3 } else
		4
		}; sum(0,10000,inc) is (10000 * 4 - 3 - 2 - 1)
    );


`test negatingIntegersInPatternsWorks: 
	fun(-1) { true }(-1)
	;

`test moreComplexExpressionsInPatternsWork: 
	fun(-1-1+2) { true }(0)
	;

`test patternMatchAssignment: (
  let (x,y) = (0,0);

  (#X(x,y,...)) = (#X(1,2,10),);

  (x,y) is (1,2)
  );

