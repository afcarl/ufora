/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/
eps: 10 ** -4;
checkTol: fun(x, y, tol = eps) { math.abs(x - y) < tol };

`test mt: (
    let randoms=math.random.MersenneTwister(11u32);
    let i=0;
    let computedValues=iter.toVector(iter.subseq(randoms,0,1248));

    let expectedValues_1=[774252441, 293375679, 83645520, 2854952027, 1989508433, 833720247, 
        3113567501, 3978355020, 1804760737, 451723847, 2084893522, 969428760, 54893165, 3849754204, 
        2093245104, 3548421885, 4045028768, 398626605, 3654137068, 3821267581, 3135173508, 
        3065584162, 467017868, 2224357249, 3839289162, 3373218853, 3681449461, 2524005607, 
        709041620, 3164687441, 2715853915, 2888409496, 87976440, 4166423185, 501382723, 
        4245914950, 1358787243, 3341927794, 678228210, 108015296, 3259792509, 3956862031, 
        3514465888, 1764854807, 1480150939, 814766918, 1369230425, 876213611, 479581322, 
        3710869945, 360576027, 666342188, 3061134581, 3327872142, 2575019271, 2074925495, 
        239116623, 3364287424, 2060713640, 192864752, 1725187355, 2668386552, 3642042079, 
        1900404869, 3083138741, 3855433543, 2585845426, 296751331, 2372470459, 2175080449, 
        4076363760, 1996756099, 4237729672, 2915883735, 1451931089, 2083741252, 1030253896, 
        1834604658, 3420665504, 1710380878, 273531155, 184698777, 1566012277, 842619994, 
        300745638, 2046350779, 1371673873, 158667819, 302290962, 25768445, 1246672944, 
        3967904906, 3393458479, 2909972590, 3888664736, 4244530604, 3404282920, 2017091848, 
        2412992964, 3537060769];
    
    let expectedValues_2=[164909958, 1141123276, 13160306, 2419155812, 3298037209, 
        1112779331, 1940802402, 2421594226, 3274613860, 2511073062, 2761591230, 1722276013, 
        1924000993, 500888771, 3049345031, 502822001, 2596424720, 2446171968, 67499936, 
        2610626035, 2001972360, 3345336138, 3788181122, 588482721, 3351296166, 1261784647, 
        2812894876, 1512284987, 2669660302, 131152304, 3507323375, 1999816917, 1251306327, 
        4253078307, 1692668685, 3121573756, 2708648035, 596531583, 3525978215, 3712983870, 
        1380353875, 256674135, 723607996, 2636393189, 1169331828, 1046931997, 1885389085, 
        3588869990, 422895267, 778857966, 2698680452, 2556524814, 3850352390, 2056069092, 
        1469728388, 3777415908, 4107616265, 2806407883, 1802288998, 618841547, 2301002066, 
        3441460190, 4195027224, 529053243, 3049570651, 1200345088, 2171145813, 1788158965, 
        3240801986, 2728968660, 2032839514, 652614818, 3099136651, 1616951920, 954982039, 
        175333775, 330263853, 4029681326, 2573360684, 2546466200, 2249205807, 4105589544, 
        1978631899, 1849975382, 504561716, 2659275708, 4013835768, 1880053927, 479912955, 
        4219949104, 4155230354, 965357260, 1366311142, 3533858075, 1210450440, 2383362440, 
        4037222965, 2900486250, 4125718369, 3453303038];

    for i in sequence(100)
        {
        if (computedValues[i]!=expectedValues_1[i])
            return false;
        if (computedValues[i+624]!=expectedValues_2[i])
            return false;
        }

    return true;
    );
        
`test unif: (
     let randoms=math.random.UniformReal(1,3,11);
     let i = 0;
     let computedValues_1=iter.toVector(iter.subseq(randoms,0,20));
     let computedValues_2=iter.toVector(iter.subseq(randoms,624,644));

     let expectedValues_1=[1.3605, 1.1366, 1.039, 2.3294, 1.9264, 1.3882, 2.4499, 2.8526, 
          1.8404, 1.2104, 1.9709, 1.4514, 1.0256, 2.7927, 1.9747, 2.6524, 2.8836, 1.1856, 
         2.7016, 2.7794];

    let expectedValues_2=[1.0768, 1.5314, 1.0061, 2.1265, 2.5358, 1.5182, 1.9038, 2.1276, 
        2.5249, 2.1693, 2.286, 1.802, 1.8959, 1.2332, 2.42, 1.2341, 2.2091, 2.1391, 
        1.0314, 2.2157];


    for i in sequence(20)
        {
        if (!checkTol(computedValues_1[i], expectedValues_1[i]))
           return false;
        if (!checkTol(computedValues_2[i], expectedValues_2[i]))
           return false;
        }

    return true;
    );
    
    
`test normal: (
    let randoms=math.random.Normal(1,3,11, math.random.MersenneTwister, `inverse);
    let i = 0;
    let computedValues_1 = iter.toVector(iter.subseq(randoms,0,20));
    let computedValues_2 = iter.toVector(iter.subseq(randoms,624,644));

    let expectedValues_1 = [-1.743, -3.4656, -5.1941, 2.2761, 0.72302, -1.5885, 2.7927, 
        5.346, 0.39588, -2.7578, 0.89039, -1.2591, -5.6984, 4.7829, 0.90502, 3.8175, 5.7104, 
        -2.9709, 4.1195, 4.6749];

    let expectedValues_2 = [-4.3088, -0.87772, -7.2225, 1.4777, 3.1957, -0.93847, 0.63725, 
        1.482, 3.1424, 1.6414, 2.0993, 0.24771, 0.6076, -2.5761, 2.66, -2.5693, 1.7952, 
        1.5256, -5.4547, 1.821];

    for i in sequence(20)
        {
        if (!checkTol(computedValues_1[i], expectedValues_1[i]))
           return false;
        if (!checkTol(computedValues_2[i], expectedValues_2[i]))
           return false;
        }

    return true;
    );    

`test normalByMWC: (
    let dist = math.random.Normal(0.0, 1.0, 9898, math.random.MultiplyWithCarry, `inverse)

    let computedValues = iter.toVector(iter.subseq(dist, 0, 20));

    let expectedValues = [-0.040499, 0.19107, -0.1027, -0.46444, 1.13, -0.91377, 0.2153, 0.014496, 
        0.74299, -1.2858, -0.57051, -0.29328, 0.92267, 1.8963, 0.20856, -0.53004, -1.029, 0.32721, 
        -1.0066, -0.42153];

    for i in sequence(20)
        {
        if (!checkTol(computedValues[i], expectedValues[i]))
           return false
        }

    return true;
    );

`test normalByBoxMuller: (
    let dist = math.random.Normal(0.0, 1.0, 123, math.random.MersenneTwister, `boxMuller);

    let computedValues = iter.toVector(iter.subseq(dist, 0, 20));

    let expectedValues = [-0.19619, -0.82763, -1.4249, 0.68728, -0.62517, -1.605, -0.21021, -1.0708, 
        -0.81021, 0.045258, 0.24599, -1.2883, -0.16702, 0.10464, -0.76333, -0.41774, 0.77156, 
        0.93207, -1.1121, 0.7972];

    for i in sequence(20)
        {
        if (!checkTol(computedValues[i], expectedValues[i]))
           return false
        }

    return true;
    );

`test normalByPolar: (
    let dist = math.random.Normal(0.0, 1.0, 123, math.random.MersenneTwister, `polar);

    let computedValues = iter.toVector(iter.subseq(dist, 0, 20));

    let expectedValues = [1.0017, 1.0858, -1.6925, -0.56609, -1.0443, 0.72976, 0.40737, 1.7397, 
        1.8124, -0.073342, -0.39038, 1.4217, 0.29403, -0.054477, 1.7519, 0.75537, -0.060481, 
        -1.142, -1.6332, -1.4985];

    for i in sequence(20)
        {
        if (!checkTol(computedValues[i], expectedValues[i]))
           return false
        }

    return true;
    );

`test normalByRatio: (
     let dist = math.random.Normal(0.0, 1.0, 234, math.random.MersenneTwister, `ratio);

     let expectedValues = [-0.956121446431915, 0.100715384635859, 0.166141665022179, 
          -0.113252037321733, 0.386335148277828, -0.46784847993929, 0.140334530445477, 
         -0.549810941996513, 0.0267511123820084, 2.10432009687382, -0.234050667323628, 
         -1.61240244980512, 0.0649590374285574, 0.42281470456556, 1.25576635097366, 
         1.09438293634541, -0.94048344143594, 1.48862983655152, -0.535531123543773, 
         -0.0887205999381303, 0.378635571071041, 0.470343679054647, 1.29609145198824, 
         -0.602534026321751, 1.34596682615329, -2.07305641699987, -0.769485163638687, 
         0.950126681877681, 0.552111811094988, 0.623780234653665, -0.381922567211357, 
         -0.468142881980419, 1.19964334419279, -0.927041440966588, -0.19241888748359, 
         -0.580667540531023, 0.784203951958594, -0.589406238788572, -2.45434063028617];

     let computedValues = iter.toVector(iter.subseq(dist, 0, size(expectedValues)));

     for i in sequence(size(expectedValues))
          {
         if (!checkTol(computedValues[i], expectedValues[i]))
             throw (i, computedValues[i], expectedValues[i])
         }

     true;
    );

`test normalStats: (
    let n = 1000000;
    let dist = math.random.Normal;
    let rng = dist(0.0, 1.0, 23234);
    let vals = iter.toVector(iter.subseq(rng, 0, n));
    let summary = math.stats.summary(vals);
    
    assertions.assertClose(summary.mean, 0.0, atol:0.001);
    assertions.assertClose(summary.sd, 1.0, atol:0.001);

    assertions.assertClose(
        summary.firstQuantile, dist.quantile(0.25, 0.0, 1.0), atol:0.01
        );
    assertions.assertClose(
        summary.median, dist.quantile(0.5, 0.0, 1.0), atol:0.01
        );
    assertions.assertClose(
        summary.thirdQuantile, dist.quantile(0.75, 0.0, 1.0), atol:0.01
        );
    );

`test exponential: (
    let randoms=math.random.Exponential(2,11);
    let i = 0;
    let computedValues_1 = iter.toVector(iter.subseq(randoms,0,20));
    let computedValues_2 = iter.toVector(iter.subseq(randoms,624,644));

    let expectedValues_1 = [0.09939, 0.035376, 0.0098337, 0.5464, 0.31108, 0.10791, 
        0.64537, 1.3038, 0.27254, 0.055564, 0.33221, 0.12791, 0.0064316, 1.1333, 0.3341, 
        0.87487, 1.422, 0.048703, 0.95122, 1.1023];

    let expectedValues_2=[0.019576, 0.15441, 0.0015344, 0.4142, 0.73026, 0.14994, 
        0.30063, 0.41485, 0.71865, 0.43932, 0.51499, 0.25625, 0.29707, 0.062001, 0.6189, 
        0.062256, 0.46384, 0.42145, 0.0079204, 0.46803];

    for i in sequence(20)
        {
        if (!checkTol(computedValues_1[i], expectedValues_1[i]))
            return false;
        if (!checkTol(computedValues_2[i], expectedValues_2[i]))
              return false;
        }

    return true;
    );

`test triangular: (
    let randoms = math.random.Triangular(1,2,1.8,11);
    let i = 0;
    let computedValues_1 = iter.toVector(iter.subseq(randoms,0,20));
    let computedValues_2 = iter.toVector(iter.subseq(randoms,624,644));

    let expectedValues_1 = [1.3798, 1.2338, 1.1248, 1.7292, 1.6087, 1.3941, 
        1.7615, 1.8786, 1.5798, 1.2901, 1.6232, 1.4249, 1.1011, 1.856, 1.6244, 
        1.8135, 1.8921, 1.2725, 1.8273, 1.8515];

    let expectedValues_2 = [1.1753, 1.461, 1.0495, 1.6713, 1.7838, 1.4553, 
        1.6013, 1.6716, 1.781, 1.6839, 1.7172, 1.5664, 1.5986, 1.3054, 1.7536, 
        1.306, 1.6954, 1.675, 1.1121, 1.6973];

    for i in sequence(20)
        {
        if (math.abs(computedValues_1[i]-expectedValues_1[i])>(10**(-4)))
            return false;
        if (math.abs(computedValues_2[i]-expectedValues_2[i])>(10**(-4)))
            return false;
        }

    return true;
    );

`test beta: (
    let randoms = math.random.Beta(1,2,11);
    let i = 0;
    let computedValues = iter.toVector(iter.subseq(randoms,0,20));

    let expectedValues=[0.09461, 0.034757, 0.0097855, 0.42097, 0.26735, 0.10229, 0.47553,
        0.72849, 0.23856, 0.054048, 0.28266, 0.12006, 0.006411, 0.67804, 0.28402, 0.58308, 
        0.75877, 0.047536, 0.61373, 0.6679];

    for i in sequence(20)
        {
        if (!checkTol(computedValues[i], expectedValues[i], 10 ** -3))
             return false;
        }

    return true;
    );

`test binomial: (
    let randoms = math.random.Binomial(20,.4,11);
    let i = 0;
    let computedValues = iter.toVector(iter.subseq(randoms,0,20));

    let expectedValues=[6.0, 5.0, 4.0, 9.0, 8.0, 6.0, 9.0, 11.0, 
        8.0, 5.0, 8.0, 6.0, 3.0, 11.0, 8.0, 10.0, 11.0, 5.0, 10.0, 11.0];

    for i in sequence(20)
        {
        if (!checkTol(computedValues[i], expectedValues[i]))
            return false;
        }

    return true;
    );

`test cauchy: (
    let randoms = math.random.Cauchy(1,.5,11);
    let i = 0;
    let computedValues=iter.toVector(iter.subseq(randoms,0,20));

    let expectedValues = [0.2136, -1.2941, -7.162, 1.2846, 0.94197, 0.28435, 1.4269, 3.1203, 
        0.87196, -0.45776, 0.97709, 0.41722, -11.446, 2.4807, 0.98015, 1.8228, 3.7044, -0.66593, 
        1.9874, 2.3848];

    for i in sequence(20)
        {
        if (!checkTol(computedValues[i], expectedValues[i]))
            return false;
        }

    return true;
    );

`test chisquared: (
    let randoms = math.random.ChiSquared(3,11);
    let i = 0;
    let computedValues = iter.toVector(iter.subseq(randoms,0,20));

    let expectedValues = [0.9236, 0.44079, 0.18146, 3.3902, 2.1755, 0.98085, 3.8769, 6.9436, 
        1.9646, 0.60701, 2.2893, 1.1115, 0.1358, 6.1693, 2.2994, 4.9725, 7.4754, 0.55262, 
        5.3294, 6.0273];

    for i in sequence(20)
        {
        if (!checkTol(computedValues[i], expectedValues[i]))
            return false;
        }

    return true;
    );

`test extremevalue: (
    let randoms = math.random.ExtremeValue(1,2,11);
    let i = 0;
    let computedValues = iter.toVector(iter.subseq(randoms,0,20));

    let expectedValues = [-0.076844, -0.97443, -1.7417, 2.7911, 1.5239, 0.01146, 3.2684, 
        6.139, 1.2854, -0.62375, 1.6494, 0.20447, -1.9449, 5.4249, 1.6605, 4.3116, 6.6283, 
        -0.73182, 4.6455, 5.2935];

    for i in sequence(20)
        {
        if (math.abs(computedValues[i]-expectedValues[i])>(10**(-4)))
            return false;
        }

    return true;
    );

`test gamma: (
    let randoms = math.random.Gamma(3,4,11);
    let i = 0;
    let computedValues=iter.toVector(iter.subseq(randoms,0,20));

    let expectedValues = [0.36408, 0.23311, 0.14035, 0.85581, 0.63187, 0.37794, 0.94054, 
        1.4393, 0.59038, 0.28186, 0.65385, 0.40874, 0.11952, 1.3176, 0.65579, 1.1245, 
        1.5218, 0.26647, 1.1828, 1.295];

    for i in sequence(20)
        {
        if (!checkTol(computedValues[i], expectedValues[i]))
            return false;
        }

    return true;
    );

`test F: (
    let randoms = math.random.F(3,4,11);
    let i = 0;
    let computedValues = iter.toVector(iter.subseq(randoms,0,20));

    let expectedValues = [0.30789, 0.13884, 0.055466, 1.5363, 0.84449, 0.32921, 1.8728,
        5.1463, 0.74289, 0.19494, 0.90136, 0.37893, 0.041292, 4.0874, 0.9065, 2.7852, 5.9932, 
        0.17635, 3.1363, 3.9132];

    for i in sequence(20)
        {
        if (!checkTol(computedValues[i], expectedValues[i]))
            return false;
        }

    return true;
    );

`test geometric: (
     let randoms = math.random.Geometric(.25,11);
     let i = 0;
     let computedValues = iter.toVector(iter.subseq(randoms,0,20));

     let expectedValues = [0.0, 0.0, 0.0, 3.0, 2.0, 0.0, 4.0, 9.0, 1.0, 0.0, 2.0, 0.0, 0.0, 
          7.0, 2.0, 6.0, 9.0, 0.0, 6.0, 7.0];

    for i in sequence(20)
        {
        if (!checkTol(computedValues[i], expectedValues[i]))
            return false;
        }

    return true;
    );

`test HyperGeometric: (
    let randoms = math.random.HyperGeometric(5,10,20,11);
    let i = 0;
    let computedValues = iter.toVector(iter.subseq(randoms,0,20));

    let expectedValues = [2.0, 1.0, 1.0, 3.0, 2.0, 2.0, 3.0, 4.0, 2.0, 1.0, 2.0, 2.0, 0.0, 4.0,
         2.0, 3.0, 4.0, 1.0, 4.0, 4.0];

    for i in sequence(20)
        {
        if (!checkTol(computedValues[i], expectedValues[i]))
            return false;
        }

    return true;
    );

`test lognormal: (
    let randoms = math.random.LogNormal(1,2,11);
    let i = 0;
    let computedValues = iter.toVector(iter.subseq(randoms,0,20));

    let expectedValues = [0.43663, 0.13848, 0.043743, 6.3647, 2.26, 0.48401, 8.9811, 49.269700, 
        1.8171, 0.22197, 2.5267, 0.60285, 0.031254, 33.8502639, 2.5515, 17.78514503, 62.8181714, 
        0.19258, 21.7518683, 31.499];

    for i in sequence(20)
        {
        if (!checkTol(computedValues[i], expectedValues[i]))
            throw (i, computedValues[i], expectedValues[i]); //return false;
        }

    return true;
    );

`test negativebinomial: (
    let randoms = math.random.NegativeBinomial(5,.4,11);
    let i = 0;
    let computedValues = iter.toVector(iter.subseq(randoms,0,20));

    let expectedValues = [1.0, 0.0, 0.0, 4.0, 3.0, 1.0, 4.0, 7.0, 3.0, 1.0, 3.0, 1.0, 0.0, 
        6.0, 3.0, 5.0, 7.0, 1.0, 6.0, 6.0];

    for i in sequence(20)
        {
        if (!checkTol(computedValues[i], expectedValues[i]))
            return false;
        }

    return true;
    );

`test poisson: (
    let randoms = math.random.Poisson(5,11);
    let i = 0;
    let computedValues = iter.toVector(iter.subseq(randoms,0,20));

    let expectedValues = [3.0, 2.0, 1.0, 6.0, 5.0, 3.0, 6.0, 8.0, 4.0, 2.0, 5.0, 3.0, 1.0, 
        8.0, 5.0, 7.0, 9.0, 2.0, 7.0, 8.0];

    for i in sequence(20)
        {
        if (math.abs(computedValues[i]-expectedValues[i])>(10**(-4)))
            return false;
        }

    return true;
    );

`test Rayleigh: (
    let randoms = math.random.Rayleigh(5,11);
    let i = 0;
    let computedValues = iter.toVector(iter.subseq(randoms,0,20));

    let expectedValues = [3.1526, 1.8808, 0.99165, 7.3919, 5.5775, 3.2849, 8.0335, 11.418, 
        5.2205, 2.3572, 5.7638, 3.5764, 0.80197, 10.646, 5.7802, 9.3535, 11.925, 2.2069, 
        9.753, 10.499];

    for i in sequence(20)
        {
        if (math.abs(computedValues[i]-expectedValues[i])>(10**(-3)))
            return false;
        }

    return true;
    );

`test T: (
    let randoms=math.random.T(5,11);
    let i = 0;
    let computedValues = iter.toVector(iter.subseq(randoms,0,20));

    let expectedValues = [-1.0061, -1.7719, -2.7789, 0.45147, -0.097076, -0.94461, 0.64035, 
        1.7127, -0.2121, -1.4365, -0.038401, -0.81635, -3.1436, 1.4478, -0.033274, 1.0361, 
        1.8965, -1.534, 1.16, 1.3994];

    for i in sequence(20)
        {
        if (!checkTol(computedValues[i], expectedValues[i]))
            return false;
        }

    return true;
    );

`test Weibull: (
    let randoms = math.random.Weibull(3,2,11);
    let computedValues = iter.toVector(iter.subseq(randoms,0,20));

    let expectedValues = [1.3375, 0.79798, 0.42072, 3.1361, 2.3663, 1.3937, 3.4083, 4.8443, 
        2.2149, 1.0001, 2.4454, 1.5173, 0.34025, 4.5166, 2.4523, 3.9683, 5.0592, 0.9363, 
        4.1379, 4.4544];

    for i in sequence(20)
        {
        if (!checkTol(computedValues[i], expectedValues[i]))
            return false;
        }

    return true;
    );

`test Logistic: (
    let dist = math.random.Logistic(1.0, 1.0, 1234);
    let computedValues = iter.toVector(iter.subseq(dist, 0, 20));

    let expectedValues = [-0.44017, 0.99065, 1.4985, 2.5018, 0.74961, 1.4562, 2.2972, 2.216, 
        2.2655, 2.8209, 0.018492, -0.72961, 0.037932, -0.39558, 2.398, 2.4839, 4.1306, -0.66707, 
        2.9545, -1.0295];

    for i in sequence(20)
        {
        if (!checkTol(computedValues[i], expectedValues[i]))
            return false;
        }

    return true;
    );

`test MultiplyWithCarry_1: (
    let rng = math.random.MultiplyWithCarry(123);

    let expectedValues = [1654025808u32, 800872739u32, 1995737916u32, 4290052923u32, 1476151982u32,
        1483729731u32, 2650073970u32, 2678784061u32, 733479355u32, 227519617u32, 101134025u32, 
        2119222321u32, 684114473u32, 1423513778u32, 1297717492u32, 3175320328u32, 1135004802u32, 
        2433456847u32, 2936287963u32, 137425141u32];

    let computedValues = iter.toVector(iter.subseq(rng, 0, 20));

    for i in sequence(20)
        {
        if (!checkTol(computedValues[i], expectedValues[i]))
            return false
        }

    return true;
    );

`test noncentralChiSquared_cdf_quantile: (
    let k = 3;
    let lambda = 4;        
    let p = 0.5

    let q = math.random.NoncentralChiSquared.quantile(p, k, lambda);

    checkTol(
        p,
        math.random.NoncentralChiSquared.cdf(q, k, lambda)
        );
    );

`test noncentralChiSquared_sample: (
    let k = 20, lambda = 30;

    let sample = iter.toVector(
        iter.subseq(
            math.random.NoncentralChiSquared(k, lambda, 235234),
            0, 10000
            )
        );

    let summary = math.stats.summary(sample);

    let args = (summary.mean, k + lambda, 2.0);
    if (!checkTol(*args))
        throw ("mean off: ", *args)

    args = (summary.sd, math.sqrt(2 * (k + 2 * lambda)), 0.5);
    if (!checkTol(*args))
        throw ("sd off: ", *args)

    true
    );

`test inverseChiSquared_cdf_quantile: (
    let k = 3;
    let p = 0.5

    let q = math.random.InverseChiSquared.quantile(p, k);

    checkTol(
        p,
        math.random.InverseChiSquared.cdf(q, k)
        );
    );

`test inverseChiSquared_sample: (
    let k = 20;

    let sample = iter.toVector(
        iter.subseq(
            math.random.InverseChiSquared(k, 235234),
            0, 10000
            )
        );

    let summary = math.stats.summary(sample);

    let args = (summary.mean, 1.0 / (k - 2), 0.01);
    if (!checkTol(*args))
        throw ("mean off: ", *args)

    args = (summary.sd, math.sqrt(2.0 / ((k - 2) ** 2) / (k - 4)), 0.005);
    if (!checkTol(*args))
        throw ("sd off: ", *args)

    true
    );

`test inverseGamma_cdf_quantile: (
    let shape = 3;
    let scale = 1;        
    let p = 0.5

    let q = math.random.InverseGamma.quantile(p, shape, scale);

    checkTol(
        p,
        math.random.InverseGamma.cdf(q, shape, scale)
        );
    );

`test inverseGamma_sample: (
    let shape = 3.0;
    let scale = 1.0;        

    let sample = iter.toVector(
        iter.subseq(
            math.random.InverseGamma(shape, scale, 235234),
            0, 10000
            )
        );

    let summary = math.stats.summary(sample);

    let args = (summary.mean, scale / (shape - 1), 2.0);
    if (!checkTol(*args))
        throw ("mean off: ", *args)

    args = (summary.sd, scale * math.sqrt(1.0 / (shape - 2.0)) / (shape - 1.0), 0.5);
    if (!checkTol(*args))
        throw ("sd off: ", *args)

    true
    );

`test inverseGaussian_cdf_quantile: (
    let mean = 1;
    let shape = 3;        
    let p = 0.5

    let q = math.random.InverseGaussian.quantile(p, mean, shape);

    checkTol(
        p,
        math.random.InverseGaussian.cdf(q, mean, shape)
        );
    );

`test inverseGaussian_sample: (
    let mean = 1.0;
    let shape = 3.0;        

    let sample = iter.toVector(
        iter.subseq(
            math.random.InverseGaussian(mean, shape, 235234),
            0, 10000
            )
        );

    let summary = math.stats.summary(sample);

    let args = (summary.mean, mean, 0.01);
    if (!checkTol(*args))
        throw ("mean off: ", *args)

    args = (summary.sd, math.sqrt(mean ** 3.0 / shape), 0.01);
    if (!checkTol(*args))
        throw ("sd off: ", *args)

    true
    );

`test scaledInverseChiSquared_cdf_quantile: (
    let df = 3;
    let scale = 1;        
    let p = 0.5

    let q = math.random.ScaledInverseChiSquared.quantile(p, df, scale);

    checkTol(
        p,
        math.random.ScaledInverseChiSquared.cdf(q, df, scale)
        );
    );

`test scaledInverseChiSquared_sample: (
    let df = 5.0;
    let scale = 1.0;        

    let sample = iter.toVector(
        iter.subseq(
            math.random.ScaledInverseChiSquared(df, scale, 235234),
            0, 10000
            )
        );

    let summary = math.stats.summary(sample);

    let args = (summary.mean, df * scale / (df - 2.0), 2.0);
    if (!checkTol(*args))
        throw ("mean off: ", *args)

    args = (summary.sd, 
            math.sqrt(
                2.0 * df * df * scale * scale / ((df - 2.0) ** 2.0) / (df - 4.0)
            ) , 
            0.5);
    if (!checkTol(*args))
        throw ("sd off: ", *args)

    true
);

`perf random_number_creation: 
iter.toVector(
    iter.subseq(
        math.random.Normal(0,1, 234243),
        0, 1000000
        )
    )
;

