/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/
make_hastie_10_2: fun(nSamples:= 12000) {
    let baseSeed = 5344453;
    let generateNormals = fun(nSamples, seed) {
        `ProcessToVector(
            iter.subseq(
                math.random.Normal(0, 1, seed),
                0, nSamples
                )
            );
        };
    let X = dataframe.DataFrame(
        X0: generateNormals(nSamples, baseSeed),
        X1: generateNormals(nSamples, baseSeed + 1),
        X2: generateNormals(nSamples, baseSeed + 2),
        X3: generateNormals(nSamples, baseSeed + 3),
        X4: generateNormals(nSamples, baseSeed + 4),
        X5: generateNormals(nSamples, baseSeed + 5),
        X6: generateNormals(nSamples, baseSeed + 6),
        X7: generateNormals(nSamples, baseSeed + 7),
        X8: generateNormals(nSamples, baseSeed + 8),
        X9: generateNormals(nSamples, baseSeed + 9)
        )
    let y = X.rowApply(
        fun(row) { row.sum(fun(elt) { elt ** 2 }) > 9.34 }
        );
    y = dataframe.DataFrame([y]);

    return (X, y)
    };

make_friedman: fun(nSamples:= 1200, noise:=1.0) {
    let generateUniforms = fun(nSamples, seed) {
        `ProcessToVector(
            iter.subseq(
                math.random.UniformReal(0, 1, seed),
                0, nSamples
                )
            );
        }

    let baseSeed = 7523234;
    let X = dataframe.DataFrame(
        X0: generateUniforms(nSamples, baseSeed),
        X1: generateUniforms(nSamples, baseSeed + 1),
        X2: generateUniforms(nSamples, baseSeed + 2),
        X3: generateUniforms(nSamples, baseSeed + 3),
        X4: generateUniforms(nSamples, baseSeed + 4)
        );

    let normals = `ProcessToVector(
        iter.subseq(
            math.random.Normal(0, 1, baseSeed),
            0, nSamples
            )
        );

    let y = X.rowApply(
        fun(row) {
            10 * math.sin(math.pi * row[0] * row[1]) +
                20 * (row[2] - 0.5) ** 2 + 
                10 * row[3] + 
                5 * row[4]
            }
        );

    y = y + dataframe.Series(normals) * noise
    y = dataframe.DataFrame(y: y);

    return (X, y);
    };

`test featureImportances_1: (
    let (X, y) = make_friedman();

    let fit = math.ensemble.gradientBoosting.GradientBoostedRegressorBuilder(
        nBoosts: 100, maxDepth: 1, learningRate: 1.0
        ).fit(X, y);

    assertions.assertAllClose(
        fit.rawFeatureImportances(),
        [0.25, 0.21, 0.11, 0.27, 0.16]
        );
    );

`test featureImportances_2: (
    let (X, y) = make_hastie_10_2();

    let fit = math.ensemble.gradientBoosting.GradientBoostedClassifierBuilder(
        nBoosts: 100, learningRate: 1, maxDepth: 1
        ).fit(X, y);

    assertions.assertAllClose(
        fit.rawFeatureImportances(),
        [0.1, 0.11, 0.1, 0.09, 0.09, 0.1, 0.1, 0.11, 0.1, 0.1]
        );
    );

`test featureImportances_3: (
    let X = dataframe.DataFrame(iris_X);
    let y = dataframe.DataFrame(iris_y);
    X = dataframe.DataFrame(X.columns[,2])

    let builder = math.ensemble.gradientBoosting.GradientBoostedClassifierBuilder(
        nBoosts: 5, maxDepth: 3, learningRate: 0.1
        )
    let fit = builder.fit(X, y);

    assertions.assertAllClose(
        fit.rawFeatureImportances(),
        [0.726832204755785, 0.273167795244215]
        );
    );

`test using_partial_depths: (
    let seed = 148188;
    let nPoints = 1024;
    let column_0 = iter.toVector(
        iter.subseq(
            math.random.Normal(0, 10, seed),
            0, nPoints
            )
        );
    let column_1 = iter.toVector(
        iter.subseq(
            math.random.Normal(0, 20, seed),
            0, nPoints
            )
        );

    let y_noise = iter.toVector(
        iter.subseq(
            math.random.Normal(0, 1, seed),
            0, nPoints
            )
        );

    let X = dataframe.DataFrame([column_0, column_1]);
    let y = X.rowApply(fun(row) { if (row[0] - row[1] < 0) 1 else -1 });
    y = y + dataframe.Series(y_noise)
    y = dataframe.DataFrame(target: y)

    let nManyBoosts = 8
    let nFewerBoosts = 3
    let depth = 1

    let deepFit = math.ensemble.gradientBoosting.GradientBoostedRegressorBuilder(
        nBoosts: nManyBoosts, maxDepth: depth
        ).fit(X, y)
    let shallowFit = math.ensemble.gradientBoosting.GradientBoostedRegressorBuilder(
        nBoosts: nFewerBoosts, maxDepth: depth
        ).fit(X, y)

    let deepPredictions = deepFit.predict(X, nEstimators: nFewerBoosts + 1);
    let shallowPredictions = shallowFit.predict(X)
    
    assertions.assertAllClose(deepPredictions.dataVec, shallowPredictions.dataVec)

    deepPredictions = deepFit.predict(X, nEstimators: 8)

    assertions.assertNotEqual(deepPredictions, deepPredictions)
    );

`test yetAnotherClassificationTest: (
    let it = iterator(math.random.Normal(0, 1, 5551884))
    let rands = [pull it for _ in sequence(40)]

    let inputs = dataframe.DataFrame([
        rands[,10],
        rands[10,20],
        rands[20,30]
        ])
    let outputs = rands[30,] ~~ { _ < 0.0 }

    let builder = math.ensemble.gradientBoosting
        .GradientBoostedClassifierBuilder(nBoosts: 2, maxDepth: 2);
    let fit = builder.fit(inputs, outputs)

    assertions.assertEqual(fit.score(inputs, outputs), 1)

    assertions.assertClose(fit.deviance(inputs, outputs), 0.0425662371187)
    );

gradientBoostedRegressionFittingTest:
fun(col: __columns__, rows: __rows__, depth:, nBoosts:) {
    let data = Vector.range(__columns__) ~~ fun(c) {
        Vector.range(__rows__, fun(r) { Float64(r % (c+2)) })
        };
                
    let dfResponse = dataframe.DataFrame(data[-1,], columnNames:[`response]);
    let dfPredictors = dataframe.DataFrame(data[,-1]);

    let builder = 
        math.ensemble.gradientBoosting.GradientBoostedRegressorBuilder(
            nBoosts: nBoosts,
            maxDepth: depth
            );

    fun() {
        builder.fit(dfPredictors, dfResponse);
        }
    }
    (mb:, columns:, depth:, nBoosts:)
    {
    let valueCount = mb * 1024 * 1024 / 8
    let rowCount = valueCount / columns

    gradientBoostedRegressionFittingTest(
        col: columns, rows: rowCount, depth: depth, nBoosts: nBoosts
        )
    };

(`perf, `callResult) gradientBoostedRegressionFitting_10KB_10Col_Depth3_5Boosts: 
    gradientBoostedRegressionFittingTest(mb: 0.01, columns: 10, depth: 3, nBoosts: 5);

(`perf, `callResult) gradientBoostedRegressionFitting_10KB_10Col_Depth3_10Boosts: 
    gradientBoostedRegressionFittingTest(mb: 0.01, columns: 10, depth: 3, nBoosts: 10);

iris_X:
math.Matrix(
"""5.1,3.5,1.4,0.2,
 4.9,3.0,1.4,0.2,
 4.7,3.2,1.3,0.2,
 4.6,3.1,1.5,0.2,
 5.0,3.6,1.4,0.2,
 5.4,3.9,1.7,0.4,
 4.6,3.4,1.4,0.3,
 5.0,3.4,1.5,0.2,
 4.4,2.9,1.4,0.2,
 4.9,3.1,1.5,0.1,
 5.4,3.7,1.5,0.2,
 4.8,3.4,1.6,0.2,
 4.8,3.0,1.4,0.1,
 4.3,3.0,1.1,0.1,
 5.8,4.0,1.2,0.2,
 5.7,4.4,1.5,0.4,
 5.4,3.9,1.3,0.4,
 5.1,3.5,1.4,0.3,
 5.7,3.8,1.7,0.3,
 5.1,3.8,1.5,0.3,
 5.4,3.4,1.7,0.2,
 5.1,3.7,1.5,0.4,
 4.6,3.6,1.0,0.2,
 5.1,3.3,1.7,0.5,
 4.8,3.4,1.9,0.2,
 5.0,3.0,1.6,0.2,
 5.0,3.4,1.6,0.4,
 5.2,3.5,1.5,0.2,
 5.2,3.4,1.4,0.2,
 4.7,3.2,1.6,0.2,
 4.8,3.1,1.6,0.2,
 5.4,3.4,1.5,0.4,
 5.2,4.1,1.5,0.1,
 5.5,4.2,1.4,0.2,
 4.9,3.1,1.5,0.1,
 5.0,3.2,1.2,0.2,
 5.5,3.5,1.3,0.2,
 4.9,3.1,1.5,0.1,
 4.4,3.0,1.3,0.2,
 5.1,3.4,1.5,0.2,
 5.0,3.5,1.3,0.3,
 4.5,2.3,1.3,0.3,
 4.4,3.2,1.3,0.2,
 5.0,3.5,1.6,0.6,
 5.1,3.8,1.9,0.4,
 4.8,3.0,1.4,0.3,
 5.1,3.8,1.6,0.2,
 4.6,3.2,1.4,0.2,
 5.3,3.7,1.5,0.2,
 5.0,3.3,1.4,0.2,
 7.0,3.2,4.7,1.4,
 6.4,3.2,4.5,1.5,
 6.9,3.1,4.9,1.5,
 5.5,2.3,4.0,1.3,
 6.5,2.8,4.6,1.5,
 5.7,2.8,4.5,1.3,
 6.3,3.3,4.7,1.6,
 4.9,2.4,3.3,1.0,
 6.6,2.9,4.6,1.3,
 5.2,2.7,3.9,1.4,
 5.0,2.0,3.5,1.0,
 5.9,3.0,4.2,1.5,
 6.0,2.2,4.0,1.0,
 6.1,2.9,4.7,1.4,
 5.6,2.9,3.6,1.3,
 6.7,3.1,4.4,1.4,
 5.6,3.0,4.5,1.5,
 5.8,2.7,4.1,1.0,
 6.2,2.2,4.5,1.5,
 5.6,2.5,3.9,1.1,
 5.9,3.2,4.8,1.8,
 6.1,2.8,4.0,1.3,
 6.3,2.5,4.9,1.5,
 6.1,2.8,4.7,1.2,
 6.4,2.9,4.3,1.3,
 6.6,3.0,4.4,1.4,
 6.8,2.8,4.8,1.4,
 6.7,3.0,5.0,1.7,
 6.0,2.9,4.5,1.5,
 5.7,2.6,3.5,1.0,
 5.5,2.4,3.8,1.1,
 5.5,2.4,3.7,1.0,
 5.8,2.7,3.9,1.2,
 6.0,2.7,5.1,1.6,
 5.4,3.0,4.5,1.5,
 6.0,3.4,4.5,1.6,
 6.7,3.1,4.7,1.5,
 6.3,2.3,4.4,1.3,
 5.6,3.0,4.1,1.3,
 5.5,2.5,4.0,1.3,
 5.5,2.6,4.4,1.2,
 6.1,3.0,4.6,1.4,
 5.8,2.6,4.0,1.2,
 5.0,2.3,3.3,1.0,
 5.6,2.7,4.2,1.3,
 5.7,3.0,4.2,1.2,
 5.7,2.9,4.2,1.3,
 6.2,2.9,4.3,1.3,
 5.1,2.5,3.0,1.1,
 5.7,2.8,4.1,1.3,
 6.3,3.3,6.0,2.5,
 5.8,2.7,5.1,1.9,
 7.1,3.0,5.9,2.1,
 6.3,2.9,5.6,1.8,
 6.5,3.0,5.8,2.2,
 7.6,3.0,6.6,2.1,
 4.9,2.5,4.5,1.7,
 7.3,2.9,6.3,1.8,
 6.7,2.5,5.8,1.8,
 7.2,3.6,6.1,2.5,
 6.5,3.2,5.1,2.0,
 6.4,2.7,5.3,1.9,
 6.8,3.0,5.5,2.1,
 5.7,2.5,5.0,2.0,
 5.8,2.8,5.1,2.4,
 6.4,3.2,5.3,2.3,
 6.5,3.0,5.5,1.8,
 7.7,3.8,6.7,2.2,
 7.7,2.6,6.9,2.3,
 6.0,2.2,5.0,1.5,
 6.9,3.2,5.7,2.3,
 5.6,2.8,4.9,2.0,
 7.7,2.8,6.7,2.0,
 6.3,2.7,4.9,1.8,
 6.7,3.3,5.7,2.1,
 7.2,3.2,6.0,1.8,
 6.2,2.8,4.8,1.8,
 6.1,3.0,4.9,1.8,
 6.4,2.8,5.6,2.1,
 7.2,3.0,5.8,1.6,
 7.4,2.8,6.1,1.9,
 7.9,3.8,6.4,2.0,
 6.4,2.8,5.6,2.2,
 6.3,2.8,5.1,1.5,
 6.1,2.6,5.6,1.4,
 7.7,3.0,6.1,2.3,
 6.3,3.4,5.6,2.4,
 6.4,3.1,5.5,1.8,
 6.0,3.0,4.8,1.8,
 6.9,3.1,5.4,2.1,
 6.7,3.1,5.6,2.4,
 6.9,3.1,5.1,2.3,
 5.8,2.7,5.1,1.9,
 6.8,3.2,5.9,2.3,
 6.7,3.3,5.7,2.5,
 6.7,3.0,5.2,2.3,
 6.3,2.5,5.0,1.9,
 6.5,3.0,5.2,2.0,
 6.2,3.4,5.4,2.3,
5.9,3.0,5.1,1.8""".split(",").apply(Float64),
	(150, 4), `row)
	.apply(Float64);
;

iris_y:
math.Matrix(
"""0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 1,
 1,
 1,
 1,
 1,
 1,
 1,
 1,
 1,
 1,
 1,
 1,
 1,
 1,
 1,
 1,
 1,
 1,
 1,
 1,
 1,
 1,
 1,
 1,
 1,
 1,
 1,
 1,
 1,
 1,
 1,
 1,
 1,
 1,
 1,
 1,
 1,
 1,
 1,
 1,
 1,
 1,
 1,
 1,
 1,
 1,
 1,
 1,
 1,
 1,
 2,
 2,
 2,
 2,
 2,
 2,
 2,
 2,
 2,
 2,
 2,
 2,
 2,
 2,
 2,
 2,
 2,
 2,
 2,
 2,
 2,
 2,
 2,
 2,
 2,
 2,
 2,
 2,
 2,
 2,
 2,
 2,
 2,
 2,
 2,
 2,
 2,
 2,
 2,
 2,
 2,
 2,
 2,
 2,
 2,
 2,
 2,
 2,
 2,
2""".split(",").apply(Float64),	(150, 1), `row)
.apply(Float64)
;

