/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/
`test stringToArithBool: (
    assertions.assertIs(Bool("true"), true);
    assertions.assertIs(Bool(" tRue"), true);
    assertions.assertIs(Bool("  FALsE     "), false);
    assertions.assertIs(Bool("1"), true);
    assertions.assertIs(Bool("0"), false);
    assertions.assertIs(Bool(" 0"), false);
    assertions.assertIs(Bool("0 "), false);
    
	let o = object{};

    assertions.assertRaises(Exception.InvalidConversion, fun() { Bool(o) });
    assertions.assertRaises(Exception.InvalidConversion, fun() { Bool("wtf") });

    let o = object { convert(Bool) { 12 } };

    assertions.assertIs(Bool(o), 12)
    );

`test stringToArithInt8: (
    assertions.assertIs(Int8(0), 0s8)
    assertions.assertIs(Int8("0"), 0s8)
    assertions.assertIs(Int8(" 0"), 0s8)
    assertions.assertIs(Int8("0 "), 0s8)
    
	let o = object{};

    assertions.assertRaises(Exception.InvalidConversion, fun() { Int8(o) });
    assertions.assertRaises(Exception.InvalidConversion, fun() { Int8("wtf") });

    let o = object { convert(Int8) { 12 } };

    assertions.assertIs(Int8(o), 12)
    );

`test stringToArithUInt8: (
    assertions.assertIs(UInt8(0), 0u8)
    assertions.assertIs(UInt8("0"), 0u8)
    assertions.assertIs(UInt8(" 0"), 0u8)
    assertions.assertIs(UInt8("0 "), 0u8)
    
	let o = object{};

    assertions.assertRaises(Exception.InvalidConversion, fun() { UInt8(o) });
    assertions.assertRaises(Exception.InvalidConversion, fun() { UInt8("wtf") });

    let o = object { convert(UInt8) { 12 } };

    assertions.assertIs(UInt8(o), 12)
    );

`test stringToArithInt16: (
    assertions.assertIs(Int16(0), 0s16)
    assertions.assertIs(Int16("0"), 0s16)
    assertions.assertIs(Int16(" 0"), 0s16)
    assertions.assertIs(Int16("0 "), 0s16)
    
	let o = object{};

    assertions.assertRaises(Exception.InvalidConversion, fun() { Int16(o) });
    assertions.assertRaises(Exception.InvalidConversion, fun() { Int16("wtf") });

    let o = object { convert(Int16) { 12 } };

    assertions.assertIs(Int16(o), 12)
    );

`test stringToArithUInt16: (
    assertions.assertIs(UInt16(0), 0u16)
    assertions.assertIs(UInt16("0"), 0u16)
    assertions.assertIs(UInt16(" 0"), 0u16)
    assertions.assertIs(UInt16("0 "), 0u16)
    
	let o = object{};

    assertions.assertRaises(Exception.InvalidConversion, fun() { UInt16(o) });
    assertions.assertRaises(Exception.InvalidConversion, fun() { UInt16("wtf") });

    let o = object { convert(UInt16) { 12 } };

    assertions.assertIs(UInt16(o), 12)
    );

`test stringToArithInt32: (
    assertions.assertIs(Int32(0), 0s32)
    assertions.assertIs(Int32("0"), 0s32)
    assertions.assertIs(Int32(" 0"), 0s32)
    assertions.assertIs(Int32("0 "), 0s32)
    
	let o = object{};

    assertions.assertRaises(Exception.InvalidConversion, fun() { Int32(o) });
    assertions.assertRaises(Exception.InvalidConversion, fun() { Int32("wtf") });

    let o = object { convert(Int32) { 12 } };

    assertions.assertIs(Int32(o), 12)
    );

`test stringToArithUInt32: (
    assertions.assertIs(UInt32(0), 0u32)
    assertions.assertIs(UInt32("0"), 0u32)
    assertions.assertIs(UInt32(" 0"), 0u32)
    assertions.assertIs(UInt32("0 "), 0u32)
    
	let o = object{};

    assertions.assertRaises(Exception.InvalidConversion, fun() { UInt32(o) });
    assertions.assertRaises(Exception.InvalidConversion, fun() { UInt32("wtf") });

    let o = object { convert(UInt32) { 12 } };

    assertions.assertIs(UInt32(o), 12)
    );

`test stringToArithInt64: (
    assertions.assertIs(Int64(0), 0s64)
    assertions.assertIs(Int64("0"), 0s64)
    assertions.assertIs(Int64(" 0"), 0s64)
    assertions.assertIs(Int64("0 "), 0s64)
    
	let o = object{};

    assertions.assertRaises(Exception.InvalidConversion, fun() { Int64(o) });
    assertions.assertRaises(Exception.InvalidConversion, fun() { Int64("wtf") });

    let o = object { convert(Int64) { 12 } };

    assertions.assertIs(Int64(o), 12)
    );

`test stringToArithUInt64: (
    assertions.assertIs(UInt64(0), 0u64)
    assertions.assertIs(UInt64("0"), 0u64)
    assertions.assertIs(UInt64(" 0"), 0u64)
    assertions.assertIs(UInt64("0 "), 0u64)
    
	let o = object{};

    assertions.assertRaises(Exception.InvalidConversion, fun() { UInt64(o) });
    assertions.assertRaises(Exception.InvalidConversion, fun() { UInt64("wtf") });

    let o = object { convert(UInt64) { 12 } };

    assertions.assertIs(UInt64(o), 12)
    );

`test stringToArithFloat32: (
    assertions.assertIs(Float32(0), 0f32)
    assertions.assertIs(Float32("0"), 0f32)
    assertions.assertIs(Float32(" 0"), 0f32)
    assertions.assertIs(Float32("0 "), 0f32)
    
	let o = object{};

    assertions.assertRaises(Exception.InvalidConversion, fun() { Float32(o) });
    assertions.assertRaises(Exception.InvalidConversion, fun() { Float32("wtf") });

    let o = object { convert(Float32) { 12 } };

    assertions.assertIs(Float32(o), 12)
    );

`test stringToArithFloat64: (
    assertions.assertIs(Float64(0), 0.0)
    assertions.assertIs(Float64("0"), 0.0)
    assertions.assertIs(Float64(" 0"), 0.0)
    assertions.assertIs(Float64("0 "), 0.0)

    
	let o = object{};

    assertions.assertRaises(Exception.InvalidConversion, fun() { Float64(o) });
    assertions.assertRaises(Exception.InvalidConversion, fun() { Float64("wtf") });

    let o = object { convert(Float64) { 12 } };

    assertions.assertIs(Float64(o), 12)
    );

`perf num_to_string_to_num: (
    let x = 0;
    for ix in sequence(100000) { 
        x = x + Int32(String(ix)) 
        };
    x
    );

