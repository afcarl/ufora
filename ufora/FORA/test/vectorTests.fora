/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/
`test  vector_6 : size(Vector.uniform(10, 3.5)) is 10 ;

`test  vectorString_1 : Vector.uniform(10, "")[4] is "";

`test  vectorString_2 : Vector.uniform(10, "A String")[4] is "A String";

`test  vectorAdd_1 : 
	(Vector.uniform(100, 1.0) + Vector.uniform(200, 4.0)).sum() is 900.0
	;

`test inlineVector_1:	size([]) is 0;
`test inlineVector_2:	size([1]) is 1;
`test inlineVector_3:	size([1,2]) is 2;
`test inlineVector_4:	size([1,2,3]) is 3;

`test inlineVector_5:	3 in [1,2,3];
`test inlineVector_6:	not (4 in [1,2,3]);
`test inlineVector_7:	4 not in [1,2,3];

`test inlineVector_8:	[1,2,3,[4,5]][3] == [4,5];

`test inlineVector_9:	[v for v in it for it in [[1,2,3],[4,5,6]]] == [1,2,3,4,5,6];

`test list_comprehensions:	[x + 1 for x in [1,2,3,4]] == [2,3,4,5];

`test list_comprehensions_with_assignments: (
	let y = 0;
	[(y = y + 1; x+y) for x in [1,2,3,4]] == [2,4,6,8];
	);



`test vectorOps_1:	[1,2,3] + [4,5,6] == [1,2,3,4,5,6];
`test vectorOps_2:	[1,2,3] :: [4,5,6] == [1,2,3,[4,5,6]];

`test rangeOfFloatSize: size(Vector.range(100.0)) is 100;

`test vectorSplit_1:   [1,2,3,4,5,6,7,8].split(fun(z){z % 3 == 0}) == [[1,2],[4,5],[7,8]];
`test vectorSplit_2:   [1,2,3,4,5,6].split(fun(z){z % 3 == 0}) == [[1,2],[4,5],[]];

//check vector identity rules
`test vectorIdentity_1:	[1,2,3] is not [1,2,3];
`test vectorIdentity_2:	(let x = [1,2,3]; x is x);
`test vectorIdentity_3:	[] is [];

//make sure vectors match
`test vectorMatch_1: match([1,2,3]) with ({Vector}) { true } (...) { false };
											

`test	stringVectorWorks_1: size([String(ix) for ix in sequence(100)]) is 100;

`test	stringVectorWorks_2: (
	let f = fun() {
		for x in sequence(100) {
			yield String(x)
			}
	};
	let m = [];
	for x in f() {
		m = m :: x
	};
	size(m) is 100;
	);

`test	stringVectorWorks_3: (
	let f = fun() {
		for x in sequence(100) {
			yield x
			}
	};
	let m = [];
	for x in f() {
		m = m :: String(x)
	};
	size(m) is 100;
	);

`test	flattenVectorTuples:
(
	let v = [ [(1.0, 0.0), (1.0, 0.0)], [(1.0, 0.0), (1.0, 0.0)] ]
	flatten(v) == [(1.0, 0.0), (1.0, 0.0), (1.0, 0.0), (1.0, 0.0)]
	);
`test	vectorStringification_1:	String([1,2,3]) is '[1, 2, 3]';

`test vectorToString_1: [x for x in iterator("ASDF")].dataAsString is "ASDF";
`test stringToVector_1: [x for x in iterator("ASDF")] == "ASDF".dataAsVector;
`test stringToVector_2: "".dataAsVector == [];
`test vectorToStringSliced_1: "asdfasdfasdf".dataAsVector[,,4].dataAsString is "aaa";


`test vectorSlice_1: Vector.range(10)[,,2] == [0,2,4,6,8];
`test vectorSlice_2: Vector.range(10)[1,,2] == [1,3,5,7,9];
`test vectorSlice_3: Vector.range(10)[2,,2] ==  [2,4,6,8];
`test vectorSlice_4: Vector.range(10)[,10,2] == [0,2,4,6,8];
`test vectorSlice_5: Vector.range(10)[,8,2] == [0,2,4,6];
`test vectorSlice_6: Vector.range(10)[,9,2] == [0,2,4,6,8];
`test vectorSlice_7: Vector.range(10)[9,,-1] == [9,8,7,6,5,4,3,2,1,0];
`test vectorSlice_8: Vector.range(10)[9,,-2] == [9,7,5,3,1];

`test vectorSlice_and_append: (
	let v = [1,2,3,4]; v[,2] :: 100 + v[3,] == [1,2,100,4]
	);

`test vectorSlice_and_append_loop: (
	let v = [1,2,3,4];
	
	for ix in sequence(100000) { 
		if ((v[,2] :: ix) != [1,2,ix]) 
			throw "FAILED" 
		}

	true
	);

`test vectorSlice_and_append_loop_2: (
	let v = [1,2,3,4].paged;
	
	for ix in sequence(10000) { 
		if ((v[,2] :: ix) != [1,2,ix]) 
			throw "FAILED" 
		}

	true
	);

`test repeatedCallsToEmptyVec:
	(
	for i in sequence (10000)
		{
		[];
		}
	true;
	);

`test repeatedCallsToNonemptyVec:
	(
	for i in sequence (10000)
		{
		[1];
		}
	true;	
	);

`test vecOfComplex_1:
	(
	for i in sequence(1000) { [math.Complex(0,1), math.Complex(1,1)] }
	true
	);

`test vecOfComplex_2:
	(
	let abs = nothing;
	for i in sequence(1000)
		{
		let v = [math.Complex(0,1), math.Complex(1,1)];
		abs = math.abs(v[0]) + math.abs(v[1]);
		}
	abs is not nothing;
	);
	
`test vecOfVec_1:
	(
	for i in sequence(1000) { [[1,2],[3,4],[5,6],[7,8],[]] }
	true
	);

`test vecOfVec_2:
	(
	let x = nothing;
	for i in sequence(1000)
		{
		let v = [[1,2],[3,4],[5,6],[7,8],[]];
	
		x = v[0][0] + v[1][1] + v[2][0]
		}
	x is not nothing;
	);

`test vecOfVec_3:
	(
	for i in sequence(2) { [[],[],[]]}
	
	true;
	);

`test vecOfVec_4:
	(
	let x = nothing;
	for i in sequence(2)
		{
		let v = [[],[],[]];
		
		x = size(v[0]) + size(v[1]) + size(v[2]);
		}
	x is 0;
	);

`test vecOfNothing_1:
	(
	for i in sequence(1000) { [nothing, nothing, nothing, nothing, nothing]}
	true;
	);

`test vecOfNothing_2:
	(
	let x = 0;
	for i in sequence(1000)
		{
		let v = [nothing, nothing, nothing, nothing, nothing];
		
		x = v.sum();
		}
	x is nothing;
	);
	
`test vecOfEmptyTuples_1:
	(
	for i in sequence(1000) { [(),(),(),(),(),(),(),(),(),()]}
	true;
	);

`test vecOfEmptyTuples_2:
	(
	let x = nothing;
	for i in sequence(1000)
		{
		let v = [(),(),(),(),(),(),(),(),(),()]
		
		x = size(v.sum())
		}
	x is 0;
	);

/*
Moving this test to ``pending'' until we have a valid offline storage for localEvaluators, or just
remove them completely.
`test repeatedLargeVectorSums:
	(
	for i in sequence(7) Vector.range(10000001, 0.0, 10000000.0).sum();
	true;
	);
*/

allAreSizedBetween: fun(vec, low, high) { 
	for v in vec 
		if (size(v) > high or size(v) < low)
			return false

	return true
    };

`test  VectorSizeEmpty: size(`EmptyVector()) == 0;
`test  VectorAppend_1: size(`EmptyVector() :: 1) == 1;
`test  VectorAppend_2: size(`EmptyVector() :: 1 :: 2) == 2;
`test  VectorAppend_8: [1,2] :: 3.0 == [1,2,3.0];

`test  VectorConcat_1: (
	let v = `EmptyVector() :: 1 :: 2;
	let v2 = `EmptyVector() :: 3 :: 4 :: 5;
	size(v + v2) is 5
	);
`test  VectorConcat_2: (
	let v = `EmptyVector() :: 1 :: 2;
	v = v + v;
	v = v + v;
	size(v) is 8
	);
`test  VectorConcat_7: [1,2,3] + [4,5] == [1,2,3,4,5];
	
v: ( 	
	let v = `EmptyVector();
	for ix in sequence(100) { v = v :: ix };
	v
	);

`test	VectorGetitem: (
	for ix in sequence(100) { if (v[ix] != ix) throw ix };
	true
	);

`test	VectorGetitem_2: try { v[100]; false } catch(x) { true };
`test	VectorGetitem_3: v[99] is 99;
`test	VectorGetitem_4: v[-40] is 60;
`test	VectorGetitem_5: v[-100] is 0;
`test	VectorGetitem_6: try { v[-101]; false } catch(x) { true };

`test   VectorHomogeneousElementType_1: ( [1].homogeneousElementType is Int64; );
`test   VectorHomogeneousElementType_2:
     Vector.range(10000s32, Int32).homogeneousElementType is Int32; 
`test   VectorHomogeneousElementType_3:
    Vector.range(100.0, Float64).homogeneousElementType is Float64;
`test   VectorHomogeneousElementType_4:
    try { [1, 1.0].homogeneousElementType; return false; }
    catch (e) { return e == "Non type-homogeneous vector."; }
    ;
`test   VectorHomogeneousElementType_5:
    try { [].homogeneousElementType; return false; }
    catch (e) { return e == "The empty vector holds no type."; }
    ;
`test   VectorHomogeneousElementType_6:
    ([1] + [2,3] + [4,5,6]).homogeneousElementType is Int64;
`test   VectorHomogeneousElementType_7:
    [[1], [], [1.0], ["string"], [`symbol, (1,2)]].homogeneousElementType is Vector;

`test vectorsHoldOnlyCst_1: 
    try 
        { 
        [] :: MutableVector(Int64).create(1,1); 
        return false
        }
    catch (...)
        {
        return true;
        }
    ;

`test vectorsHoldOnlyCst_2: 
    try 
        { 
        [] :: (MutableVector(Int64).create(1,1),); 
        return false
        }
    catch (...)
        {
        return true;
        }
    ;

`test vectorsHoldOnlyCst_3:
    (
    for i in sequence (100)
        {
        try
            {
            [] :: 2 :: 3 :: (1; MutableVector(Int64).create(2,2));
            
            return false;
            }
        catch (...) {}
        }
        
    return true;
    );


`test vectorLoadingAxiomWorks_1: (
    //hopefully this results in a cacheload (not sure how to verify)
	//and the dataAsString axiom handles it correctly

	let f = fun() { [100u8, 101u8, 102u8].paged };
	
	cached (f())[0].dataAsString == "def"
	);

`test vectorLoadingAxiomWorks_2: (
	let f = fun() { [0,1,2,3].paged };
	
	size(cached(f())[0][0,3]) == 3;
	);

`test heterogeneousVectorLookupsWork: (
	let v1 = [1.0]; 
	let v2 = [1]; 
	let v3 = []; 
	let v = [v1, v2, 1.0]; 
	let res = 0; 
	for ix in sequence(10000000) { res = res + v[ix%2][0] }; 
	res == 10000000.0
	);

`test apply_operator: (
	let v = [1,2,3,4];
	let f = fun(x) { x + 1 };

	v.apply(f) == v ~~ f
	);

`test append_to_sliced_paged: (
	[1,2,3,4,5].paged[1,-1] :: 6 == [2,3,4,6]
	);
`test append_to_sliced_paged_2: (
	[1,2,3,4,5].paged[1,-1] + [6] == [2,3,4,6]
	);

`test vector_filter: (
	[1,2,3,4,5].filter( { _ % 2 == 0 } ) == [2,4]
	);

`test vector_filter_with_index: (
	[1,2,3,4,5].filterWithIndex( fun(v,ix) { v[ix] % 2 == 0 } ) == [2,4]
	);

`perf 
heterogeneous_sub_vectors: (
	let v = [([1], []), ([], [1])]; 
	let res = 0; 
	for ix in sequence(5000000) { 
		res = res + size(v[ix%2][1]) + size(v[ix%2][0]) 
    	}; 
	res == 5000000
	);

`test vector_reverse_0:  reverse([]) == [];

`test vector_reverse_1: reverse([1,2,3,4,5]) == [5,4,3,2,1];

`test mixed_vector_of_vector_types: (
	let v = Vector.range(1000000); 
	let c = [v, v ~~ Float64]; 
	let g = fun(x) { c[x] }; 
	let res = 0; 
	let x = 0; 
	while (x<1000000) 
		{
		res = res + g(0)[x]; 
		x = x + 1 
		}

	res == sum(0,1000000)
	);

`test mixed_vector_of_vector_types_2: (
	let v = [[0,nothing], [0], [nothing]]

	let f = fun(x) { v[x] }

	let res = 0; 

	for ix in sequence(1000000) { 
		res = res + f((if (ix < 10000) 1 else 2) + 0)[0] 
		}

	res == 0;
	);

`test vector_range: (
    assertions.assertIs(Vector.range(1)[0], 0);
    assertions.assertIs(Vector.range(1, Float64)[0], 0.0);
    assertions.assertIs(Vector.range(1, Int32)[0], 0s32);
    assertions.assertIs(Vector.range(1.0)[0], 0);
    assertions.assertIs(Vector.range(1.0, Float64)[0], 0.0);
    assertions.assertIs(Vector.range(1.0, Int32)[0], 0s32);
    assertions.assertIs(Vector.range((0.0, 1.0))[0], 0);
    assertions.assertIs(Vector.range((0.0, 1.0), Float64)[0], 0.0);
    );

`test vector_index: (
    let v = [1,2,4,4];

    assertions.assertEqual(v.index(1), 0)
    assertions.assertEqual(v.index(2), 1)
    assertions.assertEqual(v.index(4), 2)
    assertions.assertThrows(fun() { v.index(3) })
    );

`test vector_slicing: (
    let v = Vector.range(10);
    assertions.assertEqual(v, v[,]);
    assertions.assertEqual(v, v[,,]);
    assertions.assertEqual(v, v[,,1]);
    assertions.assertEqual([0,2,4,6,8], v[,,2]);
    );

__loopcount__: 5000000;

`perf vector_uniform_creation: Vector.range(5000000);

`perf vector_uniform_creation_2: Vector.uniform(10000000, 1.0);

`perf homogeneousVectorCreation: Vector.range(1000000, { if (_ % 2 == 0) _ else -_});

`perf
very_heterogeneous_vec: (
    let v = [(0,), (0.0,), 'a', (), [], [1]]; 
    let res = 0; 
    for ix in sequence(__loopcount__) { 
        res = res + size(v[ix % 6]) + size(v[ix % 6])  
        }; 
    res
    );

`perf
heterogeneous_vec: (
    let v = [0, 0.0]; 
    let res = 0; 
    for ix in sequence(__loopcount__) { 
        res = res + v[ix % 2] + v[ix % 2] 
        }; 
    res
    );

`perf
heterogeneous_vec_2: (
    let v = [0,0.0]; 
    let res = 0; 
    for ix in sequence(__loopcount__) { 
        res = res + v[0] + v[1] 
        }; 
    res
    );

`perf
homogenous_vec: (
    let v = [0,0]; 
    let res = 0; 
    for ix in sequence(__loopcount__) { 
        res = res + v[ix % 2] + v[ix % 2] 
        }; 
    res
    );

`perf
homogenous_paged_vec: (
    let v = [0,0].paged; 
    let res = 0; 
    for ix in sequence(__loopcount__) { 
        res = res + v[ix % 2] + v[ix % 2] 
        }; 
    res
    );

`perf
vec_lookup_in_function: (
    let v = [[0], [0  ]]; 
    let f = fun(x) { 
        `test_fun_0; 
        v[x] 
        }; 
    let res = 0; 
    for ix in sequence(__loopcount__) { 
        res = res + f(ix % 2)[0] + f(ix % 2)[0] 
        }; 
    res
    );

`perf
vec_lookup_in_function_systematic_access: (
    let v = [[0], [0  ]]; 
    let f = fun(x) { 
        `test_fun_1; 
        v[x] 
        }; 
    let res = 0; 
    for ix in sequence(__loopcount__) { 
        res = res + f(if (ix < 1000) 0 + 0 else 1 + 0)[0] + f(0 + 0)[0] 
        }; 
    res
    );

`perf
vec_lookup_in_function_systematic_access_2: (
    let v = [[0], [0  ]]; 
    let f = fun(x) { 
        `test_fun_0; 
        v[x] 
        }; 
    let res = 0; 
    for ix in sequence(__loopcount__) { 
        res = res + f(if (ix < 1000) 0 + 0 else 1 + 0)[0] + f(0 + 0)[0] 
        }; 
    res
    );

`perf
vec_in_vec_1: (
    let v = [[0], [0  ]]; 
    let res = 0; 
    for ix in sequence(__loopcount__) { 
        res = res + v[ix % 2][0] + v[ix % 2][0] 
        }; 
    res
    );

`perf
vec_in_vec_2: (
    let v = [[0], [0 ]]; 
    let res = 0; 
    for ix in sequence(__loopcount__) { 
        res = res + v[0][0] + v[1][0] 
        }; 
    res
    );

`perf
mixed_vec_in_vec_1: (
    let v = [[0], [0.0]]; 
    let res = 0; 
    for ix in sequence(__loopcount__) { 
        res = res + v[0][0] + v[1][0] 
        }; 
    res
    );

`perf
mixed_vec_in_vec_2: (
    let v = [[0], [0.0]]; 
    let res = 0; 
    for ix in sequence(__loopcount__) { 
        res = res + v[ix % 2][0] + v[ix % 2][0] 
        }; 
    res
    );

`perf
mixed_vec_in_vec_3: (
    let v = [[0],[0.0]]; 
    let res = 0; 
    for ix in sequence(__loopcount__) { 
        res = res + v[0][0] + v[1][0] 
        }; 
    res
    );

string_scantest_callable: fun(f) {
	let data = sum(0, 100000, {"1,12,123,1234,".dataAsVector});

	fun() {
		let res = 0
		for _ in sequence(10) {
			let x = 0
			let x0 = 0
			while (x < size(data)) {
				if (data[x] == ","[0])
					{
					res = res + f(data[x0, x])
					x0 = x + 1
					}
				x = x + 1
				}
			}
		res > 0
		}
	};

(`perf, `callResult) vector_data_slice_size: string_scantest_callable(fun(s) { size(s) });
(`perf, `callResult) vector_data_to_string: string_scantest_callable(fun(s) { size(s.dataAsString) });
(`perf, `callResult) vector_data_to_float: string_scantest_callable(fun(s) { Float64(s.dataAsString) });
(`perf, `callResult) vector_data_to_int: string_scantest_callable(fun(s) { Int64(s.dataAsString) });
