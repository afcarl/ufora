/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/
`hidden
test_plot_limit:
fun(plotFun, overflow:=true) {
    try {
        let numElements = plot._plotLimit + 1;
        if (not overflow)
            numElements = plot._plotLimit - 1;

        let v = Vector.range(numElements);
        plotFun(v);

        not overflow
        }
    catch (...) {
        overflow
        }
    };

`test
test_plot_limit_1: test_plot_limit(plot.linePlot, overflow:true);

`test
test_plot_limit_2: test_plot_limit(plot.linePlot, overflow:false);

`test
test_plot_limit_3: test_plot_limit(plot.barPlot, overflow:true);

`test
test_plot_limit_4: test_plot_limit(plot.barPlot, overflow:false);

`test
test_plot_limit_5: test_plot_limit(plot.scatterPlot, overflow:true);

`test
test_plot_limit_6: test_plot_limit(plot.scatterPlot, overflow:false);

test_data: Vector.range(10.0, math.sin);

extract_options: fun(p) {
    p.options
    };

`test
test_plot_options_01: (
    let p = plot.linePlot(test_data);
    let p2 = plot.options.title("hello") * p;
    assertions.assertEqual(extract_options(p2), (title:"hello"))
    );

`test
test_plot_options_02: (
    let p = plot.linePlot(test_data, options:(title:"original"));
    let p2 = plot.options.title("hello") * p;
    assertions.assertEqual(extract_options(p2), (title:"hello"))
    );

`test
test_plot_options_03: (
    let p = plot.linePlot(test_data, options:(title:"original"));
    let p2 = plot.options.xaxis.label("X!") * p;
    assertions.assertEqual(extract_options(p2), (xaxis:(label:"X!"), title:"original"));
    );

`test
test_plot_options_04: (
    let p1 = linePlot([5,2,4,3,1]);
    let p2 = linePlot([1,2,3,5,4]);

    let comp =
    plot.options.title("Composite!") *
    plot.options.legend.position("sw") *
    (
        plot.options.label("black") * 
        plot.options.strokeWeight(10) * p1 + 

        plot.options.label("other") * 
        plot.options.strokeColor("#ffbb00") *
        p2
        );
    assertions.assertEqual(
        comp.options, 
        (
            legend: (position: "sw"), 
            strokeColor: "#ffbb00",
            title: "Composite!",
            strokeWeight: 10,
            label: "black"
            )
        )
    );

`test
test_plot_options_05: (
    let p1 = plot.linePlot(test_data, options:(title:"original", color:"#000000"));
    let p2 = 
        plot.options.title("hello") * 
        plot.options.color("#ff0000") *
        p1;
    assertions.assertEqual(extract_options(p2), (color: "#ff0000", title: "hello"))
    );

`test histogram_calls: (
    histogram(dataframe.Series([1,2,3]))
    true
    );

`test datetime_calls_1: (
    let v = [DateTime("2015/1/1"), DateTime("2015/2/2")];
    let plot = linePlot(v)

    assertions.assertEqual(plot.options, (yaxis: (mode: "time")));
    assertions.assertEqual(
        plot.vector,
        v.applyWithIndex(
            fun(val, ix) {
                (ix, val.floatSecondsSinceEpoch() * 1000.0)
                }
            )
        );        
    );

`test datetime_calls_2: (
    let v = [(DateTime("2015/1/1"), 1), (DateTime("2015/2/2"), 2)];
    let plot = linePlot(v)

    assertions.assertEqual(
        plot.vector,  [(1420070400000.0, 1), (1422835200000.0, 2)]
        );
    assertions.assertEqual(
        plot.options,
        (xaxis: (mode: "time"))
        );
    );

`test decorators: (
    let dates =  [DateTime("2015/1/1"), DateTime("2015/2/2"), DateTime("2015/3/3")];
    let res = plot.options.xaxis.mode("time") *
        sum(0,13, {
            linePlot([(dates[ix].secondsSinceEpoch(), ix * _) for ix in sequence(size(dates))])
        })
    assertions.assertEqual(res.options, (xaxis: (mode: "time",),))
    );

`test options: (
    let title = "HIYOOOO";

    let p1 = plot.options.title(title) * linePlot(Vector.range(10));
    let p2 = plot.options.title(title) * linePlot(Vector.uniform(10, 0.0));
    assertions.assertEqual((p1 + p2).options, (title: "HIYOOOO"))

    let p3 = plot.options.title("not HIYOOOO") * linePlot(Vector.range(10, { -_ }));

    assertions.assertEqual((p1 + p3).options, (title: "HIYOOOO"))
    assertions.assertEqual((p3 + p1).options, (title: "not HIYOOOO"))

    assertions.assertEqual((plot.options.title("third title") * (p1 + p2)).options, (title: "third title"));
    assertions.assertEqual((plot.options.title("third title") * (p2 + p1)).options, (title: "third title"));
    );

`test dataframeSeries: (
    let s = dataframe.Series([1,2,3,4]);
    
    let plt = linePlot(s);

    assertions.assertEqual(
        plt.vector,
        [(0, 1), (1, 2), (2, 3), (3, 4)]
        );
    );

`test plotLengthOneTuples: (
    let plt = linePlot([(1,), (2,), (3,)]);

    assertions.assertEqual(
        plt.vector,
        [(0, 1), (1, 2), (2, 3)]
        );
    );

