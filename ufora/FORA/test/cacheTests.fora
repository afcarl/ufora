/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/

f: fun(x,y) { x + y };

`test  cache_1 : cached(f(1,2))[0] is 3;

`test  cache_3 : (  let x = 10; cached(fun(){x + 20}())[0] is 30 );

`test  cache_4 : (  let x = 10; let (a,b) = cached(f(1,2), f(x,20)); a+b is 33 );

`test  cache_5 : (  cached(fun(){#X(20)}())[0] is (#X(20)) );

brownian:fun(x, 0) { x >>> 0.0 }
			(x, t) {
				let (l,r) = cached(brownian(x-1,t-1),brownian(x+1,t-1));
				(l+r)/2.0
				};

`test	brownian_1: brownian(0,0) is 0.0;
`test	brownian_2: brownian(1,0) is 1.0;
`test	brownian_3: brownian(0,1) is 0.5;
`test	brownian_4: brownian(0,2) is 0.5;
`test	brownian_5: brownian(0,3) is 0.75;

brownianVector:
	fun(x,t,samplepoints) {
		if (t <= 0)
			return [((x - sample) >>> 0.0) * 1.0 for sample in samplepoints];
		
		let (l,r) =
			cached(
				brownianVector(x-1,t-1,samplepoints),
				brownianVector(x+1,t-1,samplepoints)
			);
		
		return [(l[ix] + r[ix]) / 2.0 for ix in sequence(size(l))]
		};
`test brownianVector_1:
	", ".join(brownianVector(0.0, 10, Vector.range(10)).apply(fun(x){String(Int64(x * 10))})) is 
	"12, 8, 4, 3, 1, 0, 0, 0, 0, 0"
	;
`test	cyclicCacheDetection:
	try { let f = fun() { cached(f()) }; f() } catch(_) { true }
	;

`test 	vectorIdAndCache_1: (
	let (v1, v2) = ([1,2,3],[1,2,3]);
	v1 is not v2
);
`test 	vectorIdAndCache_2: (
	let f = fun(a) { let v = []; for x in sequence(a) v = v :: x; v };
	let (v1, v2) = cached(f(0),f(0));
	v1 is v2
);
	
