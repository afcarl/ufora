/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/


`test mutableVectorJov_1: `TypeJOV(MutableVector) is JOV;

`test mutableVectorJov_2: `TypeJOV(MutableVector(Int64)) is JOV;

`test mutableVectorCreate_1: size(MutableVector(Int64).create()) is 0;

`test mutableVectorCreate_2: size(MutableVector(Anything).create()) is 0;

`test mutableVectorCreate_3: size(MutableVector(Int64).create(10, 10)) is 10;

`test mutableVectorCreate_4: size(MutableVector(Anything).create(10, 10)) is 10;


`test mutableVectorResize: (
	let v = MutableVector(Int64).create(10, 10); 
	v.resize(20, 10);

	size(v) is 20;
	);

`test mutableVectorResize_2: ( 
	let v = MutableVector(Anything).create(10, 10); 
	v.resize(20, 10);
	size(v) is 20;
	);

`test mutableVectorResize_3: ( 
	let v = MutableVector(Int64).create(10, 10); 
	try {
		v.resize(20, "this is an invalid value");
		false
		}
	catch(e)
		{
		true
		}
	);

`test mutableVectorResize_4: ( 
	let v = MutableVector(Anything).create(10, 10); 
	try {
		v.resize("this is not a size", 10);
		false
		}
	catch(e)
		{
		true
		}
	);

`test mutableVectorResize_5: ( 
	let v = MutableVector(Int64).create(0, 10); 
	v.resize(20, 10);
	size(v) is 20;
	);

`test mutableVectorResize_6: ( 
	let v = MutableVector(Int64).create(10, 10); 
	v.resize(0, 10);
	size(v) is 0;
    );


`test mutableVectorGetitem_1: MutableVector(Int64).create(10, 10)[2] is 10;

`test mutableVectorGetitem_2: MutableVector(Anything).create(10, 10)[2] is 10;

`test mutableVectorGetitem_3: MutableVector(String).create(10, "10")[2] is "10";

`test mutableVectorSetitem_1: (
	let v = MutableVector(Int64).create(10, 10);

	for ix in sequence(size(v)) {
		v[ix] = ix
		}

	let res = nothing;

	for ix in sequence(size(v)) {
		res = res + v[ix]
		}

	res is sum(0,10)
    );

`test mutableVectorSetitem_2: (
	let v = MutableVector(Anything).create(10, 10);

	for ix in sequence(size(v)) {
		v[ix] = ix
		}

	let res = nothing;

	for ix in sequence(size(v)) {
		res = res + v[ix]
		}

	res is sum(0,10)
	);

`test mutableVectorSetitem_3: (
	let v = MutableVector(Float64).create(10, 0.0);

	//check that setItem works for non-Int64 index-arguments
	v[0.0] = 10.0;
	
	true;
	);

`test mutableVectorSetitemString: (
	let v = MutableVector(String).create(10, "");

	v[3] = String(v);
	v[4] = String(v);
	v[3] = "this is a string";
	v[3] = "this is a string 2";

	size(v) is 10 and v[2] is ""
	);

`test compilableGetitem: (
	let v = MutableVector(Int64).create(10000, 10);

	let res = nothing;

	for ix in sequence(10000) {
		res = res + v[ix]
		};

	res is 10000 * 10
	);

`test compilableSetitem: (
	let res = nothing;

	let v = MutableVector(Int64).create(10000, 10);

	for ix in sequence(10000) {
		v[ix] = ix
		};

	for ix in sequence(10000) {
		res = res + v[ix]
		};

	res is sum(0,10000)
	);

`test compilableSetitemString: (
	let v = MutableVector(String).create(10000, "10");

	let res = nothing;

	for ix in sequence(10000) {
		v[ix] = String(ix)
		};

	for ix in sequence(10000) {
		res = res + size(v[ix])
		};

	res > 10000
    );

`test compilableSetitemStringAnything: (
	let v = MutableVector(Anything).create(1000, "10");

	let res = nothing;

	for ix in sequence(1000) {
		v[ix] = String(ix)
		};

	for ix in sequence(1000) {
		res = res + size(v[ix])
		};

	res > 1000
	);

`test changesPropagateFromFunctions: (
	let v = MutableVector(Int64).create(1, 0);

	let f = fun() { v[0] = v[0] + 1 };

	f()
	f()
	f()

	v[0] is 3
	);

`test mutableVectorIdentity: (
	let v1 = MutableVector(Int64).create(1,0);
	let v2 = MutableVector(Int64).create(1,0);
	
	v1 is v1 and v2 is v2 and v1 is not v2
	);

`test mutablevectorSetitemAcceptsOnlyCst: (
    let v = MutableVector(Anything).create(1, 0);
    try {
        v[0] = MutableVector(Int64).create();
        return false;
        }
    catch (e) {
        return e == "Invalid SetItem call: MutableVector({Int64}, sz=0) is not CST";
        }
    );
    
`test mutablevectorCreateAcceptsOnlyCstOrPossiblyCstJudgments: (
    try {
        MutableVector(MutableVector).create();
        return false;
        }
    catch (e)
        {
        return 
        e == "Cannot create a MutableVector with element judgment {MutableVector} since it is not CST."
        }
    );

`test mutablevectorCreateDefaultArgMustBeCst: (
    try {
        MutableVector(Anything).create(1, MutableVector(Int64).create(1,1));
        return false;
        }
    catch (e)
        {
        return e == "Invalid default value: MutableVector({Int64}, sz=1) is not CST"
        }
    );
    
`test mutablevectorResizeDefaultArgMustBeCst: (
    try {
        let v = MutableVector(Anything).create(); v.resize(1, MutableVector(Int64).create());
        return false
        }
    catch (e)
        {
        return e == "Invalid default value: MutableVector({Int64}, sz=0) is not CST";
        }
     );

`test mutablevector_of_tuple_create_1:
    (
	let v = MutableVector(Tuple).create(1, (1,2));
	v[0] = (1,2,3);
	true;
	);

`test mutablevector_of_tuple_create_2:
    (
	let v = MutableVector(Tuple(Int64, Float64)).create(1, (1, 2.0));
	true;
	);

`test mutablevector_elementType_1:
    (
	let m = MutableVector(Int64).create();

	m.elementType is Int64;
	);

`test mutablevector_elementType_2:
	(
	let m = MutableVector(Int64).create(10, 0);

	m.elementType is Int64;
	);

`test mutablevector_elementType_3:
	(
	let m = MutableVector(Anything).create();

	m.elementType is Anything;
	);

`test mutablevector_elementType_4:
	(
	let m = MutableVector(Anything).create(10, 0);

	m.elementType is Anything;
	);

`test mutablevector_elementType_5:
    (
	let m = MutableVector.create();

	m.elementType is Anything;
	);

`test mutablevector_elementType_6:
    (
	let m = MutableVector.create(10, 0);

	m.elementType is Anything;
	);

`test mutablevector_iteration_1:
    (
	let m = MutableVector.create(10, 0);

	for val in m {
	    if (val != 0) 
		    throw val
		}

	return true;
	);

`test mutablevector_equality_1:
	(
	let m1 = MutableVector.create(10, 0);
	let m2 = MutableVector.create(10, 1);

	not (m1 == m2) and m1 != m2 and (m1 == m1) and (m2 == m2)
	);

