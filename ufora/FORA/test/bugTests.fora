/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/
/*

//this should throw an exception but doesn't
`test	functionParserAssignFreeVars_1:
			try { `Function("fun() { ret = 10 }"); false } catch(x) { true };
			
//this ought to throw, but doesn't
`test	thisShouldThrow_1:
			try {
				let s = sequence(100)[1];
				s+s;
				false
				}
			catch(x)
				{
				true
				}
				;
				
//this should parse but doesn't. We're not realizing that the
//list-comprehension can't be used as a [] operator on [1,2,3]
`test	parserFails_1:
			{ `Function("{ let rows = nothing; rows = [1,2,3,4] [x for x in rows] }")(); true }
			;
*/

/*
`test KNOWNTESTFAILUREPatternMatchingFails: {
	let f = fun() { match (1) with (2) { true } }; try { f() } catch (("Invalid call. ", ...)) { false } (_) { true }
	};
*/	
	
// TODO BUG brax: return last expression isn't recognized for objects and 
// tuples after 'let' without a semicolon, but it is for others like integers.
/****************
`test	KNOWNTESTFAILUREReturnAfterLetWithoutKeyword_1: {
	try {
		`Function("""let f = fun(){ 
		    let a = 1 				
		    10						
		} 							
		f() is 10""")()
	} catch (e) {
		false
	}
};

`test	KNOWNTESTFAILUREReturnAfterLetWithoutKeyword_2: {
	try {
		`Function("""let f = fun(){ 	
		    let a = 1 				
		    object { 				
		        value: a; 			
		    } 						
		} 							
		f().value is 1""")()
	} catch (e) {
		false
	}
};

`test	KNOWNTESTFAILUREReturnAfterLetWithoutKeyword_3: {
	try {
		`Function("""let f = fun(){ 
		    let a = 1 				
		    (value:a, another:2)	
		} 							
		f().value is 1""")()
	} catch (e) {
		false
	}
};

*************/

f: fun (x:x, y:y) { "named" };

//`test	named_1: f(10,20) is "normal";
//`test	named_2: f(x:10,y:20) is "named";
//`test	named_3: f(y:10,x:20) is "named";

