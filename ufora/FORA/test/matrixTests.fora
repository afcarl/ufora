/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/
m1: math.Matrix([1.0,2.0,3.0,4.0], (2,2));
m2: math.Matrix([1.0,3.0,2.0,4.0], (2,2));
m3: math.Matrix(
            [1.80, 5.25, 1.58, -1.11,
            2.88, -2.95, -2.69, -0.66,
            2.05, -0.95, -2.90, -0.59,
            -0.89, -3.80, -1.04, 0.80],
            (4,4)
            );
m4: math.Matrix(Vector.range(15.0), (5,3));

`test scalarMultiplication_1:
    (
    m4 * (-1.0) == math.Matrix( m4.matrixImpl_.data_.apply(fun(elt){-elt}), (5,3) );
    );    

`test scalarMultiplication_2:
    (
    (-1.0) * m4 == math.Matrix( m4.matrixImpl_.data_.apply(fun(elt){-elt}), (5,3) );
    );

`test scalarMultiplication_3:
    (
    let m = math.Matrix(Vector.range(15.0), (3,5), `row);
    
    m * -1.0 == math.Matrix(m.matrixImpl_.data_.apply(fun(elt){-elt}), (3,5), `row)
    );

`test scalarMultiplication_4:
    (
    let m = math.Matrix(Vector.range(15.0), (3,5), `row);
    
    -1.0 * m == math.Matrix(m.matrixImpl_.data_.apply(fun(elt){-elt}), (3,5), `row)
    );

`test scalarMultiplication_5:
    (
    let m = math.Matrix(Vector.range(15.0), (3,5));
        
    -1.0 * (m.transpose()) == (-1.0 * m).transpose();
    );

`test scalarMultiplication_6:
    (
    m4 * 2 == math.Matrix( m4.matrixImpl_.data_.apply(fun(elt){ 2 * elt}), (5,3) );
    );    

`test scalarMultiplication_7:
    (
    3 * m4 == math.Matrix( m4.matrixImpl_.data_.apply(fun(elt){3 * elt}), (5,3) );
    );

`test scalarMultiplication_8:
(2.0 * math.Matrix([1,2,3]) == math.Matrix([2.0,4.0,6.0]););

`test scalarMultiplication_9: (
	2.0 * math.Matrix([1,2.0]) == math.Matrix([2.0,4.0]););

`test matrixSubtraction_1: ( m1 - m1 == math.Matrix([0.0,0.0,0.0,0.0],(2,2)) );

`test matrixSubtraction_2: ( m1 - m1.transpose() == math.Matrix([0.0,-1.0,1.0,0.0],(2,2)) );

`test matrixSubtraction_3: ( m1.transpose() - m1 == math.Matrix([0.0,1.0,-1.0,0.0],(2,2)) );

`test matrixSubtraction_4:
    (
    m1.transpose() - m1.transpose() == math.Matrix([0.0,0.0,0.0,0.0],(2,2))
    );

`test matrixSubtraction_5:
    (
    let m1 = math.Matrix([1.0,2.0,3.0,4.0], (2,2));
    let m2 = math.Matrix([5.0,6.0,7.0,8.0], (2,2));

    m1 - m2 == math.Matrix([-4.0,-4.0,-4.0,-4.0], (2,2));    
    );

`test matrixSubtraction_6:
    (
    let m1 = math.Matrix([1.0,2.0,3.0,4.0], (2,2));
    let m2 = math.Matrix([1.0,2.0,3.0,4.0], (2,2), (2,1));
    
    m1 - m2 == math.Matrix([0.0, -1.0, 1.0, 0.0], (2,2));
    );

`test matrixSubtraction_7:
    (
    let m1 = math.Matrix([1.0,2.0,3.0,4.0], (2,2));
    let m2 = math.Matrix([1.0,2.0,3.0,4.0], (2,2), (2,1));
    
    m2 - m1 == math.Matrix([0.0, 1.0, -1.0, 0.0], (2,2));
    );

`test matrixTranspose: ( m1.transpose() == m1.T() );

`test matrixAddition_1: ( m1 + m1 == math.Matrix([2.0,4.0,6.0,8.0],(2,2)) );

`test matrixAddition_2: ( m1 + m1.transpose() == math.Matrix([2.0,5.0,5.0,8.0],(2,2)) );

`test matrixAddition_3: ( m1.transpose() + m1 == math.Matrix([2.0,5.0,5.0,8.0],(2,2)) );

`test matrixAddition_4:
    (
    m1.transpose() + m1.transpose() == math.Matrix([2.0,6.0,4.0,8.0],(2,2))
    );

`test matrixAddition_5:
    (
    let m1 = math.Matrix([1,2,3,4], (2,2));
    let m2 = math.Matrix([5,6,7,8], (2,2));
  
    m1 + m2 == math.Matrix([6,8,10,12], (2,2)); 
    );   

`test matrixAddition_6:
    (
    let m1 = math.Matrix([1.0,2.0,3.0,4.0], (2,2));
    let m2 = math.Matrix([5.0,6.0,7.0,8.0], (2,2));

    m1 + m2 == math.Matrix([6.0,8.0,10.0,12.0], (2,2));    
    );

`test matrixAddition_7:
    (
    let m1 = math.Matrix([1.0,2.0,3.0,4.0], (2,2));
    let m2 = math.Matrix([1.0,2.0,3.0,4.0], (2,2), (2,1));
    
    m1 + m2 == math.Matrix([2.0, 5.0, 5.0, 8.0], (2,2));
    );

`test matrixAddition_8:
    (
    let m1 = math.Matrix([1.0,2.0,3.0,4.0], (2,2));
    let m2 = math.Matrix([1.0,2.0,3.0,4.0], (2,2), (2,1));
    
    m2 + m1 == math.Matrix([2.0, 5.0, 5.0, 8.0], (2,2));
    );
    
`test matrixAddition_9:
(
	let m1 = math.Matrix([1,2]);
	let m2 = math.Matrix([3,4]);

	m1 + m2 == math.Matrix([4.0,6.0]);
);

`test matrixAddition_10:
(
	let m1 = math.Matrix([1.0,2]);
	let m2 = math.Matrix([3f32,4f32]);

	m1 + m2 == math.Matrix([4.0,6.0]);
);

`test matrixArithmetic_1:
    (
    m1 + (-1) * m1.transpose() == math.Matrix([0.0, -1.0, 1.0, 0.0], (2,2))
    );

`test matrixArithmetic_2:
    (
    let m1 = math.Matrix([1.0, 2.0, 3.0, 4.0], (2,2));
    let m2 = math.Matrix([-1.0, -2.0, -3.0, -4.0], (2,2), (2,1));
    
    m1 + m2 == math.Matrix([0.0, -1.0, 1.0, 0.0], (2,2));
    );

`test matrixTranspose_1: ( m1.transpose() == m2 );

`test matrixTranspose_2:
    (
    let m1 = math.Matrix([1.0,2.0,3.0,4.0], (2,2));
    let m2 = math.Matrix([1.0,2.0,3.0,4.0], (2,2), (2,1));

    m2 == m1.transpose() and m1 == m2.transpose()
    );
    
`test matrixMultiplication_1: ( m1 * m1 == math.Matrix([7.0,10.0,15.0,22.0], (2,2)) );

`test matrixMultiplication_2: ( m1 * m1.transpose() == math.Matrix([10.0,14.0,14.0,20.0],(2,2)) );

`test matrixMultiplication_3: ( m1.transpose() * m1 == math.Matrix([5.0,11.0,11.0,25.0],(2,2)) );

`test matrixMultiplication_4:
    (
    m1.transpose() * m1.transpose() == math.Matrix([7.0,15.0,10.0,22.0],(2,2))
    );

`test matrixMultiplication_5:
    (
    let m1 = math.Matrix([1,2,3,4], (2,2));
    let m2 = math.Matrix([5,6,7,8], (2,2));
    
    m1 * m2 == math.Matrix([23,34,31,46], (2,2)); 
    );

`test matrixMultiplication_6:
    (
    let m1 = math.Matrix([1.0,2.0,3.0,4.0], (2,2));
    let m2 = math.Matrix([5.0,6.0,7.0,8.0], (2,2));
    
    m1 * m2 == math.Matrix([23,34,31,46], (2,2));
    );

`test matrixMultiplication_7:
    (
    let m1 = math.Matrix([1.0,1.0,1.0,1.0,1.0,1.0], (2,3));
    let m2 = math.Matrix([1.0,1.0,1.0], (3,1));
    
    m1 * m2 == math.Matrix ([3.0, 3.0], (2,1));
    );

`test matrixMultiplication_8:
    (
    let m1 = math.Matrix([1.0,1.0,1.0,1.0,1.0,1.0], (3,2)).transpose();
    let m2 = math.Matrix([1.0,1.0,1.0], (3,1));
     
    m1 * m2 == math.Matrix([3.0, 3.0], (2,1));
    );

`test matrixMuliplication_9:
    (
    let m1 = math.Matrix([1.0,1.0,1.0,1.0,1.0,1.0], (2,3));
    let m2 = math.Matrix([1.0, 1.0, 1.0], (1,3)).transpose();
    
    m1 * m2 == math.Matrix([3.0, 3.0], (2,1));
    );

`test matrixMulitplication_10:
    (
    let m1 = math.Matrix([1.0,1.0,1.0,1.0,1.0,1.0], (3,2)).transpose();
    let m2 = math.Matrix([1.0,1.0,1.0], (1,3)).transpose();
    
    m1 * m2 == math.Matrix([3.0, 3.0], (2,1));
    );

`test matrixMultiplication_11:
    (
    let m1 = math.Matrix([1.0,2.0,3.0,4.0], (2,2));
    let m2 = math.Matrix([5.0,6.0,7.0,8.0], (2,2), (2,1));
    
    m1 * m2 == math.Matrix([26.0, 38.0, 30.0, 44.0], (2,2));
    );

`test matrixMultiplication_12:
    (
    let m1 = math.Matrix([1.0,2.0,3.0,4.0], (2,2));
    let m2 = math.Matrix([5.0,6.0,7.0,8.0], (2,2), (2,1));
    
    m2 * m1 == math.Matrix([17.0, 23.0, 39.0, 53.0], (2,2));
    );

`test matrixMultiplication_13:
    (
	let m = math.Matrix([1.0, 0.0, 0.0, 
		  				 0.0, 1.0, 0.0], (3,2));
						 
	let res = m.transpose() * m;

	res == math.Matrix.identity(2);
	);

`test matrixInversion_1: ( (m1*m1.inverse()) == math.Matrix.diagonal(2,1.0) );

`test matrixInversion_2: ( m1.inverse(); m1.inverse(); true );

`test matrixInversion_3: ( m1.transpose().inverse() == m1.inverse().transpose(); );

`test matrixInversion_4: ( m1.inverse() == m1.inv() );

`test matrixDet_1: ( m1.det() == -2.0; );

`test matrixDet_2: ( m1.transpose().det() == -2.0; );

`test matrixDet_3:
    (
	let m = math.Matrix([2,1,1,1], (2,2))
    
	assertions.assertEqual(m.det(), 1);
    )
    ;
`test matrixDet_4:
    (
    let data = [
        1.000, 1.200, 1.400, 1.600, 1.800, 2.000, 2.200, 2.400, 2.600,
        1.200, 1.000, 1.200, 1.400, 1.600, 1.800, 2.000, 2.200, 2.400,
        1.400, 1.200, 1.000, 1.200, 1.400, 1.600, 1.800, 2.000, 2.200,
        1.600, 1.400, 1.200, 1.000, 1.200, 1.400, 1.600, 1.800, 2.000,
        1.800, 1.600, 1.400, 1.200, 1.000, 1.200, 1.400, 1.600, 1.800,
        2.000, 1.800, 1.600, 1.400, 1.200, 1.000, 1.200, 1.400, 1.600,
        2.200, 2.000, 1.800, 1.600, 1.400, 1.200, 1.000, 1.200, 1.400,
        2.400, 2.200, 2.000, 1.800, 1.600, 1.400, 1.200, 1.000, 1.200,
        2.600, 2.400, 2.200, 2.000, 1.800, 1.600, 1.400, 1.200, 1.000
        ];
    let A = math.Matrix(data, (9,9));
    
    math.abs(A.det() - 0.001) < 0.0002; 
    )
    ;

`test matrixDet_5:
    (
    let A =
        math.Matrix(
            Vector.uniform(8, 1.0),
            (2,4)    
        );
        
	assertions.assertEqual(A.det(), 0)
    )
    ;

`test matrixDet_6:
	(
	math.Matrix.uniform((10,10), 234.0).det() == 0.0
	);

`test matrixDet_7:
	(
	math.Matrix.identity(21).det() == 1.0
	);

`test matrixDet_8:
	(
	math.Matrix.identity(20).det() == 1.0
	);

`test matrixApply_1: ( m1.apply(Int64) == math.Matrix([1,2,3,4],(2,2)); );

`test matrixResample:
    (
    let m1 = math.Matrix([1,2,3,4,5,6],(3,2));
    let m2 = math.Matrix([1,2,3,4,5,6],(2,3),`row);

	assertions.assertEqual(math.Matrix(m1.rowMajorData(), m1.dim, `row).matrixImpl_.data_, [1,4,2,5,3,6])
	assertions.assertEqual(math.Matrix(m2.columnMajorData(), m2.dim).matrixImpl_.data_, [1,4,2,5,3,6])
	assertions.assertEqual(m1.matrixImpl_.data_, math.Matrix(m1.columnMajorData(), m1.dim).matrixImpl_.data_)
	assertions.assertEqual(m2.matrixImpl_.data_, math.Matrix(m2.rowMajorData(), m2.dim, `row).matrixImpl_.data_)
    );

`test decompositionLu_1:
    (
    let LExpectedData = [1.0,0.33333333333,
                            0.0,1.0];
    let UExpectedData = [3.0,0.0,
                            4.0,0.66666666666];
    let PExpectedData = [0.0,1.0,
                            1.0,0.0];
    let mData = [1.0,3.0,2.0,4.0];
    let m = math.Matrix(mData, (2,2));
    let result = m.lu();
    let product = result[0]*result[1]*result[2];

    assertions.assertAllClose(product.matrixImpl_.data_, mData, atol:1e-3)
    assertions.assertAllClose(PExpectedData, result[0].matrixImpl_.data_, atol:1e-3)
    assertions.assertAllClose(LExpectedData, result[1].matrixImpl_.data_, atol:1e-3)
    assertions.assertAllClose(UExpectedData, result[2].matrixImpl_.data_, atol:1e-3);
    );

`test decompositionLu_2:
    (
    let LExpectedData = [1.0,0.055,0.956,
                            0.0,1.0,-0.709,
                            0.0,0.0,1.0];
    let UExpectedData = [91.0,0.0,0.0,8.0,
                            6.56,0.0,16.0,25.121,
                            -5.497,58.0,5.813,-51.332];
    let PExpectedData = [0.0,1.0,0.0,
                            1.0,0.0,0.0,
                            0.0,0.0,1.0];
    let mData = [5.0,91.0,87.0,7.0,8.0,3.0,26.0,16.0,-8.0,9.0,58.0,0.0];
    let m = math.Matrix(mData, (3,4));
    let result = m.lu();
    let product = result[0]*result[1]*result[2];

    assertions.assertAllClose(product.matrixImpl_.data_, mData, atol:1e-3)
    assertions.assertAllClose(PExpectedData, result[0].matrixImpl_.data_, atol:1e-3)
    assertions.assertAllClose(LExpectedData, result[1].matrixImpl_.data_, atol:1e-3)
    assertions.assertAllClose(UExpectedData, result[2].matrixImpl_.data_, atol:1e-3);
    );

`test decompositionLu_3:
    (
    let LExpectedData = [1.0,0.192,0.346,0.269,
                            0.0,1.0,0.597,0.042,
                            0.0,0.0,1.0,-0.029];
    let UExpectedData = [26.0,0.0,0.0,
                            16.0,87.923,0.0,
                            -8.0,88.538,-50.059];
    let PExpectedData = [0.0,0.0,1.0,0.0,
                            1.0,0.0,0.0,0.0,
                            0.0,0.0,0.0,1.0,
                            0.0,1.0,0.0,0.0];
    let mData = [5.0,7.0,26.0,9.0,91.0,8.0,16.0,58.0,87.0,3.0,-8.0,0.0];
    let m = math.Matrix(mData, (4,3));
    let result = m.lu();
    let product = result[0]*result[1]*result[2];

    assertions.assertAllClose(product.matrixImpl_.data_, mData, atol:1e-3)
    assertions.assertAllClose(PExpectedData, result[0].matrixImpl_.data_, atol:1e-3)
    assertions.assertAllClose(LExpectedData, result[1].matrixImpl_.data_, atol:1e-3)
    assertions.assertAllClose(UExpectedData, result[2].matrixImpl_.data_, atol:1e-3);
    );

`test decompositionLu_4:
    (
    let LExpectedData = [1.0,0.33333333333,
                            0.0,1.0];
    let UExpectedData = [3.0,0.0,
                            4.0,0.66666666666];
    let PExpectedData = [0.0,1.0,
                            1.0,0.0];
    let mData = [1.0,2.0,3.0,4.0];
    let m = math.Matrix(mData,(2,2),`row);
    let result = m.lu();
    let product = result[0]*result[1]*result[2];

    assertions.assertAllClose(product.rowMajorData(),mData)
    assertions.assertAllClose(PExpectedData, result[0].matrixImpl_.data_)
    assertions.assertAllClose(LExpectedData, result[1].matrixImpl_.data_)
    assertions.assertAllClose(UExpectedData, result[2].matrixImpl_.data_);
    );

`test decompositionSvd_1:
    (
    let UExpectedData = [-0.4046, -0.9145, -0.9145, 0.4046];
    let SIGMAExpectedData = [5.465, 0.0, 0.0, 0.366];
    let VTExpectedData = [-0.576, 0.8174, -0.8174, -0.576];
    let mData = [1.0,3.0,2.0,4.0];
    let m = math.Matrix(mData, (2,2));
    let result = m.svd();
    let product = result[0]*result[1]*result[2];

	assertions.assertAllClose(product.matrixImpl_.data_, mData, atol:1e-3)
    assertions.assertAllClose(UExpectedData, result[0].matrixImpl_.data_, atol:1e-3)
    assertions.assertAllClose(SIGMAExpectedData, result[1].matrixImpl_.data_, atol:1e-3)
    assertions.assertAllClose(VTExpectedData, result[2].matrixImpl_.data_, atol:1e-3);
    );

`test decompositionSvd_2:
    (
    //expected results
    let UExpectedData = [-0.07578,-0.7954,-0.6013,
                            0.4569,0.5083,-0.73,
                            0.8863,-0.3301,0.3249];
    let SIGMAExpectedData = [134.2,0.0,0.0,
                                0.0,45.24,0.0,
                                0.0,0.0,19.55,
                                0.0,0.0,0.0];
    let VTExpectedData = [-0.932,-0.3309,0.1363,-0.05698,
                            -0.06481,0.1122,0.2321,0.964,
                            -0.07367,0.5714,0.7755,-0.2582,
                            -0.3489,0.7425,-0.5711,0.02765];
    let mData = [5.0,91.0,87.0,7.0,8.0,3.0,26.0,16.0,-8.0,9.0,58.0,0.0];
    let m = math.Matrix(mData, (3,4));
    let result = m.svd();
    let product = result[0]*result[1]*result[2];

	assertions.assertAllClose(product.matrixImpl_.data_, mData, atol:1e-3, rtol:1e-3)
    assertions.assertAllClose(UExpectedData, result[0].matrixImpl_.data_, atol:1e-3, rtol:1e-3)
    assertions.assertAllClose(SIGMAExpectedData, result[1].matrixImpl_.data_, atol:1e-3, rtol:1e-3)
    assertions.assertAllClose(VTExpectedData, result[2].matrixImpl_.data_, atol:1e-3, rtol:1e-3);
    );

`test decompositionSvd_3:
    (
    let UExpectedData = [0.93202,0.064813,0.073674,0.34887,
                            0.33091,-0.11217,-0.57145,-0.74254,
                            0.13633,0.23211,0.77548,-0.57111,
                            -0.056981,0.96402,-0.25816,0.027648];
    let SIGMAExpectedData = [134.198,0.0,0.0,0.0,
                                0.0,45.24,0.0,0.0,
                                0.0,0.0,19.533,0.0];
    let VTExpectedData = [0.075777,-0.45692,0.88627,
                            0.79543,-0.50828,-0.33005,
                            0.60128,0.72998,0.32493];
    let mData = [5.0,7.0,26.0,9.0,91.0,8.0,16.0,58.0,87.0,3.0,-8.0,0.0];
    let m = math.Matrix(mData, (4,3));
    let result = m.svd();
    let product = result[0]*result[1]*result[2];

    assertions.assertAllClose(product.matrixImpl_.data_, mData, atol:1e-3, rtol:1e-3)
    assertions.assertAllClose(UExpectedData, result[0].matrixImpl_.data_, atol:1e-3, rtol:1e-3)
    assertions.assertAllClose(SIGMAExpectedData, result[1].matrixImpl_.data_, atol:1e-3, rtol:1e-3)
    assertions.assertAllClose(VTExpectedData, result[2].matrixImpl_.data_, atol:1e-3, rtol:1e-3);
    );

`test decompositionSvd_4:
    (
    //expected results
    let VTExpectedData = [-0.4046,-0.9145,
                            -0.9145,0.4046];
    let SIGMAExpectedData = [5.465,0.0,
                                0.0,0.366];
    let UExpectedData = [-0.576,0.8174,
                            -0.8174,-0.576];
    //actual result
    let mData = [1.0,3.0,2.0,4.0];
    let m = math.Matrix(mData, (2,2), `row);
    let result = m.svd();
    let product = result[0]*result[1]*result[2];

    assertions.assertAllClose(product.rowMajorData(), mData, rtol:1e-3)
    assertions.assertAllClose(UExpectedData, result[0].matrixImpl_.data_, rtol:1e-3)
    assertions.assertAllClose(SIGMAExpectedData, result[1].matrixImpl_.data_, rtol:1e-3)
    assertions.assertAllClose(VTExpectedData, result[2].matrixImpl_.data_, rtol:1e-3);
    );

`test decompositionCholesky_1:
    (
    let expected = [2.236,0.894,1.342,
                    0.0,2.864,0.978,
                    0.0,0.0,3.04];
    let mData = [5.0,2.0,3.0,2.0,9.0,4.0,3.0,4.0,12.0];
    let m = math.Matrix(mData, (3,3));
    let result = m.cholesky();

    assertions.assertAllClose(expected, result.matrixImpl_.data_, rtol:1e-3)
    );

`test decompositionCholesky_2:
    (
    let badData = [-0.07578,-0.7954,-0.6013,
                    0.4569,0.5083,-0.73,
                    0.8863,-0.3301,0.3249];
    let badMatrix = math.Matrix(badData,(3,3))
    let A = 0;

	try {
		badMatrix.cholesky()
		}
	catch(...)
		{
		return true
		}

	false
    );

`test decompositionQr_1:
    (
    let QExpectedData = [-0.316,-0.949,
                            -0.949,0.316];
    let RExpectedData = [-3.162,0.0,
                            -4.427,-0.633];
    let mData = [1.0,3.0,2.0,4.0];
    let m = math.Matrix(mData, (2,2));
    let result = m.qr();
    let product = result[0]*result[1];

    assertions.assertAllClose(product.matrixImpl_.data_, mData, atol:0.001)
    assertions.assertAllClose(QExpectedData, result[0].matrixImpl_.data_, atol:0.001)
    assertions.assertAllClose(RExpectedData, result[1].matrixImpl_.data_, atol:0.001)
    );

`test decompositionQr_2:
    (
    let QExpectedData = [-0.0397,-0.722,-0.691,
                            0.893,0.285,-0.349,
                            0.449,-0.630,0.633];
    let RExpectedData = [-126.0,0.0,0.0,
                            -8.127,7.480,0.0,
                            -7.064,30.561,-3.482,
                            -42.25,24.55,-32.517];
    let mData = [5.0,91.0,87.0,7.0,8.0,3.0,26.0,16.0,-8.0,9.0,58.0,0.0];
    let m = math.Matrix(mData, (3,4));
    let result = m.qr();
    let product = result[0]*result[1];

    assertions.assertAllClose(product.matrixImpl_.data_, mData, atol:1e-3, rtol:1e-3)
    assertions.assertAllClose(QExpectedData, result[0].matrixImpl_.data_, atol:1e-3, rtol:1e-3)
    assertions.assertAllClose(RExpectedData, result[1].matrixImpl_.data_, atol:1e-3, rtol:1e-3)
    );

`test decompositionQr_3:
    (
    let QExpectedData = [-0.173,-0.243,-0.902,-0.312,
                            0.847,-0.043,-0.302,0.435,
                            0.499,.0099,0.169,-0.844];
    let RExpectedData = [-28.827,0.0,0.0,
                            -50.265,97.151,0.0,
                            -8.603,75.970,42.386];
    let mData = [5.0,7.0,26.0,9.0,91.0,8.0,16.0,58.0,87.0,3.0,-8.0,0.0];
    let m = math.Matrix(mData, (4,3));
    let result = m.qr();
    let product = result[0]*result[1];

    assertions.assertAllClose(product.matrixImpl_.data_, mData, atol:1e-1, rtol:1e-1)
    assertions.assertAllClose(QExpectedData, result[0].matrixImpl_.data_, atol:1e-1, rtol:1e-1)
    assertions.assertAllClose(RExpectedData, result[1].matrixImpl_.data_, atol:1e-1, rtol:1e-1)
    );

`test decompositionQr_4:
    (
    //expected results
    let QExpectedData = [-0.316,-0.949,
                            -0.949,0.316];
    let RExpectedData = [-3.162,0.0,
                            -4.427,-0.633];
    let mData = [1.0,2.0,3.0,4.0];
    let m = math.Matrix(mData, (2,2),`row);
    let result = m.qr();
    let product = result[0]*result[1];

    assertions.assertAllClose(product.rowMajorData(), mData, atol:1e-3)
    assertions.assertAllClose(QExpectedData, result[0].matrixImpl_.data_, atol:1e-3)
    assertions.assertAllClose(RExpectedData, result[1].matrixImpl_.data_, atol:1e-3)
    );

`test eigenvaluesSymeigenval:
    (
    let mData = [5.0,8.0,9.0,8.0,-7.0,6.0,9.0,6.0,0.0];
    let m = math.Matrix(mData, (3,3));
    let result = m.symeigenval();
    let expected = [-11.32,-6.84,16.16];

    assertions.assertAllClose(expected, result, rtol:1e-3)
    );

`test eigenvaluesSymeigenpair:
    (
    let mData = [5.0,8.0,9.0,8.0,-7.0,6.0,9.0,6.0,0.0];
    let m = math.Matrix(mData, (3,3));
    let result = m.symeigenpair();
    let expected = [([0.3235,-0.918,0.2294],-11.32),
                    ([-0.6001,-0.01165,0.7998],-6.84),
                    ([0.7316,0.3964,0.5547],16.16)
                    ];
    for i in sequence(size(result))
        {
		assertions.assertClose(result[i][1], expected[i][1], atol:0.001, rtol:0.001)
		assertions.assertAllClose(result[i][0], expected[i][0], atol:0.001, rtol:0.001)
        }

    true
    );

`test singularValues:
    (
    let m = math.Matrix([1.0,5.0,4.0,7.0],(2,2));

    assertions.assertAllClose(m.singularValues(),[9.439,1.377], rtol:1e-3)
    );

`test normOneColumn:
    (
    let m = math.Matrix([1.0,2.0,3.0,4.0],(2,2))

    assertions.assertClose(m.norm(`one), 7.0)
    );

`test normInfColumn:
    (
    let m = math.Matrix([1.0,2.0,3.0,4.0],(2,2))

    assertions.assertClose(m.norm(`infinite), 6.0)
    );

`test normFroColumn:
    (
    let m = math.Matrix([1.0,2.0,3.0,4.0],(2,2))

    assertions.assertClose(m.norm(`frobenius), 5.4772, rtol:1e-3)
    );

`test normTwoColumn:
    (
    let m = math.Matrix([1.0,2.0,3.0,4.0],(2,2))

    assertions.assertClose(m.norm(`two), 5.465, rtol:1e-3)
    );

`test normOneRow:
    (
    let m = math.Matrix([1.0,2.0,3.0,4.0],(2,2),`row)

    assertions.assertClose(m.norm(`one), 6.0)
    );

`test normInfRow:
    (
    let m = math.Matrix([1.0,2.0,3.0,4.0],(2,2),`row)

    assertions.assertClose(m.norm(`infinite), 7.0)
    );

`test normFroRow:
    (
    let m = math.Matrix([1.0,2.0,3.0,4.0],(2,2),`row)

    assertions.assertClose(m.norm(`frobenius), 5.4772, rtol:1e-3) 
    );

`test normTwoRow:
    (
    let m = math.Matrix([1.0,2.0,3.0,4.0],(2,2),`row)

    assertions.assertClose(m.norm(`two), 5.465, rtol:1e-3)
    );

`test condOne:
    (
    let m = math.Matrix([1.0,2.0,3.0,4.0],(2,2))

    assertions.assertClose(m.cond(`one), 21.0)
    );

`test condInf:
    (
    let m = math.Matrix([1.0,2.0,3.0,4.0],(2,2))

    assertions.assertClose(m.cond(`infinite), 21.0)
    );

`test condFro:
    (
    let m = math.Matrix([1.0,2.0,3.0,4.0],(2,2))

    assertions.assertClose(m.cond(`frobenius), 15.0)
    );

`test condTwo:
    (
    let m = math.Matrix([1.0,2.0,3.0,4.0],(2,2))

    assertions.assertClose(m.cond(`two), 14.933, rtol:1e-3)
    );

`test linsolv_1:
    (
    let A = math.Matrix([-2.0,4.0,3.0,7.0],(2,2));
    let B = math.Matrix([0.0,0.0]);
    let computedX = math.Matrix.linsolv(A,B);
    let expectedX = [0.0,0.0];
    
    assertions.assertAllClose(computedX.matrixImpl_.data_,expectedX)
    );
   
`test linsolv_2:
    (
    let A = math.Matrix([1.0,3.0,6.0,5.0,2.0,5.0,8.0,7.0,15.0],(3,3));
    let B = math.Matrix([4.0,0.0,7.0]);
    let computedX = math.Matrix.linsolv(A,B);
    let expectedX = [28.25, 26.75, -19.75];
    
    assertions.assertAllClose(computedX.matrixImpl_.data_,expectedX)
    );

`test linsolv_3:
    (
    let A = math.Matrix([-5.0,48.0,8.0,
                        8.0,0.0,99.0,
                        29.0,-5.0,2.0],(3,3));
    let B = [3.0,-18.0,2.4]
    let computedX = math.Matrix.linsolv(A,B);
    let expectedX = [-0.37246079928488957,
                        0.053847815561100972,
                        0.024376326865060152];

    assertions.assertAllClose(computedX.matrixImpl_.data_,expectedX)
    );

`test linsolv_4:
    (
    try
        {
        let A = math.Matrix([-5.0,48.0,
                            8.0,0.0,
                            29.0,-5.0,],(2,3));
        let B = math.Matrix([3.0,-18.0,2.4]);
        math.Matrix.linsolv(A,B);
        }
    catch (e)
        {
        return true
        }

    false
    );

`test linsolv_5:
    (
    try
        {
        let A = math.Matrix([-5.0,48.0,8.0,
                            8.0,0.0,99.0,
                            29.0,-5.0,2.0],(3,3));
        let B = math.Matrix([3.0,-18.0]);
        math.Matrix.linsolv(A,B);
        }
    catch (e)
        {
        return true
        }

    false
    );

`test matrixPowers_1:
	(
	let m = math.Matrix([2.0, 1.0, 2.2, -2.3], (2,2));
	
	m ** 0 == math.Matrix.identity(2);
	);

`test matrixPowers_2:
	(
	let m = math.Matrix([1.0001, 0.0, 0.0, 0.99999], (2,2));

	let exponent = 10000;

	let pow = m ** exponent;

	assertions.assertClose(pow[0][0], m[0][0] ** exponent)
	assertions.assertClose(pow[0][1], 0.0)
	assertions.assertClose(pow[1][1], m[1][1] ** exponent)
	assertions.assertClose(pow[0][1], 0.0);
	);

`test matrixPowers_3:
	(
	assertions.assertAllClose((m1 ** -5).matrixImpl_.data_, (m1 ** 5).inverse().matrixImpl_.data_);
	);

`test eigenvalues_1:
	(
	let m = math.Matrix([1, 0, 1, 1], (2,2));
	
	let res = m.eigenvalues();

	res[0] == [1.0, 1.0] and res[1] == [0.0, 0.0]
    );

`test eigenvalues_2:
	(
	let m = math.Matrix([0.0, 1.0, -1.0, 0.0], (2,2));

	let res = m.eigenvalues();
	
	res[0] == [0.0, 0.0] and res[1] == [1.0, -1.0];
	);

`test eigenvectors_1:
	(
	let m = math.Matrix([1.0, 0.0, 1.0, 1.0], (2,2));

	let (wr, wi, v) = m.eigenvectors();	   
	
	if (wr != [1.0, 1.0]) throw ("wr wrong -- got: ", wr);

	if (wi != [0.0, 0.0]) throw ("wi wrong -- got: ", wi);

	//the final coordinate here should actually be nonzero in the call,
	//but the true, mathematically-defined value is 0
	let expected_v = [1.0, 0.0, -1.0, 0.0]; 

	assertions.assertAllClose(v, expected_v, atol:1e-3);	
	);

`test eigenvectors_2: 
    (
	let m = math.Matrix([0.0, 1.0, -1.0, 0.0], (2,2));

	let res = m.eigenvectors();

	if (res[0] != [0.0, 0.0]) throw ("res[0] wrong, got: ", res[0]) 

	if (res[1] != [1.0, -1.0]) throw ("res[1] wrong -- got: ", res[1]);

	let expected_v = [1.0 / math.sqrt(2), 0.0, 0.0, -1.0 / math.sqrt(2)];

	assertions.assertAllClose(res[2], expected_v);

	assertions.assertEqual(m * math.Matrix(res[2][,2]), -math.Matrix(res[2][2,]))

	assertions.assertEqual(m * math.Matrix(res[2][2,]), math.Matrix(res[2][,2]))
	);

`test leftAndRightEigenvectors_1:
	(
	let m = math.Matrix([2.0, 0.0, 1.0, 1.0], (2,2));

	let (wr, wi, vl, vr) = m.leftAndRightEigenvectors();

	if (wr != [2.0, 1.0]) throw ("wr wrong -- got: ", wr)

	if (wi != [0.0, 0.0]) throw ("wi wrong -- got: ", wi)

	assertions.assertAllClose(vl, [1.0 / math.sqrt(2.0), 1.0 / math.sqrt(2.0), 0.0, 1.0])
	assertions.assertAllClose(vr, [1.0, 0.0, -1.0 / math.sqrt(2.0), 1.0 / math.sqrt(2.0)])
	);

`test slicing_1:
	(
	let t = math.Tensor(Vector.range(8, Float64), (2,2,2));

	size(t[0]) is 4;
	);

`test slicing_2:
	(
	let t = math.Tensor(Vector.range(9, Float64)[1,], (2,2,2));

	assertions.assertClose(math.Matrix.FromTensor(t[0]).det(), -8.0);	
	);

`test slicing_3:
	(
	let t = math.Tensor(Vector.range(9, Float64)[1,], (2,2,2));
	
	math.Matrix.FromTensor(t[1]).det() == -8.0;
	);

`test slicing_4:
	(
	math.Matrix.FromTensor(math.Tensor(Vector.range(9.0, fun(elt){elt ** 2})[1,], (2,2,2))[1]).det() == -320.0
	);

`test slicing_5:
	(
	math.Matrix.FromTensor(math.Tensor(Vector.range(9.0, fun(elt){elt ** 2})[1,], (2,2,2))[0]).det() == -176.0	
	);

`test matrixCreationByTensor_1:
	(
	try { 
	    math.Matrix.FromTensor(math.Tensor(Vector.range(8, Float64), (2,2,2)))
		return false
		}
	catch (e) {
	    return e == "`dim` argument must have size 2, instead got: 3"
		}
	);

`test matrixRank_1:
	(
    math.Matrix.uniform((4,4), 0.0).rank() == 0;
	);

`test matrixRank_2:
	(
    math.Matrix.uniform((4,4), 10.0).rank() == 1;
	);

`test matrixRank_3:
	(
	math.Matrix([1.0, 0.0, 0.0, 0.0], (2,2)).rank() == 1;
	);

`test matrixRank_4:
	(
	math.Matrix([1.0, 1.0, 0.0, 0.0], (2,2)).rank() == 1;
	);

`test matrixRank_5:
	(
	math.Matrix([1.0, 1.0, 1.0, 0.0], (2,2)).rank() == 2;
	);

`test matrixPseudoInverse_1:
	(
	let m = math.Matrix([0.0,0.0,0.0,0.0] + Vector.range(8, Float64), (4,3));

	let pinv = m.pseudoinverse();

	let expectedData = 
		[	
			0.000,  0.000,  0.000,  0.000,
			-0.475, -0.200,  0.075,  0.350,
 			0.175,  0.100,  0.025, -0.050 
		];

	assertions.assertAllClose(pinv.rowMajorData(), expectedData);
	);

`test matrixPseudoInverse_2:
	(
	let m = math.Matrix([0.0,0.0,0.0,0.0] + Vector.range(8, Float64), (3,4), `row);

	let pinv = m.pinv();

	let expectedData = 
		[	
			0.000,  0.000,  0.000,  0.000,
			-0.475, -0.200,  0.075,  0.350,
 			0.175,  0.100,  0.025, -0.050 
		];

	assertions.assertAllClose(pinv.columnMajorData(), expectedData);
	);

`test matrixPseudoInverse_3:
	(
	let m = math.Matrix([1,2,3, 
						 4,0,1,
						 4 - 1, 0 - 2, 1 - 3], (3,3)).apply(Float64);

	let (pinv:pinv, rank:rank) = m.pinv(withRank:true);

	let expectedRowMajorData = 
		[ 0.04761905,  0.0952381 ,  0.14285714,
		  0.15343915,  0.01058201,  0.05291005,
		  0.10582011, -0.08465608, -0.08994709];
	
	if (rank != 2) throw "rank off! got: " + String(rank) + ", expected: 2"
	assertions.assertAllClose(pinv.rowMajorData(), expectedRowMajorData)
	);

`test matrixDiagonalsSquare:
    (
    let m = math.Matrix(Vector.range(25.0), (5,5));

    m.diagonalElements() == [0.0, 6.0, 12.0, 18.0, 24.0];
    );

`test matrixDiagonalsLong:
    (
    let m = math.Matrix(Vector.range(24.0), (6,4));

    m.diagonalElements() == [0.0, 7.0, 14.0, 21.0];
    );

`test matrixDiagonalWide:
    (
    let m = math.Matrix(Vector.range(24.0), (4,6));
    
    m.diagonalElements() == [0.0, 5.0, 10.0, 15.0];
    );

`test matrixDiagonalFromVector: (
    let v = Vector.range(4);
	let diag = math.Matrix.diagonal(v); 

	diag == math.Matrix([0,0,0,0, 0,1,0,0, 0,0,2,0, 0,0,0,3], (4,4)); 
    );

`test matrixOfSlicedPagedData: (
    let v1 = Vector.range(200.0).paged[50,150];
    let v2 = Vector.range(100.0, fun(x){x + 50}).paged;

    let m1 = math.Matrix(v1, (10,10));
    let m2 = math.Matrix(v2, (10,10));

    assertions.assertAllClose(
        (m1 * m1).columnMajorData(),
        (m2 * m2).columnMajorData()
        )
    );

`test matrixTrace: (
    math.Matrix.identity(100).trace() == 100
    );

`test matrixRightDivision: (
    let m1 = math.Matrix(Vector.range(100.0), (10, 10));
    let m2 = math.Matrix(Vector.range(100.0, { math.sin(_) }), (10, 10));

    assertions.assertAllClose(
        m1 / m2,
        m1 * m2.inverse()
        );
    );

`test matrixRightDivision_2: (
    let m = math.Matrix(Vector.range(4.0, { _ * 2.0 }), (2,2));
    m / 2.0 == 0.5 * m
    );

`test applyWithIndices_1: (
    m1.applyWithIndices(
        fun(val, row, col) { (val, row, col) }
        ) ==
    math.Matrix([(1.0, 0, 0), (2.0, 1, 0), (3.0, 0, 1), (4.0, 1, 1)], (2, 2));
    );

`test applyWithIndices_2: (
    let m = math.Matrix([1, 2, 3, 4], (2,2), `row);
    m.applyWithIndices(
        fun(val, row, col) { (val, row, col) }
        ) == 
    math.Matrix([(1, 0, 0), (3, 1, 0), (2, 0, 1), (4, 1, 1)], (2, 2))
    );

`test vstack_1: (
    let m1 = math.Matrix(Vector.range(4), (2,2));
    let m2 = math.Matrix(Vector.range(4), (2,2), `row);

    let stacked = math.Matrix.vstack(m1, m2);

    stacked == math.Matrix([0, 1, 0, 2, 2, 3, 1, 3], (4, 2));
    );

`test vstack_2: (
    let m1 = math.Matrix([1.0]);
    let m2 = math.Matrix([1.0, 2.0], `row);
  
    try { math.Matrix.vstack(m1, m2) }
    catch (e) { return e == "arguments must have the same number of columns" }

    return false;
    );

`test hstack_1: (
    let m1 = math.Matrix(Vector.range(4), (2,2));
    let m2 = math.Matrix(Vector.range(4), (2,2), `row);

    let stacked = math.Matrix.hstack(m1, m2);

    stacked == math.Matrix([0, 1, 2, 3, 0, 2, 1, 3], (2, 4));
    );

`test hstack_2: (
    let m1 = math.Matrix([1.0], (1,1));
    let m2 = math.Matrix([1.0, 2.0]);
  
    try { math.Matrix.hstack(m1, m2) }
    catch (e) { return e == "arguments must have the same number of rows" }

    return false;
    );

`test addWithNothing: 
(let m = math.Matrix([1,2,3]);
 assertions.assertEqual(m + nothing, m);
 assertions.assertEqual(nothing + m, m);
 );

`test moarIntegralMatrices:
(let m = math.Matrix([1]);
 assertions.assertEqual(m.rank(), 1);
 assertions.assertEqual(m.pinv(), m);
 );

`test linearAlgebraWithStridedMatrices_1:
(let m = math.Matrix([1.0, 2.0, 3.0, 4.0][,,2]);
 assertions.assertEqual(m * 2, math.Matrix([2, 6]));
);

`test linearAlgebraWithStridedMatrices_2:
(let stride = 3;
 let d = 10;
 let stridedVec = Vector.range(d * d * stride, { _ * _ })[,,stride];
 let unstridedVec = [x for x in stridedVec];
 let strided = math.Matrix(stridedVec, (d, d));
 let unstrided = math.Matrix(unstridedVec, (d,d));

 assertions.assertEqual(strided * strided, unstrided * unstrided, msg:" * ");
 assertions.assertEqual(strided + strided, unstrided + unstrided, msg:" + ");
 assertions.assertEqual(strided / strided, unstrided / unstrided, msg:" / ");
);

`test linearAlgebraWithStridedMatrices_3:
(let stride = 3;
 let d = 10.0;
 let stridedVec = Vector.range(d * d * stride, { _ * _ })[,,stride];
 let unstridedVec = [x for x in stridedVec];
 let strided = math.Matrix(stridedVec, (d, d));
 let unstrided = math.Matrix(unstridedVec, (d,d));

 assertions.assertEqual(strided * strided, unstrided * unstrided, msg:" * ");
 assertions.assertEqual(strided + strided, unstrided + unstrided, msg:" + ");
 assertions.assertEqual(strided / strided, unstrided / unstrided, msg:" / ");
);

randMatStatFun: (
fun(n:, t:, seed:) 
    {
    let pull_n = fun(n, it)
        {
        let sample = [];
        for _ in sequence(n)
        sample = sample :: (pull it);
            
        (sample: sample, it: it)
        };
        
    let v = [];
    let w = [];
    let rnorm = iterator(math.random.Normal(0, 1, seed));
        
    for i in sequence(1, t) 
        {
        let a_data = nothing;
        let b_data = nothing;
        let c_data = nothing;
        let d_data = nothing;
            
        (sample: a_data, it: rnorm) = pull_n(n * n, rnorm);
        (sample: b_data, it: rnorm) = pull_n(n * n, rnorm);
        (sample: c_data, it: rnorm) = pull_n(n * n, rnorm);
        (sample: d_data, it: rnorm) = pull_n(n * n, rnorm);
            
        let a = math.Matrix(a_data, (n, n));
        let b = math.Matrix(b_data, (n, n));
        let c = math.Matrix(c_data, (n, n));
        let d = math.Matrix(d_data, (n, n));
            
        let P = math.Matrix.hstack(math.Matrix.hstack(a, b), math.Matrix.hstack(c, d));
        let Q = math.Matrix.vstack(math.Matrix.hstack(a, b), math.Matrix.hstack(c, d));
        v = v :: (
             (P.transpose() * P) ** 4
             ).trace()
        w = w :: (
            (Q.transpose() * Q) ** 4
            ).trace()
        }
        
    return (math.stats.sd(v) / math.stats.mean(v), 
                math.stats.sd(w) / math.stats.mean(w))
    }
);

`perf
randMatStat_perf: randMatStatFun(n:5, t:10, seed:2953);

(`perf, `callResult)
randMatMul_perf: 
(
	let n = 1000;
    let seed = 1337;

    fun() { 
        let pull_n = fun(n, it)
            {
            let sample = [];
            for _ in sequence(n)
            sample = sample :: (pull it);
			
            (sample: sample, it: it)
            };

        let unif = iterator(math.random.UniformReal(0, 1, seed));

        let A_data = nothing;
        let B_data = nothing;

        (sample: A_data, it: unif) = pull_n(n * n, unif);
        (sample: B_data, it: unif) = pull_n(n * n, unif);

        let A = math.Matrix(A_data, (n, n));
        let B = math.Matrix(B_data, (n, n));

        A * B
        }
);

`test invalidDimensions: (
	let m = math.Matrix(Vector.range(6 * 2), (6,2));
	let v = math.Matrix([1,2]);
    
	assertions.assertThrows({ m * v });
	assertions.assertThrows({ m + v });
	assertions.assertThrows({ m - v });
	assertions.assertThrows({ m.inverse() })
    assertions.assertThrows({ m / v })
);
	
`test mixedTypeMatrices: (
    let v = [1,2,3.0,4.0];
    let m = math.Matrix(v)
    assertions.assertEqual(
        (m.transpose() * m)[0,0], 
        v.sum({ _ * _ })
    )                        
);


`test expm_1: (
    assertions.assertAllClose(
        math.Matrix.expm(m1).columnMajorData(),
        [51.9689562, 74.73656457, 112.10484685, 164.07380305]
        )
    );

`test expm_2: (
    let m = math.Matrix([0, 1, -1, 0], (2,2));
    try {
        math.Matrix.expm(m)
        assertions.assertTrue(false)
        }
    catch (math.LinAlgError(...)) {
        }

    true
    );
