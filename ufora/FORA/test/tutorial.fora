/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/
/*
Welcome to FORA. This document will serve as a very brief introduction to the
language, written as a set of unit tests (containing actual, working code).

FORA is a dynamically typed, functional programming language that can be
dynamically optimized and parallelized.

*/

/*1. comments
	we support two styles of comments:
	single line comments and c-style comments /* */ with one difference:
	c-style comments may be nested, so that
		/* a comment */
	may be nested inside of other comments
	
	Also like C, the FORA language is whitespace insensitive.
*/

/*module structure and unit tests
	
	modules live in .fora files, and contain a set of object declarations
	consisting of a FORA expression (metadata), a name, a ":", and an expression.
	
	Module members must be delimited by ;'s.  Any module member whose metadata
	is marked with `test will be evaluated and tested against 'true' by the
	unit-test framework.
	
	These module members are available to all the other module members.
*/

//here is a very simple unit test
`test	aModuleMember:	true;

//define a module member that we'll use in a test
aValue:	100;

//use it in a test
`test	usingAValue:	aValue is 100;

/*numbers and strings

	FORA supports decimal and floating point notation of numbers such as
		
		1000 - a 64 bit integer
		1.00 - a 64 bit floating point number
		true - a boolean
		false - also a boolean
	
	numbers may have an optional postfix consising of 'f', 's', or 'u'
	indicating 'floating', 'signed', or 'unsigned', and followed by a number of
	bits (32 or 64 for floats, 8,16,32,or 64 for integers).
	
	Strings may be contained in between "", '', or """ """ patterns, as
	in python. a backslash may be used as an escape sequence in "" or ''
	in front of ", ', n, t, characters, etc.
	
	""" strings allow for newlines, tabs, and ""'s inside to be faithfully
	represented.
	
	\x may be used to identify a hexademical character in a string
*/
`test	constants_1:	"a string" is 'a string';
`test	constants_2:	"\"" is '"';
`test	constants_3:	""" " """ is ' " ';
`test	constants_4:	"\x0A" is '\n';
`test	constants_5:	true is true;
`test	constants_6:	false is false;

//'nothing' is a constant with no data, equivalent to "Unit" in some languages
`test	constants_7:	nothing is nothing;	
												

/*operators

	FORA values may be combined using operators to produce new values. The result
	is dependent both on the operator and on the kinds of values being combined.
	
	The lowest precedence operator is the 'is' operator which tests its operands
	for exact identity, returning true or false.
	
	An operator is any sequence of characters from the list
		
		/|-+=~:<>?!#$%^&*
	
	When an operator is found, we glom all 'operator characters' together.
	so **** is a single operator, not two '**' operators, or somesuch.
	
	':', '//' and '=' by themselves are not valid operators.
	
	The meaning of any given operator expression is dependent on the types
	of objects being used.  Strings, numbers, and other built-in data types
	have a standard set of operators. User-defined classes can override
	any operator they want.
	
	Operators have a standard precedence hierarchy with the rule that
	longer operators are higher precedence than shorter operators.
	
	'and' and 'or' operators are special, as they are short-circuiting.
*/
`test	ops_1:	"a string plus " + "a string" is "a string plus a string";
`test	ops_2:	1 + 1 is 2;
`test	ops_3:	2 + 3 * 4 is 14;
`test	ops_4:	10.0 ** 2 is 100.0;

/* types

	FORA is a "dynamically typed" language, in the sense that values in a running
	program may take a variety of types and the program is still well defined.
	However, every particular FORA value has a type, and that type is itself a
	value that can be manipulated.
	
	A type object is primarily used in FORA for converting between one object
	type an another, and for enforcing constraints.
*/

//you can get the type of an object using the '`TypeJOV' constant
`test	type_1:		`TypeJOV(10) is Int64;
`test	type_2:		`TypeJOV(10.0) is Float64;
`test	type_3:		`TypeJOV("a string") is String;
`test	type_4:		`TypeJOV(`aSymbol) is Symbol;
`test	type_5:		`TypeJOV(#ATag) is Tag;
`test	type_6:		`TypeJOV(Int64) is JOV;	//Int64 is a 'Judgment'
`test	type_7:		`TypeJOV(`TypeJOV) is Symbol;

//type conversion can be triggered by calling a type with an argument
`test	type_8:		String(10) is "10";
`test	type_9:		Int64(10.5) is 10;

//types by convention are always capitalized
`test	type_10:		`TypeJOV(nothing) is Nothing;


/*variables and expressions

	Expressions inside of ()'s are evaluated as a single block.
	
	A FORA value may be bound to a variable using a let expression. Variables
	introduced in this way have a scope defined by the let expression.
	
*/
`test	let_1:	(let x = 1; x + 1) is 2;
`test	let_2:	(let x = 1; (let x = 2; x) is 2);
`test	let_3:	(let x = 1; (let x = 2; x); x is 1);

/*statements, assignments and loops

	In FORA, statements may be separated by ';', where 'let v=e' is a statement.
	We may group statements together either using ()'s or {}'s.  {}'s themselves
	always terminate an expression.  The ';''s are optional, but including them
	generally makes code more readable.
	
	Primarily, we use them to separate lets and assignments, in which we write
		
		var = expr
	
	to update the value of a named variable. We may only assign values to
	variables in our local scope.
	
	We may write
		while (condition)
			expr
			
	in the standard way.
*/
`test	statement_1:	(
		let x = 0;
		while (x < 10)
			x = x + 1;
		x is 10
		);
`test	statement_2:	(
		let x = 0;
		let y = 0;
		while (x < 10)
			{
			x = x + 1;
			y = y + x;
			}
		y is 55
		);
`test	statement_3:
		(if (1 < 2)
			"yes"
		else
			"no"
		) is "yes"
		;
`test	statement_4: (
		let x = 0;
		if (1 < 2)
			x = x + 1;
		x is 1
      );
//the same thing without semicolons works, and then we don't
//need the {}'s because ; terminates the member statement
`test	statement_5:
		let x = 0
		if (1 < 2)
			x = x + 1
		x is 1
		;
//here's where you really do need the ';'
`test	statement_6: (
		let x = 1;		//without the ; the parser would think this was
		-1 + x is 0		//all one expression
        );

/*	functions

	FORA is a functional programming model - functions are values that
	may be passed around and 'called' in various ways.  All functions are like
	lambda functions in other languages, in that they don't have names themselves.
	
	Any variables that they refer to that come from the surrounding environment
	are copied into the function when we create it.
	
	Within a function body, 'return' exits the function with the given value
	immediately.
*/
`test	function_1:
			//declare a function
			let f = fun(x) { x + 1 }
			//f is a value and can be compared to itself
			f is f
			;
`test	function_2:
			let f = fun(x) { x + x }
			//we can call it with any kind of argument
			f(10) is 20 and f("asdf") is "asdfasdf"
			;
`test	function_3:
			//functions can return functions
			let adder = fun(x) { fun(y) { x + y } }
			adder(10)(20) is 30
			;
`test	function_4:
			//when functions are created, their external variable references
			//are copied:
			let y = 10
			
			let f = fun(x) { x + y }
			//at this point, 'f' has 'y' bound to '10'
			
			y = 1000
			
			f(10) is 20	//because 'f' has '10' in it, not 1000. "y=1000"
						//only affects the main scope, not 'f'
			;

/* recursive functions

	Functions defined in a 'let' may refer to themselves and to other values
	defined in the 'let'.
	
*/


`test	recursion_1:
			//factorial refers to itself
			let factorial = fun(x) { if (x < 1) 1 else x * factorial(x-1) }
			factorial(5) is 120
			;
`test	recursion_2: (
	//these two functions are mutually recursive
	let f = fun(x) { if (x < 1) 1 else g(x - 1) + x },
	g = fun(x) { if (x < 1) 1 else f(x - 2) + x };
				
	f(5) is 5+4+2+1+1
);

/* tuples

	FORA tuples are the basic way you can produce compound structures. tuple
	elements may be named or unnamed, and may be accessed by position or by
	name.

*/
//we can create and compare tuples
`test	tuple_1:	(1,2,3) is (1,2,3);
`test	tuple_2:	(1,2,3)[0] is 1;
`test	tuple_3:	size((1,2,3)) is 3;

//here's the empty tuple
`test	tuple_4:	size( () ) is 0;

//and here's a tuple of 1 element
`test	tuple_5:	(1,) is (1,);

//we can add them and take subranges
`test	tuple_6:	(1,2,3) + (4,5,6) is (1,2,3,4,5,6);
`test	tuple_7:	(1,2,3,4,5,6)[2,4] is (3,4);

//they can have different kinds of things in them
`test	tuple_8:	(1,2,3.0,"asdf")[3] is "asdf";

//we can name the elements using ":"
`test	tuple_9:	(x: 10, y:20).x is 10;
`test	tuple_10:	(x: 10, y:20).y is 20;
`test	tuple_11:	(x: 10, y:20)[0] is 10;

//and intermix named an unnamed elements
`test	tuple_12:	(1,2,third:3,4).third is 3;

//we can get the names of a tuple out using the ..names operator
//in general, '..' is an alternate form of member access that we use
//when we're accessing objects with arbitrary members.  if we didn't,
//it would be confusing to find out the names of a tuple like
//(names: 10, 20).

`test 	tuple_13:	(a:10, 20, c:30)..names is (`a,nothing,`c);

//similarly, tuples expose an 'apply' operation that allows you to apply
//a function to each member of the tuple
`test 	tuple_14:	(a:10, b: "20")..apply(fun(z){z+z}) is (a:20, b:"2020");

/* patterns

	FORA allows you to pack and unpack objects using patterns. A pattern
	queries an object to see if it fits the pattern - if it does, it unpacks
	the values within and gives some of them names in the new lexical scope.
	If not, it moves to the next pattern, until it runs out of options and
	throws an exception.
	
	There are two ways to invoke a pattern. One is with a match expression as in
	
		match (x) with (p) { e }
	
	where 'p' is a pattern an 'e' is an expression.  You may use as many
	(p){e} terms as you like.
	
	A pattern consists of a pattern match followed by an optional name.
	
	Pattern matches are:
		_					match anything
		(p1,p2,..., pn)		matches a tuple against patterns p1 through pn
		(p1, *args)			match a tuple, with any extra arguments getting
								placed into *args
		p1 or p2			checks p1 first. if it matches, stop, otherwise
								check p2. p1 and p2 must bind exactly the
								same variables
		{p}					match 'p' against the type of the argument
		expr(p)				evaluate expression 'A', and then ask it whether
		(expr)(p)				it matches the given value. if so, match
								the result against 'p'.
		expr				equivalent to (expr)(...) provided that 'expr' is
								a single term that's not c
		
	
	In a match, we search through the terms until we find one that matches.
	Unlike ML, we don't insist that the terms in the match are
	mutually exclusive, and we search them in order.
	
	Note that functions follow the same syntax as matches.  In essence, a
	function is a set of pattern matches that haven't been given an operand.
	In the functions we defined above, we gave only one pattern term. But a
	function may have as many (pat) {body} terms in a row as it likes.
*/

`test	pattern_1:	match (1) with (x) { x is 1 };

//we can also match individual values 
`test	pattern_2:	match (1) with (0) { "zero" } (1) { "one" } is "one";

//we can match tuples
`test	pattern_3:	match (1,2,3) with (x,y,z) { (x,y,z) is (1,2,3) };

//which means we can select on the size and shape of the tuples
`test	pattern_4:
			match (1,2,3) with
					//this one doesn't match
					(x,y) { false }
					//this one does
					(x,y,z) { true };

//in a tuple pattern match, we may use '*args' to mean 'all the remaining
//elements. you may not use more than one *args per pattern.
`test	patternStarArgs_1:
					
					match (1,2,3)
						with (x,*args) { x is 1 and args is (2,3) }
					;
					
`test	patternStarArgs_2:
					
					match (1,2,3,4,5,6)
						with (first,*args, last) {
							first is 1
								and args is (2,3,4,5)
								and last is 6
							}
					;

//in functions, we might do this
`test	pattern_6:	let f = fun (x) { "one thing" }
						(x,y) { "two things" }
						(*args) { "many things" }
					f(2,3) is "two things" and
					f(3,4,5,6) is "many things"
					;

//when calling a function, we may also pack tuples in as arguments
`test	pattern_7: 	let f = fun(x,y,*args) { x + y + size(args) }
					
					f(1,2,3,4,5) is 1+2+size((3,4,5)) and
					f(1, *(5,3,4)) is 1+5+size((3,4))
					;
//this allows us to implement some very generic patterns:
`test	pattern_8:	let callWithOneInFront =
							fun(f) { fun(*args) { f(1,*args) } }
					
					let addsOne = callWithOneInFront(fun(x,y) { x + y })
					
					addsOne(10) is 11
					;
					
//we may also match against the names of things
`test	pattern_9:
					//"x:" means 'find the argument named 'x'. we put the
					//pattern to bind it with after the ':'
					let f = fun(x: x, y: y) { x + y * 2}
					
					//when calling a function (or creating a tuple) we can
					//name our elements with the ':' operator.
					f(x:10,y:20) is 50 and
					f(y:20,x:10) is 50
					;

/* iterators

	FORA provides iterators through a for/yield pattern.  Iterators are
	functions whose 'call' operation returns either a tuple of the iterator
	value and the next iterator, or 'nothing'.  You may create an iterator
	using 'yield' in a function.

	Similarly, you may write 'for pat in proc { expr } to iterate through
	'proc'.
*/

//an iterator to run from a to b
sequence:	fun(a,b) {
	while (a < b) {
		yield a
		a = a + 1
		}
	};
sum: fun(process) {
	//nothing + x is x for all x
	let s = nothing;
	
	for x in process {
		s = s + x
		}
	
	return s
	};

`test	iterator_1:	sum(sequence(0,10)) is 45;

//(expr for pat in expr) creates a new iterator out of an old one in place
`test	iterator_2:	sum((x * 2 for x in sequence(0,10))) is 90;


/* try-catch and exceptions

	FORA provides a standard try-catch model
*/

`test	tryCatch_1:	try { throw 10 } catch(x) { x is 10 };

`test	tryCatch_2:	try { throw (1,2,3) }
								//catch performs pattern matching on its argument.
								//here, the first term doesn't match but the second
								//one does
								catch 	((a)) { false }
										((x,y,z)) { true }
							;

`test	tryCatch_3:	try {
							//if we don't match, the catch is re-thrown.
							try { throw (1,2,3) } catch ((a)) { false }
							}
						catch((x,y,z)) { true }
						;

/* vectors

	Vectors form the basic building block in FORA for datasets, containing
	ordered collections of objects.
*/

//a list comprehension becomes a vector
`test	vector_1:	let v = [x for x in sequence(0,100)]
					size(v) is 100 and
						v[0] is 0 and
						v[99] is 99
						;


//or we can use the built-in 'range' function to produce a vector
`test	vector_2:	Vector.range(100) == [x for x in sequence(0,100)];

//we may use the 'apply' function to get a new vector from an old one
//by calling the function with every element in the vector
`test	vector_3:	let v = Vector.range(100).apply(fun(z) { z * z })
					
					v[0] is 0 and
						v[1] is 1 and
						v[10] is 100
				;

//we may use the slice operator to get a subvector. the slice operator is
//like python - if you don't specify a value, it takes the full range
//in that dimension
`test	vector_4:	let v = Vector.range(100)
					
					v[0,10] == Vector.range((0, 10)) and
					v[20,30] == Vector.range((20, 30)) and
					v[20,] == Vector.range((20, 100)) and
					v[,20] == Vector.range((0, 20))
				;

//vector exports a 'sum' operation
`test	vector_5:	Vector.range(100).sum() is sum(sequence(0,100));

//and a 'cumsum' operation
`test	vector_6:	Vector.uniform(100, 1).cumsum() == [x for x in sequence(1,101)];

//vectors may be added together to produce concatenation
`test	vector_7:	Vector.range((0,100)) + Vector.range((100,200))
													== Vector.range((0,200));

//we can make a vector directly
`test	vector_8:	size([0,1,2,3]) is 4;

//and vectors support the 'in' operator
`test	vector_9:	10 in Vector.range(100) and 101 not in Vector.range(100);

/* alternatives

	You may introduce an alternative by writing "#Tag(args)", and you may
	unpack an alternative by writing #Tag(pat) in a pattern.
	
	As an example
	*/
`test alternative_1:
		let l = #Head(10, #Empty())
		
		let sum =
			//define a recursive function to scan over the list
			fun	(#Head(i,t)) { i + sum(t) }
				(#Empty())	{ 0 }
				
		sum(l) is 10
			and
		sum(#Head(20, l)) is 30
		;

//alternatives have their own pattern matching form.  Be careful -
//a pattern that looks like 'X' matches Everything_ since 'X' is just an
//identifier.  However X(...) matches something Tagged_ with 'X' which is
//different.
`test	alternative_2:
		match (#X(10)) with
			//note that X is a 'tag'. this syntax is triggered
			//by following the symbol with ().  the 'v' grabs the actual
			//object being matched.
			(#X(val) v) {
				val is 10
					and v is (#X(10))
				};
			
/*

	Note that in this case, 'sum' doesn't depend on the types of the objects
	inside the tags - its behaviour is entirely determined by the tags themselves.
	
*/



/* objects

	Just as in python, every individual operation on a FORA value gets dispatched
	depending on the type of the object. As a result, we can fully override
	the behaviour of an object in various settings.
	
	In FORA, we introduce objects the same way we create lambda functions.  The
	object binds any data elements in the surrounding context that it uses
	as private member variables that are then accessible. These variables are
	accessible within the members of the object, as are all the other
	members of the object.

*/

//create an object that has no data members - its essentially a constant
testObject:
	object {
		//a couple of members
		aValue: 100;
		
		//we can access other members directly
		member1: aValue + 100;
		
		//this is how we declare member functions
		member2: fun() { "a member function" };
		
		//"call" operation
		operator ()(x) { x + 1 };
		
		//"getitem" operation
		operator [](ix) { String(ix) };
		
		//type conversion
		convert(String) { "testObject" };
		convert(Int64) { 100 };
		
		//operators
		operator +(other) { 10 + other };
		operator *(other) { 10 * other };
		right operator %%%() { "a weird operator" };
		left operator ^&^() { "a different weird operator" };
		
		//this gets called by 'other' if 'other' doesn't know how to apply a 
		//+ on testObject
		reverse operator +(other) { String(`TypeJOV(other)) +
									" didn't know what to do with testObject" };
		};

//and show how it behaves
`test	object_1:	testObject.member1 is 200;
`test	object_2:	testObject.member2() is "a member function";
`test	object_3:	testObject(10) is 11;
`test	object_4:	testObject[20] is "20";
`test	object_5:	testObject + 30 is 40;
`test	object_6:	testObject * 30 is 300;
`test	object_7:	String(testObject) is "testObject";
`test	object_8:	Int64(testObject) is 100;
`test	object_9:	(testObject %%%) is "a weird operator";
`test	object_10:	(^&^ testObject) is "a different weird operator";
`test	object_11:	(1 + testObject) is "Int64 didn't know what to do with " +
												"testObject";

//create a constructor for a simple object
objectConstructor:
	fun(inX,inY) {
		object {
			x: inX;
			y: inY;
			sum: x + y;
			getTuple: fun() { (x,y) };
			returnYourself: fun() { self };
			}
		}
	;

`test	objectCons_1:	objectConstructor(10,20) is objectConstructor(10,20);
`test	objectCons_2:	objectConstructor(10,20).x is 10;
`test	objectCons_3:	objectConstructor(10,20).sum is 30;
`test	objectCons_4:	objectConstructor(10,20).getTuple() is (10,20);
`test	objectCons_5:	let ob = objectConstructor(10,20)
					ob.returnYourself() is ob
					;

//objects also expose a general mechanism to control how they respond to
//any operation performed on them.
//	"...(*args)"
//means
//	"route any signal I get to this function"
//and allows you to completely control the behavior of the object.
//every operation on 'o' gets translated into a call to this function
o: object {
		...(*args) { args }
};
`test	objectGeneric_1:		o.asdf is (`Member, `asdf);
`test	objectGeneric_2:		o[10] is (`GetItem, 10);
`test	objectGeneric_3:		o(1,2,3) is (`Call, 1,2,3);
`test	objectGeneric_4:		o * 10 is (`Operator, `*, 10);

						//`( is the 'raw call' operation. In particular
						//x.m   is the same thing as x `(`Member, `m) etc.
`test	objectGeneric_5:		o `(1,2,3) is (1,2,3);

//objects can overload pattern matching constructs
//here we define an object we can use later in tests
matchObject:
	object {
		//allow this object to match an 'A'
		operator match(#A) { (1,2,3) };
		//allow it to match a 'B'
		operator match(#B) { (field1: 10, field2: 20) };
	};

	
`test	objectMatching_1:
				match (matchObject) with (#A(*args)) { args is (1,2,3) };
`test	objectMatching_2:
				match (matchObject) with
						(#B(field1: x, field2: y))
								{ x is 10 and y is 20 };
`test	objectMatching_3:
				match (matchObject) with (#SomeRandomTag(...)) 	{ false }
										  (_) 						{ true }
										  ;
										  
