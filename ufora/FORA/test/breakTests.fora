/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/

`test while1: (
	while (true) break
	true
);

`test while2: (
	while (break) nothing
	true
);

`test while3: (
	while (break) return false
	true
);

`test while4: (
	while (while (break) { return false }; true ) return true
	false
);

`test while5: (
	while (true) {
		while (true) break
		return true
		}
	false
);

`test while6: (
	while (true) {
		while (break) { }
		return true
		}
	false
);

`test for1: (
	for x in [1, 2, 3] { break; return false }
	true
);

`test for2: (
	for x in break { return false }
	true
);

`test for3: (
	for x in [1, 2, 3] if break { return false }
	true
);

`test for4: (
	for x in [1, 2, 3] for y in break { return false }
	true
);


`test comprehension1: (
	//Apparently, these parens are mandatory if this is to parse.
	//An explicit semicolon alone does not suffice.
	((return false) for x in break)
	true
);

`test comprehension2: (
	[(return false) for x in break]
	true
);

`test comprehension3: (
	((break; return false) for x in [1, 2, 3])
	true
);

`test comprehension4: (
	[(break; return false) for x in [1, 2, 3]]
	true
);

`test comprehension5: (
	((return false) for x in [1, 2, 3] if break)
	true
);

`test comprehension6: (
	[(return false) for x in [1, 2, 3] if break]
	true
);

`test comprehension7: (
	((return false) for x in [1, 2, 3] for y in break)
	true
);

`test comprehension8: (
	[(return false) for x in [1, 2, 3] for y in break]
	true
);

`test break1:
	try {
		`Function("break")
		false
		}
	catch (...) { true };

`test break2:
	try {
		`Function("fun () { break }")
		false
		}
	catch (...) { true };

`test break3:
	try {
		`Function("object { m: break }")
		false
		}
	catch (...) { true };

`test break4:
	try {
		`Function("while (true) fun () { break }")
		false
		}
	catch (...) { true };

`test break5:
	try {
		`Function("while (true) object { m: break }")
		false
		}
	catch (...) { true };

