/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/
`test   tupleIndexing_1:
            (
            let t = (0,1,2);
            t[0] is 0;
            );
            
`test   tupleIndexing_2:
            (
            let t = (0,1,2);
            t[-1] is 2;
            );
            
`test   tupleIndexing_3:
            (
            let t = (0,1,2);
            t[-2] is 1;
            );
            
`test   tupleIndexing_4:
            (
            let t = (0,1,2);
            t[-3] is 0;
            );
            
`test   tupleIndexing_5: 
            (
            let t = (0,1,2);
            try {
                t[-4];
                false;
                }
            catch (...)
                {
                true;
                }
            );  

`test   tupleIndexing_6:
            (
            let t = (0,1,2);
            try {
                t[4];
                false;
                }
            catch (...)
                {
                true;
                }
            );
            
`test   tupleIndexing_7:
            (
            let t = `TypeJOV((1,2,3));
            t[-1] is Int64;
            );

`test	tupleCreate_1: size(()) == 0u;

`test	tupleCreate_2: size((1,)) == 1u;

`test	tupleCreate_3: size((1,2)) == 2u;

`test  structInterface_3 : size((ha: 1, ro: 2)) == 2 ;

`test  structInterface_4 : (ha: 1, ro: 2)..apply(fun(z) { z ** 2 }).ro is 4.0 ;

`test  structInterface_5 : size(`TypeJOV((ha: 1, ro: 2))) is 2 ;

`test  tupleInterface_2 : (let x = (1,2); `TypeJOV(x)(x) is x );

`test  tupleAssign_1 : (let x = 0; let y = 0; (x,y) = (1,2); x+y is 3);

`test  tupleApply_1 : (let x = (1,3)..apply(fun(z) { z + z });x[0] + x[1] is 8 );

`test  tupleApply_2 : (  let x = (1,3)..apply(fun(x,y) { x + y }, (2,7));x[0] * 100 + x[1] is 310 );

`test  tupleApply_3 : (  (1,2)..apply(fun(x,y) { (x, y) }, (`a,`b)) is ((1,`a), (2, `b)) );

`test  tupleApply_4 : (  (1,2)..apply(fun(x,y) { ((y): x) }, (`a,`b)) is ((a:1), (b:2)) );

`test tupleApply_5 :
    assertions.assertEqual((1,2,3)..apply( { _ ** 2.0 } ), (1.0,4.0,9.0));

`test tupleApply_6 : 
    assertions.assertEqual((1,2,3)..apply(fun(x,y) { x + y }, (4,5,6)), (5,7,9));

`test tupleApply_7:
    assertions.assertEqual(
        (1,2)..apply(
            fun(x,y,z) { (x,y,z) }, 
            (3,4,5), (6,7)
            ), 
            ((1,3,6),(2,4,7))
        );
`test tupleApply_8:
    assertions.assertEqual(
        (1,2)..apply(fun(x,y) { ((y): x) }, (`a, `b)), ((a: 1), (b: 2))
        );

`test tupleApplyWithIndex_1: (
    let t = (1,2,3);
    let f = fun(elt, ix) { (elt: elt, ix: ix) };
    assertions.assertEqual(
        t..applyWithIndex(f), 
        ((elt:1, ix:0), (elt:2, ix:1), (elt:3, ix:2))
        )
    );

`test tupleApplyWithIndex_2: (
    let t1 = (1,2,3);
    let t2 = (4,5,6,7)
    let f = fun(elt1, elt2, ix) { (elt1:elt1, elt2:elt2, ix:ix) };
    assertions.assertEqual(
        t1..applyWithIndex(f, t2), 
        ((elt1:1, elt2:4, ix:0), 
         (elt1:2, elt2:5, ix:1), 
         (elt1:3, elt2:6, ix:2))
        )
    );

`test  tupleInstanceCall_1: (	(Int64, fun(x){x+1})(("20", 5.6)) is (20,6.6) );

`test  tupleSlicing_1 : (  size((1,2,3)[0,2]) is 2 );

`test  tupleSlicing_2 : (  size((1,2,3)[0,1]) is 1 );


`test  tupleMemberAccess_1 :    (1,2.5)[0]  is 1;

`test  tupleMemberAccess_2 :    (1,2.5)[1]  is 2.5;

`test  tupleMemberAccess_3 : (  let t = ((1,2),(3,4)); t[1][0] is 3 );

`test  structmemberAccess_1 :  (ha: 1, ro: 2).ha  is 1;

`test  tupleInLoop_1 : (  
	let z = (1, 2);
	while (z[0] < 100)
		z = (z[0]+1,z[1]+2)
	z[1] is 200
	);

`test tupleNames_1:	(a:10, 20, c:30)..names is (`a,nothing,`c);

`test tupleEquality_1:	() == ();

`test tupleArbitraryNameCreation_1:	( let x = `asdf; ((x):10) is (asdf: 10) );
`test tupleArbitraryNameCreation_2:	( let x = `asdf; ((x):10, b:20) is (asdf: 10, b:20) );
`test tupleArbitraryNameCreation_3:	( let x = `asdf; (a: 30, (x):10, b:20) is (a:30, asdf: 10, b:20) );

`test tupleToString_1:	String((1,2,3)) is "(1, 2, 3)";
`test tupleToString_2:	String((a: 1,2,3)) is "(a: 1, 2, 3)";
`test tupleToString_3:	String((a: 1,abc: 2,d: `asdf)) is "(a: 1, abc: 2, d: `asdf)";


`test	tupleStructurematchBasic_1:	(1,) `(`StructureMatch, ((nothing,false),)) is (1,);
`test	tupleStructurematchBasic_2:	(1,) `(`StructureMatch, ((nothing,true),)) is ((1,),);
`test	tupleStructurematchBasic_3:	() `(`StructureMatch, ((nothing,true),)) is ((),);

n: (nothing, false);
`test	tupleStructurematch_1:	(1,2,3,4) `(`StructureMatch, (n,n,n,n)) is (1,2,3,4);
`test	tupleStructurematch_2:	(1,2,3,4) `(`StructureMatch, (n,n,#Extras,n,n)) is (1,2,(),3,4);
`test	tupleStructurematch_3:	(1,2,3,4) `(`StructureMatch, (n,#Extras,n)) is (1,(2,3),4);
`test	tupleStructurematch_4:	(1,2,3,4) `(`StructureMatch, (n,n,#Extras)) is (1,2,(3,4));
`test	tupleStructurematch_5:	(1,2,3,4) `(`StructureMatch, (#Extras,n,n)) is ((1,2),3,4);
`test	tupleStructurematch_6:	(1,2,3,4) `(`StructureMatch, (#Extras,n)) is ((1,2,3),4);
`test	tupleStructurematch_7:	(1,2,3,4) `(`StructureMatch, (n, #Extras)) is (1,(2,3,4));
`test	tupleStructurematch_8:	(1,2,3,4) `(`StructureMatch, (#Extras,)) is ((1,2,3,4),);

`test	tupleStructurematch_9:	(x:1,2,3,4) `(`StructureMatch, (n,n,n,#Extras)) is (2,3,4,(x:1));
`test	tupleStructurematch_10:(1,2,x:3,4) `(`StructureMatch, (n,n,n,#Extras)) is (1,2,4,(x:3));
`test	tupleStructurematch_11:(x:1,y:2) `(`StructureMatch, ((`x,false),(`y,false))) is (x:1,y:2);
`test	tupleStructurematch_12:(x:1,y:2,x:3,y:4) `(`StructureMatch, ((`x,false),(`x,false),(`y,false),(`y,false))) is (x:1,x:3,y:2,y:4);
`test	tupleStructurematch_13:(x:1,x:2,y:3,y:4) `(`StructureMatch, ((`x,false),(`y,false),#Extras)) is (x:1,y:3,(x:2,y:4));

`test	tupleStructurematch_14:() `(`StructureMatch, ()) is ();
`test	tupleStructurematch_15:() `(`StructureMatch, (#Extras,)) is ((),);

`test	tupleStructurematch_16:(1,2,3,4,5) `(`StructureMatch, ((nothing, false), #Extras, (nothing, false))) is (1,(2,3,4),5);
`test	tupleStructurematch_17:(x:1,2,3,4,5) `(`StructureMatch, ((`x, false), #Extras, (nothing, false))) is (x:1,(2,3,4),5);
`test	tupleStructurematch_18:(x:1,y:2,z:3) `(`StructureMatch, ((`x,true), (`y,true), (`z,false))) is (x:(1,), y:(2,), z:3);
`test	tupleStructurematch_18_2:() `(`StructureMatch, ((`x,true),)) is (x:());
`test	tupleStructurematch_19:(x:1,) `(`StructureMatch, ((`x,true),)) is (x:(1,));
`test	tupleStructurematch_20:(x:1,) `(`StructureMatch, ((`x,false),)) is (x:1);
`test	tupleStructurematch_21:(x:1,y:2,z:3) `(`StructureMatch, ((`x,true), #Extras, (`z,false))) is (x:(1,), (y:2,), z:3);
`test	tupleStructurematch_22:(x:1,y:2,z:3) `(`StructureMatch, ((`x,true), #Extras, (`z,true))) is (x:(1,), (y:2,), z:(3,));
`test	tupleStructurematch_23:(x:1,y:2,z:3) `(`StructureMatch, ((`x,false), #Extras, (`z,true))) is (x:1, (y:2,), z:(3,));

`test	tupleStructurematch_24:(1,2) `(`StructureMatch, ((nothing,false), (nothing, false), (nothing, true), (nothing, true), (`z,true))) is (1,2,(),(),z:());

`test	tupleGt_1: ((1,) > ());
`test	tupleGt_2: ((1,2) > (0,));
`test	tupleGt_3: ((1,2) > (0,8, 1));

`test	tupleLt_1: (() < (4,5));
`test	tupleLt_2: ((1,2) < (6,7,8));
`test	tupleLt_3: ((1,2,4) < (1,2,5));

`test	makeNamedTupleFromPair: `MakeNamedTupleFromPair(`hai, 2) == (hai: 2,);

`test tuple_replication_1: ( (1,) * 3 == (1,1,1) );
`test tuple_replication_2: ( (1, 2) * 3 == (1,2,1,2,1,2) );
`test tuple_replication_3: ( (1, ) * 0 == () );
`test tuple_replication_4: ( (1, ) * -1 == () );

`test   reverse_0: reverse(()) == ();
`test   reverse_1: reverse((1,2,3,4,5)) == (5,4,3,2,1);

`test range_1: Tuple..range(10) is (0,1,2,3,4,5,6,7,8,9);
`test range_2: Tuple..range(0) is ();
`test range_3: Tuple..range(-10) is ();

`test namify_1: (
    let t1 = (`a, `b, `c);
    let t2 = (1,2,3);
    
    assertions.assertEqual(`tupleNamify(t1, t2), (a: 1, b: 2, c: 3));
    );

`test namify_2: (
    let t1 = (`a, `b, `c);
    let t2 = (d:1,e:2,f:3);
    
    assertions.assertEqual(`tupleNamify(t1, t2), (a: 1, b: 2, c: 3));
    );

`test namify_3: (
    let t1 = (`a, nothing, `c);
    let t2 = (1,2,3);
    
    assertions.assertEqual(`tupleNamify(t1, t2), (a: 1, 2, c: 3));
    );

`test namify_4: (
    let t = (1,2,3);
    assertions.assertThrows(fun() { `tupleNamify(t, t) })
    );

`test namify_5: (
    let t = (1,2,3);
    assertions.assertThrows(fun() { `tupleNamify(t, t + t) })
    );

`test namify_6: (
    let t1 = (`a,) * 100
    let t2 = (1, 2, 4);
    let t3 = (3, 4, 4)
    let res = nothing; 
    for ix in sequence(1000) { 
        res = res + size(`tupleNamify(t1, Tuple..range(100))); 
        res = res + size(`tupleNamify(t1, Tuple..range(100))) 
        } 
    res

    true;
    );

`test namify_7: (
    let t1 = (`a,) * 100
    let t = nothing
    let res = nothing; 
    for ix in sequence(1000) { 
        t = `tupleNamify(t1, Tuple..range(100))
        res = res + size(t); 
        res = res + size(`tupleNamify(t1, t)) 
        } 
    res
    
    true
    );

`test tuple_name_dedup_1: `tupleSortAndDedupNames((x: 10, y: 20)) is (x:10, y:20);
`test tuple_name_dedup_2: `tupleSortAndDedupNames((y: 10, x: 20)) is (x:20, y:10);
`test tuple_name_dedup_3: `tupleSortAndDedupNames((10, 20)) is ();
`test tuple_name_dedup_4: `tupleSortAndDedupNames((x: 10, x: 20, y:30, y:40)) is (x:10, y:30);
`test tuple_name_dedup_5: `tupleSortAndDedupNames((x: 10, y:30, x: 20, y:40)) is (x:10, y:30);
`test tuple_name_dedup_6: `tupleSortAndDedupNames((x: 10, y:30, "this should be removed", x: 20, y:40)) is (x:10, y:30);

`test tuple_name_dedup_7: (
    let x = 0
    let res = 0
    let res2 = 0
    while (x < 100000000) {
        x = x + 1
        res = res + `tupleSortAndDedupNames((y: x+1, x:x)).x
        res2 = res2 + x
        }

    res == res2
    );
