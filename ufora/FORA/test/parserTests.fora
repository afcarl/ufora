/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/
/*************
tests to verify the basic integrity of FORA expressions, including
'let' binding behaviour, 'is', 'and', 'or', etc.
**************/

`test  parsing_1 : (  1 +
//this is a comment
2 is 3
);

`test  parsing_2 : (let x = 0; x = x + 1; x is 1 );

`test  parsing_3 : (5 is 0) is false;

`test  parsing_4 : (  (if (5 is 0) { 1 } else {0}) is 0 );

//parsing of symbols
`test  parsing_6 :  (`asdf; true);

`test  parsing_7 :  `.. true;

`test  parsing_8 : ( `. true );

//order of operations
`test  parsingIs_1 : (  (1 is 2) is false);

`test  parsingIs_2 : 1+1 is 2;

`test  andOr_1 : ( (2 and 3) is true);

`test  andOr_2 : (  (0 or 3) is true);

`test  andOr_3 : ( (0 and 3) is false );

`test  andOr_4 : true and true or false and false ;

`test  andOr_5 : (  (true and false or false and true) is false );

`test  andOr_6 : false and false or true and true;

`test  andOr_7 : ( true or false );


`test  operatorAssociativity_1 : (1+2-3+4-5+6 is 5 );

`test  operatorAssociativity_2 : (1+2*3+4-5*6/3 is 1 );

`test  operatorAssociativity_3 : 1+1 is 2 is true;

`test  isNot: 1 is not 2;
`test  isNot_2: not (1 is not 1);
`test  isNot_3: not false;


//let bindings
`test  let_1 : (let x = 10; x is 10 );

`test  multiLet_1 : (let x = 20; let x = 10;  x is 10 );

`test  controlFlow_1 : ( (try { throw 10 + 1 } catch (x) { x }) is 11 );

`test  recursiveLet_1 : ( let f = fun() { f }; f is f() );

//throw vs. operators
`test  trycatch :   try { throw 10 + 1 } catch (x) { x } is 11;
`test  trycatch_2 :   try { throw 10 is 1 } catch (x) { x } is false;


//you can concatenate expressions - there's an implicit ';' in there
`test	semis_1:	(1 2 3) is (1;2;3);

//;'s really are optional - they're there to make sure that
//stuff can be separated
`test	semis_2: (
	let x = 1
	let y = 10
	while (x < y)
		x = x + 1
	x is 10
    );
	
`test	structure_1: (if (true) if (false) false else true else false);

`test	structure_2: (1 + (if (true) 2 else 3 + 4)) is 3;

`test	structure_3: (1 + (if (true) { 2 } else { 3 }) + 4) is 7;

`test	structure_4:
	(	 if (1 > 5) 1
	else if (2 > 5) 2
	else if (3 > 5) 3
	else if (4 > 5) 4
	else if (5 > 5) 5
	else if (6 > 5) 6)
		is 6
	;

`test	structure_5: (6) is 6;
`test	structure_6: (6;) is 6;
`test	structure_7: (6;;) is 6;

//{} can't be used in an expression - it has a value
//but it exists at the statement level to keep
//statement-level things from mixing with expression level
//things
`test	structure_8: ({10}  -1) is ({10}; -1);

`test	structure_9: ({10}  + 1) is (10;  1);

//this is currently a bug - we'd like 'return' to not need a ;?
`test	structure_11: (fun(){ return 1 2 }() is 1);

//tests of the parser itself (especially of things that don't actually parse)
`test	stringParsing_1:	`Function("1")() is 1;
`test	stringParsing_2:	String(`Function("#Tag.Tag")()) is "#Tag.Tag";
`test	stringParsing_3:	`Function("fun(x){x + 1}")()(2) is 3;

`test	tagsAndSymbols_1:	`TypeJOV(#x.x) is Tag;
`test	tagsAndSymbols_2:	`TypeJOV(`x.x) is Symbol;
`test	tagsAndSymbols_3:	String(`x.x) is "`x.x";
`test	tagsAndSymbols_4:	String(#x.x) is "#x.x";
`test	tagsAndSymbols_5:	try { `Function("#x.x+")() } catch(x) { true };

`test   matchingParsing_1:  ( `Function("fun(math.IDontExist(_,_) z) {}"); true; );
`test   matchingParsing_2:  try { `Function("fun(math.(...) z) {}")() } catch (x) { true };
`test   matchingParsing_3:  try { `Function("fun(math+(...) z) {}")() } catch (x) { true };
`test   matchingParsing_4:  ( `Function("fun(#math.complex(...) z) {}"); true; );
`test   matchingParsing_5:  try { `Function("fun(#hai(math.complex) z) {}")(); } catch (x) { true };
`test   matchingParsing_6: ( `Function("fun(#hai(math.complex(...)) z) {}"); true; );

//test hexadecimal parsing
`test hexadecimal_1: 0x18 is 24;
`test hexadecimal_2: 0xac is 172;
`test hexadecimal_3: 0x03Fd_90_8E is 66949262;
`test hexadecimal_4: 0x8u is 8u;
`test hexadecimal_5: 0xFFFEs16 is -2s16;
`test hexadecimal_6: 0x80s8 is Int8(-128); //-128s8 doesn't parse, and getting it to
`test hexadecimal_7: 0xAu32 is 10u32;      //without breaking 'x -1 is x - 1' is hard.
`test hexadecimal_8:  try { `Function("0xhFD23") }  catch(e) { return true } false;
`test hexadecimal_9:  try { `Function("0x111s8") }  catch(e) { return true } false;
`test hexadecimal_10: try { `Function("0x_111") }   catch(e) { return true } false;
`test hexadecimal_11: try { `Function("0x111_u") }  catch(e) { return true } false;
`test hexadecimal_12: try { `Function("0x1__11") }  catch(e) { return true } false;

//test binary parsing
`test binary_1: 0b101110 is 46;
`test binary_2: 0b1_0_1_1_1_0u is 46u;
`test binary_3: 0b101110s16 is 46s16;
`test binary_4: 0b1000_0000s8 is Int8(-128);
`test binary_5: 0b101110s32 is 46s32;
`test binary_6:  try { `Function("0b111111111s8") } catch(e) { return true } false;
`test binary_7:  try { `Function("0b1113310") }     catch(e) { return true } false;
`test binary_8:  try { `Function("0b_111") }        catch(e) { return true } false;
`test binary_9:  try { `Function("0b111_u") }       catch(e) { return true } false;
`test binary_10: try { `Function("0b1__11") }       catch(e) { return true } false;

`test f0: .0    is 0.0;
`test f1: 0.0   is 0.0;
`test f2: 0f    is 0.0;
`test f3: 0e4   is 0.0;
`test f4: 0.0e0 is 0.0;
`test f5: 1e+2 is 100.0;
`test f6: 1e2 is 100.0;
`test f7: 1e-2 is .01;
`test f8: 1e2f32 is 100f32;

//test illegal symbols
`test illegalSymbols_1: try { `Function("`")} catch (...) { return true } false;
`test illegalSymbols_2: try { `Function("``")} catch (...) { return true } false;


//test illegal variable assignment
parses: fun(f) { try { `Function(f); true } catch (...) { false } };

`test illegalAssignment_1: parses("let x = 0; fun() { x = 10 }") is false;
`test illegalAssignment_2: parses("let x = 0; [x = 10 for _ in sequence(10)]") is true;
`test illegalAssignment_3: parses("let x = 0; for _ in sequence(10) x = 10") is true;
`test illegalAssignment_4: parses("let x = 0; (x = 10 for _ in sequence(10))") is false;

`test size_as_member: parses("object { size: 12 }") is false;

`test multiline_string_1: (
	let aString = """
	this is a string
	""";

	aString == "\nthis is a string\n";
	);

`test multiline_string_2: (
	let aString = """
this is a string
	""";

	aString == "\nthis is a string\n\t";
	);

`test multiline_string_3: (
	let aString = """
	this is a string

	and so is this
	""";

	aString == "\nthis is a string\n\nand so is this\n";
	);

`test  trycatch_syntax_1 :  `Function("try { } catch from bla (...) { }")() is nothing;
`test  trycatch_syntax_2 :  
    try {
	    `Function("try { } catch from  (...) { }")() 
		}
	catch (e) {
        e is "expected identifier after \"from\"";
		}
	;

`test  trycatch_syntax_3 :  
    try {
	    `Function("try { } catch from")() 
		}
	catch (e) {
        e is "expected identifier after \"from\"";
		}
	;

`test  trycatch_syntax_4 :  
	`Function("try { } catch")() is nothing
	;

`test throw_syntax_0: 
    try {			  
	    let v = (0,[]);
        throw from v 1
		}
	catch from s (e) {
        e is 1 and s is (0,[])
		}
	;

`test throw_syntax_1: 
    try {
        `Function("throw from")()
		}
	catch (e) {
        e is "expected identifier after \"from\"";
		}
	;

`test throw_syntax_2: 
    try {
        `Function("throw from stacktrace")()
		}
	catch (e) {
        e is "expected expression after throw";
		}
	;
