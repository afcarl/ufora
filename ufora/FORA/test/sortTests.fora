/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/

`test sortIsSorted_1: sorting.isSorted([]);
`test sortIsSorted_2: sorting.isSorted([1]);
`test sortIsSorted_3: sorting.isSorted([1,2]);
`test sortIsSorted_4: not sorting.isSorted([1,3,2]);

`test sort_1: sorting.sort([1]) == [1];

`test quicksort_1: sorting.quickSort([1]) == [1];

`test sortRandom: (
	for seed in sequence(1, 10) {
		let vals = iter.toVector(iter.subseq(math.random.Normal(0.0,1.0,seed),0,100)).apply(Int32);
		let sorted = sorting.sort(vals);

		if (not sorting.isSorted(sorted))
			throw sorted
		}

	true
	);

`test sortBinarySearch: (
	let vals = iter.toVector(iter.subseq(math.random.Normal(0.0,1.0,1),0,100)).apply(Int32);
	let sorted = sorting.sort(vals);

	let checkLookupVal = fun(lookup)
		{
		//do a range lookup
		let val2 = sorting.searchSorted(sorted, lookup, requireExact:false);

		if (val2 >= size(sorted))
			{
			if (lookup < sorted[-1])
				throw "Failed"
			}
		else
			{
			if (val2 > 0 and lookup < sorted[val2-1])
				throw "Failed"

			if (sorted[val2] < lookup)
				throw "Failed"
			}
		}

	for ix in sequence(size(sorted))
		{
		let val = sorting.searchSorted(sorted, sorted[ix]);
		if (sorted[val] != sorted[ix])
			throw "Failed: %s -> %s != %s".format(sorted[ix], ix, val)


		checkLookupVal(sorted[ix] + .5)
		checkLookupVal(sorted[ix] - .5)
		}

	sorting.searchSorted(sorted, .5) is nothing
    );

vd: sorting.VectorDictionary([(99 - x, x*x) for x in sequence(100)]);

`test vectorDict_1: 
	vd[3] is 96 * 96 and (try{ vd[101]; false } catch(...){true})
	;

`test vectorDict_size: 
    size(vd) is 100;
    ;

`test vectorDict_in: 
    3 in vd and 4.4 not in vd;
    ;

`test vectorDict_isValid: (
    vd.assertValid();

    true;
    );

`test vectorDict_2: (
    let f = fun(ix) { 
        ((ix, ix + 1), Vector.range(ix))
        };
    let g = fun(ix) { 
        ((ix, ix + 2), Vector.range(ix + 1))
        };

    let v = [f(10), g(10), f(1), f(2), f(12), g(4), f(3), f(8), f(7), g(1), g(12)];

    let vd = sorting.VectorDictionary(v);

    vd.assertValid();

    vd[(10, 11)] == Vector.range(10) and 
    vd[(10, 12)] == Vector.range(11)
    );

`test invalidVectorDictionary_1: (
    let keysAndVals = [(1,2), (1,3)];

    let vd = sorting.VectorDictionary(keysAndVals);

    try { vd.assertValid(); return false; }
    catch (...) { return true; }
    );

`test vectorDictionaryAssertValid: (
    let keysAndVals = [([1,2,3], 4), ([], 44), ([1,2], 5), ([1], 4)];

    let vd = sorting.VectorDictionary(keysAndVals, keyCmp: fun(x, y) { size(x) > size(y) });

    vd.assertValid();

    vd[[]] is 44;
    );

`test mapReduce_1: 
    (
	let origString = 

	"""Four score and seven years ago our fathers brought forth on this continent a new nation, conceived in liberty, and dedicated to the proposition that all men are created equal.
Now we are engaged in a great civil war, testing whether that nation, or any nation, so conceived and so dedicated, can long endure. We are met on a great battle-field of that war. We have come to dedicate a portion of that field, as a final resting place for those who here gave their lives that that nation might live. It is altogether fitting and proper that we should do this.
But, in a larger sense, we can not dedicate, we can not consecrate, we can not hallow this ground. The brave men, living and dead, who struggled here, have consecrated it, far above our poor power to add or detract. The world will little note, nor long remember what we say here, but it can never forget what they did here. It is for us the living, rather, to be dedicated here to the unfinished work which they who fought here have thus far so nobly advanced. It is rather for us to be here dedicated to the great task remaining before us—that from these honored dead we take increased devotion to that cause for which they gave the last full measure of devotion—that we here highly resolve that these dead shall not have died in vain—that this nation, under God, shall have a new birth of freedom—and that government of the people, by the people, for the people, shall not perish from the earth.""";

	let words = origString.split(' ');

	let mapped = sorting.map(words, fun(elt) { if (size(elt) > 0) yield (elt, 1) });

	let reduced = 
			sorting.reduce(
				mapped, 
				fun(mappedPair) { mappedPair[0] }, 
				fun(group) { 0 }, 
				fun(x, y) { x + y[1] },
				fun(x, y) { x + y }
				);

	let countFun = fun(word)
		{
		let ct = 0;
		for word_ in words {
			if (word_ == word)
			    ct = ct + 1;
			}
		ct;			
		}


	for elt in reduced 
		{
		if (countFun(elt.group) != elt.reduction)
		   throw (elt, origString.count(elt.group));
		}

	return true;
	);

`test sortLargeHomogenousArray: (
	let v = [1 for ix in sequence(1000000)]
	let s = sort(v + [2] + v)

	size(s) == 2000001 
		and s[,2000000] == [1 for ix in sequence(2000000)] 
		and s[-1] == 2
	);

`test sortWithNonStandardCmp: (
    let cmp = fun(x, y){ x[0] < y[0] };

    let toSort = [ ((1,2), [1,2]), 
                   ((1,2), [3,4]), 
                   ((1,3), [4]), 
                   ((2,4), [5,3]), 
                   ((3,5), [5,3,5]) ];

    let sorted = sorting.sort(toSort, cmp);

    sorting.isSorted(sorted, cmp);
    );

`test sorting_reversed: (
	let n = 100000;

	let v = iter.toVector(iter.subseq(math.random.Normal(0, 1, 32134), 0, n)).apply(Int64);

	v = sorting.sort(v);

	if (not sorting.isSorted(v))
    	{
		for ix in sequence(size(v) - 1)
		if (v[ix] > v[ix + 1])
			throw (ix: ix, v[ix], v[ix + 1])
	    }

	v = reverse(v);
	v = sorting.sort(v)
	
	if (not sorting.isSorted(v))
	    {
		for ix in sequence(size(v) - 1)
		if (v[ix] > v[ix + 1])
			throw (ix: ix, v[ix], v[ix + 1])
	    }

	true
);

`test stability_of_sort: (
    let v = Vector.range(10);

    let sorted = sorting.sort(v, fun(x, y) { x % 2 < y % 2});

    assertions.assertEqual(sorted, Vector.range(5, { _ * 2 }) + Vector.range(5, { _ * 2 + 1 }));
    );

`test lowerBound_1: (
    let v = [0,1,1,1,1,1,1,1,1,2,4,5]

    let ix = sorting.lowerBound(v, 1);
    assertions.assertEqual(ix, 1)

    ix = sorting.lowerBound(v, 0.5);
    assertions.assertEqual(ix, 1)

    ix = sorting.lowerBound(v, 3);
    assertions.assertEqual(ix, 10);

    ix = sorting.lowerBound(v, 5);
    assertions.assertEqual(ix, size(v) - 1);

    ix = sorting.lowerBound(v, 0);
    assertions.assertEqual(ix, 0);

    ix = sorting.lowerBound(v, 10);
    assertions.assertEqual(ix, size(v))

    ix = sorting.lowerBound(v, -1);
    assertions.assertEqual(ix, 0)    
    );

`test lowerBound_2: (
    let v = [0,0,0,1,1,2,3,3,3,3];

    let ix = sorting.lowerBound(v, 0);
    
    assertions.assertEqual(ix, 0)
    );

`test lowerBound_3: (
    let v = [0,1];

    let ix = sorting.lowerBound(v, 1);
    
    assertions.assertEqual(ix, 1)
    );

`test upperBound: (
    let v = [0,1,1,1,1,1,1,1,1,2,4,5]

    let ix = sorting.upperBound(v, 0.5);
    assertions.assertEqual(ix, 1)

    ix = sorting.upperBound(v, 3);
    assertions.assertEqual(ix, 10);

    ix = sorting.upperBound(v, 5);
    assertions.assertEqual(ix, size(v));

    ix = sorting.upperBound(v, 0);
    assertions.assertEqual(ix, 1);

    ix = sorting.upperBound(v, 10);
    assertions.assertEqual(ix, size(v))

    ix = sorting.upperBound(v, -1);
    assertions.assertEqual(ix, 0)    
    );

(`perf, `callResult) sort_homogenous_vector: (
    let toSort = Vector.range(100000, Float64);
    toSort = toSort + iter.toVector(
        iter.subseq(math.random.Normal(0, 1, 324), 0, 100000));
    toSort = toSort + Vector.range(100000, { _ * -1.0 });

    fun() { sorting.sort(toSort) }
    );

