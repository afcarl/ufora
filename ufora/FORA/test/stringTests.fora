/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/
`test  stringWorks_1 : "stringTest" is "stringTest";

`test  stringAdditionWorks_1 :  "ha" + "ro" is "haro";

`test  stringAdditionWorks_2 :  "ha " + "ro" is "ha ro";

`test  stringOfStringWorks_1 : repr("haro") is '"haro"';
`test  stringOfStringWorks_2 : String("haro") is 'haro';

`test	stringIndexing_1:	"haro"[1] is 97u8;	//ascii representation
`test	stringIndexing_2:	"haro"[-3] is 97u8;	//ascii representation
`test	stringIndexing_3:	try { "haro"[4]; false } catch(_) {true};
`test	stringIndexing_4:	try { "haro"[-5]; false } catch(_) {true};

`test   stringFromChar_1:   `UInt8ToString("h"[0]) is "h";

`test	stringSlicing_1:	"haro"[0,4] is "haro";
`test	stringSlicing_2:	"haro"[0,2] is "ha";
`test	stringSlicing_3:	"haro"[2,4] is "ro";

`test	stringSlicing_4:	"haro"[0,] is "haro";
`test	stringSlicing_5:	"haro"[1,] is "aro";
`test	stringSlicing_6:	"haro"[-1,] is "o";
`test	stringSlicing_7:	"haro"[,2] is "ha";
`test	stringSlicing_8:	"haro"[-3,2] is "a";

`test	stringSplitting_1:	"a b c d e f".split(" ") == ['a','b','c','d','e','f'];
`test	stringSplitting_2:	"a b c d e f".split(" ",20) == ['a','b','c','d','e','f'];
`test	stringSplitting_3:	"a b c d e f".split(" ",2) == ['a','b','c d e f'];
`test	stringSplitting_4:	"a b c d e f".split(" ",0) == ['a b c d e f'];
`test	stringSplitting_5:	"h__a__r__o".split("__") == ['h','a','r', 'o'];
`test	stringSplitting_6:	"h__a_ r__o".split("__") == ['h','a_ r', 'o'];
`test	stringSplitting_7:	"h__a".split("__") == ['h','a'];
`test   stringSplitting_8:
    try { "whatever".split(""); return false; }
    catch (...) { return true; }
    ;
`test   stringSplitting_10: "a;;b;;".split(";;") == ["a", "b", ""];
`test 	stringSplitting_11: "a;;b;;".split(";") == ["a","","b","",""];
`test	stringSplitting_12: "".split("asdf") == [""];
`test	stringSplitting_13: "".split("a") == [""];
`test	stringSplitting_14: try { "".split(""); return false; } catch (...) { return true };

`test	stringSplitting_15: "a b   c\t d\r\n3".split() == ["a", "b", "c", "d", "3"];

`test	stringTupleSplitting_1:	"a b c d e f".splitTuple(" ") == ('a','b','c','d','e','f');
`test	stringTupleSplitting_2:	"a b c d e f".splitTuple(" ",20) == ('a','b','c','d','e','f');
`test	stringTupleSplitting_3:	"a b c d e f".splitTuple(" ",2) == ('a','b','c d e f');
`test	stringTupleSplitting_4:	"a b c d e f".splitTuple(" ",0) == ('a b c d e f',);
`test	stringTupleSplitting_5:	"h__a__r__o".splitTuple("__") == ('h','a','r', 'o');
`test	stringTupleSplitting_6:	"h__a_ r__o".splitTuple("__") == ('h','a_ r', 'o');
`test	stringTupleSplitting_7:	"h__a".splitTuple("__") == ('h','a');
`test   stringTupleSplitting_8:
    try { "whatever".splitTuple(""); return false; }
    catch (...) { return true; }
    ;
`test   stringTupleSplitting_10: "a;;b;;".splitTuple(";;") == ("a", "b", "");

`test	stringTupleSplitting_11: "a b   c\t d\r\n3".splitTuple() == ("a", "b", "c", "d", "3");

`test	stringArgJoining_1:	" ".joinArgs("h","a","r","o") is "h a r o";
`test	stringArgJoining_2:	"__".joinArgs("h","a","r","o") is "h__a__r__o";
`test	stringArgJoining_3:	", ".joinArgs(x: "h",y: "a") is "x: h, y: a";

`test	stringJoining_1:	" ".join(["h","a","r","o"]) is "h a r o";
`test	stringJoining_2:	"__".join(["h","a","r","o"]) is "h__a__r__o";

`test	stringJoining_3:	"asdf".join([]) is "";

`test	stringJoining_4:	" ".join("h","a","r","o") is "h a r o";
`test	stringJoining_5:	"__".join("h","a","r","o") is "h__a__r__o";
`test	stringJoining_6:	", ".join(x: "h",y: "a") is "x: h, y: a";

`test	stringJoining_7:	" ".join(("h","a","r","o")) is "h a r o";
`test	stringJoining_8:	"__".join(("h","a","r","o")) is "h__a__r__o";
`test	stringJoining_9:	", ".join((x: "h",y: "a")) is "x: h, y: a";
`test   stringJoining_10:   ",".join([1,2,nothing]) is "1,2,nothing";

`test	stringToSymbolConversion_1:	String(`asdf) is "`asdf";
`test	stringToSymbolConversion_2:	Symbol("asdf") is `asdf;
`test	stringToSymbolConversion_3:	Symbol("as df") is `as_df;

`test	stringStripping_1:	"   honey  ".strip() is "honey";
`test	stringStripping_2:	"honey".strip() is "honey";
`test	stringStripping_3:	"".strip() is "";
`test	stringStripping_4:	"      ".strip() is "";
`test	stringStripping_5:	"     honey".strip() is "honey";
`test	stringStripping_6:	"honey     ".strip() is "honey";
`test	stringStripping_7:	"   oh   honey   ".strip() is "oh   honey";
`test	stringStripping_8:	"\thoney\t".strip() is "honey";
`test	stringStripping_9:	"  \t honey  \t  ".strip() is "honey";

`test stringIn:     "a"       in "abc";
`test stringNotIn: "I"   not in "team";
`test charIn:       "a"[0,1]     in "abc";
`test charNotIn:   "I"[0,1] not in "team";

`test	stringFindReplace_1:		"hello".replace("h","y").replace("o","ow") is "yellow";
`test	stringFindReplace_2:		"hello".replace("q","r") is "hello";
`test	stringFindReplace_3:		"   h e l l o  ".replace(" ","") is "hello";
`test	stringFindReplace_4:		"hello\n\n".replace("\n","") is "hello";

`test	stringSubstringCount_1:	"helllo".count("ll") == 1;
`test	stringSubstringCount_2:	"helllo".count("l") == 3;
`test	stringSubstringCount_3:	"helllo".count("r") == 0;
`test	stringSubstringCount_4:	" hello world ".count(" ") == 3;
`test   stringSubstringCount_5: ''.count('') == 1;
`test   stringSubstringCount_6: 
    (
		let s = """asdf fdf asdf\nasfdsadf!!!""";
		s.count('') == size(s) + 1;
    );

`test   stringFind_0:		"".find("") == 0;
`test	stringFind_01:		"".find("a") == -1;
`test	stringFind_1:		"hello".find("l") == 2;
`test	stringFind_2:		"hello".find("h") == 0;
`test	stringFind_3:		"hello".find("r") == -1;
`test	stringFind_4:		"hello".find("l",2) == 2;
`test	stringFind_5:		"hello".find("l",3) == 3;
`test	stringFind_6:		"hello".find("l",4) == -1;
`test	stringFind_7:		"hello world".find("world") == 6;
`test	stringFind_8:		"hello world".find("world",0,10) == -1;
`test	stringFind_9:		"hello".find("o",3,5) == 4;
`test	stringFind_10:		"hello".find("e",-4,5) == 1;
`test	stringFind_11:		"hello".find("e",-40,5) == 1;
`test	stringFind_12:		"hello".find("h",3,5) == -1;
`test	stringFind_13:		"hello".find("l",-40,200) == 2;
`test	stringFind_14:		"hello".find("l",100,200) == -1;
`test	stringFind_15:		"hello".find("l",100,-200) == -1;

`test	stringRfind_0:		"".rfind("") == 0;
`test 	stringRfind_01:		"".rfind("a") == -1;
`test	stringRfind_1:		"helleo".rfind("e") == 4;
`test	stringRfind_2:		"helleo".rfind("e",2,4) == -1;
`test	stringRfind_3:		"helleo".rfind("e",2,5) == 4;
`test	stringRfind_4:		"world hello world".rfind("world") == 12;
`test	stringRfind_5:		"helleo".rfind("e",-5,0) == -1;

`test	stringRstrip_1:	"  hello  ".rstrip() == "  hello";
`test	stringLstrip_2:	"  hello  ".lstrip() == "hello  ";

`test	stringReverse_1:	"hello".reverse() == "olleh";

`test	stringReplicate_1:		"hello"*3 == "hellohellohello";

`test	stringUppercase_1:		"hello world!".uppercase() == "HELLO WORLD!";
`test	stringLowercase_1:		"HELLO WORLD!".lowercase() == "hello world!";
`test	stringCapitalize_1:	"hello WORLD!".capitalize() == "Hello world!";
`test	stringCapitalize_2: "".capitalize() is "";
`test	stringSwapcase_1:		"hello WORLD!".swapcase() == "HELLO world!";

//regex
`test regex_matches_1: "a".matchesRegex("a");
`test regex_matches_2: "a".matchesRegex(".");
`test regex_matches_3: !"a".matchesRegex("b");
`test regex_matches_4: try { "a".matchesRegex("b("); false } catch ({String}) { true };
validate_card_format: fun(s) { s.matchesRegex("(\\d{4}[- ]){3}\\d{4}") };
`test regex_matches_5: (
	let strs = ["0000111122223333", "0000 1111 2222 3333",
                "0000-1111-2222-3333", "000-1111-2222-3333"];
	validate_card_format(strs[0]) is false and 
	validate_card_format(strs[1]) is true and 
	validate_card_format(strs[2]) is true and 
	validate_card_format(strs[3]) is false
);

`test regex_extractMatches_1: "a".extractRegexMatches("b") is nothing;
`test regex_extractMatches_2: try { "a".extractRegexMatches("b("); false } catch({String}) { true };
`test regex_extractMatches_3: "1234".extractRegexMatches("(..)(..)") is ("12","34");
`test regex_extractMatches_4: "123456".extractRegexMatches("(..)(..)(..)") is ("12","34","56");

`test regex_replace_1: "hello dogs! I like dogs.".regexReplace(
	"dogs", "cats") is "hello cats! I like cats.";
`test regex_replace_2: (
	let str = 'this is a paragraph with<[1> in between</[1> and then there are cases ... where the<[99> number ranges from 1-100</[99>.  and there are many other lines in the txt files with<[3> such tags </[3>';
	str.regexReplace("</{0,}\\[\\d+>", "") is
	"this is a paragraph with in between and then there are cases ... where the number ranges from 1-100.  and there are many other lines in the txt files with such tags "
    );
`test regex_replace_3: (
	'blue socks and red shoes'.regexReplace(
		'(blue|white|red)', 'color'
	) is 'color socks and color shoes'
);
`test regex_replace_4: 
	'abxd'.regexReplace('x*', '-') is '-a-b--d-'
;
machine_readable_card_number: fun(s) { 
    s.regexReplace(
        "(\\d{3,4})[- ]?(\\d{4})[- ]?(\\d{4})[- ]?(\\d{4})",
        "$1$2$3$4"
        )
	};
`test regex_replace_6: (
	let strs = ["0000111122223333", "0000 1111 2222 3333",
                "0000-1111-2222-3333", "000-1111-2222-3333"];

	all([machine_readable_card_number(str) is strs[0] for str in strs[,-1]]) and 
	machine_readable_card_number(strs[3]) is "000111122223333"
    );
`test regex_replace_7: (
    let str = "Do or do not, there is no try"  ;
    str.regexReplace('(.*),*try', '$1 $1 $1 OH HI') is 'Do or do not, there is no  Do or do not, there is no  Do or do not, there is no  OH HI'
    );

`test regex_split_1: (
    "a b   c\t d\r\n3".splitRegex("\\s") == ['a', 'b', '', '', 'c', '', 'd', '', '3']
    );
`test regex_split_2: (
    "Words, words, words.".splitRegex("\\W+") == 
        ["Words", "words", "words"]
    );
`test regex_split_3: (
    "cats123dogs456pigs789rats".splitRegex("[0-9]+") == 
        ["cats", "dogs", "pigs", "rats"]
    );

//String comparison tests:
`test strcmp1: "a"  <  "ab";
`test strcmp2: "a"  <= "ab";
`test strcmp3: "ab" >  "a";
`test strcmp4: "ab" >= "a";
`test strcmp5: "ab" >= "ab";
`test strcmp6: "ab" <= "ab";

`test strcmp7:  "a" <  "b";
`test strcmp8:  "a" <= "b";
`test strcmp9:  "b" >  "a";
`test strcmp10: "b" >= "a";


// TP: I don't want call expressions to introduce new scopes, since otherwise 
// visualizing String(fun(){}) would be different from just visualizing fun(){}
`test stringOfFunctions_1: 
assertions.assertEqual(
    String(fun(){}), 
    "stringTests.stringOfFunctions_1"
    );

aFunction: fun() { 1 };

`test stringOfFunctions_2: 
assertions.assertEqual(String(aFunction), "stringTests.aFunction");

aFunctionTuple: (fun() { 1 }, fun() { 2 });

`test stringOfFunctions_4: 
assertions.assertEqual(
	aFunctionTuple..apply(String), 
    ("stringTests.<unnamed function>", "stringTests.<unnamed function>")
    );

anObject_1: object { x: self; operator ()() { self } }();
anObject_2: object { x: self; operator ()() { self } };

`test stringOfFunctions_5: 
assertions.assertEqual(String(anObject_1), 'stringTests.anObject_1');

`test stringOfFunctions_6: 
assertions.assertEqual(
    String(anObject_2), 
    'stringTests.anObject_2'
    );

`test sprintf: `SprintfInt64("%d", 10) is "10";
`test sprintf_throws:  try { `SprintfInt64("", 10); false } catch(...) { true };

`test SprintfUInt64: `SprintfUInt64("%u", 10u) is "10";
`test SprintfUInt64_throws: 
	try { `SprintfUInt64("", 10) }
	catch (e) { true }
	 ;

`test SprintfDouble: `SprintfDouble("%f", math.pi) is "3.141593";
`test SprintfDouble_throws:
    try { `SprintfDouble("", 42) }
    catch (e) { true }
	;

`test SprintfString: `SprintfString("%s", "hey") is "hey";
`test SprintfString_throws:
    try { `SprintfString("", 42) }
    catch (e) { true }
	;

`test StringEscaped: "\\hai".escaped == "\\\\hai";

`test startsWith_1: "asdfasdf".startsWith("asdf") is true;
`test startsWith_2: "asdfasdf".startsWith("asdfasdG") is false;
`test startsWith_3: "asdfasdf".startsWith("asdfasdfasdf") is false;
`test startsWith_4: "asdfasdf".startsWith("") is true;

`test endsWith_1: "asdfasdf".endsWith("asdf") is true;
`test endsWith_2: "asdfasdf".endsWith("asdfasdG") is false;
`test endsWith_3: "asdfasdf".endsWith("asdfasdfasdf") is false;
`test endsWith_4: "asdfasdf".endsWith("") is true;

`test stringGetItems_1: (
    let s = "asdf";
    
    assertions.assertEqual(
        s[,,2],
        "ad"
        )
    assertions.assertEqual(
        s[nothing,nothing,2],
        "ad"
        )
    );

`test stringGetItems_2: (
    let s = "asdf";
    
    assertions.assertEqual(
        s[nothing,2,nothing],
        "as"
        )
    assertions.assertEqual(
        s[,2],
        "as"
        )
    assertions.assertEqual(
        s[nothing,2],
        "as"
        )
    assertions.assertEqual(
        s[,2,nothing],
        "as"
        )
    );

`test packedStringGetItem: (
    let packedString = "012345678901234567890123456789";

    assertions.assertEqual(size(packedString), 30);

    let asciiCodeForZero = 48;
    for ix in sequence(size(packedString))
        {
        let expectedAsciiCode = 
            asciiCodeForZero + (
                if (ix < 10)
                    ix
                else if (ix < 20)
                    ix - 10
                else 
                    ix - 20
                )
            ;

        assertions.assertEqual(
            packedString[ix],
            expectedAsciiCode
            )
        }

    true
    );

`test nonpackedStringGetItem: (
    let packedString = "0123456789012345678901234567890123456789";

    assertions.assertEqual(size(packedString), 40);

    let asciiCodeForZero = 48;
    for ix in sequence(size(packedString))
        {
        let expectedAsciiCode = 
            asciiCodeForZero + (
                if (ix < 10)
                    ix
                else if (ix < 20)
                    ix - 10
                else  if (ix < 30)
                    ix - 20
                else 
                    ix - 30
                )
            ;

        assertions.assertEqual(
            packedString[ix],
            expectedAsciiCode
            )
        }
    
    true
    );

`perf stringSizePerf: (
    let strings = """Mary had a little lamb, 
               its fleece as white as snow;
               and everywhere that Mary went,
               the lamb was sure to go.""".split(" ");

    let sz = size(strings);
    let tr = nothing; 
    for ix in sequence(10000000)
        {
        let string = strings[ix % sz];
        tr = tr + size(string)
        }

    tr
    );

`perf stringGetItemPerf_big: (
    let string = """Mary had a little lamb,
               its fleece as white as snow;
               and everywhere that Mary went,
               the lamb was sure to go.""";

    let sz = size(string);
    let tr = nothing; 
    let ixToUse = 0
    for _ in sequence(50000000)
        {
        if (ixToUse == sz)
            ixToUse = 0
        let item = string[ixToUse];
        tr = tr + item
        ixToUse = ixToUse + 1
        }

    tr
    );

`perf stringGetItemPerf_small: (
    let string = "Mary had a little lamb, its fl"

    let sz = size(string);
    let tr = nothing; 
    let ixToUse = 0
    for _ in sequence(50000000)
        {
        if (ixToUse == sz)
            ixToUse = 0
        let item = string[ixToUse];
        tr = tr + item
        ixToUse = ixToUse + 1
        }

    tr
    );

`test dataAsStringOnPageBoundaries: (
    let s = 50000000; 
    let v = Vector.range(s, {"a"[0]}).paged + Vector.range(s, {"b"[0]}).paged; 
    v[s-8,s+8].dataAsString == ("a" * 8 + "b" * 8)
    );