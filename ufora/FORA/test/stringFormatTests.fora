/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/

`test floatString_1: String(.01) is "0.01";
`test floatString_2: String(.1) is "0.1";
`test floatString_3: String(.001) is "0.001";

spec: fun (t, k: k = '', f: f = '', w: w = '', p: p = '') {
    (keyStr: k, flagsStr: f, widthStr: w, precisionStr: p, typeStr: t)
    };

`test fmtEmpty: ''.format() is '';
`test fmtNone:  'abc'.format() is 'abc';

`test fmtS: '1%s2'.format('abc') is '1abc2';

`test fmtD:     'a%db'.format(123)  is 'a123b';
`test fmtDNeg: 'a%db'.format(-123) is 'a-123b';

`test fmtI:     'a%ib'.format(123)  is 'a123b';
`test fmtINeg: 'a%ib'.format(-123) is 'a-123b';

`test fmtU:     'a%ub'.format(123)  is 'a123b';
`test fmtUNeg: 'a%ub'.format(-123) is 'a18446744073709551493b';

`test fmtX_1:         'a%xb'.format(123)   is 'a7bb';
`test fmtXNeg_1:     'a%xb'.format(-123)  is 'affffffffffffff85b';
`test fmtXAlt_1:     'a%#xb'.format(123)  is 'a0x7bb';
`test fmtXAltNeg_1: 'a%#xb'.format(-123) is 'a0xffffffffffffff85b';
`test fmtX_2:         'a%Xb'.format(123)   is 'a7Bb';
`test fmtXNeg_2:     'a%Xb'.format(-123)  is 'aFFFFFFFFFFFFFF85b';
`test fmtXAlt_2:     'a%#Xb'.format(123)  is 'a0X7Bb';
`test fmtXAltNeg_2: 'a%#Xb'.format(-123) is 'a0XFFFFFFFFFFFFFF85b';

//Not yet implemented.
//`test fmtB:         'a%bb'.format(123)   is 'a01111011b';
//`test fmtBNeg:     'a%bb'.format(-123)  is 'a1111111111111111111111111111111111111111111111111111111110000101b';
//`test fmtBAlt:     'a%#bb'.format(123)  is 'a0b01111011b';
//`test fmtBAltNeg: 'a%#bb'.format(-123) is 'a0b1111111111111111111111111111111111111111111111111111111110000101b';
//`test fmtB:         'a%Bb'.format(123)   is 'a01111011b';
//`test fmtBNeg:     'a%Bb'.format(-123)  is 'a1111111111111111111111111111111111111111111111111111111110000101b';
//`test fmtBAlt:     'a%#Bb'.format(123)  is 'a0B01111011b';
//`test fmtBAltNeg: 'a%#Bb'.format(-123) is 'a0B1111111111111111111111111111111111111111111111111111111110000101b';

`test fmtBoolTrue:  '%?'.format(true) is 'true';
`test fmtBoolFalse: '%?'.format(false) is 'false';

`test fmtBoolPad:              '%10?'.format(false) is '     false';
`test fmtBoolPadRight:       '%-10?'.format(false) is 'false     ';
`test fmtBoolPadZero:        '%010?'.format(false) is '00000false';
`test fmtBoolPadZeroRight: '%0-10?'.format(false) is 'false     ';

`test fmtBoolChop:                    '%.3?'.format(false) is 'fal';
`test fmtBoolChopPad:              '%10.3?'.format(false) is '       fal';
`test fmtBoolChopPadRight:       '%-10.3?'.format(false) is 'fal       ';
`test fmtBoolChopPadZero:        '%010.3?'.format(false) is '0000000fal';
`test fmtBoolChopPadZeroRight: '%0-10.3?'.format(false) is 'fal       ';

`test fmtBoolChopLen:    '%.5?'.format(false) is 'false';
`test fmtBoolChopToobig: '%.7?'.format(false) is 'false';

`test fmtBoolPadLen:      '%5?'.format(false) is 'false';
`test fmtBoolPadToosmall: '%3?'.format(false) is 'false';


`test fmt_12345Pad:              '%10d'.format(12345) is '     12345';
`test fmt_12345PadRight:       '%-10d'.format(12345) is '12345     ';
`test fmt_12345PadZero:        '%010d'.format(12345) is '0000012345';
`test fmt_12345PadZeroRight: '%0-10d'.format(12345) is '12345     ';

//The precision part doesn't do anything with decimals, apparently.
`test fmt_12345Chop:                    '%.3d'.format(12345) is '12345';
`test fmt_12345ChopPad:              '%10.3d'.format(12345) is '     12345';
`test fmt_12345ChopPadRight:       '%-10.3d'.format(12345) is '12345     ';
`test fmt_12345ChopPadZero:        '%010.3d'.format(12345) is '0000012345';
`test fmt_12345ChopPadZeroRight: '%0-10.3d'.format(12345) is '12345     ';

`test fmt_12345ChopLen:    '%.5d'.format(12345) is '12345';
`test fmt_12345ChopToobig: '%.7d'.format(12345) is '12345';

`test fmt_12345PadLen:      '%5d'.format(12345) is '12345';
`test fmt_12345PadToosmall: '%3d'.format(12345) is '12345';


`test split1: `SplitFormatString('') is (('',), ());
`test split2: `SplitFormatString(' ') is ((' ',), ());
`test split3: `SplitFormatString('%%') is (('%',), ());
`test split4: `SplitFormatString(' %% ') is ((' % ',), ());
`test split5: `SplitFormatString('%d') is (('', ''), (spec('d'),));
`test split6:
    `SplitFormatString('%d%%%#d%d') is
        (('', '%', '', ''), (spec('d'), spec('d', f: '#'), spec('d')));
    ;

`test extract1:
    `ExtractStringFormatSpecifier('%<##  0-+ # 00 123.123s')
    is (Int64(size('%<##  0-+ # 00 123.123s')),
            spec('s', k: '<', f: '##  0-+ # 00 ', w: '123', p: '.123'));
    ;
    
`test extract2: `ExtractStringFormatSpecifier('%<##  0-+ # 00 .123s')
    is (Int64(size('%<##  0-+ # 00 .123s')), spec('s', k: '<', f: '##  0-+ # 00 ', p: '.123'));

`test fmtOrd1: '%s%s'   .format('a', 'b') is 'ab';
`test fmtOrd2: '%s%<s%s'.format('a', 'b') is 'aab';
`test fmtOrd3: '%[0]s%s'.format('a') is 'aa';

`test formatting_a_class: (
    let s = math.tree.Base.SampleSummary();

    "%s".format(s) is String(s)
    );

