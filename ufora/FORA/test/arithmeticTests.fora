/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/
/**************
tests to verify that arithmetic operations
and operators are working correctly
***************/

`test	t1: 		1+2 is 3;

`test	t2: 		4-1 is 3;
`test	t3: 		- - 3 is 3;
`test	t4: 		1 * 5 - 2 is 3;

`test	t5 : 		.1+.5 is 0.6;
`test	t6 : 		1+.5 is 1.5;
`test	t7 : 		1- -.5 is 1.5;

`test  simpleArith_1 :  103+204  is 307 ;

`test  simpleArith_2 : 2.5 ** 2.0  is 6.25 ;

`test  simpleArith_3 :   2.5 ** 2   is   6.25 ;

`test  simpleArith_4 :   2 ** 2   is   4.0 ;

`test  simpleArith_5 :   2 ** 2.0   is   4.0 ;

`test  simpleArith_6 :   9 % 5   is   4 ;

`test  bitArith_1 :   2 << 2   is   8 ;

`test  bitArith_2 :   8 >> 2   is   2 ;

`test  bitArith_3 :   2 | 1   is   3 ;

`test  bitArith_4 :   2 & 3   is   2 ;

`test  bitArith_5 :   1 ^ 3   is   2 ;

`test  unaryOps_1 :  -(2)  is   -2 ;

`test  unaryOps_2 :  - -2  is   2 ;

`test  unaryOps_3 :  -true is true;

`test  unaryOps_4 :  -false is false;

`test  bitArith_9 :  3 | 6  is   7 ;

`test  boolArith : true + 1 is 2;

`test casting_1 : Float64(254u8) is 254.0;

`test floatCategories_1: 1.0.isNormal;
`test floatCategories_2: not 1.0.isInfinite;
`test floatCategories_3: not 1.0.isNan;
`test floatCategories_4: 1.0.isFinite;

`test floatCategories_9:  not (1.0 / 0.0).isNormal;
`test floatCategories_10: (1.0 / 0.0).isInfinite;
`test floatCategories_11: not (1.0 / 0.0).isNan;
`test floatCategories_12: not (1.0 / 0.0).isFinite;

`test floatCategories_13: String(1.0 / 0.0) is "inf";
`test floatCategories_14: String(-1.0 / 0.0) is "-inf";

`test arithToString_1: assertions.assertEqual(String(12345u64), "12345");
`test arithToString_2: assertions.assertEqual(String(12345u32), "12345");
`test arithToString_3: assertions.assertEqual(String(12345u16), "12345");
`test arithToString_4: assertions.assertEqual(String(123u8), "123");

`test arithToString_5: assertions.assertEqual(String(12345s64), "12345");
`test arithToString_6: assertions.assertEqual(String(12345s32), "12345");
`test arithToString_7: assertions.assertEqual(String(12345s16), "12345");
`test arithToString_8: assertions.assertEqual(String(123u8), "123");

`test arithToString_9: assertions.assertEqual(String(-12345s64), "-12345");
`test arithToString_10: assertions.assertEqual(String(-12345s32), "-12345");
`test arithToString_11: assertions.assertEqual(String(-12345s16), "-12345");
`test arithToString_12: assertions.assertEqual(String(-123s8), "-123");

