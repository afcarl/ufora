/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/
`test basic_without_intercept: (
	let X = dataframe.DataFrame([[-1,0,1], [0,1,1]]);
	let Y = dataframe.DataFrame([[0,1,1]])

	let fit = math.regression.logistic.BinaryLogisticRegressionBuilder(
        lambda:1, hasIntercept:false).fit(X, Y);
	assertions.assertAllClose(
        fit.coefficients.columnMajorData(), 
        [ 0.26901034, 0.25372016], 
        rtol:0.1)

	let fit = math.regression.logistic.BinaryLogisticRegressionBuilder(
        lambda:10, hasIntercept:false).fit(X, Y);
	assertions.assertAllClose(
        fit.coefficients.columnMajorData(), 
        [0.03252281, 0.03226275], 
        rtol:0.1)

	let expectedPredictedProbabilities = 
        [0.508129417258552, 0.491870582741448, 0.483745462365042];

	assertions.assertAllClose(
		fit.predictProbability(X.asMatrix().apply(Float64)).columnMajorData(), 
		expectedPredictedProbabilities
		);
	assertions.assertEqual(
        fit.predict(X.asMatrix().apply(Float64)).columnMajorData(), 
        [0,1,1]);
				
	assertions.assertAllClose(
		fit.predictProbability(X).dataVec, 
		expectedPredictedProbabilities
		);
	assertions.assertEqual(fit.predict(X).dataVec, [0,1,1])

    assertions.assertEqual(fit.score(X, Y), 1.0)
);

`test basic_with_intercept: (
	let X = dataframe.DataFrame([[-1,0,1], [0,1,1]]);
	let Y = dataframe.DataFrame([[0,1,1]])

	let fit = math.regression.logistic.BinaryLogisticRegressionBuilder(
        lambda:1).fit(X, Y);
	assertions.assertAllClose(
        fit.coefficients.columnMajorData(), 
        [ 0.26901034, 0.25372016, 0.10102151], 
        rtol:0.1)
	let fit = math.regression.logistic.BinaryLogisticRegressionBuilder(
        lambda:10).fit(X, Y);
	assertions.assertAllClose(
        fit.coefficients.columnMajorData(), 
        [0.03252281, 0.03226275, 0.01573606], 
        rtol:0.1)

	let expectedPredictedProbabilities = [0.50419659, 0.4880026, 0.47988046];

	assertions.assertAllClose(
		fit.predictProbability(X.asMatrix().apply(Float64)).columnMajorData(), 
		expectedPredictedProbabilities
		);
	assertions.assertEqual(fit.predict(X.asMatrix().apply(Float64)).columnMajorData(), [0,1,1]);
				
	assertions.assertAllClose(
		fit.predictProbability(X).dataVec, 
		expectedPredictedProbabilities
		);
	assertions.assertEqual(fit.predict(X).dataVec, [0,1,1])

    assertions.assertEqual(fit.score(X, Y), 1.0)
);

`test LR_without_intercept: (
	let X = dataframe.DataFrame([[-1,0,1], [0,1,1]]);
	let Y = dataframe.DataFrame([[0,1,1]])

    let builder = math.regression.logistic.LogisticRegressionBuilder(
        hasIntercept: false);
	let fit = builder.fit(X, Y);

	let expectedPredictedProbabilities = 
	[
		[0.566503687595669, 0.433496312404331, 0.369304749499925], 
		[0.433496312404331, 0.566503687595669, 0.630695250500075]
	]

	let computedProbabilities = fit.predictProbability(X);

	assertions.assertEqual(size(computedProbabilities), 2);
	assertions.assertAllClose(
        computedProbabilities[0].dataVec, expectedPredictedProbabilities[0])
	assertions.assertAllClose(
        computedProbabilities[1].dataVec, expectedPredictedProbabilities[1])

    assertions.assertEqual(fit.score(X, Y), 1.0)
);	

`test LR_with_intercept: (
	let X = dataframe.DataFrame([[-1,0,1], [0,1,1]]);
	let Y = dataframe.DataFrame([[0,1,1]])

    let builder = math.regression.logistic.LogisticRegressionBuilder();
	let fit = builder.fit(X, Y);

	let expectedPredictedProbabilities = 
	[
		[0.54189872, 0.41223305, 0.3489286],
		[0.45810128, 0.58776695, 0.651074]
	]

	let computedProbabilities = fit.predictProbability(X);

	assertions.assertEqual(size(computedProbabilities), 2);
	assertions.assertAllClose(
        computedProbabilities[0].dataVec, 
        expectedPredictedProbabilities[0], 
        rtol: 1e-5
        )
	assertions.assertAllClose(
        computedProbabilities[1].dataVec, 
        expectedPredictedProbabilities[1], 
        rtol: 1e-5
        )

    assertions.assertEqual(fit.score(X, Y), 1.0)
);	

generate_dataset_by_rows: fun(theta, nSamples, seed) {
	let unif = iterator(math.random.UniformReal(0, 1, seed));
	let nFeatures = size(theta);

	let xAsVecOfTups = [];
	let yAsVec = [];

	for sampleIx in sequence(nSamples) {
		let row = ();
		let rowDotTheta = 0.0;
		for featureIx in sequence(nFeatures) {
			let nextVal = pull unif;
			nextVal = 2.0 * (nextVal - 0.5)
			rowDotTheta = rowDotTheta + nextVal * theta[featureIx]
			row = row + (nextVal,)
			}
		xAsVecOfTups = xAsVecOfTups :: row;
		
		if (math.logit(rowDotTheta) > (pull unif))
			yAsVec = yAsVec :: 1.0
		else
			yAsVec = yAsVec :: 0.0
		}

	return (X: dataframe.DataFrame(xAsVecOfTups), Y: dataframe.DataFrame([yAsVec]))	
};

generate_dataset_by_cols: fun(theta, nSamples, seed) {
	let unif = iterator(math.random.UniformReal(0, 1, seed));
	let nFeatures = size(theta)

	let xVals = [2.0 * ((pull unif) - 0.5) for _ in sequence(nFeatures * nSamples)];
	let xColumns = Vector.range(
		nFeatures, 
		fun(featureIx) { 
			xVals[featureIx * nSamples, (featureIx + 1) * nSamples]
			}
		);
							   
	let X = dataframe.DataFrame(xColumns)
	let yProbabilities = [(pull unif) for _ in sequence(nSamples)];
	let xProbabilities = math.regression.logistic.dot(X, math.Matrix(theta)) ~~ math.logit
	let yVals = zipWith(
		fun(xProb, yProb) { if (xProb > yProb) 1.0 else 0.0 }, 
		xProbabilities, yProbabilities
		)

	return (X:X, Y:dataframe.DataFrame([yVals]))
};

`test basic_2: (

	let X =  dataframe.DataFrame(
		[
			(-0.25091976,  0.90142861),
			( 0.46398788,  0.19731697),
			(-0.68796272, -0.68801096),
			(-0.88383278,  0.73235229),
			( 0.20223002,  0.41614516)
		]
	);
	let Y =  dataframe.DataFrame([[ 1.0, 0.0, 0.0, 0.0, 1.0]])

	let fit = math.regression.logistic.BinaryLogisticRegressionBuilder(
        lambda:0.01, hasIntercept:false).fit(X, Y);
	assertions.assertAllClose(
        fit.coefficients.columnMajorData(), 
        [1.55340615, 1.28486522], 
        rtol:1e-5)

    assertions.assertEqual(fit.score(X, Y), 0.8)
	);	

`test basic_3: (
	let X = dataframe.DataFrame(
		[[-0.25091976, 0.46398788, -0.68796272],
		 [0.90142861, 0.19731697, -0.68801096]]
	);
	let Y =  dataframe.DataFrame([[ 1.0, 0.0, 0.0]]);

	let fit = math.regression.logistic.BinaryLogisticRegressionBuilder(
        lambda:0.01, hasIntercept:false).fit(X, Y);
	assertions.assertAllClose(
        fit.coefficients.columnMajorData(), 
        [-1.78096819, 3.420889 ], 
        rtol:1e-3)

    assertions.assertEqual(fit.score(X, Y), 1.0);

	let fit = math.regression.logistic.BinaryLogisticRegressionBuilder(
        lambda:0.1, hasIntercept:false).fit(X, Y);
	assertions.assertAllClose(
        fit.coefficients.columnMajorData(), 
        [-0.23778303, 1.17780804], 
        rtol:1e-3)

    assertions.assertClose(fit.score(X, Y), 0.6666666666)

	let fit = math.regression.logistic.BinaryLogisticRegressionBuilder(
        lambda:1, hasIntercept:false).fit(X, Y);
	assertions.assertAllClose(
        fit.coefficients.columnMajorData(), 
        [-0.00977967, 0.20925004], 
        rtol:1e-3)

    assertions.assertClose(fit.score(X, Y), 0.6666666666)

	let fit = math.regression.logistic.BinaryLogisticRegressionBuilder(
        lambda:10, hasIntercept:false).fit(X, Y);
	assertions.assertAllClose(
        fit.coefficients.columnMajorData(), 
        [-0.00051065, 0.02294992], 
        rtol:1e-3)

    assertions.assertClose(fit.score(X, Y), 0.6666666666)
);

`test basic_4: (
	let X =  dataframe.DataFrame(
		[(-0.25091976,  0.90142861),
		 ( 0.46398788,  0.19731697),
		 (-0.68796272, -0.68801096),
		 (-0.88383278,  0.73235229),
		 ( 0.20223002,  0.41614516),
		 (-0.95883101,  0.9398197 ),
		 ( 0.66488528, -0.57532178),
		 (-0.63635007, -0.63319098),
		 (-0.39151551,  0.04951286),
		 (-0.13610996, -0.41754172)]
	);
	let Y = dataframe.DataFrame([[0, 1, 1, 0, 0, 0, 1, 0, 0, 1]])

	let fit = math.regression.logistic.BinaryLogisticRegressionBuilder(
        lambda:0.01, hasIntercept:false).fit(X, Y);
	assertions.assertAllClose(
        fit.coefficients.columnMajorData(), 
        [ 2.42895564, -2.6979851], 
        rtol:1e-3)

    assertions.assertEqual(fit.score(X, Y), 0.9)

	let fit = math.regression.logistic.BinaryLogisticRegressionBuilder(
        lambda:0.1, hasIntercept:false).fit(X, Y);
	assertions.assertAllClose(
        fit.coefficients.columnMajorData(), 
        [ 0.79470145, -0.95698387], 
        rtol:1e-3)

    assertions.assertEqual(fit.score(X, Y), 0.9)

	let fit = math.regression.logistic.BinaryLogisticRegressionBuilder(
        lambda:1, hasIntercept:false).fit(X, Y);
	assertions.assertAllClose(
        fit.coefficients.columnMajorData(), 
        [0.14401476, -0.17408705], 
        rtol:1e-3)

    assertions.assertEqual(fit.score(X, Y), 0.9)

	let fit = math.regression.logistic.BinaryLogisticRegressionBuilder(
        lambda:10, hasIntercept:false).fit(X, Y);
	assertions.assertAllClose(
        fit.coefficients.columnMajorData(), 
        [ 0.01592896, -0.01922175], 
        rtol:1e-3)

    assertions.assertEqual(fit.score(X, Y), 0.9)
);
	
`test consistency_of_chunksize: (

	let seed = 42
	let (X: X, Y: Y) = generate_dataset_by_rows([1.0, -1.0], 1000, seed);

	let (lambda, coefficients) = (0.1, [0.388008645908575, -0.351933163636869])
	
	let fit = math.regression.logistic.BinaryLogisticRegressionBuilder(
        lambda:lambda, hasIntercept:false).fit(X, Y);
	let computedCoef = fit.coefficients.columnMajorData();
	assertions.assertAllClose(computedCoef, coefficients)

	let fit = math.regression.logistic.BinaryLogisticRegressionBuilder(
        lambda:lambda, chunkSize:50, hasIntercept:false).fit(X, Y)
	assertions.assertEqual(fit.coefficients.columnMajorData(), computedCoef)
	let fit = math.regression.logistic.BinaryLogisticRegressionBuilder(
        lambda:lambda, chunkSize:501, hasIntercept:false).fit(X, Y)
	assertions.assertEqual(fit.coefficients.columnMajorData(), computedCoef)

	let (lambda, coefficients) = (1, [0.0638801811741387, -0.0588322826416944]);

	let fit = math.regression.logistic.BinaryLogisticRegressionBuilder(
        lambda:lambda, hasIntercept:false).fit(X, Y)
	let computedCoef = fit.coefficients.columnMajorData()
	assertions.assertAllClose(computedCoef, coefficients)

	let fit = math.regression.logistic.BinaryLogisticRegressionBuilder(
        lambda:lambda, chunkSize:100, hasIntercept:false).fit(X, Y)
	assertions.assertEqual(fit.coefficients.columnMajorData(), computedCoef)
	let fit = math.regression.logistic.BinaryLogisticRegressionBuilder(
        lambda:lambda, chunkSize:345, hasIntercept:false).fit(X, Y);
	assertions.assertEqual(fit.coefficients.columnMajorData(), computedCoef)
);

`test higher_dimensions: (
	let seed = 42;
	let theta = [0.75, 0.5, 0.2, 0.1, 0.5, 0.75, 0.5, 0.2, 0.1, 0.5, 0.75, 0.5, 
				 0.2, 0.1, 0.5, 0.75, 0.5, 0.2, 0.1, 0.5];

	let (X:X, Y:Y) = generate_dataset_by_cols(theta, 10*1000, seed);
	
	let fit = math.regression.logistic.BinaryLogisticRegressionBuilder(
        lambda:0.00001, hasIntercept:false).fit(X, Y);

	fit.coefficients.columnMajorData()
	
    assertions.assertEqual(fit.score(X, Y), 0.7037)

	true
);

// this segfaults in CleanupAndSimplify
generate_dataset_test: (

	let generate_dataset = fun(theta, nSamples, seed) {
		let unif = iterator(math.random.UniformReal(0, 1, seed));
		let nFeatures = size(theta);

		let xAsVecOfTups = [];
		let yAsVec = [];

		for sampleIx in sequence(nSamples) {
			let row = ();
			let rowDotTheta = 0.0;
			for featureIx in sequence(nFeatures) {
				let nextVal = pull unif;
				nextVal = 2.0 * (nextVal - 0.5)
				rowDotTheta = rowDotTheta + nextVal * theta[featureIx]
				row = row + (nextVal,)
			}
			xAsVecOfTups = xAsVecOfTups :: row;
			
		}

		return (X: dataframe.DataFrame(xAsVecOfTups), Y: dataframe.DataFrame([yAsVec]))	
	};

	let seed = 42;
	let theta = [0.75, 0.5, 0.2, 0.1, 0.5, 0.75, 0.5, 0.2, 0.1, 0.5, 0.75, 0.5, 
				 0.2, 0.1, 0.5, 0.75, 0.5, 0.2, 0.1, 0.5];

	let res = generate_dataset(theta, 100, seed);

	res
);

`test illegal_dimensions: (
	let X = dataframe.DataFrame([[-1,0,1], [0,1,1]]);
	let Y = dataframe.DataFrame([[0,1,1]])

    let builder = math.regression.logistic.LogisticRegressionBuilder();
	let fit = builder.fit(X, Y);

    assertions.assertThrows(fun() { fit.predict(Y) });
    
    let m = math.Matrix([1], (1,1));

    assertions.assertThrows(fun() { fit.predict(m) });
    );

`test predict_on_non_matrices_and_non_dataframes: (
	let X = dataframe.DataFrame([[-1,0,1], [0,1,1]]);
	let Y = dataframe.DataFrame([[0,1,1]])

    let builder = math.regression.logistic.LogisticRegressionBuilder();
	let fit = builder.fit(X, Y);

    assertions.assertEqual(fit.predict(X[0]), math.Matrix([0], (1,1)))
    assertions.assertEqual(fit.predict(X[1]), math.Matrix([1], (1,1)))
    assertions.assertEqual(fit.predict([-1, 0]), math.Matrix([0], (1,1)))

    let fit = builder.withoutIntercept().fit(X, Y);

    assertions.assertEqual(fit.predict(X[0]), math.Matrix([0], (1,1)))
    assertions.assertEqual(fit.predict(X[1]), math.Matrix([1], (1,1)))
    assertions.assertEqual(fit.predict([-1, 0]), math.Matrix([0], (1,1)))
    );

`test predictProba_on_non_matrices_and_non_dataframes: (
    let X = dataframe.DataFrame([[-1,0,1], [0,1,1]]);
	let Y = dataframe.DataFrame([[0,1,1]])

    let builder = math.regression.logistic.LogisticRegressionBuilder();
	let fit = builder.fit(X, Y);

    let probabilities = fit.predictProbability(X[0]);

    assertions.assertAllClose(
        probabilities[0].columnMajorData(), 
        [0.541898928829718]
        );
    assertions.assertAllClose(
        probabilities[1].columnMajorData(),
        [0.458101071170282]
        );

    let probabilities2 = fit.predictProbability([-1,0]);
    
    assertions.assertEqual(probabilities2, probabilities)

    fit = builder.withoutIntercept().fit(X, Y);
    
    let probabilities = fit.predictProbability(X[0]);

    assertions.assertAllClose(
        probabilities[0].columnMajorData(), 
        [0.566503687595669]
        );
    assertions.assertAllClose(
        probabilities[1].columnMajorData(),
        [0.433496312404331]
        );
    );

