/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/
/*****
function calls and pattern-matching in 'match' statements
*****/

`test  t_14 : (  fun(x=-.5){x}() is -0.5 );


`test  functionVarargs_5 : (  fun(x,y) { x+y }(*(10,20)) is 30 );

`test  functionVarargs_6 : (  fun(a,x,y,b,c) { String(x+y)+a+b+c }("a",*(10,20),*("b","c")) is '30abc');

`test  functionVarargs_8 : (  (fun(*args,x) { x })(1,*(2,3)) is 3 );

`test  functionDefaultArgs1_1 : (  (fun(x = 10) { x })() is 10 );

`test  functionDefaultArgs2_1 : (  (fun(x,y = 10) { x })(20) is 20 );

`test  functionDefaultArgs3_1 : (  (fun(x,y = 10) { x })(20) is 20 );

`test  functionDefaultArgs4_1 : (  (fun(x,y = 10) { y })(20) is 10 );

`test  functionDefaultArgs5_1 : (  (fun(x,y = 10, *args) { Int64(size(args)) })(10) is 0 );

`test  functionDefaultArgs6_1 : (  (fun(x,y = 10, *args) { Int64(size(args)) })(10,20) is 0 );

`test  functionDefaultArgs7_1 : (  (fun(x,y = 10, *args) { Int64(size(args)) })(10,20,30) is 1 );

`test  functionDefaultArgs8_1 : (  (fun(x,y = 10, *args) { args[0] })(10,20,30) is 30 );

`test  functionDefaultArgs9_1 : (  (fun(x,y = x*2) { y })(10) is 20 );

`test  functionDefaultArgs10_1 : (  let z = 20; fun(x,y = z) { y }(10) is 20 );

`test  functionDefaultArgs11_1 : (  let z = 20; fun(x,*args) { z + size(args) }(10) is 20 );

`test  functionDefaultArgs12_1 : (  let z = 20; fun(x,*args) { z + size(args) }(10, 20) is 21 );

`test  functionDefaultBinding_1 : (  (let z = 5; fun(y = z) { y })() is 5 );

`test  functionDefaultBinding_2 : (  let z = 5; fun(x, z = x) { z } (10) is 10 );

`test  functionDefaultBinding_3 : (  let z = 5; match (10) with (x, z = x) { z } is 10 );

`test  functionDefaultBinding_4 : (  match (10,nothing) with (x, z = 20) { z } is nothing );

`test  functionDefaultBinding_5 : (  match (10) with (x, z = 20) { z } is 20 );

`test  functionDefaultBinding_6 : (  fun(x, y = 10) { y }(0) is 10 );

`test  functionChain2_1 : (  fun () {0}  (a) { 1 }  (a,b) { 2 }() is 0 );

`test  functionChain3_1 : (  fun () {0}  (a) { 1 }  (a,b) { 2 }(10) is 1 );

`test  functionChain4_1 : (  fun () {0}  (a) { 1 }  (a,b) { 2 }(10,10) is 2);



`test  patternMatchingTuple_1 : (  match ((1,2)) with ((x,y)) { x+y } is 3 );

`test  patternMatchingTuple_2 : (  match (10,20) with (*args) { size(args) * 1 } is 2 );

`test  patternMatchingTuple_3 : (  match (10,20) with (x,y) { x + y } is 30 );

`test  patternMatchingTuple_4 : (  match (10,*(20,30)) with (x,y,z) { y } is 20 );

`test  patternMatchingTuple_5 : (  match (10,*(20,30),50) with (x,*args,y,z) { size(args)*1 } is 1 );

`test  patternMatchingTuple_6 : (  match (10,20) with (*x) { x[0] } is 10 );

`test  patternMatchingTuple_7 : (  match (10,20) with (x,y) { x } is 10 );

`test  patternMatchingTuple_8 : (  match (10,20) with (x,y) { y } is 20 );

`test  patternMatchingTuple_9 : (  match (10,20) with (x,y,z = 30) { z } is 30 );

`test  patternMatchingTuple_10 : (  match (10,20,40) with (x,y,z = 30) { z } is 40 );

`test  patternMatchingTuple_11 : (  match (10,20,40) with (x,y,z = 30,w) { z } is 30 );

`test  patternMatchingTuple_12 : (  match (10,20,40) with (x,y,z = 30,w) { w } is 40 );

`test  patternMatchingTuple_13 : (  match (10,20,50,40) with (x,y,z = 30,w) { w } is 40 );

`test  patternMatchingTuple_14 : (  match (10,20,50,40) with (x,y,z = 30,w) { z } is 50 );

`test  patternMatchingTuple_15 : (  match (1,2,3) with (x,*args) { size(args) * 1} is 2 );

`test  patternMatchingTuple_16 : (  match (1,2,3) with (x,*args) { size(args)*1 } is 2 );

`test  patternMatchingTuple_18 : (  match (1,2,3) with (*args,x) { args[0] } is 1 );

`test  patternMatchingTuple_19 : (  match (1,2,3) with (*args,x) { args[1] } is 2 );

`test  patternMatchingTuple_20 : (  match (1,2,3) with (*args,x) { size(args) * 1 } is 2 );

`test  patternMatchingTuple_21 : (  match (1,2.5,3) with (x,*args) { args[0] } is 2.5 );

`test  patternMatchingTuple_22 : (  match (1,2,3.0) with (x,*args) { args[0] } is 2 );

`test  patternMatchingTuple_23 : (  match (1,2,3) with (x,*args) { args[0] } is 2 );

`test  patternMatchingTuple_24 : (  match (1,2,3) with (*args, z) { args[1] } is 2 );

`test  patternMatchingTuple_28 : (  match (1,2,3) with (x,*args) { args[1] } is 3 );

`test  patternMatchingTuple_31 : (  match (1,2,3,4) with (x,y,*args) { size(args) * 1} is 2 );

`test  patternMatchingTuple_32 : (  match (1,2,3,4) with (x,*args,y) { size(args) * 1} is 2 );

`test  patternMatchingTuple_33 : (  match (1,2,3,4) with (*args,y,z) { size(args) * 1} is 2 );

`test  patternMatchingTuple_34 : (  match (1,2,3,4) with (x,*args) { size(args) * 1} is 3 );

`test  patternMatchingTuple_35 : (  match (1,2,3) with (x,*args,z) { size(args) * 1} is 1 );

`test  patternMatchingTuple_36 : (  match (1,2,3) with (x,*args,z) { z } is 3 );

`test  patternMatchingTuple_37 : (  match (1,2,3) with (x,*args,z) { args[0] } is 2 );

`test  patternMatchingTuple_38 : (  match (1,2,3) with (x,*args,z) { size(args) * 1} is 1 );

`test  patternMatchingStruct_1 : (  (fun (a:x,c:y) { x } (a:x, b:y) { x + 10 })(a:10,b:20) is 20 );

`test  patternMatchingStruct_2 : (  (fun (a:x,c:y) { x } (a:x, b:y) { x + 10 })(a:10,c:20) is 10 );

`test  patternMatchingStruct_3 : (  (fun (a:x, *args) { x })(a:10,b:20) is 10 );

`test  patternMatchingStruct_4 : (  (fun (a:x, *args) { x + args.b })(a:10,b:20) is 30 );

`test  patternMatchingStruct_5 : (  (fun ((a:x,c:y)) { x } ((a:x, b:y)) { x + 10 })((a:10,b:20)) is 20 );

`test  patternMatchingStruct_6 : (  (fun ((a:x,c:y)) { x } ((a:x, b:y)) { x + 10 })((a:10,c:20)) is 10 );

`test  patternMatchingStruct_7 : (  (fun ((a:x, *args)) { x })((a:10,b:20)) is 10 );

`test  patternMatchingStruct_8 : (  (fun ((a:x, *args)) { x + args.b })((a:10,b:20)) is 30 );

`test  patternMatchingStruct_9 : (  match ((a:10,b:20)) with ((a:x,c:y)) { x } ((a:x, b:y)) { x + 10 } is 20 );

`test  patternMatchingStruct_10 : (  match ((a:10,c:20)) with ((a:x,c:y)) { x } ((a:x, b:y)) { x + 10 } is 10 );

`test  patternMatchingStruct_11 : (  match ((a:10,b:20)) with ((a:x, *args)) { x } is 10 );

`test  patternMatchingStruct_12 : (  match ((a:10,b:20)) with ((a:x, *args)) { x + args.b } is 30 );

`test  patternMatchingStruct_13 : (  match ((a:10,b:20)) with ((*args)) { nothing } is nothing);

`test  patternMatchingStruct_14 : (  match ((a:10,b:20)) with ((*args)) { args.b } is 20 );

`test  patternMatchingInLet_1 : (  let (x,y) = (10,20); x + y is 30 );

`test  patternMatchingInLet_2 : (  let (x,y) = (10,2), z = x+y; z is 12);

// Working with named tuple arguments and default values.
// Note that the order of elements in named tuples is not important
`test  patternMatchingStructOrder_1: ((fun(x, y:y=0, z:z=0){ x + y + z**2 })(10)is 10.0 );

`test  patternMatchingStructOrder_2: ((fun(x, y:y=0, z:z=2){ x + y + z**2 })(10) is 14.0 );

`test  patternMatchingStructOrder_3: ((fun(x, y:y=0, z:z=2){ x + y + z**2 })(10, z:3) is 19.0);

`test  patternMatchingStructOrder_4: ((fun(x, y:y=1, z:z=2){ x + y + z**2 })(10, z:3, y:10) is 29.0 );

`test  patternMatchingStructOrder_5: ((fun(x, y:y=1, z:z=2){ x + y**2 + z**3 })(z:3, y:2, 10) is 41.0);

`test patternMatchingWithVectors_1: match ([]) with ([]) { true };
`test patternMatchingWithVectors_2: match (1) with ([1,2,3]) { false } (...) { true };

// For namedArgs tests...
pow: 
	fun(a, b)
		{
		b ** a // reverse order from x,y case below
		}
	(x:x, y:y)
		{
		x ** y
		};

`test	functionNamedArgs_1: pow(2, 3) is 9.0;

`test	functionNamedArgs_2: pow(x:3, y:2) is 9.0;

`test recursiveFunctions: (
	let f = fun(x) { 
		if (x < 2) 
			return 1 
		else 
			return f(x-1) + f(x-2) 
	    }; 
	f(20) == f(19) + f(18)
	);

`test aFuncEliding: (
	let f = fun(a:, b:) { (a:a, b:b) };

	f(b:10, a:20) is (a:20, b:10)
	);

`test aFuncElidingWithDefaults: (
	let f = fun(a:=20, b: =10) { (a:a, b:b) } 

	f() is (a:20, b:10);
    );

`perf summing_closure_1: (
    let c = 2; sum(0, 100000000, fun(z) { z - c / 100.0 })
    );

`perf summing_closure_2: (
    let c = 2; 
    let f = fun(z) { z - c / 100.0 };
    let res = 0.0
    for ix in sequence(100000000) { res = res + f(ix) }
    res
    );

`perf sum_squares: (
    let res = 0.0;
    for ix in sequence(1e8) { res = res + ix * ix }
    res
    );

`perf pisum: (
    let res = 0.0;
    for j in sequence(1, 1000) { 
        res = 0.0;
        for k in sequence(1, 10000) 
        res = res + 1.0 / (k * k);
        }
    res
    );

`perf fib_sum: (
    let fib = fun(n) { 
        if (n < 2) { return n } 
        fib(n - 1) + fib(n - 2)
        }; 
    fib(30)
    );


`test deepCallStack_1: (
	let s = fun(x, soFar=0) { 
	  __without_stacktrace_augmentation {
		if (x < 0) 
			return soFar 
		else 
			return s(*(x-1,soFar+x))
      }
  };
    		
	s(1000000000) is 500000000500000000
	);

