/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/
#include "TracingInterpreterThreadObserver.hppml"
#include "../Core/ExecutionContextConfiguration.hppml"
#include "../Interpreter/TransferNativeStackframeIntoInterpreter.hppml"
#include "../Interpreter/EvalFrame.hpp"
#include "../TypedFora/TypedForaUtil.hppml"
#include "../TypedFora/JitCompiler/TypedJumpTarget.hppml"
#include "../TypedFora/ABI/NativeStackFrameWrapper.hppml"
#include "../TypedFora/ABI/UnwrapNativeContinuation.hppml"
#include "../../core/Logging.hpp"
#include "../../core/Clock.hpp"
#include "TracingInterpreterObserver.hppml"

using namespace Fora::Interpreter;
using namespace TypedFora::Abi;

namespace Fora {
namespace Interpreter {

TracingInterpreterThreadObserver::TracingInterpreterThreadObserver(
			boost::shared_ptr<ExecutionContextConfiguration> inConfig,
			Fora::Compiler::TracingInterpreterObserver* inTraceHandler
			) :
		mHistory100(100),
		mHistory1000(1000),
		mHistory10000(10000),
		mHistory100000(100000),
		mCurrentTraceStackDepth(0),
		mInterpreterTraceHandler(inTraceHandler),
		mHasSentInitializeTraceToExternalHandler(false),
		mJustTransferredFromMachineCode(false),
		mIsReturningToInterpreter(false),
		mConfig(inConfig),
		mWasInterpreterInterrupted(false)
	{
	}

bool TracingInterpreterThreadObserver::isTracing() const
	{
	return shouldCollectInterpreterTraces();
	}

double TracingInterpreterThreadObserver::timeOfLastTraceEvent()
	{
	if (mTraceCollector)
		return mTraceCollector->timeOfLastTraceTerm();

	return 0.0;
	}


void TracingInterpreterThreadObserver::clear()
	{
	mHistory100.clear();
	mHistory1000.clear();
	mHistory10000.clear();
	mHistory100000.clear();

	mJustTransferredFromMachineCode = false;

	mWasInterpreterInterrupted = false;

	mIsReturningToInterpreter= false;

	mCurrentTraceStackDepth = 0;

	mHasSentInitializeTraceToExternalHandler = false;

	mTraceCollector.reset();
	}

void TracingInterpreterThreadObserver::pause()
	{
	if (mTraceCollector)
		mTraceCollector->pauseTracing();
	}

void TracingInterpreterThreadObserver::resume()
	{
	if (mTraceCollector)
		mTraceCollector->resumeTracing();
	}

void TracingInterpreterThreadObserver::onInterpreterStep(EvalFrame* inFrame)
	{
	Instruction* instructionPtr = inFrame->instructionPtr.get();

	mHistory100.push_back(instructionPtr);
	mHistory1000.push_back(instructionPtr);
	mHistory10000.push_back(instructionPtr);
	mHistory100000.push_back(instructionPtr);

	askTraceHandlerWhetherToCollect(inFrame);
	}

void TracingInterpreterThreadObserver::onInterpreterInterrupted(EvalFrame* inFrame)
	{
	if (shouldCollectInterpreterTraces())
		{
		mWasInterpreterInterrupted = true;
		mJustTransferredFromMachineCode = false;

		collectInterpreterTrace(Fora::InterpreterTraceTerm::ArbitraryInterpreterLogging("onInterpreterInterrupted"));
		}
	}

void TracingInterpreterThreadObserver::onInterpreterInterruptedForVectorLoad(EvalFrame* inFrame)
	{
	if (shouldCollectInterpreterTraces())
		{
		mWasInterpreterInterrupted = true;
		mJustTransferredFromMachineCode = false;

		collectInterpreterTrace(Fora::InterpreterTraceTerm::ArbitraryInterpreterLogging("onInterpreterInterruptedForVectorLoad"));
		}
	}

void TracingInterpreterThreadObserver::onTransferToInterpreterFromNativeCode(
						const NativeRuntimeContinuationBase& continuation
						)
	{
	if (shouldCollectInterpreterTraces())
		{
		ImmutableTreeVector<JOV> jovsOfData, jovsOfInstruction;
		ControlFlowGraphJumpPoint targetGraphPoint;
		Nullable<bool> isException;
		std::string fname;

		lassert_dump(
			unwrapNativeContinuationData(continuation, jovsOfData, jovsOfInstruction, targetGraphPoint, isException, fname),
			"couldn't unwrap " << continuationToString(continuation, true)
			);

		collectInterpreterTrace(
			Fora::InterpreterTraceTerm::TransferToInterpreterFromMachineCode(
				targetGraphPoint,
				jovsOfInstruction,
				isException ? jovsOfData.slice(0, jovsOfData.size() - 1) : jovsOfData,
				isException ?
					null() << make_pair(*isException, jovsOfData.back())
				:	null()
				)
			);

		mCurrentTraceStackDepth = 0;

		mJustTransferredFromMachineCode = true;
		}
	else
		{
		double t0 = curClock();

		ImmutableTreeVector<JOV> jovsOfData, jovsOfInstruction;
		ControlFlowGraphJumpPoint targetGraphPoint;
		Nullable<bool> isException;
		std::string fname;

		unwrapNativeContinuationData(continuation, jovsOfData, jovsOfInstruction, targetGraphPoint, isException, fname);

		LOG_DEBUG << "transferring to interpreter from " << fname << " -- "
			<< prettyPrintString(targetGraphPoint.graph().graphName()) << ":" << prettyPrintString(targetGraphPoint.label())
			<< " in " << curClock() - t0
			;
		}
	}


void TracingInterpreterThreadObserver::onInterpreterResumedWithoutValue(EvalFrame* inEvalFrame)
	{
	if (shouldCollectInterpreterTraces())
		{
		collectInterpreterTrace(Fora::InterpreterTraceTerm::ArbitraryInterpreterLogging("onInterpreterResumedWithoutValue"));

		if (mWasInterpreterInterrupted)
			mWasInterpreterInterrupted = false;
		else
			{
			if (mJustTransferredFromMachineCode)
				{
				lassert_dump(mCurrentTraceStackDepth == 0, this);
				}
			}

		if (mJustTransferredFromMachineCode)
			{
			collectInterpreterTrace(Fora::InterpreterTraceTerm::ArbitraryInterpreterLogging("onInterpreterResumedWithoutValue(from_machine_code)"));

			try {
				mJustTransferredFromMachineCode = false;
				collectInterpreterTrace(
					getInitializeInterpreterTrace(inEvalFrame)
					);
				}
			catch(std::logic_error& e)
				{
				std::ostringstream str;
				str << e.what() << "\n";

				str << continuationToString(
					inEvalFrame->callFrame.conts[0].base(),
					true
					);
				throw std::logic_error(str.str());
				}
			}
		}
	}

void TracingInterpreterThreadObserver::onInterpreterResumedWithValue(EvalFrame* inEvalFrame, bool isException)
	{
	if (shouldCollectInterpreterTraces())
		{
		if (mIsReturningToInterpreter)
			{
			mIsReturningToInterpreter = false;
			onReturnedToInterpreter(inEvalFrame, isException);
			}
		else
			{
			mJustTransferredFromMachineCode = false;

			collectInterpreterTrace(
				getInitializeInterpreterTrace(inEvalFrame, isException)
				);
			mCurrentTraceStackDepth = 0;
			}
		}
	}

void TracingInterpreterThreadObserver::onArbitraryInterpreterLogging(std::string msg)
	{
	if (shouldCollectInterpreterTraces())
		collectInterpreterTrace(
			Fora::InterpreterTraceTerm::ArbitraryInterpreterLogging(msg)
			);
	}


void TracingInterpreterThreadObserver::onReturnToNativeCodeButImmediatelyTransferToInterpreter()
	{
	collectInterpreterTrace(
		Fora::InterpreterTraceTerm::ArbitraryInterpreterLogging(
			"onReturnToNativeCodeButImmediatelyTransferToInterpreter"
			)
		);

	mIsReturningToInterpreter = true;
	}

void TracingInterpreterThreadObserver::onFollowingTypedNativeContinuation(
					const NativeRuntimeContinuationValue<1>& continuation,
					const JOV& inResultJOV,
					bool inIsException
					)
	{
	onFollowingTypedNativeContinuation(continuation.base(), inResultJOV, inIsException);
	}

void TracingInterpreterThreadObserver::continuationAdapterFollowed(bool isException, TypedFora::Type type, bool isTargetNative)
	{
	if (shouldCollectInterpreterTraces())
		collectInterpreterTrace(
			Fora::InterpreterTraceTerm::ContinuationAdapterFollowed(
				isException,
				type,
				isTargetNative
				)
			);
	}

void TracingInterpreterThreadObserver::onFollowingTypedNativeContinuation(
					const NativeRuntimeContinuationBase& continuation,
					const JOV& inResultJOV,
					bool inIsException
					)
	{
	if (shouldCollectInterpreterTraces())
		{
		auto compiler = Runtime::getRuntime().getTypedForaCompiler();

		if (compiler->isNativeFunctionPointer(continuation.jumpPtr()))
			{
			ImmutableTreeVector<JOV> jovsOfData, jovsOfInstruction;
			ControlFlowGraphJumpPoint targetGraphPoint;
			Nullable<bool> isException;
			std::string fname;

			if (!unwrapNativeContinuationData(continuation, jovsOfData, jovsOfInstruction, targetGraphPoint, isException, fname))
				{
				//the native stack doesn't have any content - it must be a post-transfer frame
				//that we're just going to rip down.
				TypedFora::Abi::NativeStackFrameWrapper wrapper(continuation);

				onFollowingTypedNativeContinuation(
					wrapper.getAllContinuations().base(),
					inResultJOV,
					inIsException
					);

				return;
				}

			lassert(!isException);

			collectInterpreterTrace(
				Fora::InterpreterTraceTerm::ReturnToMachineCode(
					targetGraphPoint,
					jovsOfInstruction,
					jovsOfData,
					inIsException,
					inResultJOV
					)
				);
			}
		else
			{
			collectInterpreterTrace(
				Fora::InterpreterTraceTerm::ArbitraryInterpreterLogging(
					"continuation is not native. returning to interpreter"
					)
				);

			mIsReturningToInterpreter = true;
			}
		}
	}

void TracingInterpreterThreadObserver::onTransferToNativeCode(
									EvalFrame* inEvalFrame,
									const TypedFora::TypedJumpTarget& inTarget
									)
	{
	if (shouldCollectInterpreterTraces())
		{
		collectInterpreterTrace(
			Fora::InterpreterTraceTerm::TransferToMachineCode(
				ControlFlowGraphJumpPoint(
					inEvalFrame->instructionPtr->getGraph(),
					inEvalFrame->instructionPtr->getLabel()
					),
				TypedFora::jovListFromTypes(inTarget.callSignature())
				)
			);
		mCurrentTraceStackDepth = 0;
		}
	}

void TracingInterpreterThreadObserver::onAxiomResult(EvalFrame* inEvalFrame, bool isException)
	{
	if (shouldCollectInterpreterTraces())
		collectInterpreterTrace(
			Fora::InterpreterTraceTerm::AxiomResult(
				JOV::FromLiveValue(inEvalFrame->resultValue),
				isException,
				inEvalFrame->instructionPtr->getLabel()
				)
			);
	}

void TracingInterpreterThreadObserver::onNewStackframe(EvalFrame* inEvalFrame)
	{
	if (shouldCollectInterpreterTraces())
		{
		mCurrentTraceStackDepth++;

		collectInterpreterTrace(
			Fora::InterpreterTraceTerm::NewStackFrame(
				ControlFlowGraphJumpPoint(
					inEvalFrame->instructionPtr->getGraph(),
					inEvalFrame->instructionPtr->getLabel()
					),
				inEvalFrame->uniqueId
				)
			);
		}
	}

void TracingInterpreterThreadObserver::onReturnedToInterpreter(EvalFrame* inEvalFrame, bool isException)
	{
	if (shouldCollectInterpreterTraces())
		{
		Nullable<ImmutableTreeVector<JOV> > jovs;
		Nullable<JOV> result;

		if (mCurrentTraceStackDepth == 0)
			{
			jovs = emptyTreeVec();

			for (uword_t k = 0; k < inEvalFrame->evalFrameArgList().size(); k++)
				*jovs = *jovs + JOV::FromLiveValue(inEvalFrame->evalFrameArgList()[k]);

			result = JOV::FromLiveValue(inEvalFrame->resultValue);
			}
		else
			mCurrentTraceStackDepth--;

		collectInterpreterTrace(
			Fora::InterpreterTraceTerm::ReturnToStackFrame(
				ControlFlowGraphJumpPoint(
					inEvalFrame->instructionPtr->getGraph(),
					inEvalFrame->instructionPtr->getLabel()
					),
				isException,
				jovs,
				result,
				inEvalFrame->uniqueId,
				inEvalFrame->wasEverMachineCodeFrame ?
					null() << *inEvalFrame->wasEverMachineCodeFrame
				:	null()
				)
			);
		}
	}

void TracingInterpreterThreadObserver::onCachecall()
	{
	if (shouldCollectInterpreterTraces())
		clear();
	}

void TracingInterpreterThreadObserver::onBranch(EvalFrame* inEvalFrame, long whichBranch)
	{
	collectInterpreterTrace(
		Fora::InterpreterTraceTerm::Branch(
			whichBranch,
			inEvalFrame->instructionPtr->getLabel()
			)
		);
	}

Nullable<size_t> TracingInterpreterThreadObserver::hasTrippedLoopTrigger(size_t minExpectedCycles)
	{
	if (mHistory100.fullAndAverageDensityExceeds(minExpectedCycles))
		return null() << mHistory100.distinctItemCount();

	if (mHistory1000.fullAndAverageDensityExceeds(minExpectedCycles))
		return null() << mHistory1000.distinctItemCount();

	if (mHistory10000.fullAndAverageDensityExceeds(minExpectedCycles))
		return null() << mHistory10000.distinctItemCount();

	if (mHistory100000.fullAndAverageDensityExceeds(minExpectedCycles))
		return null() << mHistory100000.distinctItemCount();

	return null();
	}

Fora::InterpreterTraceTerm
				TracingInterpreterThreadObserver::getInitializeInterpreterTrace(EvalFrame* evalFramePtr)
	{
	ImmutableTreeVector<JudgmentOnValue> jovs;
	for (uword_t k = 0; k < evalFramePtr->evalFrameArgList().size(); k++)
		jovs = jovs + JOV::FromLiveValue(
							evalFramePtr->evalFrameArgList()[k]
							);

	return
		Fora::InterpreterTraceTerm::Initialize(
			ControlFlowGraphJumpPoint(
				evalFramePtr->instructionPtr->getGraph(),
				evalFramePtr->instructionPtr->getLabel()
				),
			jovs,
			null(),
			evalFramePtr->uniqueId,
			evalFramePtr->wasEverMachineCodeFrame ?
				null() << *evalFramePtr->wasEverMachineCodeFrame
			: 	null()
			);
	}

Fora::InterpreterTraceTerm
		TracingInterpreterThreadObserver::getInitializeInterpreterTrace(
					EvalFrame* evalFramePtr,
					bool isException
					)
	{
	ImmutableTreeVector<JudgmentOnValue> jovs;
	for (uword_t k = 0; k < evalFramePtr->evalFrameArgList().size(); k++)
		jovs = jovs + JOV::FromLiveValue(
							evalFramePtr->evalFrameArgList()[k]
							);

	return
		Fora::InterpreterTraceTerm::Initialize(
			ControlFlowGraphJumpPoint(
				evalFramePtr->instructionPtr->getGraph(),
				evalFramePtr->instructionPtr->getLabel()
				),
			jovs,
			null() << make_pair(
				isException,
				JOV::FromLiveValue(evalFramePtr->resultValue)
				),
			evalFramePtr->uniqueId,
			evalFramePtr->wasEverMachineCodeFrame ?
				null() << *evalFramePtr->wasEverMachineCodeFrame
			: 	null()
			);
	}

bool TracingInterpreterThreadObserver::shouldCollectInterpreterTraces() const
	{
	return (bool)mTraceCollector;
	}

void TracingInterpreterThreadObserver::collectInterpreterTrace(const Fora::InterpreterTraceTerm& term)
	{
	if (mTraceCollector)
		{
		mTraceCollector->addTraceTerm(term);

		if (mTraceCollector->sendTraces(mConfig->blockUntilTracesAreCompiled()))
			mTraceCollector.reset();
		}
	}

void TracingInterpreterThreadObserver::askTraceHandlerWhetherToCollect(EvalFrame* inFrame)
	{
	if (mTraceCollector)
		return;

	if (hasTrippedLoopTrigger(10))
		{
		clear();

		if ((mTraceCollector = mInterpreterTraceHandler->allocateTraceVisitor()))
			{
			mTraceCollector->addTraceTerm(getInitializeInterpreterTrace(inFrame));
			mCurrentTraceStackDepth = 0;
			}
		}
	}


}
}
