/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/
#pragma once

#include "../Interpreter/InterpreterObserver.hppml"
#include "../Interpreter/InstructionGraph.hppml"
#include "../../core/Clock.hpp"
#include "../Axioms/Axioms.hppml"
#include "InterpreterTraceTerm.hppml"
#include "../Compiler/InstructionCycle.hppml"
#include "../Compiler/CompiledInstructionGroup.hppml"
#include "../JudgmentOnInterpreterTrace/Term.hppml"
#include "../JudgmentOnInterpreterTrace/Trace.hppml"

using Fora::InterpreterTrace;

namespace Fora {
namespace Compiler {

class InterpreterTraceVisitor;

class TracingInterpreterObserver : public InterpreterObserver {
public:
	TracingInterpreterObserver(
				PolymorphicSharedPtr<Fora::Interpreter::InstructionGraph> inInstructionGraph,
				PolymorphicSharedPtr<Fora::Compiler::CompilerInstructionGraph::InstructionGraph> inCompilerInstructionGraph,
				PolymorphicSharedPtr<Axioms> inAxioms
				);

	boost::shared_ptr<Fora::Interpreter::InterpreterThreadObserver> allocateInterpreterHistory(
				boost::shared_ptr<Fora::Interpreter::ExecutionContextConfiguration> config
				);

	boost::shared_ptr<InterpreterTraceVisitor> allocateTraceVisitor();

	void traceVisitorDestroyed(InterpreterTraceVisitor* visitor);

	void traceVisitorPaused(InterpreterTraceVisitor* visitor);

	void traceVisitorResumed(InterpreterTraceVisitor* visitor);

	bool shouldStopTracing(InterpreterTraceVisitor* visitor);

	PolymorphicSharedPtr<Axioms> getAxioms() const { return mAxioms; }

	PolymorphicSharedPtr<Fora::Interpreter::InstructionGraph> getGraph() const
		{
		return mInstructionGraph;
		}

	PolymorphicSharedPtr<Fora::Compiler::CompilerInstructionGraph::InstructionGraph> getCompilerGraph() const
		{
		return mCompilerInstructionGraph;
		}

	void addTrace(
		boost::shared_ptr<Fora::JudgmentOnInterpreterTrace::Trace> inTrace,
		bool blockUntilTraceIsConsumed
		);

	void setTraceLoggerFunction(
				boost::function1<void, ImmutableTreeVector<InterpreterTraceTerm> > inHandler
				);

	CompilerInstructionGraph::InstructionPtr instructionFor(
					const Fora::JudgmentOnInterpreterTrace::Term* term
					);

private:
	boost::shared_ptr<boost::thread> mProcessIncomingTracesThread;

	void processTrace(
		const Fora::JudgmentOnInterpreterTrace::Term* start,
		const Fora::JudgmentOnInterpreterTrace::Term* stop
		);

	void processIncomingTracesLoop();

	void updatedChangedInstructions_();

	boost::mutex mMutex;

	std::set<InterpreterTraceVisitor*> mTraceVisitorsAllocated;

	std::set<InterpreterTraceVisitor*> mTraceVisitorsActive;

	boost::shared_ptr<Fora::JudgmentOnInterpreterTrace::Trace> mUnconsumedTrace;

	boost::condition_variable mHasUnconsumedTrace;

	PolymorphicSharedPtr<Fora::Interpreter::InstructionGraph> mInstructionGraph;

	PolymorphicSharedPtr<Fora::Compiler::CompilerInstructionGraph::InstructionGraph>
																mCompilerInstructionGraph;

	PolymorphicSharedPtr<Axioms> mAxioms;

	boost::function1<void, ImmutableTreeVector<InterpreterTraceTerm> > mTraceLogger;
};

}
}

