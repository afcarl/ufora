/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/
#include "InterpreterTraceVisitor.hppml"
#include "TracingInterpreterObserver.hppml"
#include "InterpreterTraceTerm.hppml"
#include "../../core/Logging.hpp"
#include <sstream>

using Fora::InterpreterTraceTerm;

namespace Fora {
namespace Compiler {

class InterpreterTraceVisitorImpl {
public:
	InterpreterTraceVisitorImpl(
					TracingInterpreterObserver* inHandler,
					InterpreterTraceVisitor* inActualVisitorPtr
					) :
			mHandler(inHandler),
			mIsPaused(false),
			mActualVisitorPtr(inActualVisitorPtr),
			mTraceChecks(0)
		{
		LOG_INFO << "trace visitor created.";

		mTrace.reset(
			new Fora::JudgmentOnInterpreterTrace::Trace(
				mHandler->getAxioms(),
				mHandler->getGraph()->getTypedForaCompiler()
				)
			);

		mTimeOfLastTraceTerm = curClock();
		}

	double timeOfLastTraceTerm()
		{
		return mTimeOfLastTraceTerm;
		}

	~InterpreterTraceVisitorImpl()
		{
		LOG_INFO << "destroying trace with " << mTrace->size() << " terms.";

		mHandler->traceVisitorDestroyed(mActualVisitorPtr);
		}

	//indicate that we will temporarily not be handing in traces
	void pauseTracing()
		{
		boost::mutex::scoped_lock lock(mMutex);

		if (mIsPaused)
			return;

		mIsPaused = true;

		mHandler->traceVisitorPaused(mActualVisitorPtr);
		}

	//indicate that we are going to resume adding trace terms
	void resumeTracing()
		{
		boost::mutex::scoped_lock lock(mMutex);

		if (!mIsPaused)
			return;

		mIsPaused = false;

		mHandler->traceVisitorResumed(mActualVisitorPtr);
		}

	void addTraceTerm(const InterpreterTraceTerm& inTerm)
		{
		boost::mutex::scoped_lock lock(mMutex);

		mTrace->addTraceTerm(inTerm);

		mTimeOfLastTraceTerm = curClock();
		}

	bool sendTraces(bool blockUntilTraceIsCompiled)
		{
		boost::mutex::scoped_lock lock(mMutex);

		mTraceChecks++;
		if (mTraceChecks % 100 == 0)
			if (mHandler->shouldStopTracing(mActualVisitorPtr))
				return true;

		using Fora::JudgmentOnInterpreterTrace::Term;

		Nullable<pair<const Term*, const Term*> > loop = mTrace->searchForLoop();

		if (loop)
			{
			try {
				mTrace->validateTerms();
				}
			catch(std::logic_error& e)
				{
				std::ostringstream s;

				s << e.what() << "\n";

				mTrace->dumpToTextStream(s);

				throw std::logic_error(s.str());
				}


			LOG_INFO << "tracer found a loop: " << loop->first->index() << ", " << loop->second->index();

			mHandler->addTrace(mTrace, blockUntilTraceIsCompiled);

			mTrace.reset(
				new Fora::JudgmentOnInterpreterTrace::Trace(
					mHandler->getAxioms(),
					mHandler->getGraph()->getTypedForaCompiler()
					)
				);

			mTraceChecks = 0;

			return true;
			}

		if (mTrace->size() > 100000)
			{
			LOG_WARN << "very long trace discovered. resetting!";

			mTrace.reset(
				new Fora::JudgmentOnInterpreterTrace::Trace(
					mHandler->getAxioms(),
					mHandler->getGraph()->getTypedForaCompiler()
					)
				);

			mTraceChecks = 0;

			return true;
			}

		return false;
		}

private:
	boost::mutex mMutex;

	long mTraceChecks;

	bool mIsPaused;

	TracingInterpreterObserver* mHandler;

	boost::shared_ptr<Fora::JudgmentOnInterpreterTrace::Trace> mTrace;

	InterpreterTraceVisitor* mActualVisitorPtr;

	double mTimeOfLastTraceTerm;
};


InterpreterTraceVisitor::InterpreterTraceVisitor(TracingInterpreterObserver* inHandler) :
		mImpl(new InterpreterTraceVisitorImpl(inHandler, this))
	{
	}

InterpreterTraceVisitor::~InterpreterTraceVisitor()
	{
	}

void InterpreterTraceVisitor::pauseTracing()
	{
	mImpl->pauseTracing();
	}

void InterpreterTraceVisitor::resumeTracing()
	{
	mImpl->resumeTracing();
	}

void InterpreterTraceVisitor::addTraceTerm(const InterpreterTraceTerm& inTerm)
	{
	mImpl->addTraceTerm(inTerm);
	}

bool InterpreterTraceVisitor::sendTraces(bool blockUntilTraceIsCompiled)
	{
	return mImpl->sendTraces(blockUntilTraceIsCompiled);
	}

double InterpreterTraceVisitor::timeOfLastTraceTerm()
	{
	return mImpl->timeOfLastTraceTerm();
	}

}
}

