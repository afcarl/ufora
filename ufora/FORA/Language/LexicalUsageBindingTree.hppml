/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/
#pragma once

#include "../../core/containers/ImmutableTreeVector.hppml"
#include "../../core/containers/ImmutableTreeMap.hppml"
#include "../../core/Common.hppml"

namespace Fora {
namespace Language {

//data structure to describe what subsection of the lexical binding tree we're using
@type LexicalUsageBindingTree =
		//this element of the tree is explicitly referenced
	-|	Entirely of ()
		//this element of the tree isn't explicitly referenced, but at least one of its
		//children is
	-|	Partially of ImmutableTreeMap<uint32_t, LexicalUsageBindingTree> children
with
	ImmutableTreeVector<ImmutableTreeVector<uint32_t> > flatten = (this->computedFlattened())
{
public:
	//get a tree representing the access of exactly one element of the tree
	static LexicalUsageBindingTree treeForSequence(const ImmutableTreeVector<uint32_t>& indices);

	//update a tree for one more access
	LexicalUsageBindingTree merge(const ImmutableTreeVector<uint32_t>& indices) const;

	//given that we're about to flatten this tree, find the element of the tree that these
	//indices map to.  Return the indices within the element and the offset of the element in the
	//flattened list.
	pair<ImmutableTreeVector<uint32_t>, uint32_t>
	remainingIndicesAndChildIndex(
					const ImmutableTreeVector<uint32_t>& indices
					) const;

	//given that we're about to flatten this tree, find the element of the tree that these
	//indices map to.  Return the indices within the element and the offset of the element in the
	//flattened list.
	ImmutableTreeVector<ImmutableTreeVector<uint32_t> > computedFlattened(void) const;
};

}
}

