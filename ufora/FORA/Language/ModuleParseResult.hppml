/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/
#pragma once

#include "Function.hppml"
#include "StatementTerm.hppml"
#include "ModuleParseError.hppml"

namespace Fora {

@type ExpressionOrParseError =
	-|	Result of Expression expression
	-|	ParseError of ModuleParseError error
	;

@type StatementTermOrParseError =
	-|	Term of StatementTerm expression
	-|	ParseError of ModuleParseError error
	;

/****************************

ModuleParseResult

Holds the results of parsing a SourceCodeTree into FORA, along with
calculations to help determine which portions of the tree are valid
and which are not. We use this infrastructure to ensure that we can
make small changes to FORA code and not force dependent calculations
to recompute and allow the user to still see results that we still
know are good.

****************************/

@type ModuleParseMetadata =
	-| None of ()
	//this item in the tree was a script, but had a simple-parse error
	-| WasUnparsableScript of ()
	//this item in the tree was a script
	-| WasScript of
		//this is the name of the module that actually implements the script's
		//members
		Symbol scriptModule,
		//this is the member of that module which represents the whole value of the script
		Symbol finalResultMember
	//this is an auto-generated module holding the various members of
	//a script that the GUI will want to display
	-| ScriptModule of
		//these are the actual member names in the module that correspond to the
		//hashes
		ImmutableTreeVector<Symbol> symbols
	;

@type ModuleParseResult =
	-| Member of
		Symbol name,
		CSTValue memberMetadata,
		ExpressionOrParseError error,
		CodeLocation location,
		ModuleParseMetadata parseMetadata
	-| Module of
		Symbol name,
		CSTValue moduleMetadata,
		ImmutableTreeVector<ModuleParseError> parseErrors,
		ImmutableTreeMap<Symbol, ModuleParseResult> submodules,
		bool namesOfAllMembersAreKnown,
		CodeLocation location,
		ModuleParseMetadata parseMetadata
	with
		hash_type hash = (hashCPPMLDirect(*this)),
		ImmutableTreeSet<Symbol> freeVariables = (this->computeFreeVariables()),
		ImmutableTreeVector<ModuleParseError> errors = (this->computeAllErrors())
{
public:
	Symbol name() const;

	CodeLocation location() const;

	ImmutableTreeSet<Symbol> computeFreeVariables() const;

	ImmutableTreeVector<ModuleParseError> computeAllErrors() const;

	ImmutableTreeSet<CodeLocation> computeFreeVariableLocations(const Symbol& inVariable) const;


};

}

macro_defineMemberHashFunction(Fora::ModuleParseResult)

