/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/
#pragma once

#include "ModuleParser.hppml"
#include "Function.hppml"
#include "../Primitives/CodeLocation.hppml"
#include "SourceCodeTree.hppml"

class StatementTerm;

namespace Fora {

class ModuleParserImpl {
public:
	ModuleParserImpl();
    explicit ModuleParserImpl(ModuleParser::CodeParsingCallback pythonParser);

	ModuleParseResult parse(
			const SourceCodeTree& s,
			bool allowPrivate,
			const CodeDefinitionPoint& cdp
			);

	ModuleBindingResult bind(
			const ModuleParseResult& parseResult,
			const ImmutableTreeMap<Symbol, pair<ImplValContainer, Nullable<Symbol> > >& freeVariableBindings,
			bool performDecompositionAndPartialBinding
			);

	static CodeDefinitionPoint extendCodeDefinition(CodeDefinitionPoint point, const std::string& path);

private:
	ModuleParseResult tag(const ModuleParseResult& result);

	ImmutableTreeMap<Symbol, ModuleParseResult> parseScriptToModule(
			const std::string& name,
			const std::string& text,
			bool allowPrivate,
			const CodeDefinitionPoint& cdp,
			const std::string& fullName
			);

	ModuleParseResult parse(
			const SourceCodeTree& s,
			bool allowPrivate,
			const CodeDefinitionPoint& cdp,
			const std::string& fullName
			);

	Nullable<Symbol> bindScriptTerms(
			const std::string& nameOfModule,
			const std::vector<std::pair<StatementTerm, CodeLocation>>& terms,
			ImmutableTreeSet<Symbol>& ioAllSymbolsUsed,
			ImmutableTreeMap<Symbol, ModuleParseResult>& ioModuleMembers,
			std::map<Symbol, Expression>& ioBoundSymbolMap,
			ImmutableTreeVector<Symbol>& ioExpressionSymbols
			);

	Nullable<Symbol> bindScriptTerm(
			const StatementTerm& term,
			const CodeLocation& location,
			ImmutableTreeSet<Symbol>& ioAllSymbolsUsed,
			ImmutableTreeMap<Symbol, ModuleParseResult>& ioModuleMembers,
			std::map<Symbol, Expression>& ioBoundSymbolMap,
			ImmutableTreeVector<Symbol>& ioExpressionSymbols
			);


	ModuleParseResult tryToParseModuleDefinition(
			const SimpleParseNode& textAsSimpleParse,
			bool allowPrivate,
			const CodeDefinitionPoint& cdp,
			const std::string& name,
			const std::string& fullName,
			const ImmutableTreeMap<Symbol, ModuleParseResult>& children
			);

	Nullable<Symbol> bindFinalScriptValueTerm(
			const std::string& nameOfModule,
			ImmutableTreeSet<Symbol>& ioAllSymbolsUsed,
			ImmutableTreeMap<Symbol, ModuleParseResult>& ioModuleMembers,
			std::map<Symbol, Expression>& ioBoundSymbolMap,
			ImmutableTreeVector<Symbol>& ioExpressionSymbols
			);

	Expression getFinalScriptValueExpression(
			const std::string& nameOfModule,
			const ImmutableTreeSet<Symbol>& ioAllSymbolsUsed,
			const ImmutableTreeMap<Symbol, ModuleParseResult>& ioModuleMembers,
			const std::map<Symbol, Expression>& ioBoundSymbolMap,
			const ImmutableTreeVector<Symbol>& ioExpressionSymbols
			);

    ModuleParser::CodeParsingCallback mPythonParser;
};

}

