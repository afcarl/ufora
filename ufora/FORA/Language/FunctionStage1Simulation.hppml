/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/
#pragma once

#include "FunctionStage1.hppml"

namespace FunctionStage1 {

@type TrueFalseOrUnknown =
	-| True of ()
	-| False of ()
	-| Unknown of ()
	;

@type ExpressionEvaluationResult =
	-| Result of ImplValContainer val
	-| Exception of ImplValContainer val
	-| Skip of ()
	-| NoMatch of ()
	-| Unknown of ()
	;

class Simulation {
public:
	explicit Simulation(long maxApplyCount) :
			mMaxApplyCount(maxApplyCount),
			mTotalApplyCount(0)
		{
		}

	Nullable<ImplValContainer> simulateFunctionCall(
				Function f,
				ImmutableTreeVector<ImplValContainer> arguments
				);

	ExpressionEvaluationResult simulateFunctionCall(
				Function f,
				ImmutableTreeVector<ImplValContainer> arguments,
				ImmutableTreeMap<VariableAllocator::Variable,
									ImplValContainer>& ioBindings,
				//if false, then we are simulating a function call, and 'skip' statements
				//skip to the next term in the expression. if true, then we are evaluating
				//an inline pattern, and the 'skip target' is the enclosing function evaluation.
				bool isMatchExpression = false
				);

	TrueFalseOrUnknown simulatePatternMatch(
								TuplePattern pattern,
								ImmutableTreeVector<ImplValContainer> args,
								ImmutableTreeMap<VariableAllocator::Variable, ImplValContainer>& outVariableBindings
								);

	ExpressionEvaluationResult simulateExpressionEvaluation(
								Expression e,
								ImmutableTreeMap<VariableAllocator::Variable, ImplValContainer>& variableBindings
								);

	TrueFalseOrUnknown simulatePatternMatch(
								TuplePatternElement pat,
								ImmutableTreeVector<ImplValContainer>& ioArgs,
								ImmutableTreeMap<VariableAllocator::Variable, ImplValContainer>& outBindings
								);

	TrueFalseOrUnknown simulatePatternMatch(
								Pattern pat,
								ImplValContainer val,
								ImmutableTreeMap<VariableAllocator::Variable, ImplValContainer>& outBindings
								);

	ExpressionEvaluationResult evaluateApply(ImmutableTreeVector<ImplValContainer> vals);

private:
	long mTotalApplyCount;

	long mMaxApplyCount;
};

}


