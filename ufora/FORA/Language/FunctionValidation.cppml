/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/
#include "FunctionValidation.hppml"

#include "Function.hppml"
#include "StatementTerm.hppml"
#include "../../core/SimpleParse/SimpleParse.hppml"
#include "Parser.hppml"
#include "../Runtime.hppml"
#include "FunctionBoundAboveVisitor.hppml"

#include "../../core/containers/ImmutableTreeVector.hppml"
#include "../../core/cppml/CPPMLVisit.hppml"

namespace FunctionValidation {

class OrphanBreakCheckingVisitor {
private:
	 bool isCurrentlyInsideLoop;

public:
	OrphanBreakCheckingVisitor(): isCurrentlyInsideLoop(false) { }

	template<class T>
	void processDown(const T& e)
		{
		}

	template<class T>
	void processUp(const T& e)
		{
		}

	ContinueOrStop processDown(const Expression& e)
		{
		@match Expression(e)
			-|	Break() with (locationMetadata) ->> {
					if (!isCurrentlyInsideLoop)
						throw FunctionParseError("Cannot break in non-loop context.", locationMetadata ? locationMetadata->range() : SimpleParseRange());
					}
			-|	While(cond, body) ->> {
					bool wasInLoop = isCurrentlyInsideLoop;
					isCurrentlyInsideLoop = true;

					visit(cond, *this);
					visit(body, *this);

					isCurrentlyInsideLoop = wasInLoop;

					return ContinueOrStop::Stop;
					}
			-|	Foreach(chain) ->> {
					bool wasInLoop = isCurrentlyInsideLoop;
					isCurrentlyInsideLoop = true;

					visit(chain, *this);

					isCurrentlyInsideLoop = wasInLoop;

					return ContinueOrStop::Stop;
					}
			-|	ListComprehension(chain, _) ->> {
					bool wasInLoop = isCurrentlyInsideLoop;
					isCurrentlyInsideLoop = true;

					visit(chain, *this);

					isCurrentlyInsideLoop = wasInLoop;

					return ContinueOrStop::Stop;
					}
			-|	CreateFunction(_, _, _) ->> {
					//The parser calls checkForOrphanBreaks on every
					//CreateFunction it emits. If we encounter one
					//here, we know it's already checked.
					return ContinueOrStop::Stop;
					}
			-|	CreateLambda(_, _) ->> {
					//The parser calls checkForOrphanBreaks on every
					//CreateLambda it emits. If we encounter one
					//here, we know it's already checked.
					return ContinueOrStop::Stop;
					}
			-|	CreateObject(_, _, _) ->> {
					//The parser calls checkForOrphanBreaks on every
					//CreateObject it emits. If we encounter one
					//here, we know it's already checked.
					return ContinueOrStop::Stop;
					}
			-|	CreateClass(_, _, _) ->> {
					//The parser calls checkForOrphanBreaks on every
					//CreateObject it emits. If we encounter one
					//here, we know it's already checked.
					return ContinueOrStop::Stop;
					}
			-|	_ ->> { }
			;

		return ContinueOrStop::Continue;
		}
};

void checkStandaloneExpressionForOrphanBreaks(const Expression& expr)
	{
	OrphanBreakCheckingVisitor vis;
	visit(expr, vis);
	}
void checkFunctionForOrphanBreaks(const Function& func)
	{
	OrphanBreakCheckingVisitor vis;
	visit(func, vis);
	}
void checkObjectDefinitionForOrphanBreaks(const ObjectDefinition& obj)
	{
	OrphanBreakCheckingVisitor vis;
	visit(obj, vis);
	}
void checkClassDefinitionForOrphanBreaks(const ClassDefinition& obj)
	{
	OrphanBreakCheckingVisitor vis;
	visit(obj, vis);
	}
void checkStatementTermsForOrphanBreaks(const ImmutableTreeVector<StatementTerm>& terms)
	{
	OrphanBreakCheckingVisitor vis;
	visit(terms, vis);
	}


class NonLocalAssignmentCheckingVisitor {
public:
	template<class T>
	void processDown(const T& e, bool& outContinue,
	                 const ImmutableTreeSet<Symbol>& boundAbove)
		{
		}
	template<class T>
	void processUp(const T& e,
	               const ImmutableTreeSet<Symbol>& boundAbove)
		{
		}

	void processDown(Expression e, bool& outContinue,
	                 const ImmutableTreeSet<Symbol>& boundAbove)
		{
		@match Expression(e)
			-|	Assign(pat, expr) with (locationMetadata) ->> {
					auto varsAssignedTo = pat.boundVariables();
					for (auto it = varsAssignedTo.begin(); it != varsAssignedTo.end(); ++it)
						if (!boundAbove.contains(*it))
							throw FunctionParseError(
								"Variable '" + it->toString() + "'' not assignable here. "
									+ "The only variables you can reassign are those "
									+ "that have been introduced by a let-statement "
									+ "in the current (i.e., innermost enclosing) function, "
									+ "object-member-term, or list-comprehension expression. "
									+ "Nonlocal variables are read-only. Valid variables to "
									+ "assign to here are: "
									+ prettyPrintString(boundAbove),
								locationMetadata ? locationMetadata->range() : SimpleParseRange()
								);
					}
			-|	Pull(symb, expr) with (locationMetadata) ->> {
					if (!boundAbove.contains(symb))
						throw FunctionParseError(
							"Iterator variable '" + symb.toString() + "'' cannot be pulled from, "
								+ "since it is not not assignable here. "
								+ "The only variables you can reassign are those "
								+ "that have been introduced by a let-statement "
								+ "in the current (i.e., innermost enclosing) function "
								+ "or object-member-term. Nonlocal variables are read-only.",
							locationMetadata ? locationMetadata->range() : SimpleParseRange()
							);
					}
			-|	CreateFunction(name, predicate, metadata) ->> {
					outContinue = false;
					}
			-|	CreateLambda(name, definition) ->> {
					outContinue = false;
					}
			-|	CreateObject(name, definition, metadata) ->> {
					outContinue = false;
					}
			-|	CreateClass(name, definition, metadata) ->> {
					outContinue = false;
					}
			-|	_ ->> { }
			;
		}
};

void checkFunctionForNonLocalAssignments(const Function& func)
	{
	Function f = func;
	while (true)
		@match Function(f)
			-|	Empty() ->> { break; }
			-|	Term(pat, result, rest) ->> {
					ImmutableTreeSet<Symbol> boundVariables = pat.boundVariables();
					checkExpressionForNonLocalAssignments(result, boundVariables);
					f = rest;
					}
			;
	}

void checkExpressionForNonLocalAssignments(const Expression& expr,
                                           const ImmutableTreeSet<Symbol>& localVars)
	{
	NonLocalAssignmentCheckingVisitor checkingVis;
	FunctionBoundAboveVisitor<NonLocalAssignmentCheckingVisitor>
		vis(localVars, &checkingVis);
	visit(expr, vis);
	}

}

