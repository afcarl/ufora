/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/
#include "ApplySignature.hppml"
#include "../ControlFlowGraph/ControlFlowGraph.hppml"

ApplySignature::ApplySignature(uint32_t inCount)
	{
	terms() = (emptyTreeVec() + ApplyArgumentSignature::Normal(null())) * inCount;
	hash() = hashValue(terms());
	}

ApplySignature::ApplySignature(const ImmutableTreeVector<ApplyArgumentSignature>& inTerms)
	{
	terms() = inTerms;
	hash() = hashValue(terms());
	}

ApplySignature::ApplySignature(const ImmutableTreeVector<Nullable<Symbol> >& fieldNames)
	{
	terms() = mapITV(fieldNames,
		[&](Nullable<Symbol> s) {
			return ApplyArgumentSignature::Normal(s);
			}
		);

	hash() = hashValue(terms());
	}

ApplySignature::ApplySignature(const ImmutableTreeVector<ControlFlowApplyArg>& inTerms)
	{
	for (long k = 0; k < inTerms.size(); k++)
		@match ControlFlowApplyArg(inTerms[k])
			-| Normal(fieldname) ->> {
				terms() = terms() + ApplyArgumentSignature::Normal(fieldname);
				}
			-| TupleCall() ->> {
				terms() = terms() + ApplyArgumentSignature::TupleCall();
				}

	hash() = hashValue(terms());
	}

ApplySignature	ApplySignature::withInserted(
						uint32_t index,
						const ApplySignature& inSig
						)
	{
	return ApplySignature(
		terms().slice(0, index) +
			inSig.terms() +
			terms().slice(index)
		);
	}

void CPPMLPrettyPrint<ApplySignature>::prettyPrint(
				CPPMLPrettyPrintStream& s,
				const ApplySignature& toPr
				)
	{
	s << "ApplySignature(";
	for (long k = 0; k < toPr.terms().size();k++)
		{
		s << toPr.terms()[k];
		if (k + 1 < toPr.terms().size())
			s << ", ";
		}
	s << ")";
	}

void CPPMLPrettyPrint<ApplyArgumentSignature>::prettyPrint(
				CPPMLPrettyPrintStream& s,
				const ApplyArgumentSignature& toPr
				)
	{
	@match ApplyArgumentSignature(toPr)
		-|	Normal(name) ->> {
			if (name)
				s << *name << ":_";
			else
				s << "_";
			}
		-|	TupleCall() ->> {
			s << "*";
			}
	}

const ApplySignature& ApplySignature::TupleCall()
	{
	static ApplySignature signature =
		ApplySignature(emptyTreeVec() + ApplyArgumentSignature::TupleCall());

	return signature;
	}


