/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/
#include "ExpressionLocationTagging.hppml"
#include "Function.hppml"
#include "StatementTerm.hppml"
#include "../../core/cppml/CPPMLVisit.hppml"
#include "../../core/Logging.hpp"
#include "../../core/cppml/CPPMLTransform.hppml"
#include <boost/bind.hpp>

namespace ExpressionLocationTagging {
template<class T>
bool anyRootExpressionsWithoutIds(
	const T& inValue
	);

template<class T>
T setCodeLocationTransform (
	const T& valueWithoutMetadata,
	ImmutableTreeVector<Nullable<SimpleParseRange> > simpleParseRangesInOrder,
	const CodeDefinitionPoint& inCodeDefinitionPoint,
	hash_type baseHash,
	hash_type closureHash
	);
}

namespace {

PatternWithName editLocationMetadata(
		const PatternWithName& p,
		const ExpressionLocationMetadata& locationMetadata
		)
	{
	return PatternWithName(
		p.pattern(),
		p.name(),
		p.condition(),
		locationMetadata
		);
	};

/*
This transformer operates on Expressions, setting their locationMetadata common data member to
Empty. It is the first in a sequence of 3 operations on Expressions done in `setCodeLocation`

It also contains a mutable member variable mSimpleParseRangesInOrder which keeps track of the
possible SimpleParseRanges (in order) tagged in the `locationMetadata` seen
(or the corresponding ranges stored in the GlobalCodeLocationRegistry of an appearing hash).
These data are intended to be passed to a RegisterCodeLocationVisitor.
*/
class WithoutMetadataTransformer {
private:
	mutable ImmutableTreeVector<Nullable<SimpleParseRange> > mSimpleParseRangesInOrder;
public:
	const ImmutableTreeVector<Nullable<SimpleParseRange> >& simpleParseRangesInOrder() const
		{
		return mSimpleParseRangesInOrder;
		}

	template<class T>
	Nullable<T> processDown(const T& t, bool& b) const
		{
		return null();
		}

	template<class T>
	Nullable<T> processUp(const T& t) const
		{
		return null();
		}

	Nullable<Expression> processUp(const Expression& expr) const
		{
		return null();
		}

	Nullable<Expression> processDown(const Expression& expr, bool& ioContinue) const
		{
		return processDown_(
			expr,
			ioContinue,
			boost::bind(
				&CPPML::replaceCommonData<Expression>,
				_1,
				_2
				)
			);
		}

	Nullable<Function> processDown(const Function& inFun, bool& ioContinue) const
		{
		return processDown_(
			inFun,
			ioContinue,
			boost::bind(
				&CPPML::replaceCommonData<Function>,
				_1,
				_2
				)
			);
		}

	Nullable<ClassDefinition> processDown(const ClassDefinition& inFun, bool& ioContinue) const
		{
		return processDown_(
			inFun,
			ioContinue,
			[](ClassDefinition transformed, ExpressionLocationMetadata newMeta) {
				ClassDefinition res = transformed;
				res.locationMetadata() = newMeta;
				return res;
				}
			);
		}

	Nullable<ObjectDefinition> processDown(const ObjectDefinition& inFun, bool& ioContinue) const
		{
		return processDown_(
			inFun,
			ioContinue,
			[](ObjectDefinition transformed, ExpressionLocationMetadata newMeta) {
				ObjectDefinition res = transformed;
				res.locationMetadata() = newMeta;
				return res;
				}
			);
		}

	Nullable<PatternWithName> processDown(
				const PatternWithName& patternWithName,
				bool& ioContinue
				) const
		{
		return processDown_(
		 	patternWithName,
		 	ioContinue,
		 	boost::bind(
		 		&editLocationMetadata, _1, _2
		 		)
		 	);
		}

	template<class T, class func_type>
	Nullable<T> processDown_(const T& in, bool& ioContinue, const func_type& inFunc) const
		{
		@match ExpressionLocationMetadata(in.locationMetadata())
			-|  WithSimpleParseRange(simpleParseRange) ->> {
				mSimpleParseRangesInOrder =
					mSimpleParseRangesInOrder + (null() << simpleParseRange);

				return null() << inFunc(in, ExpressionLocationMetadata::Empty());
				}
			-|	WithId(id) ->> {
				Nullable<CodeLocation> loc = GlobalCodeLocationRegistry::getCodeLocation(id);
				if (loc)
					mSimpleParseRangesInOrder =
						mSimpleParseRangesInOrder + (null() << loc->range());
				else
					mSimpleParseRangesInOrder =
						mSimpleParseRangesInOrder + null();

				return null() << inFunc(in, ExpressionLocationMetadata::Empty());
				}
			-|  _ ->> {
				mSimpleParseRangesInOrder = mSimpleParseRangesInOrder + null();

				return null();
				}
		}
};

/*
This transformer operates on Expressions all of whose subnodes have Empty
locationMetadata (for instance, the output of a WithoutMetadataTransformer). The second transform
on Expressions done in `setCodeLocation`.

This transformer takes a "base" hash `mBaseHash` and traverses an Expression. For each node in the
expression, we mark its `locationMetadata` with the hash: mBaseHash + hash(# times we've seen this
expression during traversal).
*/
class WithHashesByTraversalTransformer {
private:
	mutable map<hash_type, uint32_t> mCounts;

	hash_type mBaseHash;

	hash_type mClosureBaseHash;

public:
	WithHashesByTraversalTransformer(
					const hash_type& baseHash,
					const hash_type& closureBaseHash
					):
			mBaseHash(baseHash),
			mClosureBaseHash(closureBaseHash)
		{}

	template<class T>
	Nullable<T> processDown(const T& t, bool& b) const
		{
		return null();
		}

	template<class T>
	Nullable<T> processUp(const T& t) const
		{
		return null();
		}

	Nullable<Expression> processUp(const Expression& expr) const
		{
		return null();
		}

	Nullable<Expression> processDown(const Expression& expr, bool& ioContinue) const
		{
		Expression exprToProcess = expr;

		//if this is a closure-creating expression, we need to reset the counts. The 'baseHash'
		//should be a function only of the parent base hash and the number of times we've seen
		//this exact closure-creating subexpression.
		@match Expression(expr)
			-| CreateFunction(name, predicate, meta) ->> {

				ioContinue = false;

				WithHashesByTraversalTransformer transformer(
					mClosureBaseHash + hashValue(predicate),
					mClosureBaseHash
					);

				exprToProcess =
					Expression::CreateFunction(
						name,
						::transform(predicate, transformer),
						meta
						);
				}
			-| CreateObject(name, predicate, meta) ->> {

				ioContinue = false;

				WithHashesByTraversalTransformer transformer(
					mClosureBaseHash + hashValue(predicate),
					mClosureBaseHash
					);

				exprToProcess =
					Expression::CreateObject(
						name,
						::transform(predicate, transformer),
						meta
						);
				}
			-| CreateClass(name, predicate, meta) ->> {

				ioContinue = false;

				WithHashesByTraversalTransformer transformer(
					mClosureBaseHash + hashValue(predicate),
					mClosureBaseHash
					);

				exprToProcess =
					Expression::CreateClass(
						name,
						::transform(predicate, transformer),
						meta
						);
				}
			-| CreateLambda(name, predicate) ->> {

				ioContinue = false;

				WithHashesByTraversalTransformer transformer(
					mClosureBaseHash + hashValue(predicate),
					mClosureBaseHash
					);

				exprToProcess =
					Expression::CreateLambda(
						name,
						::transform(predicate, transformer)
						);
				}
			-| _ ->> {
				}

		return processDown_(
			exprToProcess,
			ioContinue,
			exprToProcess.hash(),
			boost::bind(
				&CPPML::replaceCommonData<Expression>,
				_1, _2
				)
			);
		}

    Nullable<Function> processDown(const Function& inFun, bool& ioContinue) const
        {
        return processDown_(
            inFun,
            ioContinue,
            inFun.hash(),
            boost::bind(
                &CPPML::replaceCommonData<Function>,
                _1, _2
                )
            );
        }

	Nullable<ClassDefinition> processDown(const ClassDefinition& inFun, bool& ioContinue) const
		{
		return processDown_(
			inFun,
			ioContinue,
			hashValue(inFun),
			[](ClassDefinition transformed, ExpressionLocationMetadata newMeta) {
				ClassDefinition res = transformed;
				res.locationMetadata() = newMeta;
				return res;
				}
			);
		}

	Nullable<ObjectDefinition> processDown(const ObjectDefinition& inFun, bool& ioContinue) const
		{
		return processDown_(
			inFun,
			ioContinue,
			hashValue(inFun),
			[](ObjectDefinition transformed, ExpressionLocationMetadata newMeta) {
				ObjectDefinition res = transformed;
				res.locationMetadata() = newMeta;
				return res;
				}
			);
		}

	Nullable<PatternWithName> processDown(const PatternWithName& p, bool& ioContinue) const
		{
		return processDown_(
			p,
			ioContinue,
			p.hash(),
			boost::bind(
				&editLocationMetadata, _1, _2
				)
			);
		}

	template<class T, class func_type>
	Nullable<T> processDown_(
			const T& in,
			bool& ioContinue,
			hash_type inHash,
			const func_type& inFunc
			) const
		{
		mCounts[inHash + hash_type(1)]++;

		@match ExpressionLocationMetadata(in.locationMetadata())
			-|	Empty() ->> {
				return null() <<
					inFunc(
						in,
						ExpressionLocationMetadata::WithId(
							mBaseHash + inHash + hash_type(mCounts[inHash + hash_type(1)])
							)
						);
				}
			-|	_ ->> {
				lassert_dump(
					false,
					"WithHashesByTraversalTransformers should only be called on Expressions"
					" with Empty locationMetadata."
					);
				}

		}
};

/*
The final in a sequence of 3 operations on Expressions done in `setCodeLocation`.

This transformer takes a list of SimpleParseRanges (typically produced from a
WithoutMetadataTransformer) and a "base" CodeDefinitionPoint and
traverses an Expression tree (all of whose nodes locationMetadata must be WithId). For each node in
the expression tree, if there is a SimplParseRange associated, then we register the codelocation
determined by this range and the base CodeDefinitionPoint in the GlobalCodeLocationRegistry
to the hash marked in this node's locationMetadata.
*/
//TODO think tom: should we store a previousSimpleParseRange?
class RegisterCodeLocationVisitor {
private:
	const CodeDefinitionPoint mBaseDefPoint;
	ImmutableTreeVector<Nullable<SimpleParseRange> >::const_iterator
		mCurSimpleParseRangeIterator;
	const ImmutableTreeVector<Nullable<SimpleParseRange> >::const_iterator
		mSimpleParseRangeEndIterator;
public:
	RegisterCodeLocationVisitor(
				const CodeDefinitionPoint& baseDefPoint,
				const ImmutableTreeVector<Nullable<SimpleParseRange> >& simpleParseRangesInOrder
				)
			:
				mBaseDefPoint(baseDefPoint),
				mCurSimpleParseRangeIterator(simpleParseRangesInOrder.begin()),
				mSimpleParseRangeEndIterator(simpleParseRangesInOrder.end())
		{}

	template<class T>
	void processDown(const T& e, bool& outContinue)
		{
		}
	template<class T>
	void processUp(const T& e)
		{
		}

	void processDown(const Expression& inExpr, bool& outContinue)
		{
		processDown_(
			inExpr,
			outContinue,
			boost::bind(
				&GlobalCodeLocationRegistry::setCodeLocation,
				_1, _2
				)
			);
		}

	void processDown(const Function& inFun, bool& outContinue)
		{
		processDown_(
			inFun,
			outContinue,
			boost::bind(
				&GlobalCodeLocationRegistry::setCodeLocation,
				_1, _2
				)
			);
		}

	void processDown(const PatternWithName& inExpr, bool& outContinue)
		{
		processDown_(
			inExpr,
			outContinue,
			boost::bind(
				&GlobalCodeLocationRegistry::setCodeLocation,
				_1, _2
				)
			);
		}

	void processDown(const ClassDefinition& inFun, bool& ioContinue)
		{
		processDown_(
			inFun,
			ioContinue,
			boost::bind(
				&GlobalCodeLocationRegistry::setCodeLocation,
				_1, _2
				)
			);
		}

	void processDown(const ObjectDefinition& inFun, bool& ioContinue)
		{
		processDown_(
			inFun,
			ioContinue,
			boost::bind(
				&GlobalCodeLocationRegistry::setCodeLocation,
				_1, _2
				)
			);
		}

	template<class T, class func_type>
	void processDown_(const T& in, bool& outContinue, const func_type& inFunc)
		{
		lassert(mCurSimpleParseRangeIterator != mSimpleParseRangeEndIterator);
		if (*mCurSimpleParseRangeIterator)
			{
			@match ExpressionLocationMetadata(in.locationMetadata())
				-|	WithId(id) ->> {
						inFunc(
							id,
							CodeLocation(
								mBaseDefPoint,
								**mCurSimpleParseRangeIterator
							)
						);
					}
				-|	_ ->> {
					lassert_dump(
						false,
						"RegisterCodeLocationVisitors should only run on Expressions whose "
						"locationMetadata is WithId."
						);
					}
			}
		++mCurSimpleParseRangeIterator;
		}

};

template<class T>
T setCodeLocation_(
				const T& in,
				const CodeDefinitionPoint& inCodeDefinitionPoint
				)
	{
	using namespace ExpressionLocationTagging;

	if (!anyRootExpressionsWithoutIds(in))
		return in;

	WithoutMetadataTransformer withoutMetadataTransformer;
	T withoutMetadata = transform(in, withoutMetadataTransformer);

	return setCodeLocationTransform(
		withoutMetadata,
		withoutMetadataTransformer.simpleParseRangesInOrder(),
		inCodeDefinitionPoint,
		hashValue(inCodeDefinitionPoint),
		hashValue(inCodeDefinitionPoint)
		);
	}

template<class T, class func_type>
T setCodeLocation_(
			const T& in,
			const CodeLocation& inCodeLocation,
			const func_type& inFunc
			)
	{
	if (in.locationMetadata().isEmpty())
		{
		T withRange =
			inFunc(
				in,
				ExpressionLocationMetadata::WithSimpleParseRange(
					inCodeLocation.range()
					)
				);

		return setCodeLocation_(withRange, inCodeLocation.defPoint());
		}

	return setCodeLocation_(in, inCodeLocation.defPoint());
	}

} // end of anonymous namespace

namespace ExpressionLocationTagging {

class AnyRootExpressionsWithoutIdsVisitor {
private:
	bool mAny;
public:
	AnyRootExpressionsWithoutIdsVisitor() :
			mAny(false)
		{
		}

	bool anyAreWithoutIds() const
		{
		return mAny;
		}

	template<class T>
	void processDown(const T& e, bool& outContinue)
		{
		if (mAny)
			outContinue = false;
		}

	template<class T>
	void processUp(const T& e)
		{
		}

	void processDown(const Expression& inExpr, bool& outContinue)
		{
		outContinue = false;

		if (!inExpr.locationMetadata().isWithId())
			mAny = true;
		}

	void processDown(const PatternWithName& inPatternWithName, bool& outContinue)
		{
		outContinue = false;

		if (!inPatternWithName.locationMetadata().isWithId())
			mAny = true;
		}
	};

template<class T>
bool anyRootExpressionsWithoutIds(
				const T& inValue
				)
	{
	AnyRootExpressionsWithoutIdsVisitor visitor;

	visit(inValue, visitor);

	return visitor.anyAreWithoutIds();
	}

Expression setCodeLocation(
				const Expression& inExpr,
				const CodeLocation& inCodeLocation
			)
	{
	return setCodeLocation_(
		inExpr,
		inCodeLocation,
		boost::bind(
			&CPPML::replaceCommonData<Expression>,
			_1, _2
			)
		);
	}

Expression setCodeLocation(
			const Expression& inExpr,
			const CodeDefinitionPoint& inCodeDefinitionPoint
			)
	{
	return setCodeLocation_(inExpr, inCodeDefinitionPoint);
	}

PatternWithName setCodeLocation(
			const PatternWithName& inPatternWithName,
			const CodeLocation& inCodeLocation
			)
	{
	return setCodeLocation_(
		inPatternWithName,
		inCodeLocation,
		boost::bind(
			&editLocationMetadata,
			_1, _2
			)
		);
	}

PatternWithName setCodeLocation(
				const PatternWithName& inPatternWithName,
				const CodeDefinitionPoint& inCodeDefinitionPoint
				)
	{
	return setCodeLocation_(inPatternWithName, inCodeDefinitionPoint);
	}

template<class T>
T setCodeLocationTransform (
				const T& valueWithoutMetadata,
				ImmutableTreeVector<Nullable<SimpleParseRange> > simpleParseRangesInOrder,
				const CodeDefinitionPoint& inCodeDefinitionPoint,
				hash_type baseHash,
				hash_type closureHash
				)
	{
	map<hash_type, uint32_t> closureCounts;

	WithHashesByTraversalTransformer transformer(baseHash, closureHash);

	T valueWithHashes = transform(valueWithoutMetadata, transformer);

	RegisterCodeLocationVisitor
		registerCodeLocationVisitor(
				inCodeDefinitionPoint,
				simpleParseRangesInOrder
				);
	visit(
		valueWithHashes,
		registerCodeLocationVisitor
		);

	return valueWithHashes;
	}

ImmutableTreeVector<hash_type> hashStatementTermsByDependencies(
				const ImmutableTreeVector<StatementTerm>& inTerms
				)
	{
	map<hash_type, long> counts;

	ImmutableTreeVector<hash_type> hashes;

	for (long k = 0; k < inTerms.size(); k++)
		{
		hash_type termHash = hashValue(inTerms[k]);
		counts[termHash]++;
		hashes = hashes + (termHash + hash_type(counts[termHash]));
		}

	return hashes;
	}

ImmutableTreeVector<StatementTerm> setCodeLocation(
				const ImmutableTreeVector<StatementTerm>& inExpr,
				const CodeDefinitionPoint& inCodeDefinitionPoint
				)
	{
	if (!anyRootExpressionsWithoutIds(inExpr))
		return inExpr;

	ImmutableTreeVector<StatementTerm> withoutMetadata;
	ImmutableTreeVector<ImmutableTreeVector<Nullable<SimpleParseRange> > > ranges;

	for (long k = 0; k < inExpr.size(); k++)
		{
		WithoutMetadataTransformer withoutMetadataTransformer;
		withoutMetadata = withoutMetadata + transform(inExpr[k], withoutMetadataTransformer);

		ranges = ranges + withoutMetadataTransformer.simpleParseRangesInOrder();
		}

	ImmutableTreeVector<StatementTerm> terms;

	ImmutableTreeVector<hash_type> hashes = hashStatementTermsByDependencies(withoutMetadata);

	for (long k = 0; k < withoutMetadata.size(); k++)
		terms = terms + setCodeLocationTransform(
			withoutMetadata[k],
			ranges[k],
			inCodeDefinitionPoint,
			hashes[k],
			hashValue(inCodeDefinitionPoint)
			);

	return terms;
	}

Expression withoutCodeLocationMetadata(
				const Expression& in
				)
	{
	using namespace ExpressionLocationTagging;

	WithoutMetadataTransformer withoutMetadataTransformer;
	return transform(in, withoutMetadataTransformer);
	}

} // namespace ExpressionLocationTagging

