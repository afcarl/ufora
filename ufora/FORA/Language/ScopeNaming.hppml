/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/
#pragma once

#include "../../core/cppml/CPPMLTransform.hppml"

class Expression;
class StatementTerm;
template <class T>
class ImmutableTreeVector;

namespace ScopeNaming {
    class NameClassMediatorsWithScopesTransformer {
    public:
        NameClassMediatorsWithScopesTransformer(
                const std::string& inContextName
                ): mContextPath(inContextName),
                   mClassMediatorSuffix(rootClassMediatorSuffix())
            {
            }

        NameClassMediatorsWithScopesTransformer(
                const std::string& inContextName,
                const std::string& inClassMediatorName
                ): mContextPath(inContextName),
                   mClassMediatorSuffix(inClassMediatorName)
            {
            }

        template<class T>
        Nullable<T> processDown(const T&, bool&) const
            {
            return null();
            }

        template<class T>
        Nullable<T> processUp(const T&) const
            {
            return null();
            }

        Nullable<Expression> processDown(
                const Expression& inExpr,
                bool& ioContinue
                ) const;

        Nullable<ApplyArgument> processDown(
                const ApplyArgument& applyArgument,
                bool& ioContinue
                ) const;

        Nullable<StatementTerm> processDown(
                const StatementTerm& statementTerm,
                bool& ioContinue
                ) const;

        Nullable<ObjectDefinitionTerm> processDown(
                const ObjectDefinitionTerm& objectDefinitionTerm,
                bool& ioContinue
            ) const;

    private:
        const std::string mContextPath;
        const std::string mClassMediatorSuffix;

        static const std::string& defaultClassMediatorSuffix();

        static const std::string& rootClassMediatorSuffix();

        static std::string allocateClassMediatorSuffixForPatternWithName(
            const PatternWithName& inPatternWithName
            );

        std::string classMediatorName() const;

        std::string classMediatorNameFor(const Expression&) const;

        static std::string suffixForExpression(const Expression&);

        static std::string classMediatorNameForSuffix(
            const std::string& prefix, const std::string& suffix
            );

        bool isDefaultClassMediatorSuffix() const;

        std::pair<PatternWithName, Expression> transformElement(
                const std::pair<PatternWithName, Expression>& element
                ) const;

        ImmutableTreeVector<pair<PatternWithName, Expression> >
        transformElements(
                const ImmutableTreeVector<pair<PatternWithName, Expression> >& elements
                ) const;

        Expression_SequenceType transformSequenceInRighthandLetBinding(
            const Expression_SequenceType& sequence,
            const std::string& newSuffix
            ) const;

        Expression transformLetBindingRightHandSide(
            const Expression& letBindingRightHandSide,
            const std::string& newSuffix
            ) const;

        Expression_LetType transformLetInRighthandLetBinding(
            const Expression_LetType& let,
            const std::string& newSuffix
            ) const;
        };

    template<class T>
    T nameClassMediatorsWithScopes(
            const T& in, const std::string& nameScope
            )
        {
        return transform(
            in,
            NameClassMediatorsWithScopesTransformer(nameScope)
            );
        }


    }

