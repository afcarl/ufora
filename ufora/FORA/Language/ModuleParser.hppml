/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/
#pragma once

#include "../../core/PolymorphicSharedPtr.hpp"
#include "../../core/containers/ImmutableTreeMap.hppml"
#include "../../core/math/Alternative.hpp"
#include "StatementTerm.hppml"
#include "Parser.hppml"
#include "../Primitives/CodeLocation.hppml"

class CodeDefinitionPoint;
class ImplValContainer;
class Symbol;


namespace Fora {

class SourceCodeTree;
class ModuleParseResult;
class ModuleBindingResult;
class ModuleParserImpl;

/************************

ModuleParser

Infrastructure for parsing SourceCodeTree objects into FORA modules.

This object maintains a cache of values parsed in the past, and also
re-organizes the internal structure of modules in an attempt to
decouple functions so that small changes to the code will not change
the sha-hashes of most objects.

This object is single-threaded;

************************/

class ModuleParser : public PolymorphicSharedPtrBase<ModuleParser> {
public:
	using StatementTermsAndErrors =
		ImmutableTreeVector<Alternative<pair<StatementTerm, Nullable<CodeLocation> >, FunctionParseError>>;
	using CodeParsingCallback = std::function<StatementTermsAndErrors(const std::string&)>;
	ModuleParser();
	explicit ModuleParser(CodeParsingCallback pythonParser);

	ModuleParseResult parse(
			const SourceCodeTree& s,
			bool allowPrivate,
			const CodeDefinitionPoint& cdp
			);

	//bind as much of the object as is possible with the information we have
	ModuleBindingResult bind(
			const ModuleParseResult& parseResult,
			const ImmutableTreeMap<Symbol, pair<ImplValContainer, Nullable<Symbol> > >& freeVariableBindings,
			bool performDecompositionAndPartialBinding
			);

private:
	boost::shared_ptr<ModuleParserImpl> mImpl;
};

}

