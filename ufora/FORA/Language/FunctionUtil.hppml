/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/
#pragma once

#include "../../core/containers/ImmutableTreeSet.hppml"

class Expression;
class Symbol;
class CodeLocation;
class CodeDefinitionPoint;
class ListComprehensionChain;
class StatementTerm;

//return a list of free variables that are assigned to in this expression
ImmutableTreeSet<Symbol>	computeAssignedVariables(const Expression& inExpr);

ImmutableTreeSet<Symbol>	computeAssignedVariables(const ListComprehensionChain& inExpr);

//return a list of free variables that are read directly in the evaluation of the
//first level of the expression. We don't include variables evaluated in closures
//or required to produce closures.  So "x + 1" would contain 'x', but
//"fun(){x+1}" wouldn't.

//Another way to say it is that if this expression were evaluated within an object
//we want to know which variables would actually be accessed, excluding those
//that are accessed through 'self'
ImmutableTreeSet<Symbol>	computeVariablesReadDirectly(const Expression& inExpr);

//find the free variables in an expression and note where they are used.
//primarily used to give feedback in the parser
ImmutableTreeSet<CodeLocation> computeFreeVariableLocations(
										const Expression& inExpr,
										const Symbol& inVariable
										);

//find the assigned variables in an expression and note where they are used.
ImmutableTreeSet<CodeLocation> computeAssignedVariableLocations(
										const Expression& inExpr,
										const Symbol& inVariable
										);

//return a set of CodeLocation objects containing return statements
ImmutableTreeSet<CodeLocation> computeReturnStatementLocations(
										const Expression& inExpr
										);

//pick a symbol starting with 'base' that's not in the given set of symbols
Symbol	pickSymbolDistinctFrom(string base, const ImmutableTreeSet<Symbol>& ioSymbols);


//return a copy of the expression 'e' that returns the value
//
//	(e1, (v1, v2, ..., vn))
//
//where the v's are variables that are free and assigned by 'e'.
//similarly, it catches any exceptions and throws the expression
//(orig_exception, (v1, v2, ..., vn)) from the original stacktrace

//this function throws an std::logic_error if the 'e' uses a
//return statement.
Expression	packAssignedVarsIntoTuple(const Expression& in);

Expression wrapExpressionInCacheCall(const Expression& in);



//return a copy of the StatementTerm as an expression that returns the value
//  (e, (v1, v2, ..., vn))
//where the v's are variables that are bound by the statement term or assigned
//to by it.
pair<ImmutableTreeSet<Symbol>, Expression>
					extractExpressionAndBoundVariables(
								const StatementTerm& inStatementTerm
								);


