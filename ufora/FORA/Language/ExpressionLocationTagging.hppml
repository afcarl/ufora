/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/
#pragma once

#include "../../core/containers/ImmutableTreeVector.hppml"

class Expression;
class StatementTerm;
class PatternWithName;
class CodeLocation;
class CodeDefinitionPoint;

namespace ExpressionLocationTagging {

/*
Performs the following:
1. builds an expression e1 which is the same as inExpr, but has no ExpressionMetadata
2. build a new tree e2 by traversing e1: for each node e' of e1, build a new node in e2 having
expression metadata: h := hash(e1) + hash(# of times we've seen e').
3. "simultaneously traverse" inExpr and e2: for each corresponding pair (e, e') of nodes,
e in inExpr, e1 in e2, if e is marked with a SimpleParseRange spr, then in the
GlobalCodeLocationRegistry's codeLocationsMap, set h -> CodeLocation(cdp, spr)
4. return e2.

Note that
a) We can uniquely identify Expression nodes by the hashes constructed above, and can therefore
determine their CodeLocation, if any exists.
b) The hashes constructed above are whitespace insensitive
	(assuming no `source` metadata field has been set).
*/
Expression setCodeLocation(
				const Expression& inExpr,
				const CodeLocation& inCodeLocation
				);

Expression setCodeLocation(
				const Expression& inExpr,
				const CodeDefinitionPoint& inCodeDefinitionPoint
				);

ImmutableTreeVector<StatementTerm> setCodeLocation(
				const ImmutableTreeVector<StatementTerm>& inExpr,
				const CodeDefinitionPoint& inCodeDefinitionPoint
				);

PatternWithName setCodeLocation(
				const PatternWithName&,
				const CodeLocation&
				);

PatternWithName setCodeLocation(
				const PatternWithName&,
				const CodeDefinitionPoint&
				);

Expression withoutCodeLocationMetadata(
				const Expression& in
				);


} // namespace ExpressionLocationTagging


