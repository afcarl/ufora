/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/
#pragma once

#include <vector>

template<class T1>
class ImmutableTreeSet;

template<class T1>
class ImmutableTreeVector;

template<class T1, class T2>
class ImmutableTreeMap;

class Symbol;
class Function;
class Expression;


namespace Fora {

//get a list of simple member accesses
//e.g. "x.y" where x is free and 'y' is a known symbol
ImmutableTreeSet<std::pair<Symbol, Symbol> >
		freeMemberAccesses(const Function& e);

ImmutableTreeSet<std::pair<Symbol, Symbol> >
		freeMemberAccesses(const Expression& f);

ImmutableTreeSet<ImmutableTreeVector<Symbol> >
		freeMemberAccessChains(const Function& e);

ImmutableTreeSet<ImmutableTreeVector<Symbol> >
		freeMemberAccessChains(const Expression& f);

//rebind various free member accesses to given subexpressions
Expression rebindFreeMemberAccesses(
			const Expression& e,
			const ImmutableTreeMap<std::pair<Symbol, Symbol>, Expression>& remap
			);

Function rebindFreeMemberAccesses(
			const Function& f,
			const ImmutableTreeMap<std::pair<Symbol, Symbol>, Expression>& remap
			);

Expression rebindFreeMemberAccessChains(
			const Expression& e,
			const ImmutableTreeMap<ImmutableTreeVector<Symbol>, Expression>& remap
			);


}

