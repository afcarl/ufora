/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/
#pragma once

#include "../../core/containers/ImmutableTreeVector.hppml"
#include "../../core/cppml/MemoizeByTagAndHash.hppml"
#include "../Primitives/Symbol.hpp"

class ControlFlowApplyArg;

class ApplyArgumentSignature;

macro_memoizeCppmlClassByTagAndHash(ApplyArgumentSignature);

@type
	ApplyArgumentSignature =
		-|	Normal of Nullable<Symbol> name
		-|	TupleCall of ()
and
	ApplySignature = ImmutableTreeVector<ApplyArgumentSignature> terms, hash_type hash {
	public:
		ApplySignature(const ImmutableTreeVector<ControlFlowApplyArg>& terms);

		ApplySignature(const ImmutableTreeVector<ApplyArgumentSignature>& terms);

		ApplySignature(const ImmutableTreeVector<Nullable<Symbol> >& fieldNames);

		ApplySignature(uint32_t inCount);

		ApplySignature	withInserted(
			uint32_t index,
			const ApplySignature& inSig
			);

		static const ApplySignature& TupleCall();
	}
	;


template<>
class CPPMLPrettyPrint<ApplyArgumentSignature> {
public:
		static void prettyPrint(CPPMLPrettyPrintStream& stream, const ApplyArgumentSignature& toPr);
};

template<>
class CPPMLPrettyPrint<ApplySignature> {
public:
		static void prettyPrint(CPPMLPrettyPrintStream& stream, const ApplySignature& toPr);
};

macro_defineMemberHashFunction(ApplySignature);
