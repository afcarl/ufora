/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/
#ifndef FORA_Function_fwd_hppml_
#define FORA_Function_fwd_hppml_

#include "../../core/math/Hash.hpp"
#include "../../core/containers/ImmutableTreeVector.hppml"
#include "../Primitives/Symbol.hpp"
#include "../../core/cppml/CPPMLPrettyPrinter.hppml"
#include <boost/unordered_map.hpp>

class Function;
class Expression;
class ApplyArgument;
class TuplePatternElement;
class Pattern;
class ObjectDefinitionBody;
class ListComprehensionChain;

//tell CPPML that these classes have 'hash' defined
macro_defineMemberHashFunctionForward(Function)
macro_defineMemberHashFunctionForward(Expression)
macro_defineMemberHashFunctionForward(ApplyArgument)
macro_defineMemberHashFunctionForward(Pattern)
macro_defineMemberHashFunctionForward(TuplePatternElement)
macro_defineMemberHashFunctionForward(ObjectDefinitionBody)
macro_defineMemberHashFunctionForward(ListComprehensionChain)

//compare Expression by hash
template<>
class CPPMLEquality<Expression, void> {
public:
		static char cmp(const Expression& lhs, const Expression& rhs);
};

//compare Function by hash
template<>
class CPPMLEquality<Function, void> {
public:
		static char cmp(const Function& lhs, const Function& rhs);
};

template<>
class CPPMLPrettyPrint<Function> {
public:
	static void prettyPrint(CPPMLPrettyPrintStream& s,
							const Function& t);
};

#endif

