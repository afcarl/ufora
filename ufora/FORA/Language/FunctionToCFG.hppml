/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/
#pragma once

#include "../../core/cppml/CPPMLOpaqueHandle.hppml"
#include "../../core/threading/ThreadSafeMap.hpp"
#include "ProcessedCFG.hppml"
#include "FunctionStage3.hppml"

class ApplySignature;
class ClassMediator;
class ClassMediatorResumption;
class CodeLocation;
class CompilerCache;
class ControlFlowGraph;
class Function;

namespace Fora {
namespace Language {

class ProcessedCFG;

//represents a conversion cache from a ClassMediator or Function to a native CFG
//under various call signatures.
class FunctionToCFG {
private:
	FunctionToCFG(const FunctionToCFG& o) = delete;
	FunctionToCFG(const FunctionToCFG&& o) = delete;
public:
	FunctionToCFG(CompilerCache& singletonCompilerCache);

	ControlFlowGraph functionToCFG(
			const ClassMediator& code,
			const ClassMediatorResumption& resumption,
			const ApplySignature& args
			) const;

	ControlFlowGraph functionToCFG(
			const CPPMLOpaqueHandle<Function>& code,
			const ClassMediatorResumption& resumption,
			const ApplySignature& args
			) const;

	ControlFlowGraph functionToCFG(
			const CPPMLOpaqueHandle<ClassMediator>& code,
			const ClassMediatorResumption& resumption,
			const ApplySignature& args
			) const;

	const CompilerCache& getCompilerCache() const { return mCompilerCache; }

private:
	ProcessedCFG	functionToCFG(
						const FunctionStage3::Function& inFun,
						const ClassMediator& inMediator,
						const ApplySignature& inSignature,
						VariableAllocator& inAlloc
						) const;

	ProcessedCFG	functionToProcessedCfg(
						const ClassMediator& code,
						const ApplySignature& args
						) const;

	ApplySignature signatureToUseFor(
						const ClassMediatorResumption& resumption,
						const ApplySignature& inArgs
						) const;

	string nodeToUseFor(const ClassMediator& mediator,
						const ProcessedCFG& inCFG,
						const ClassMediatorResumption& inResumption
						) const;

	ProcessedCFG getProcessedCfg(	const pair<hash_type, hash_type>& codeAndSignatureHash,
									const ClassMediator& code,
									const ApplySignature& sigToUse
									) const;

	ControlFlowGraph getCfgForEnteringProcessedCfg(
											const std::string& nodeToUse,
											uword_t incomingVarCount,
											const ProcessedCFG& cfg,
											const std::string& mediatorName
											) const;

	ControlFlowGraph getCfgForResumingProcessedCfg(
											const std::string& nodeToUse,
											const ApplySignature& args,
											const ProcessedCFG& cfg,
											const std::string& mediatorName
											) const;


	ControlFlowNode getResumpionNodeEntrypoint(	const std::string& nodeToJumpTo,
												const ApplySignature& args
												) const;

	ControlFlowNode getResumptionNodeBody(	const std::string& nodeToUse,
											uword_t boundMemberVariableCount
											) const;

	static ThreadSafeMap<pair<hash_type, hash_type>, ProcessedCFG> mProcessedCFGCache;

	CompilerCache& mCompilerCache;

};

}
}
