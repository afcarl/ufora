/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/
#pragma once

#include "FunctionStage3.hppml"

namespace FunctionStage3 {

@type Simplifier =
		VariableAllocator* allocator,
		ImmutableTreeMap<variable_index_type, variable_index_type> varmap,
		ImmutableTreeMap<variable_index_type, CSTValue> constantmap,
		//(key,value) entries in throwmap indicate that throwing _anything_ to key
		//is equivalent to throwing value.second to value.first
		ImmutableTreeMap<variable_index_type, pair<variable_index_type, CSTValue> > throwmap
{
public:
		explicit Simplifier(VariableAllocator& inAlloc);

		template<class T>
		Nullable<T>	processDown(const T& in, bool& ioContinue) const
			{
			return null();
			}
		template<class T>
		Nullable<T>	processUp(const T& in) const
			{
			return null();
			}

		Simplifier mapped(variable_index_type var, variable_index_type to) const;

		Simplifier	mapped(variable_index_type var, CSTValue val) const;

		Simplifier	constantThrowMapped(
						variable_index_type varInner,
						variable_index_type varMappedTo,
						CSTValue val
						) const;

		Nullable<Input> processDown(
										const Input& in,
										bool& ioContinue
										) const;


		Nullable<Expression> processTryBlock(const Expression& in, bool& ioContinue) const;

		Nullable<Expression> processDown(
										const Expression& in,
										bool& ioContinue
										) const;
};

Function	simplify(const Function& inF, VariableAllocator& inAllocator);

}

