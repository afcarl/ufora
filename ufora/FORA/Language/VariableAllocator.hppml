/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/
#pragma once

#include "../../core/lassert.hpp"
#include "../../core/cppml/CPPMLPrettyPrinter.hppml"

//used to allocate the distinct variables required by the Stage1..Stage3 models
//each instance holds a pointer to a shared index value
//which is incremented when 'get' is called
class VariableAllocator {
public:
		//opaque wrapper around a unique integer value
		@type Variable = uint64_t val {
		public:
				bool operator<(const Variable& other) const
					{
					return val() < other.val();
					}
				bool operator==(const Variable& other) const
					{
					return val() == other.val();
					}
		};

		VariableAllocator() : mIndex(0) {}
		explicit VariableAllocator(Variable& index) :
				mIndex(&index)
			{
			}

		Variable	get(void) const
			{
			lassert(mIndex);

			Variable tr = *mIndex;
			mIndex->val()++;

			return tr;
			}

		Variable currentState() const
			{
			return *mIndex;
			}

		void advanceToState(Variable v)
			{
			*mIndex = v;
			}

private:
		mutable Variable* mIndex;
};


template<>
class CPPMLPrettyPrint<VariableAllocator::Variable> {
public:
		static void prettyPrint(
							CPPMLPrettyPrintStream& stream,
							const VariableAllocator::Variable& toPr
							)
			{
			stream << "var_" << toPr.val();
			}
};

