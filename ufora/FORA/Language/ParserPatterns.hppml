/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/
#ifndef FORA_Language_ParserPatterns_hppml_
#define FORA_Language_ParserPatterns_hppml_

#include "Function.hppml"

class SimpleParseNode;
class Symbol;
class ParserExpressions;

class ParserPatterns {
public:
	typedef ImmutableTreeVector<SimpleParseNode>	NodeList;


	ParserPatterns(const ParserExpressions& inExprParser) :
			mExprParser(inExprParser)
		{
		}

	ImmutableTreeVector<TuplePatternElement> parseCommaSepToTuplePatternElements(
						const NodeList& nodes) const;

	PatternWithName			parseConcatSeqToNamedPattern(const NodeList& nodes) const;

private:
	Nullable<Symbol>		parseNodeToPatternName(const SimpleParseNode& node) const;
	pair<Nullable<Symbol>, Nullable<Expression> >
							parseConcatSeqToPatternName(const NodeList& node) const;


	PatternWithName 		parseNodeToNamedPattern(const SimpleParseNode& node) const;

	pair<Pattern, NodeList> parseConcatSeqToPattern(const NodeList& nodes) const;

	pair<Pattern, NodeList> parseConcatSeqToPatternTerm(const NodeList& nodes) const;

	pair<Pattern, NodeList> parseConcatSeqToPatternTermWithAnd(const NodeList& nodes) const;

	Nullable<pair<Pattern, NodeList> >
	tryParseConcatSeqToIdentifierWithParens(const NodeList& nodes) const;

	//the entrypoint to the pattern parser
	TuplePatternElement 	parseNodeToTuplePatternElement(const SimpleParseNode& node) const;

	const ParserExpressions& mExprParser;
};







#endif //include guard

