/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/
#pragma once

#include "VariableAllocator.hppml"
#include "../../core/math/Nullable.hpp"
#include "FunctionStage1.hppml"
#include "FunctionStage2.hppml"

namespace FunctionStage2 {

class CallVar;
class CallVarFrame;

/******
Converter

Converts Stage1 code to Stage2 code
******/

@type Converter =
		VariableAllocator				allocator,
		Nullable<variable_index_type>	skipTarget
{
public:
	Converter	withSkipTarget(variable_index_type index) const;

	FunctionStage2::Expression	convert(const FunctionStage1::Expression& inExpr) const;

	FunctionStage2::Expression	convertInner(const FunctionStage1::Expression& inExpr) const;

	FunctionStage2::ApplyArgument	convert(const FunctionStage1::ApplyArgument& arg) const;

	ImmutableTreeVector<FunctionStage2::ApplyArgument>	convert(
			const ImmutableTreeVector<FunctionStage1::ApplyArgument>& arg
			) const;

	FunctionStage2::Expression	convertFunMatch(
							const FunctionStage1::Function& inFun,
							const CallVarFrame& inFrame
							) const;

	FunctionStage2::Expression	catchAllAndThrowTo(const FunctionStage2::Expression& expr,
									variable_index_type throwTarget) const;

	FunctionStage2::Expression	matchTheNoneConstantAndThrowTo(
									variable_index_type throwTarget,
									const FunctionStage2::Expression& expr
									) const;

	static CSTValue tuplePatternEltToPatMatchConstant(const FunctionStage1::TuplePatternElement& elt);

	Nullable<FunctionStage2::Expression>
					expandMultiPatternMatch(
							const FunctionStage1::TuplePattern& pattern,
							const CallVarFrame& callArgs,
							const FunctionStage2::Expression& ifSuccess,
							variable_index_type throwTarget
							) const;

	FunctionStage2::Expression
					expandMultiPatternMatchUsingPackedTuple(
							const FunctionStage1::TuplePattern& pattern,
							const CallVarFrame& callArgs,
							const FunctionStage2::Expression& ifSuccess,
							variable_index_type throwTarget
							) const;

	FunctionStage2::Expression	expandMultiPatternMatch(
							const FunctionStage1::TuplePattern& pattern,
							const FunctionStage2::Expression& tupleExpression,
							const FunctionStage2::Expression& ifSuccess,
							variable_index_type throwTarget
							) const;

	FunctionStage2::Expression expandTPEAgainstSingleValue(
							const FunctionStage1::TuplePatternElement& inPat,
							variable_index_type inVarToMatch,
							variable_index_type throwTarget,
							const FunctionStage2::Expression& ifSuccess
							) const;

	FunctionStage2::Expression expandMultiPatternMatchFromVariables(
							const FunctionStage1::TuplePattern& pattern,
							const ImmutableTreeVector<variable_index_type>& patVars,
							const FunctionStage2::Expression& ifSuccess,
							variable_index_type throwTarget
							) const;

	//expand 'pattern' being applied to 'expression'. should evaluate to
	//'ifSuccess' in the successful case, and
	//if the pattern doesn't match, should jump to 'throwTarget'
	FunctionStage2::Expression	expandPatternMatch(
							const FunctionStage1::Pattern& pattern,
							const FunctionStage2::Expression& expression,
							const FunctionStage2::Expression& ifSuccess,
							variable_index_type throwTarget
							) const;

};

FunctionStage2::Function	convert(	const FunctionStage1::Function& inFunction,
								const ApplySignature& inSig,
								const VariableAllocator& allocator
								);

FunctionStage2::Expression remapVariables(
						const FunctionStage2::Expression& in,
						const ImmutableTreeMap<variable_index_type, variable_index_type>& inMap
						);
}



