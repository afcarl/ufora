/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/
#pragma once

#include "Function.hppml"
#include "StatementTerm.hppml"
#include "../../core/SimpleParse/SimpleParse.hppml"


@type FunctionParseError = string error, SimpleParseRange range {
public:
		FunctionParseError(string inError, const SimpleParseNode& node)
			{
			error() = inError;
			range() = node.extent();
			}
		FunctionParseError(string inError, const ImmutableTreeVector<SimpleParseNode>& nodes)
			{
			lassert(nodes.size());
			error() = inError;
			range() = SimpleParseRange(nodes[0].extent().start(), nodes.back().extent().stop());
			}
		FunctionParseError(string inError, const SimpleParseNode& nodeStart, const SimpleParseNode& nodeEnd)
			{
			error() = inError;
			range() = SimpleParseRange(nodeStart.extent().start(), nodeEnd.extent().stop());
			}
		FunctionParseError(string inError, const SimpleParsePosition& extent)
			{
			error() = inError;
			range() = SimpleParseRange(extent,extent);
			}
};

@type NumericConstantParseError =
	-| Other of string msg
	-| OutOfRange of ()
	-| InvalidCharacter of ()
	-| Unknown of ()
	;

template <class T>
T decimalLexicalCast(string& toCast);

Expression parseToExpression(
					const SimpleParseNode& s,
					bool allowPrivate,
					const CodeDefinitionPoint& cdp,
					const std::string& inNameScope
					);

Expression parseObjectDefinitionBodyToExpression(
					const SimpleParseNode& s,
					bool allowPrivate,
					const CodeDefinitionPoint& cdp,
					Symbol moduleName,
					Symbol moduleFullname
					);

Function parseStringToFunction(
					const string& s,
					bool allowPrivate,
					const CodeDefinitionPoint& cdp,
					const string& nameScope
					);

ImmutableTreeVector<StatementTerm> parseStringToStatementTermsWithLocationInfo(
											const string& s,
                                            const CodeDefinitionPoint& cdp,
                                            const string& nameScope
                                            );

Expression prependMemberToCreateObjectExpression(
									const Expression& createExpr,
									const string& memberName,
									const Expression& memberExpr
									);
Expression prependMemberToCreateObjectExpressionWithMetadata(
									const Expression& createExpr,
									const string& memberName,
									const Expression& memberExpr,
									const ImplValContainer& inMetadata
									);
CSTValue	prependMemberMetadata(
								const Nullable<Expression>& meta,
								CSTValue memberMeta
								);

CSTValue	parseNumericConstant(const string& s);

bool isOperatorCharacter(string c);


