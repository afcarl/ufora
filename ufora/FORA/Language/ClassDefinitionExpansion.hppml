/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/
#pragma once

#include <string>
#include "../../core/math/Nullable.hpp"

class ClassDefinition;
class ObjectDefinition;
class CSTValue;
class ClassMediator;
class Type;

/*********
map a class definition into its appropriate object form

e.g., something like

	class {
		member x;
		f(y) { x + y }
		}

becomes

	object {
		operator()(x) {
			object {
				f(y) { x + y }
				}
			}
		}

********/
ObjectDefinition expandClassDefinition(
						const ClassDefinition& classDef,
						CSTValue metadata,
						std::string surroundingClassName
						);

/*************
Mix the terms of 'inMixinType' to 'inBaseType'.  Callers assume that the two lists of
element types will be appended to each other.

Returns 'null' if the mixin is not sensible.
**************/
Nullable<ClassMediator> processClassMediatorMixin(
						const ClassMediator& inBase,
						const ClassMediator& inMixin,
						long inBaseBoundItemCount
						);

Nullable<Type> processClassMediatorMixin(
						const Type& inBase,
						const Type& inMixin
						);


