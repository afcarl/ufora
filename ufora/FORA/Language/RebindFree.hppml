/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/
#pragma once

#include <utility>

template<class T1, class T2>
class ImmutableTreeMap;

template<class T1>
class ImmutableTreeSet;

class CSTValue;
class Symbol;
class Function;
class Expression;
class ObjectDefinitionBody;
class ClassDefinitionBody;

//rebind free variables as various things
Function rebindFreeAsConstants(
				const Function& e,
				const ImmutableTreeMap<Symbol, CSTValue>& freeVars);
Expression rebindFreeAsConstants(
				const Expression& e,
				const ImmutableTreeMap<Symbol, CSTValue>& freeVars);

template<class T> // supported types T: Function, Expression
T rebindFreeAs(
				const T& e,
				const ImmutableTreeMap<Symbol, Expression>& freeVars);

template<class T> // supported types T: ObjectDefinitionBody, ClassDefinitionBody
T rebindFreeAs(
				const T& e,
				const ImmutableTreeMap<Symbol, Symbol>& freeVars);

//free variables in 'freeVars' get rebound from 'x' to 'x()'
Function rebindFreeAsLambdas(
				const Function& e,
				const ImmutableTreeSet<Symbol>& freeVars);
Expression rebindFreeAsLambdas(
				const Expression& e,
				const ImmutableTreeSet<Symbol>& freeVars);


//creates a fresh variable and rebinds all free members as accesses of that
std::pair<Expression, Symbol>
				rebindFreeAsLexicalScopeAccess(const Expression& e);

