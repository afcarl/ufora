/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/
#pragma once

#include "Function.hppml"
#include "StatementTerm.hppml"
#include "../../core/math/Alternative.hpp"
#include "../../core/SimpleParse/SimpleParse.hppml"
#include "../../core/containers/MapWithIndex.hpp"

class FunctionParseError;

@type ParserExpressions =
		bool allowPrivate,
		CodeDefinitionPoint codeDefPoint,
		std::string classMediatorName,
		boost::shared_ptr<int> scopeCounter
	{
public:
	ParserExpressions(
			bool inAllowPrivate,
			const CodeDefinitionPoint& inCodeDefPoint,
			const std::string& classMediatorName
			);

	typedef ImmutableTreeVector<SimpleParseNode>	NodeList;

	static const map<string, CSTValue>& constants();
	static const map<CSTValue, std::set<string>>& constantsInverse();
	static const MapWithIndex<string, CSTValue>& twoWayConstants();

	static const set<string>& keywords();

	static std::string invalidIdentifierErrorMessage(const std::string& inCandidate);

	static bool isValidIdentifier(const std::string& inCandidate);
	static bool isValidIdentifier(const SimpleParseNode& node);

	static bool isValidVariableName(const string& i);
	static bool isValidVariableName(const SimpleParseNode& node);

	static CSTValue extractUserMetadataField(const CSTValue& metadata);
	static CSTValue extractUserMetadataField(const Expression& e);

	Nullable<pair<PatternWithName, NodeList> > getAssignment(const NodeList& node) const;

	//parse a statement from some nodes. if no expression can be matched,
	//throw a FunctionParseError with 'message' as the contents
	pair<Expression, NodeList> parseConcatSeqToStatementOrElseError(
									const NodeList& nodes,
									const string& message,
									const SimpleParseNode& priorNode
									) const;

	pair<Expression, NodeList> parseConcatSeqToStatementOrElseErrorFirstBracesAreNotLambdas(
									const NodeList& nodes,
									const string& message,
									const SimpleParseNode& priorNode
									) const;

	//Level0 - essentially statements
	Nullable<pair<Expression, NodeList> > parseConcatSeqToStatement(
											const NodeList& nodes) const;

	Nullable<pair<Expression, NodeList> > parseConcatSeqToStatementInner(
											const NodeList& nodes) const;

	//parse a statement from some nodes. if no expression can be matched,
	//throw a FunctionParseError with 'message' as the contents
	pair<Expression, NodeList> parseConcatSeqToExpressionOrElseError(
									const NodeList& nodes,
									const string& message,
									bool excludingOr = false
									) const;


	//extract a sequence of operators and OpExpressionAtoms, and then apply
	//the operator glomming process
	Nullable<pair<Expression, NodeList> > parseConcatSeqToExpression(
					const NodeList& nodes,
					//should we exclude 'or' because we're in a pattern?
					bool excludingOr = false
					) const;

	Nullable<pair<Expression, NodeList> > parseConcatSeqToExpressionInner(
									const NodeList& nodes,
									bool excludingOr = false
									) const;
	//extract expression atoms
	Nullable<pair<Expression, NodeList> > parseConcatSeqToOpExpressionAtom(
									const NodeList& nodes
									) const;

	Nullable<pair<Expression, NodeList> > parseConcatSeqToOpExpressionAtomInner(
									const NodeList& nodes
									) const;

	Nullable<Expression> parseSingleNodeToToExpressionOrNull(
									const SimpleParseNode& node
									) const;

	Nullable<Expression>
	tryParseNodeToCreateDictionaryExpression(const SimpleParseNode& node) const;

	Nullable<Expression> parseSingleNodeToToExpressionOrNullInner(
									const SimpleParseNode& node
									) const;

	pair<Expression, NodeList> parseOpAtomExprAndConcatSeqToOpAtomExpr(
									const Expression& agent,
									const NodeList& nodes,
									const NodeList& nodesIncludingAgent
									) const;

	pair<Expression, NodeList> parseOpAtomExprAndConcatSeqToOpAtomExprInner(
									const Expression& agent,
									const NodeList& nodes,
									const NodeList& nodesIncludingAgent
									) const;

	Expression parseAddPairToDictionary(
									const Expression& agent,
									const NodeList& nodes
									) const;

	NodeList extractCommas(const SimpleParseNode& node) const;

	//Parses an input prefix of the form:
	// (`(` TuplePattern `)` `{` Expressions `}`)*,
	//returning a function and the remaining input.
	pair<Function, NodeList> extractFunction(const NodeList& nodes, bool tagWithRange = false) const;

	bool isParens(const SimpleParseNode& node) const;

	bool isBraces(const SimpleParseNode& node) const;

	bool isBrackets(const SimpleParseNode& node) const;

	ImmutableTreeVector<pair<CSTValue, ObjectDefinitionTerm> >
							parseObjectBody(const SimpleParseNode& node) const;


	ImmutableTreeVector<pair<CSTValue, ClassDefinitionTerm> >
	parseClassBody(const SimpleParseNode& node, bool allowClassTerms) const;



	static CSTValue expressionToConstant(const Expression& inVal, const SimpleParseNode& node);

	Expression	objectTermsAndMetadataToObjectExpression(
			const CSTValue&	inMetadataExpr,
			const ImmutableTreeVector<pair<CSTValue, ObjectDefinitionTerm> >& terms,
			const Nullable<Symbol>& selfName,
			const SimpleParseRange& defRange,
			const ImmutableTreeVector<pair<Nullable<Symbol>, CSTValue> >& additionalMetas,
			const std::string& newClassMediatorName
			) const;

	Expression	objectTermsAndMetadataToClassExpression(
		const CSTValue&	inMetadata,
		const ImmutableTreeVector<pair<CSTValue, ClassDefinitionTerm> >& terms,
		const Nullable<Symbol>& className,
		const Nullable<Symbol>& selfName,
		const SimpleParseRange& defRange,
		const ImmutableTreeVector<pair<Nullable<Symbol>, CSTValue> >& additionalMetas,
		const std::string& newClassMediatorName
		) const;

	void parseClassTags(
		const NodeList& classTags,
		Nullable<Symbol>& outSelfSym,
		Nullable<Symbol>& outClassSym) const;

	void parseObjectTags(const NodeList& objectTags, Nullable<Symbol>& outSelfSym) const;

	pair<CSTValue, ClassDefinitionTerm> parseMemberFunction(
				const NodeList& subnodes,
				uword_t termCountSoFar,
				bool allowClassTerms
				) const;

	CSTValue parseMetadata(const NodeList& metaNodes) const;

	pair<CSTValue, ClassDefinitionTerm> applyMetadataNodes(
											ImmutableTreeVector<SimpleParseNode> metaNodes,
											ObjectDefinitionTerm innerTerm,
											bool allowClassTerms
											) const;

	pair<CSTValue, ClassDefinitionTerm>
								bindExpressionToClassDefinitionTerm(
											const SimpleParseNode& node,
											const Expression& body,
											bool allowClassTerms
											) const;

	std::string extractClassDefinitionMemberNameString(
								const SimpleParseNode& node,
								int indexInDefinitionList
								) const;

	std::string extractClassDefinitionMemberNameString(
										const ImmutableTreeVector<SimpleParseNode>& node,
										int indexInDefinitionList
										) const;

	pair<NodeList, ObjectDefinitionTerm>	parseMemberFunctionName(
								const NodeList& nodes,
								const Function& body
								) const;

	Nullable<pair<CSTValue, ClassDefinitionTerm> > tryParseDataMember(
								const NodeList& nodes,
								bool allowClassTerms
								) const;


	Nullable<pair<CSTValue, ClassDefinitionTerm> > tryParseMixinTerm(
								const NodeList& nodes,
								bool allowClassTerms
								) const;

	void parseClassDefinitionTerm(
							const SimpleParseNode& node,
							ImmutableTreeVector<pair<CSTValue, ClassDefinitionTerm> >&	ioTerms,
							bool allowClassTerms
							) const;

	//given a sequence of nodes, the first of which is 'object', produce an
	//expression binding the object and a list of remaining unparsed nodes
	pair<Expression, NodeList> parseObjectDefinition(
									const NodeList& nodes,
									const CSTValue& inMetadataExpr
									) const;

	//given a sequence of nodes, the first of which is 'class', produce an
	//expression binding the object and a list of remaining unparsed nodes
	pair<Expression, NodeList> parseClassDefinition(
									const NodeList& nodes,
									const CSTValue& inMetadataExpr
									) const;

	//given a sequence of nodes, the first of which is 'fun', produce an
	//expression binding the function and a list of remaining unparsed nodes
	pair<Expression, NodeList> parseFunctionDefinition(
											const NodeList& nodes
											) const;

	//evaluate the comma-separated list in 'node' and return each cache-call argument along with
	//a 'near' argument if present
	ImmutableTreeVector<CacheCallArgument> parseCacheArgList(const SimpleParseNode& node) const;

	CacheCallArgument parseCacheArg(const SimpleParseNode& node) const;

	ImmutableTreeVector<Expression> parseExpressionList(const SimpleParseNode& node) const;

	ImmutableTreeVector<Expression> parseExpressionList(const NodeList& nodes) const;

	ImmutableTreeVector<ApplyArgument> parseCallArguments(const SimpleParseNode& node, bool allowEmpty) const;

	ImmutableTreeVector<ApplyArgument> parseCallArguments(const NodeList& nodes, bool allowEmpty) const;

	//parse a set of concatenated nodes. to an expression. consume all the nodes
	//and throw a FunctionParseError if they don't parse
	Expression parseConcatenationSequence(const NodeList& nodes) const;

	Expression parseToExpression(const SimpleParseNode& node, bool allowEmpty = true) const;

	CSTValue parseToConstant(const SimpleParseNode& node) const;

	Expression parseToExpressionInner(const SimpleParseNode& node, bool allowEmpty = true) const;

	Expression parseNodesToCreateListBalanced(const ImmutableTreeVector<SimpleParseNode>& nodes) const;

	ImmutableTreeVector<StatementTerm> unpackNodeToStatementTerms(
											const SimpleParseNode& inNode
											) const;

	ImmutableTreeVector<StatementTerm> unpackConcatSeqToStatementTerms(
					const NodeList& nodes
					) const;

	ImmutableTreeVector<Alternative<pair<StatementTerm, CodeLocation>, FunctionParseError> > unpackNodeToStatementTermsOrParseErrors(
											const SimpleParseNode& inNode
											) const;

	ImmutableTreeVector<Alternative<pair<StatementTerm, CodeLocation>, FunctionParseError> > unpackConcatSeqToStatementTermsOrParseErrors(
					const NodeList& nodes
					) const;

	void	validateLetStatementTerm(
						const ImmutableTreeVector<pair<PatternWithName, Expression> >& inLets,
						const NodeList& nodes
						) const;

	Expression parsePossibleIteratorComprehension(const NodeList& nodes,
												const SimpleParseNode& node
												) const;

	ListComprehensionChain parseListComprehension(const NodeList& nodes) const;

	//ensure that 'e' is tagged with a CodeSourceRange node.
	Expression tagExpression(const Expression& e, const NodeList& nodes) const;

	//ensure that 'e' is tagged with a CodeSourceRange node.
	Expression tagExpression(const Expression& e, const SimpleParseNode& node) const;

	//ensure that 'e' is tagged with a CodeSourceRange node.
	Expression tagExpression(const Expression& e, const SimpleParseRange& node) const;

	//ensure that 'e' is tagged with a CodeSourceRange node.
	Expression tagExpression(	const Expression& e,
								const SimpleParseNode& nodeStart,
								const SimpleParseNode& nodeStop
								) const;

	Function tagExpression(const Function&, const SimpleParseRange&) const;

	Function tagFunction(
		const Function&,
		const SimpleParseNode& nodeStart,
		const SimpleParseNode& nodeStop
		) const;

	Function tagFunction(
		const Function&,
		const SimpleParseRange&
		) const;

	Symbol extractOpOrIdentifier(const SimpleParseNode& node) const;

	//ensure that 'e' is tagged with a CodeSourceRange node.
	template<class T1, class T2>
	Nullable<T1> tagExpression(const Nullable<T1>& e, const T2& node) const
		{
		if (e)
			return null() << tagExpression(*e, node);
		return e;
		}

	template<class T1>
	pair<T1, NodeList> tagExpression(
						const pair<T1, NodeList>& e,
						const NodeList& nodes
						) const
		{
		return
			make_pair(
				tagExpression(
					e.first,
					//the nodes that were removed are the ones we want
					//for tagging
					nodes.slice(0, nodes.size() - e.second.size())
					),
				e.second
				);
		}
};

