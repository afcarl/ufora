/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/
#pragma once

#include "../Primitives/Symbol.hpp"
#include "LexicalUsageBindingTree.hppml"
#include "../Core/ClassMediator.hppml"
#include "VariableAllocator.hppml"

#include "LexicalUsageBindingTree.hppml"

#include "FunctionStage1.hppml"

typedef VariableAllocator::Variable variable_index_type;

namespace Fora {
namespace Language {

typedef ImmutableTreeMap<Symbol, variable_index_type>	symbol_map_type;

class LexicalBindingSelector {
public:
	LexicalBindingSelector(
					const ImmutableTreeSet<Symbol>& freeVariables,
					const symbol_map_type& varMap,
					const LexicalBindingMap& curBindingMap,
					const Nullable<variable_index_type>& currentBoundVar
					);

	const ImmutableTreeVector<FunctionStage1::Expression>& expressionsToBind() const;

	const ImmutableTreeMap<Symbol, LexicalBinding>& newLexicalBindings() const;

private:
	void buildBindingTree();

	void bindBindingTreeElements();

	FunctionStage1::Expression expressionForIndices(const ImmutableTreeVector<uint32_t>& inIndices);

	void bindFreeVarsNotInLexicalTable();

	Nullable<LexicalUsageBindingTree> mBindingTree;

	const ImmutableTreeSet<Symbol>& mFreeVariables;
	const symbol_map_type& mVarMap;
	const LexicalBindingMap& mCurBindingMap;

	ImmutableTreeVector<FunctionStage1::Expression> mExpressionsToBind;

	ImmutableTreeMap<Symbol, LexicalBinding> mNewLexicalBindings;

	Nullable<variable_index_type> mCurBoundVar;

	uword_t mTotalExpressionsBound;
};

}
}

