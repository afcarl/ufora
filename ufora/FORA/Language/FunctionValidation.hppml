/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/
#ifndef FORA_Language_FunctionValidation_hppml_
#define FORA_Language_FunctionValidation_hppml_

#include "Function.hppml"
#include "StatementTerm.hppml"
#include "../../core/SimpleParse/SimpleParse.hppml"
#include "ExpressionLocationMetadata.hppml"

#include "../Primitives/CodeLocation.hppml"
#include "../Primitives/Symbol.hpp"

#include "../../core/containers/ImmutableTreeVector.hppml"

#include <string>

namespace FunctionValidation {

//Various functions for orphan-break checking.
void checkStandaloneExpressionForOrphanBreaks(const Expression& expr);
void checkFunctionForOrphanBreaks(const Function& func);
void checkObjectDefinitionForOrphanBreaks(const ObjectDefinition& obj);
void checkClassDefinitionForOrphanBreaks(const ClassDefinition& obj);
void checkStatementTermsForOrphanBreaks(const ImmutableTreeVector<StatementTerm>& terms);

//Functions for non-local assignment checking.
//A function may not assign to variables declared outside of it.
//That is,
//    let x = 0; (fun () { x = 1 })(); x
//gives rise to an error, and if it didn't, would have result 0.
//
//Note, however:
//The function of a catch block permits nonlocal assignment.
//That is,
//    let x = 0; try { throw "" } catch(_) { x = 1 }; x
//gives result 1.
//Moreover, pattern matches also permit nonlocal assignment.
//That is,
//    let x = 0; match (0) with (0) { x = 1 }; x
//gives result 1.
void checkFunctionForNonLocalAssignments(const Function& func);
void checkExpressionForNonLocalAssignments(const Expression& expr,
                                           const ImmutableTreeSet<Symbol>& localVars);

CodeLocation getLocationFromLocationMetadata(const ExpressionLocationMetadata& meta,
                                             const std::string& descForErrMsg);

}

#endif

