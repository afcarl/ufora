/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/
#pragma once

#include <string>
#include "ControlFlowGraph.hppml"
#include "ControlFlowGraphNodeMap.hppml"
#include "../../core/containers/ImmutableTreeSet.hppml"
#include "../../core/containers/ImmutableTreeMap.hppml"

//cleans up the graph contained in inNodes. May remove nodes, but guarantees that a nodes in
//'inNodesToPreserve' are maintained.
ImmutableTreeMap<std::string, ControlFlowNode>
optimizeControlFlowGraphNodes(
						const ImmutableTreeMap<std::string, ControlFlowNode>& inNodes,
						const ImmutableTreeSet<std::string>& inNodesToPreserve
						);

class ControlFlowGraphOptimizer {
public:
	ControlFlowGraphOptimizer(
						const ImmutableTreeMap<std::string, ControlFlowNode>& inNodes,
						const ImmutableTreeSet<std::string>& inNodesToPreserve
						);

	ImmutableTreeMap<std::string, ControlFlowNode> extractResult(void) const;

	void optimize(void);

private:
	bool removeOneJumpNode(void);

	bool removeOneRedundantNode(void);

	//args are not references since this changes the graph and we might accidentally deallocate
	//the strings that are passed to the function.
	void removeDuplicateNode(std::string inNodeName, std::string inToReplaceWith);

	void removeJumpNode(std::string inNode);

	bool nodeIsRemovable(const std::string& inNode) const;

	void addNode(const std::string& inName, const ControlFlowNode& inNode);

	ControlFlowGraphNodeMap mNodeMap;

	std::set<std::string> mNodesToPreserve;
};

