/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/
#include "SimulationState.hppml"
#include "../Serialization/ForaValueSerializationStream.hppml"
#include "ControlFlowGraphUtil.hppml"
#include "../../core/cppml/CPPMLVisit.hppml"
#include "../../core/Logging.hpp"
#include "../../core/cppml/FunctionTransformer.hppml"

namespace {

class DependentSlotIndicesVisitor {
private:
    std::set<uint64_t>& mDependentIndices;
public:
    DependentSlotIndicesVisitor(
            std::set<uint64_t>& inSetToFillOut
            ) : mDependentIndices(inSetToFillOut)
        {
        }

    template<class T>
    void processDown(const T& e, bool& ioContinue)
        {
        }

    template<class T>
    void processUp(const T& e)
        {
        }

    void processDown(const ControlFlowNode& futureValue, bool& ioContinue)
        {
        ioContinue = false;
        }

    void processDown(const FutureValue& futureValue, bool& ioContinue)
        {
        @match FutureValue(futureValue)
            -|  Current(_, _, indexOrNull) ->> {
                if (!indexOrNull.isNull())
                    mDependentIndices.insert(*indexOrNull);

                ioContinue = false;
                }
            -|  Future(index) ->> {
                mDependentIndices.insert(index);
                }
            -|  _ ->> { ; }
            ;
        }
    };

template<class T>
void computeDependentSlotIndices(
        const T& in,
        std::set<uint64_t>& inSetToFillOut
        )
    {
    DependentSlotIndicesVisitor visitor(inSetToFillOut);

    visit(in, visitor);
    }

}

const std::vector<FutureSlot>& SimulationState::getSlots() const
    {
    return mSlots;
    }

long SimulationState::countOfUnfinishedSlots() const
    {
    long result = 0;

    for (const auto& slot: mSlots)
        if (slot.isFuture())
            result++;

    return result;
    }

const TwoWaySetMap<uint64_t, uint64_t>& SimulationState::getDependencies() const
    {
    return mSlotDependencies;
    }

FutureValue SimulationState::nextFutureValue() const
    {
    return FutureValue::Future(getSlots().size());
    }

FutureSlot SimulationState::getSlot(uint64_t inSlotIx) const
    {
    return mSlots.at(inSlotIx);
    }

const SimulationHead& SimulationState::simulationHead() const
    {
    return mSimulationHead;
    }

void SimulationState::advanceSimulationHeadAndRegisterDependencies(
        const SimulationHead& inNewSimulationHead
        )
    {
    updateSimulationHeadAndDependentSlotIndices(
        inNewSimulationHead
        );

    addNewSlotIfNecessary();
    }

void SimulationState::addNewSlotIfNecessary()
    {
    std::set<uint64_t> slotIndicesWeDependOn;
    ImmutableTreeVector<FutureValue> futureApplyArgs;
    FutureValue currentResult;

    @match ControlFlowNodeBody(simulationHead().body())
        -|  Apply(applyArgs, _, _) ->> {
            for (auto applyArg: applyArgs)
                {
                @match ControlFlowApplyArg(applyArg)
                    -|  Normal(fieldName, controlFlowArg) ->> {
                        futureApplyArgs = futureApplyArgs +
                            CFGWithFuturesImpl::applyArgToFutureValue(
                                controlFlowArg,
                                simulationHead().values()
                                );
                        }
                    -|  TupleCall(controlFlowArg) ->> {
                        futureApplyArgs = futureApplyArgs +
                            CFGWithFuturesImpl::applyArgToFutureValue(
                                controlFlowArg,
                                simulationHead().values()
                                );
                        }
                    ;
                }

            currentResult = nextFutureValue();

            computeDependentSlotIndices(futureApplyArgs, slotIndicesWeDependOn);
            }
        -|  Cached(controlFlowArg, _, _) ->> {
            FutureValue futureApplyArg =
                CFGWithFuturesImpl::applyArgToFutureValue(
                    controlFlowArg, simulationHead().values()
                    );

            currentResult = nextFutureValue();

            computeDependentSlotIndices(futureApplyArg, slotIndicesWeDependOn);

            futureApplyArgs =
                ImmutableTreeVector<FutureValue>() + futureApplyArg;
            }
        -|  _ ->> { return; }

    lassert(currentResult.isFuture());
    uint64_t currentSlotIndex = currentResult.getFuture().index();

    if (allSlotsAreCurrent(slotIndicesWeDependOn))
        {
        mIndicesOfSubmittableFutures.insert(currentSlotIndex);
        }

    mSlotDependencies.insert(slotIndicesWeDependOn, currentSlotIndex);

    auto newSlot = 
        FutureSlot::Future(
            simulationHead().label(),
            simulationHead().values(),
            futureApplyArgs
            );

    addSlot(newSlot);
    }

void SimulationState::addSlot(const FutureSlot& inSlot)
    {
    lassert(inSlot.isFuture());

    mSlots.push_back(inSlot);

    //implicitly, the top slot always has an incref from the current
    //simulation head, and every slot has an incref for being a 'future'
    mSlotRefcounts.push_back(2);

    if (mSlots.size() > 1)
        decref(mSlots.size() - 2);

    //incref anybody referenced by this guy
    std::set<uint64_t> indicesReferenced;
    computeDependentSlotIndices(inSlot, indicesReferenced);

    for (auto i: indicesReferenced)
        incref(i);
    }

void SimulationState::incref(uint64_t inSlotIndex)
    {
    mSlotRefcounts.at(inSlotIndex)++;
    }

void SimulationState::decref(uint64_t inSlotIndex)
    {
    uint64_t& refcount = mSlotRefcounts.at(inSlotIndex);

    lassert(refcount > 0);
    refcount--;

    if (refcount == 0)
        {
        FutureSlot& slot = mSlots.at(inSlotIndex);

        lassert_dump(
            slot.isCurrent(),
            "tried to decref non-current slot "
            << prettyPrintString(slot) << " at slotIndex "
            << inSlotIndex << "\n" << toString()
            );

        std::set<uint64_t> indicesReferenced;
        computeDependentSlotIndices(slot, indicesReferenced);

        slot = FutureSlot::GarbageCollected(slot.label());

        for (auto i: indicesReferenced)
            decref(i);
        }
    }

bool SimulationState::allSlotsAreCurrent(
        const std::set<uint64_t>& inSlotIndices
        ) const
    {
    for (auto slotIndex: inSlotIndices)
        {
        @match FutureSlot(mSlots[slotIndex])
            -|  Future(_, _, _) ->> { return false; }
            -|  GarbageCollected() ->> { return false; }
            -|  Current(_) ->> { ; }
            ;
        }

    return true;
    }

uint64_t SimulationState::nSlots() const
    {
    return mSlots.size();
    }

bool SimulationState::hasResolvedToSimpleState() const
    {
    if (nSlots() > 0)
        return hasResolvedToSimpleStateAtIndex(nSlots() - 1);

    return true;
    }

bool SimulationState::hasResolvedToSimpleStateAtIndex(uint64_t index) const
    {
    if (index >= mSlots.size())
        throw std::out_of_range("");

    for (uint64_t ix = 0; ix <= index; ix++)
        {
        @match FutureSlot(mSlots[ix])
            -|  Future(_,_,_) ->> { return false; }
            -|  _ ->> { ; }
            ;
        }

    return true;
    }

std::string SimulationState::toString() const
    {
    std::ostringstream oss;

    oss << "graph hash = " << prettyPrintString(mSimulationHead.graph().hash()) << "\n";
    oss << "graph label = " << prettyPrintString(mSimulationHead.label()) << "\n";

    for (long k = 0; k < mSlots.size(); k++)
        {
        oss << "slot " << k << ", rc = " << mSlotRefcounts[k];
        if (mIndicesOfSubmittableFutures.find(k) != mIndicesOfSubmittableFutures.end())
            oss << " <submit> ";
        else
            oss << "          ";
        oss << "needing us = " << prettyPrintStringWithoutWrapping(mSlotDependencies.getValues(k)) << ". ";
        oss << "we need = " << prettyPrintStringWithoutWrapping(mSlotDependencies.getKeys(k)) << ". ";
        oss << " -> " << prettyPrintStringWithoutWrapping(mSlots[k]) << "\n";
        }

    oss << "\n\nhead values = " << prettyPrintString(mSimulationHead.values()) << "\n";

    return oss.str();
    }


const std::set<uint64_t>& SimulationState::indicesOfSubmittableFutures() const
    {
    return mIndicesOfSubmittableFutures;
    }

bool SimulationState::isSubmittable(uint64_t inSlotIndex) const
    {
    return mIndicesOfSubmittableFutures.find(inSlotIndex) !=
        mIndicesOfSubmittableFutures.end();
    }

SimulationState::SimulationState()
    {
    }

SimulationState::SimulationState(
        const SimulationHead& inSimulationHead
        )
    {
    advanceSimulationHeadAndRegisterDependencies(
        inSimulationHead
        );

    auto body = simulationHead().body();
    if (body.isApply() or body.isCached())
        mIndicesOfSubmittableFutures = { 0 };
    }

void SimulationState::slotCompleted(
        uint64_t inSlotIndex,
        const ImplValContainer& inResult,
        bool isException
        )
    {
    ImmutableTreeVector<FutureValue> ifException;

    @match FutureSlot(mSlots.at(inSlotIndex))
        -| Future(values) ->> {
            ifException = values;
            }
        -| _ ->> { lassert_dump(false, "didn't expect " << prettyPrintString(mSlots.at(inSlotIndex))); }

    //incref anybody referenced by this guy
    std::set<uint64_t> indicesReferenced;
    computeDependentSlotIndices(mSlots.at(inSlotIndex), indicesReferenced);

    mSlots.at(inSlotIndex) =
        FutureSlot::Current(
            mSlots.at(inSlotIndex).label(), 
            inResult, 
            isException,
            isException || !inResult.isCST() ? ifException : ImmutableTreeVector<FutureValue>()
            );

    lassert(mIndicesOfSubmittableFutures.find(inSlotIndex) !=
        mIndicesOfSubmittableFutures.end());

    std::set<uint64_t> newIndicesReferenced;
    computeDependentSlotIndices(mSlots.at(inSlotIndex), newIndicesReferenced);

    for (auto i: newIndicesReferenced)
        incref(i);

    // Completed slots are not considered Completable
    mIndicesOfSubmittableFutures.erase(inSlotIndex);

    updateSubmittableFuturesSet(inSlotIndex);

    for (auto i: indicesReferenced)
        decref(i);

    //don't decref exceptions or mutables. We may not have any other refcount on it,
    //but the main infrastructure will bail on it if it happens.
    if (!isException && inResult.isCST())
        decref(inSlotIndex);
    }

void SimulationState::updateSimulationHeadAndDependentSlotIndices(
        const SimulationHead& inNewSimulationHead
        )
    {
    std::set<uint64_t> dependenciesOfNewHead;

    computeDependentSlotIndices(
        inNewSimulationHead,
        dependenciesOfNewHead
        );

    auto body = inNewSimulationHead.body();

    lassert(!body.isJump());

    for (auto ix: dependenciesOfNewHead)
        incref(ix);

    for (auto ix: mSlotDependenciesAtSimulationHead)
        decref(ix);


    mSimulationHead = inNewSimulationHead;
    mSlotDependenciesAtSimulationHead = dependenciesOfNewHead;
    }

void SimulationState::updateSubmittableFuturesSet(uint64_t inCompletedSlotIndex)
    {
    for (auto slotIx: mSlotDependencies.getValues(inCompletedSlotIndex))
        {
        if (canInsertIntoSubmittableSet(slotIx))
            {
            mIndicesOfSubmittableFutures.insert(slotIx);
            }
        }
    }

bool SimulationState::canInsertIntoSubmittableSet(uint64_t inSlotIndex) const
    {
    if (inSlotIndex >= mSlots.size())
        return false;

    FutureSlot slot = mSlots[inSlotIndex];

    @match FutureSlot(slot)
        -|  Current(_) ->> { return false; }
        -|  GarbageCollected() ->> { return false; }
        -|  Future(_, _, _) ->> { ; }
        ;

    std::set<uint64_t> indicesWeNeedToBeCurrent =
        mSlotDependencies.getKeys(inSlotIndex);

    for (auto ix: indicesWeNeedToBeCurrent)
        {
        @match FutureSlot(mSlots.at(ix))
            -|  GarbageCollected() ->> {
                lassert_dump(
                    false,
                    "we should never garbage collect a FutureSlot which is "
                    "depended on by another slot"
                    );
                }
            -|  Future(_, _, _) ->> {
                return false;
                }
            -|  Current() ->> { ; }
            ;
        }

    return true;
    }


hash_type SimulationState::hash() const
    {
    return 
        hashValue(mSlots) + 
        hashValue(mSlotRefcounts) + 
        hashValue(mIndicesOfSubmittableFutures) + 
        hashValue(mSlotDependencies) + 
        hashValue(mSimulationHead) + 
        hashValue(mSlotDependenciesAtSimulationHead)
        ;
    }


void SimulationState::serialize(Fora::ForaValueSerializationStream& stream) const
    {
    stream.serialize(mSlots);
    stream.serialize(mSlotRefcounts);
    stream.serialize(mIndicesOfSubmittableFutures);
    stream.serialize(mSlotDependencies);
    stream.serialize(mSimulationHead);
    stream.serialize(mSlotDependenciesAtSimulationHead);
    }

void SimulationState::deserialize(Fora::ForaValueDeserializationStream& stream)
    {
    stream.deserialize(mSlots);
    stream.deserialize(mSlotRefcounts);
    stream.deserialize(mIndicesOfSubmittableFutures);
    stream.deserialize(mSlotDependencies);
    stream.deserialize(mSimulationHead);
    stream.deserialize(mSlotDependenciesAtSimulationHead);
    }

PolymorphicSharedPtr<SimulationState> SimulationState::deepcopy(
            boost::function1<ImplValContainer, ImplValContainer> duplicator
            )
    {
    PolymorphicSharedPtr<SimulationState> res(new SimulationState());

    res->mSlots = applyFunctionToObjectGraph(duplicator, mSlots);
    res->mSlotRefcounts = mSlotRefcounts;
    res->mIndicesOfSubmittableFutures = mIndicesOfSubmittableFutures;
    res->mSlotDependencies = mSlotDependencies;
    res->mSimulationHead = mSimulationHead;
    res->mSimulationHead.values() = applyFunctionToObjectGraph(duplicator, mSimulationHead.values());
    res->mSlotDependenciesAtSimulationHead = mSlotDependenciesAtSimulationHead;
    
    return res;
    }

void SimulationState::visitValues(boost::function1<void, ImplValContainer&> visitor)
    {
    boost::function1<ImplValContainer, ImplValContainer> modifyInPlace(
        [&](const ImplValContainer& in) { 
            ImplValContainer copy = in;
            visitor(copy);
            return copy;
            }
        );

    mSlots = applyFunctionToObjectGraph(modifyInPlace, mSlots);
    mSimulationHead.values() = applyFunctionToObjectGraph(modifyInPlace, mSimulationHead.values());
    }