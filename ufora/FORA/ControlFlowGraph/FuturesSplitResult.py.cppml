/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/
#include "FuturesSplitResult.hppml"

#include <stdint.h>
#include "../python/FORAPythonUtil.hppml"
#include <boost/python.hpp>
#include "../../native/Registrar.hpp"
#include "../../core/python/CPPMLWrapper.hpp"

using Fora::Interpreter::ComputationResult;
using Fora::Interpreter::PausedComputation;

class FuturesSplitResultWrapper:
    public native::module::Exporter<FuturesSplitResultWrapper> {
public:
    std::string	getModuleName(void)
        {
        return "FORA";
        }

    static PausedComputation getFinalResult(
            PolymorphicSharedPtr<FuturesSplitResult>& inSplitResult
            )
        {
        return inSplitResult->getFinalResult();
        }

    static boost::python::object pausedComputationForSlot(
            PolymorphicSharedPtr<FuturesSplitResult>& inSplitResult,
            uint64_t slotIndex
            )
        {
        Nullable<PausedComputation> pausedComputation =
            inSplitResult->pausedComputationForSlot(slotIndex);

        if (pausedComputation.isNull())
            return boost::python::object();

        return boost::python::object(*pausedComputation);
        }

    static uint64_t splitFrameIndex(
            PolymorphicSharedPtr<FuturesSplitResult>& inSplitResult
            )
        {
        return inSplitResult->splitFrameIndex();
        }

    static boost::python::object splitPausedComputation(
            Fora::Interpreter::PausedComputation& inComputation
            )
        {
        PolymorphicSharedPtr<FuturesSplitResult> res =
            FuturesSplitResult::split(inComputation);

        if (res)
            return boost::python::object(res);

        return boost::python::object();
        }

    static void disallowRepeatNodes(
            PolymorphicSharedPtr<FuturesSplitResult>& inSplitResult
            )
        {
        inSplitResult->disallowRepeatNodes();
        }

    static boost::python::object indicesOfSubmittableFutures(
            PolymorphicSharedPtr<FuturesSplitResult>& inSplitResult
            )
        {
        boost::python::list tr;

        for (auto val: inSplitResult->indicesOfSubmittableFutures())
            tr.append(val);

        return tr;
        }

    static boost::python::object asSubmittable(
            PolymorphicSharedPtr<FuturesSplitResult>& inSplitResult,
            uint64_t slotIndex
            )
        {
        Nullable<CFGWithFutures::SubmittableArgs> asSubmittable =
            inSplitResult->asSubmittable(slotIndex);

        if (asSubmittable.isNull())
            {
            return boost::python::object();
            }

        return boost::python::object(*asSubmittable);
        }

    static void slotCompleted(
            PolymorphicSharedPtr<FuturesSplitResult>& inSplitResult,
            uint64_t slotIndex,
            Fora::Interpreter::ComputationResult& result
            )
        {
        inSplitResult->slotCompleted(slotIndex, result);
        }

    static bool hasResolvedToSimpleState(
            PolymorphicSharedPtr<FuturesSplitResult>& inSplitResult
            )
        {
        return inSplitResult->hasResolvedToSimpleState();
        }

    static boost::python::object currentNode(
            PolymorphicSharedPtr<FuturesSplitResult>& inSplitResult
            )
        {
        return boost::python::object(
            inSplitResult->graph()[inSplitResult->currentLabel()]
            );
        }

    static boost::python::object currentLabel(
            PolymorphicSharedPtr<FuturesSplitResult>& inSplitResult
            )
        {
        auto label = inSplitResult->currentLabel();

        if (label.isNull())
            return boost::python::object();

        return boost::python::str(*label);
        }

    static void continueSimulation(
            PolymorphicSharedPtr<FuturesSplitResult>& inSplitResult
            )
        {
        inSplitResult->continueSimulation();
        }

    static boost::python::object strFuturesSplitResult(
            PolymorphicSharedPtr<FuturesSplitResult>& inSplitResult
            )
        {
        return boost::python::str(inSplitResult->toString());
        }

    void exportPythonWrapper()
        {
        using namespace boost::python;

        class_<PolymorphicSharedPtr<FuturesSplitResult>>(
            "FuturesSplitResult", no_init)
            .def("__str__", &strFuturesSplitResult)
            .def("getFinalResult", &getFinalResult)
            .def("splitFrameIndex", &splitFrameIndex)
            .def("indicesOfSubmittableFutures", &indicesOfSubmittableFutures)
            .def("submittableArgs", &asSubmittable)
            .def("slotCompleted", &slotCompleted)
            .def("hasResolvedToSimpleState", &hasResolvedToSimpleState)
            .def("currentNode", &currentNode)
            .def("currentLabel", &currentLabel)
            .def("continueSimulation", &continueSimulation)
            .def("disallowRepeatNodes", &disallowRepeatNodes)
            .def("pausedComputationForSlot", &pausedComputationForSlot)
            .def("splitPausedComputation", &splitPausedComputation)
            .staticmethod("splitPausedComputation")
            ;
        }

    };

//explicitly instantiating the registration element causes the linker to need
//this file
template<>
char native::module::Exporter<FuturesSplitResultWrapper>::mEnforceRegistration =
		native::module::ExportRegistrar<
			FuturesSplitResultWrapper>::registerWrapper();

