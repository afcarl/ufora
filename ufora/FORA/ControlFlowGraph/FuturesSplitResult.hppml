/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/
#include "CFGWithFutures.hppml"

#include "../../core/PolymorphicSharedPtr.hpp"


class FuturesSplitResult : public PolymorphicSharedPtrBase<FuturesSplitResult> {
public:
    //no default constructors
    FuturesSplitResult(const FuturesSplitResult&) = delete;
    FuturesSplitResult() = delete;

    bool isFinished() const;

    // this calls asSubmittable and then does an ITV map,
    // which we could optimize out (by doing this directly
    // in CFGWithFuturesImpl)
    Nullable<Fora::Interpreter::PausedComputation>
    pausedComputationForSlot(uint64_t slotIx) const;

    Fora::Interpreter::PausedComputation getFinalResult() const;

    const std::set<uint64_t>& indicesOfSubmittableFutures() const;

    // roll the simulation far enough forward to produce at most one new future
    // returns true if we made progress, false if we didn't. note that
    // we may make progress without producing a new future.
    bool continueSimulation();

    Nullable<CFGWithFutures::SubmittableArgs>
            asSubmittable(uint64_t slotIndex) const;

    void slotCompleted(
        uint64_t slotIndex, const Fora::Interpreter::ComputationResult& result
        );

    bool hasResolvedToSimpleState() const;

    uint64_t splitFrameIndex() const;

    const ControlFlowGraph& graph() const;

    const Nullable<std::string>& currentLabel() const;

    const Fora::Interpreter::PausedComputation& originalPausedComputation() const;

    std::string toString() const;

    void disallowRepeatNodes();

    static PolymorphicSharedPtr<FuturesSplitResult> split(
        const Fora::Interpreter::PausedComputation& inComputation
        );

    static PolymorphicSharedPtr<FuturesSplitResult> splitAtFrame(
        const Fora::Interpreter::PausedComputation& inComputation,
        uint64_t frameIndex
        );

private:
    FuturesSplitResult(
        const Fora::Interpreter::PausedComputation& originalPausedComputation,
        uint64_t splitFrameIndex,
        const Fora::Interpreter::PausedComputation& applyComputation,
        const PolymorphicSharedPtr<CFGWithFutures>& simulator
        );

    PolymorphicSharedPtr<CFGWithFutures> simulator() const;

    Fora::Interpreter::PausedComputation mOriginalPausedComputation;

    Fora::Interpreter::PausedComputation mSlotZeroComputation;

    uint64_t mSplitFrameIndex;

    PolymorphicSharedPtr<CFGWithFutures> mSimulatorPtr;
};

