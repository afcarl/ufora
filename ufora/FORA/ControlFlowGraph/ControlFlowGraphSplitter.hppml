/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/
#pragma once

#include "ControlFlowGraph.hppml"
#include "../Core/PausedComputation.hppml"

class ImplValContainer;

/************
ControlFlowGraphSplitter


Utilities to determine whether there is implicit parallelism within a CFG assuming that we
almost always take the 'normal' path from an apply operation.

In general, we are looking for cases that look like

	x = f(a,b,c,...)
	y = g(e,f,g,...)

where 'y' does not depend on 'x'. Then, if it turns out that none of the given values are mutable,
we can parallelize by rewriting this as (essentially)

	(x,y) = cached(f(a,b,c,...),g(e,f,g,...))

************/

class ControlFlowGraphSplitter {
public:
	//represents a single step in the 'forked' computation. These are simplified forms of a CFGNode
	@type Step =
			//set up the initial computation. 'args' modify the initial args at the split point.
			//'result' is not allowed
		-| Jump of
			uint32_t argCount,
			ImmutableTreeVector<ControlFlowContinuationArg> args
		-| Apply of
			uint32_t argCount,
			ImmutableTreeVector<ControlFlowApplyArg> applyArgs,
			ImmutableTreeVector<ControlFlowContinuationArg> success,
			uint32_t indexToSwapResultIntoOnFailure,
			ControlFlowContinuation exception
		-| Rejoin of
			uint32_t argCount,
			uint32_t indexToSwapResultInto,
			ControlFlowContinuation output
			;

	//a description of  a 'split' control flow graph
	@type SplitResult =
			//the node we started with, from which we will take values.
			Nullable<std::string> initialLabel,
			//the graph to continue executing from the current position. This graph will
			//return a pair (index, value). If 'index' is not None, then this is considered
			//an exception, and we trigger an exception handler
			ControlFlowGraph applyGraph,
			//the graph to fork into from the current position. This graph will return
			//a pair (index, value).
			ControlFlowGraph splitGraph,
			//if we got an exception from the initial apply, follow these continuations, assuming
			//that the stack values are packed into a tuple, which we will expand
			ImmutableTreeVector<ControlFlowContinuation> applyExceptionContinuations,
			//if we got a value from the applyGraph, follow one of these continuations based on
			//the index passed back by the splitGraph.
			ImmutableTreeVector<pair<ControlFlowContinuation, uint32_t> > splitContinuations
			;

	static Nullable<SplitResult> computeSplitResult(	const ControlFlowGraph& inGraph,
														const Nullable<std::string>& inLabel
														);

	static ImmutableTreeVector<Step> extractApplySteps(	const ControlFlowGraph& inGraph,
														const Nullable<std::string>& inLabel
														);

	@type SplitPausedComputation =
		SplitResult split,
		//the stack frames above the one containing the apply that we're splitting
		Fora::Interpreter::PausedComputation toResumeCaller,
		//the graph containing the apply that we're splitting
		ControlFlowGraph toResumeGraph,
		//the primary computation (e.g. the frames below the function call we split)
		Fora::Interpreter::PausedComputation applyComputation,
		//the forked computation
		Fora::Interpreter::PausedComputation splitComputation
		;

	static Nullable<SplitPausedComputation> split(const Fora::Interpreter::PausedComputation& inComputation);
	static Nullable<SplitPausedComputation> splitAtFrame(
			const Fora::Interpreter::PausedComputation& inComputation,
			uint frameIndex
			);

	static Fora::Interpreter::PausedComputation
							join(	const SplitPausedComputation& inComputation,
									const ImplValContainer& applyResult,
									const ImplValContainer& splitResult
									);
};

