/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/
#include "NativeConstant.hppml"
#include "NativeCode.hppml"
#include <boost/format.hpp>

bool NativeConstant::booleanValue() const
	{
	@match NativeConstant(*this)
		-|	Nothing() ->> {
			return false;
			}
		-|	Double(d) ->> {
			return d == 0.0;
			}
		-|	Float(f) ->> {
			return f == 0.0;
			}
		-|	Bool(b) ->> {
			return b;
			}
		-|	UInt8(x) ->> {
			return x != 0;
			}
		-|	UInt16(x) ->> {
			return x != 0;
			}
		-|	UInt32(x) ->> {
			return x != 0;
			}
		-|	UInt64(x) ->> {
			return x != 0;
			}
		-|	Int8(x) ->> {
			return x != 0;
			}
		-|	Int16(x) ->> {
			return x != 0;
			}
		-|	Int32(x) ->> {
			return x != 0;
			}
		-|	Int64(x) ->> {
			return x != 0;
			}
		-|	NullPointer(x) ->> {
			return false;
			}
		-|	VoidPtr(x) ->> {
			return x != 0;
			}
		-| 	Composite(elements) ->> {
			return false;
			}
		-|	ArbitraryConstant(t) ->> {
			lassert_dump(false, "illegal to compare an ArbitraryConstant to a boolean");
			return 0;
			};
	}

NativeExpression NativeConstant::expr() const
	{
	return NativeExpression::Constant(*this);
	}

NativeType NativeConstant::type() const
	{
	return *expr().type();
	}

void NativeConstant::toString(CPPMLPrettyPrintStream s) const
	{
	@match NativeConstant(*this)
		-|	Bool(x)		->> { if (x) s << "true"; else s << "false";; }
		-|	Double(x)	->> { s << x << "f64"; }
		-|	Float(x)	->> { s << x << "f32"; }
		-|	Int8(x)		->> { s << x << "s8"; }
		-|	Int16(x)	->> { s << x << "s16"; }
		-|	Int32(x)	->> { s << x << "s32"; }
		-|	Int64(x)	->> { s << x << "s64"; }
		-|	UInt8(x)	->> { s << x << "u8"; }
		-|	UInt16(x)	->> { s << x << "u16"; }
		-|	UInt32(x)	->> { s << x << "u32"; }
		-|	UInt64(x)	->> { s << x << "u64"; }
		-|	NullPointer(x) ->> { s << "NullPointer(" << x << "*)"; }
		-|	VoidPtr(x)	->> { s << str(boost::format("VoidPtr(%x)") % x); }
		-|	Nothing()	->> { s << "_"; }
		-| 	Composite(elements) ->> {
				s << "Composite(";
				bool first = false;

				for (auto e: elements)
					{
					if (!first)
						s << ",";
					first = false;

					s << e;
					}

				s << ")";
				}
		-|	ArbitraryConstant(c) ->> {
				s << c->description();
				}
		;
	}

NativeConstant NativeConstant::Zero(NativeType t)
	{
	@match NativeType(t)
		-|	Nothing() ->> {
			return NativeConstant::Nothing();
			}
		-|	Integer(bits, isSigned) ->> {
			return
				bits == 64 && isSigned ? NativeConstant::Int64(0) :
				bits == 32 && isSigned ? NativeConstant::Int32(0) :
				bits == 16 && isSigned ? NativeConstant::Int16(0) :
				bits == 8  && isSigned ? NativeConstant::Int8(0) :
				bits == 64 && !isSigned ? NativeConstant::UInt64(0) :
				bits == 32 && !isSigned ? NativeConstant::UInt32(0) :
				bits == 16 && !isSigned ? NativeConstant::UInt16(0) :
				bits == 8  && !isSigned ? NativeConstant::UInt8(0) :
				bits == 1  && !isSigned ? NativeConstant::Bool(false) :
				throw standardLogicErrorWithStacktrace()
				;
			}
		-|	Float(bits) ->> {
			return
				bits == 32 ? NativeConstant::Float(0) :
				bits == 64 ? NativeConstant::Float(0) :
				throw standardLogicErrorWithStacktrace()
				;
			}
		-| 	Composite(elements) ->> {
			ImmutableTreeVector<NativeConstant> elts;

			for (auto e: elements)
				elts = elts + NativeConstant::Zero(e);

			return NativeConstant::Composite(elts);
			}
		-|	Pointer(t) ->> {
			return NativeConstant::NullPointer(t);
			}
		-|	_ ->> {
			throw standardLogicErrorWithStacktrace(
				"Invalid Leaf(Zero) type: " +
					 prettyPrintString(t)
					 );
			}
	}


