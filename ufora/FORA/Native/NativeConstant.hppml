/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/
#pragma once

#include "NativeType.hppml"

#include <string>
#include "ArbitraryNativeConstant.hpp"

#include "../../core/cppml/CPPMLEquality.hppml"
#include "../../core/containers/ImmutableTreeMap.hppml"
#include "../../core/containers/ImmutableTreeSet.hppml"


class NativeExpression;


@type
	NativeConstant =
	-|	Nothing of ()
	-|	Double of double
	-|	Float of float
	-|	Bool of bool
	-|	UInt8 of uint8_t
	-|	UInt16 of uint16_t
	-|	UInt32 of uint32_t
	-|	UInt64 of uint64_t
	-|	Int8 of int8_t
	-|	Int16 of int16_t
	-|	Int32 of int32_t
	-|	Int64 of int64_t
	-|	NullPointer of NativeType pointedToType
	-|	VoidPtr of uword_t data
	-|	ArbitraryConstant of boost::shared_ptr<ArbitraryNativeConstant> constant
	-|	Composite of ImmutableTreeVector<NativeConstant> elements
	{
	public:
		//Returns true/false indicating whether this value would
		//take the 'true' branch of an If statement in NativeExpression.
		//Essentially, compares the value against the 'null' value.
		bool booleanValue() const;
		//Returns a NativeExpression wrapping this constant.
		NativeExpression expr() const;

		static NativeConstant Zero(NativeType t);

		NativeType type() const;

		void toString(CPPMLPrettyPrintStream  st) const;
	};

macro_defineCppmlComparisonOperators(NativeConstant)

template<>
class CPPMLPrettyPrint<NativeConstant> {
public:
	static void prettyPrint(CPPMLPrettyPrintStream& s, const NativeConstant& t)
		{
		t.toString(s);
		}
};

