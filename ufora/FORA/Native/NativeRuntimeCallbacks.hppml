/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/
#pragma once

#include "NativeRuntimeContinuationValue.hppml"

/**********
NativeRuntimeCallbacks

This type holds the information that the system needs to be able to communicate
split and interrupt information between the ExecutionContex and the running
code. Clients pass a pointer to this object around everywhere.

Calling

	NativeTypeFor<NativeRuntimeCallbacks>::get

produces a NativeType that matches this class.
**********/

class NativeType;
class NativeExpression;
class NativeVariable;

template<class T>
class NativeTypeForImpl;

class NativeRuntimeCallbacks {
public:
		uword_t	interruptFlag;		//0 if we shouldn't interrupt, 1 if we should
		sword_t	interruptCounter;	//if negative, we increment and interrupt when we get to zero.
		sword_t bigVectorSlotIndex;	//number between 0 and

		//continuation to follow if we need to interrupt.
		//Accepts a Continuation[void*]. If the void* is zero, then this is
		//an 'interrupt'. If the void* is nonzero then its a cacheload
		//request.
		NativeRuntimeContinuationValue<1>	interruptContinuation;

		//continuation to follow if we need to access the cache. Accepts
		//(ImplVal, Continuation[ImplVal], Continuation[ImplVal]
		NativeRuntimeContinuationValue<1>	cacheCallContinuation;

		bool checkInterruptFlag(void);

		void resetNativeRuntimeState(void);

		static NativeVariable callbackVar();

		//give an expression containing a pointer to 'this', produce an expression
		//that checks if we should interrupt
		static NativeExpression	checkInterruptExpr(const NativeExpression& thisPtrExpr);

		static NativeExpression bigVectorSlotIndexExpr(const NativeExpression& thisPtrExpr);
};


template<>
class NativeTypeForImpl<NativeRuntimeCallbacks> {
public:
	static NativeType get(void);
};

