/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/
#include "NativeCodeSimplification.hppml"
#include "../Runtime.hppml"
#include "../Interpreter/RuntimeConfig.hppml"
#include "../../core/containers/TwoWaySetMap.hpp"
#include "../../core/cppml/CPPMLVisit.hppml"
#include "../../core/cppml/CPPMLTransform.hppml"
#include "../../core/ScopedProfiler.hppml"
#include "../../core/Clock.hpp"
#include "../../core/Logging.hpp"
#include "../../core/cppml/ExtractAllVariablesOfGivenTypeVisitor.hppml"
#include "BlockDuplicator.hppml"
#include "AllocateVariableDumpsAndUnrollHotpathLoops.hppml"
#include "UnrollHotLoopsWithComparisons.hppml"
#include "DetupleFlattenedNativeCode.hppml"
#include "VerifyAllVariablesDefinedBeforeUsed.hppml"

@type RewriteVariables = map<NativeVariable, NativeVariable>* rewrites {
public:
		template<class T>
		Nullable<T> processDown(const T& in, bool& out) const
			{
			return null();
			}
		template<class T>
		Nullable<T> processUp(const T& in) const
			{
			return null();
			}

		NativeVariable processDown(const NativeVariable& i, bool& out) const
			{
			out = false;
			if (rewrites()->find(i) != rewrites()->end())
				return (*rewrites())[i];
			return i;
			}

		template<class T>
		Nullable<T> processDown(const NativeType& in, bool& out)
			{
			out = false;
			return null();
			}
};

@type UnnecessaryVariableDumpsTransformer = map<NativeBlockID, NativeCodeFlattened::Block>* blocks {
public:
		UnnecessaryVariableDumpsTransformer(map<NativeBlockID, NativeCodeFlattened::Block>& b)
			{
			blocks() = &b;
			}

		template<class T>
		Nullable<T> processDown(const T& in, bool& out) const
			{
			return null();
			}
		template<class T>
		Nullable<T> processUp(const T& in) const
			{
			return null();
			}

		template<class T>
		Nullable<T> processDown(const NativeType& in, bool& out)
			{
			out = false;
			return null();
			}


		NativeCodeFlattened::JumpPoint processDown(const NativeCodeFlattened::JumpPoint& in, bool& out) const
			{
			ImmutableTreeSet<NativeVariable> curDump = in.dumpToSlots().dumpToSlots();
			ImmutableTreeSet<NativeVariable> liveInTarget = (*blocks())[in.block()].liveOnInput();
			ImmutableTreeSet<NativeVariable> toDump;
			for (long k = 0; k < curDump.size();k++)
				if (!liveInTarget.contains(curDump[k]))
					toDump = toDump + curDump[k];

			return NativeCodeFlattened::JumpPoint(in.block(), in.args(), NativeCodeFlattened::VariablesToDump(toDump));
			}
};

@type BlockArgDataflowGraphVisitor =
					map<NativeVariable, set<NativeCodeFlattened::Input> > blockVariableInputs,
					map<NativeBlockID, NativeCodeFlattened::Block>* blocks,
					set<NativeBlockID> continuationTargets
					{
public:
		BlockArgDataflowGraphVisitor(map<NativeBlockID, NativeCodeFlattened::Block>& b)
			{
			blocks() = &b;
			}

		template<class T>
		void processDown(const T& in)
			{
			}

		template<class T>
		void processUp(const T& in)
			{
			}

		StopVisiting processDown(const NativeType& in)
			{
			return StopVisiting();
			}

		void processDown(const NativeCodeFlattened::Cont& in)
			{
			continuationTargets().insert(in.block());
			}

		void processDown(const NativeCodeFlattened::Block& in)
			{
			for (long k = 0; k < in.args().size();k++)
				blockVariableInputs()[in.args()[k]];
			}

		void processDown(const NativeCodeFlattened::JumpPoint& in)
			{
			lassert_dump(in.args().size() == (*blocks())[in.block()].args().size(),
				"incompatible arg blocks: can't jump to block\n" <<
					prettyPrintString( (*blocks())[in.block()] ) << "\n"
					<< "with jump " << prettyPrintString(in) << "\n"
					);

			for (long k = 0; k < in.args().size();k++)
				blockVariableInputs()[ (*blocks())[in.block()].args()[k] ].insert( in.args()[k] );
			}
};

@type VariableUseVisitor = map<NativeVariable, NativeBlockID> created, map<NativeVariable, set<NativeBlockID> > used, set<NativeBlockID> blocksWithContinuations {
public:
		NativeBlockID cur;

		typedef NativeCodeFlattened::Block Block;
		typedef NativeCodeFlattened::Expression Expression;
		typedef NativeCodeFlattened::Input Input;

		template<class T>
		void processDown(const T& in)
			{
			}
		template<class T>
		void processUp(const T& in)
			{
			}

		StopVisiting processDown(const NativeType& in)
			{
			return StopVisiting();
			}

		void processDown(const NativeCodeFlattened::Cont& in)
			{
			blocksWithContinuations().insert(cur);
			}
		void processDown(const pair<const NativeBlockID, Block>& in)
			{
			cur = in.first;
			}
		void processDown(const Block& in)
			{
			for (long k = 0; k < in.args().size();k++)
				created()[in.args()[k]] = cur;
			}
		void processDown(const pair<NativeVariable, Expression>& in)
			{
			created()[in.first] = cur;
			}
		void processDown(const Input& in)
			{
			@match Input(in)
				-|	Variable(v) ->> {
					used()[v].insert(cur);
					}
				-|	_ ->> {
					}
				;
			}

};

@type BlockFlowVisitor = TwoWaySetMap<NativeBlockID, NativeBlockID> edges, TwoWaySetMap<NativeBlockID, NativeBlockID> continuationEdges, set<NativeBlockID> interrupts {
public:
		NativeBlockID cur;

		typedef NativeCodeFlattened::Block Block;
		typedef NativeCodeFlattened::Expression Expression;
		typedef NativeCodeFlattened::Input Input;

		template<class T>
		void processDown(const T& in)
			{
			}

		StopVisiting processDown(const NativeConstant& in)
			{
			return StopVisiting();
			}

		StopVisiting processDown(const NativeType& in)
			{
			return StopVisiting();
			}

		template<class T>
		void processUp(const T& in)
			{
			}

		void processDown(const NativeCodeFlattened::Cont& in)
			{
			continuationEdges().insert(cur, in.block());
			}

		void processDown(const pair<const NativeBlockID, Block>& in)
			{
			cur = in.first;
			if (in.second.term().isInterruptOrKickCheck())
				interrupts().insert(in.first);
			}
		void processDown(const NativeCodeFlattened::JumpPoint& in)
			{
			edges().insert(cur, in.block());
			}

};

void	getBlockFlow(
			const map<NativeBlockID, NativeCodeFlattened::Block>& inBlocks,
			TwoWaySetMap<NativeBlockID, NativeBlockID>& outFlow
			)
	{
	BlockFlowVisitor vis;
	visit(inBlocks, vis);

	outFlow = vis.edges();
	}

@type NativeVariableGroup = set<NativeVariable> variables, set<NativeBlockID> blocks;


void	variableMerge(map<NativeBlockID, NativeCodeFlattened::Block>& outBlocks)
	{
	BlockArgDataflowGraphVisitor graphVisitor(outBlocks);
	visit(outBlocks, graphVisitor);

	//for each arg variable, compute where it's defined
	map<NativeVariable, NativeBlockID> definedIn;
	for (map<NativeBlockID, NativeCodeFlattened::Block>::iterator it = outBlocks.begin(), it_end = outBlocks.end(); it != it_end; ++it)
		for (long k = 0; k < it->second.args().size();k++)
			definedIn[it->second.args()[k]] = it->first;


	//graphVisitor is now populated with a description of, for each block, all inputs jumping into it. from this we can produce a "renaming" graph. for the moment
	//we only rename variables if they're jumped into by exactly one other block, in which case we just take that name.
	//we have to be careful not to merge two variables to the same thing in the same block.  That is
	//if we have B(X,Y), we can't map "X" to "Y", since "X" might have an old "Y" value, and "Y" might have a new one.

	map<NativeVariable, NativeVariable> renames;

	for (map<NativeVariable, set<NativeCodeFlattened::Input> >::iterator
				it = graphVisitor.blockVariableInputs().begin(),
				it_end = graphVisitor.blockVariableInputs().end();
				it != it_end;
				++it)
		{
		lassert(definedIn.find(it->first) != definedIn.end());
		NativeBlockID blockDefinedIn = definedIn[it->first];

		if (it->second.size() == 1 &&
				//we don't want to include variables that are defined in
				//blocks that are jumped to by continuations.
				graphVisitor.continuationTargets().find(blockDefinedIn) ==
					graphVisitor.continuationTargets().end()
				)
			{
			NativeCodeFlattened::Input i = *it->second.begin();
			if (i.isVariable() && graphVisitor.blockVariableInputs().find(i.getVariable().var()) != graphVisitor.blockVariableInputs().end())
				{
				NativeVariable targetVar = i.getVariable().var();
				lassert(definedIn.find(targetVar) != definedIn.end());

				NativeBlockID targetVarDefinedIn = definedIn[targetVar];

				if (graphVisitor.continuationTargets().find(targetVarDefinedIn)
						== graphVisitor.continuationTargets().end()
						)
					renames[it->first] = targetVar;
				}
			}
		}

	//now we need to make groups of mapped variables that aren't defined in the same block
	map<NativeVariable, NativeVariableGroup*> groups;

	for (map<NativeVariable, NativeVariable>::iterator it = renames.begin(), it_end = renames.end(); it != it_end; ++it)
		{
		if (groups.find(it->first) == groups.end() && groups.find(it->second) == groups.end())
			{
			if (definedIn[it->first] != definedIn[it->second])
				{
				groups[it->second] = groups[it->first] = new NativeVariableGroup;
				groups[it->first]->variables().insert(it->first);
				groups[it->first]->variables().insert(it->second);
				groups[it->first]->blocks().insert(definedIn[it->first]);
				groups[it->first]->blocks().insert(definedIn[it->second]);
				}
			}
			else
		if (groups.find(it->first) != groups.end() && groups.find(it->second) == groups.end())
			{
			if (groups[it->first]->blocks().find(definedIn[it->second]) == groups[it->first]->blocks().end())
				{
				groups[it->second] = groups[it->first];
				groups[it->second]->variables().insert(it->second);
				groups[it->second]->blocks().insert(definedIn[it->second]);
				}
			}
			else
		if (groups.find(it->second) != groups.end() && groups.find(it->first) == groups.end())
			{
			if (groups[it->second]->blocks().find(definedIn[it->first]) == groups[it->second]->blocks().end())
				{
				groups[it->first] = groups[it->second];
				groups[it->first]->variables().insert(it->first);
				groups[it->first]->blocks().insert(definedIn[it->first]);
				}
			}
		else
			{
			NativeVariableGroup* g1 = groups[it->first];
			NativeVariableGroup* g2 = groups[it->second];
			bool OK = true;
			for (set<NativeBlockID>::iterator it = g1->blocks().begin(), it_end= g1->blocks().end(); it != it_end && OK; ++it)
				if (g2->blocks().find(*it) != g2->blocks().end())
					OK = false;
			if (OK)
				{
				//we can merge the blocks
				for (auto b: g2->blocks())
					g1->blocks().insert(b);
				for (auto v: g2->variables())
					g1->variables().insert(v);

				for (auto v: g2->variables())
					groups[v] = g1;

				delete g2;
				}
			}
		}
	set<NativeVariableGroup*> g;
	for (map<NativeVariable, NativeVariableGroup*>::iterator it = groups.begin(), it_end = groups.end(); it != it_end; ++it)
		g.insert(it->second);

	map<NativeVariable, NativeVariable> finalRenames;
	for (set<NativeVariableGroup*>::iterator it = g.begin(), it_end = g.end(); it != it_end; ++it)
		{
		NativeVariable targ = *(*it)->variables().begin();
		for (set<NativeVariable>::iterator it2 = (*it)->variables().begin(), it2_end = (*it)->variables().end(); it2 != it2_end; ++it2)
			finalRenames[*it2] = targ;
		delete *it;
		}

	outBlocks = transform(outBlocks, RewriteVariables(&finalRenames));
	}

void promoteInBlockUseVariables(map<NativeBlockID, NativeCodeFlattened::Block>& outBlocks)
	{
	VariableUseVisitor vis;
	visit(outBlocks, vis);

	//now look for any variable only used in the block it's created in. It can be taken out of the 'dump' list
	for (map<NativeVariable, NativeBlockID>::iterator it = vis.created().begin(), it_end = vis.created().end(); it != it_end; ++it)
		if ((vis.used()[it->first].size() == 1 && *vis.used()[it->first].begin() == it->second && 
				vis.blocksWithContinuations().find(it->second) == vis.blocksWithContinuations().end())
				|| vis.used()[it->first].size() == 0)
			outBlocks[it->second].dontWriteVariable(it->first);
	}

void	collapseLinearBlocks(map<NativeBlockID, NativeCodeFlattened::Block>& outBlocks)
	{
	try {
		BlockFlowVisitor vis;
		visit(outBlocks, vis);

		set<NativeBlockID> collapse;
		for (map<NativeBlockID, set<NativeBlockID> >::const_iterator it = vis.edges().getKeysToValues().begin(), it_end = vis.edges().getKeysToValues().end(); it != it_end; ++it)
			if (it->second.size() == 1)
				{
				NativeBlockID b = *it->second.begin();
				if (b != it->first)
					{
					if (vis.edges().getKeys(b).size() == 1 && b.isInternal())
						collapse.insert(b);
					}
				}

		for (set<NativeBlockID>::iterator it = collapse.begin(), it_end = collapse.end(); it != it_end; ++it)
			{
			//merge this block back into its prior block
			NativeBlockID targID = *it;
			NativeBlockID sourceID = *vis.edges().getKeys(targID).begin();

			NativeCodeFlattened::Block sourceB = outBlocks[sourceID];
			NativeCodeFlattened::Block targB = outBlocks[targID];

			//make 'let' operations for each arg
			NativeCodeFlattened::JumpPoint j = sourceB.term().getJump().target();
			sourceB.term() = targB.term();

			lassert_dump(
				j.args().size() == targB.args().size(),
				"Flow from blocks " << prettyPrintString(sourceID)
					<< " to " << prettyPrintString(targID) << " is incorrectly sized."
				);

			//for each argument, create a "let" and make sure we dump it (we can remove unnecessary variable dumps later)
			for (long k = 0; k < targB.args().size();k++)
				{
				bool shouldDump;

				@match NativeCodeFlattened::Input(j.args()[k])
					-|	Variable(v) ->> {
						shouldDump =  v != targB.args()[k];
						}
					-|	_ ->> {
						shouldDump = true;
						}
					;
				if (shouldDump)
					{
					sourceB.defs() = sourceB.defs() + make_pair(targB.args()[k], NativeCodeFlattened::Expression::Var(j.args()[k]));
					sourceB.writeVariable(targB.args()[k]);
					}
				}

			sourceB.defs() = sourceB.defs() + targB.defs();

			for (long k = 0; k < j.dumpToSlots().dumpToSlots().size(); k++)
				sourceB.writeVariable(j.dumpToSlots().dumpToSlots()[k]);

			outBlocks[sourceID] = sourceB;
			outBlocks.erase(targID);

			set<NativeBlockID> outs = vis.edges().getValues(targID);
			vis.edges().update(sourceID, outs);
			vis.edges().dropKey(targID);
			vis.edges().dropValue(targID);
			}
		}
	catch(...)
		{
		LOG_TEST << "Blocks: " << outBlocks;
		throw;
		}
	}


void removeUnusedBlocks(map<NativeBlockID, NativeCodeFlattened::Block>& outBlocks)
	{
	//find all blocks reachable from an entryblock. discard anything not reachable.
	BlockFlowVisitor vis;
	visit(outBlocks, vis);

	set<NativeBlockID> reachable;
	set<NativeBlockID> toCheck;

	for (map<NativeBlockID, NativeCodeFlattened::Block>::iterator it = outBlocks.begin(); it != outBlocks.end(); ++it)
		if (!it->first.isInternal())
			toCheck.insert(it->first);

	while (toCheck.size())
		{
		NativeBlockID id = *toCheck.begin();
		toCheck.erase(id);

		reachable.insert(id);

			{
			const set<NativeBlockID>& down = vis.edges().getValues(id);
			for (set<NativeBlockID>::iterator it = down.begin(), it_end = down.end(); it != it_end; ++it)
				if (reachable.find(*it) == reachable.end())
					toCheck.insert(*it);
			}

			{
			const set<NativeBlockID>& down = vis.continuationEdges().getValues(id);
			for (set<NativeBlockID>::iterator it = down.begin(), it_end = down.end(); it != it_end; ++it)
				if (reachable.find(*it) == reachable.end())
					toCheck.insert(*it);
			}
		}

	for (map<NativeBlockID, NativeCodeFlattened::Block>::iterator it = outBlocks.begin(); it != outBlocks.end();)
		if (reachable.find(it->first) == reachable.end())
			{
			NativeBlockID id = it->first;
			++it;
			outBlocks.erase(id);
			}
		else
			++it;
	}

/**** get rid of extra interrupts ***/
void dropInterrupts(map<NativeBlockID, NativeCodeFlattened::Block>& outBlocks)
	{
	BlockFlowVisitor vis;
	visit(outBlocks, vis);

	for (set<NativeBlockID>::iterator it = vis.interrupts().begin(), it_end = vis.interrupts().end(); it != it_end; ++it)
		outBlocks[*it].term() = NativeCodeFlattened::Term::Jump(
			outBlocks[*it].term().getInterruptOrKickCheck().ifDoingInterrupt()
			);
	}

/*****
makes duplicate copies of entrypoint code to reduce register pressure and allow loop tightening. That is,

	A ---> B --->  C
	^			   |
	|--------------|

where A,B,C are all "external" entrypoints, becomes


B---->C----> A ---> b --->  c
	         ^              |
	         |--------------|

so that the inner loop can be tightened
******/
ImmutableTreeVector<NativeCodeFlattened::Input> toInputs(ImmutableTreeVector<NativeVariable> vars)
	{
	ImmutableTreeVector<NativeCodeFlattened::Input> tr;
	for (long k = 0; k < vars.size();k++)
		tr = tr + NativeCodeFlattened::Input::Variable(vars[k]);
	return tr;
	}

void duplicateEntrypoints(map<NativeBlockID, NativeCodeFlattened::Block>& outBlocks)
	{
	//first compute the entrypoint dependency graph and then prune it

	BlockFlowVisitor vis;
	visit(outBlocks, vis);

	set<NativeBlockID> internal;
	set<NativeBlockID> external;
	for (auto it = outBlocks.begin(); it != outBlocks.end(); ++it)
		if (it->first.isInternal())
			internal.insert(it->first);
			else
			external.insert(it->first);

	graphRestriction(vis.edges(), internal);

	set<NativeBlockID> crossoverPoints;
	minimumGraphCovering(vis.edges(), crossoverPoints, true);

	if (!crossoverPoints.size())
		//nothing to do, since there are no entrypoints inside of loops
		return;

	//crossover points now contains the anchors of the underlying graph (e.g. "A" in the diagram, or whichever got picked)
	//generate a "phantom" graph
	map<NativeBlockID, NativeBlockID> phantomIDMap;

	BlockDuplicator blockDuplicator(&phantomIDMap, true);

	map<NativeBlockID, NativeCodeFlattened::Block> phantomGraph = transform(outBlocks, blockDuplicator);

	//merge the phantom map in
	for (map<NativeBlockID, NativeCodeFlattened::Block>::iterator it = outBlocks.begin(); it != outBlocks.end(); ++it)
		it->second.relativeFrequency() *= .01;

	for (map<NativeBlockID, NativeCodeFlattened::Block>::iterator it = phantomGraph.begin(); it != phantomGraph.end(); ++it)
		outBlocks[it->first] = it->second;

	//crossover blocks should now just jump to the same block in the phantom map
	for (set<NativeBlockID>::iterator it = crossoverPoints.begin(), it_end = crossoverPoints.end(); it != it_end; ++it)
		{
		outBlocks[*it].defs() = emptyTreeVec();
		outBlocks[*it].term() = NativeCodeFlattened::Term::Jump(
			NativeCodeFlattened::JumpPoint(
				phantomIDMap[*it],
				toInputs(outBlocks[*it].args()),
				outBlocks[*it].liveOnInput()
				)
			);
		}
	}

void clearLiveVariables(map<NativeBlockID, NativeCodeFlattened::Block>& outBlocks)
	{
	for (map<NativeBlockID, NativeCodeFlattened::Block>::iterator it = outBlocks.begin(), it_end = outBlocks.end(); it != it_end; ++it)
		{
		it->second.liveOnInput() = emptyTreeSet();
		//dump all variables that are defined inside it
		it->second.dontWriteAnyVariables();
		for (long k = 0; k < it->second.defs().size();k++)
			it->second.writeVariable(it->second.defs()[k].first);
		}
	}

bool hasSideEffects(const NativeCodeFlattened::Expression& e)
	{
	@match NativeCodeFlattened::Expression(e)
		-| Store() ->> { return true; }
		-| CallLibraryFunction() ->> { return true; }
		-| _ ->> { return false; }
	}

void removeUnnecessaryDefs(map<NativeBlockID, NativeCodeFlattened::Block>& blocks)
	{
	BlockFlowVisitor vis;
	visit(blocks, vis);

	for (auto& idAndBlock: blocks)
		{
		//get vars live in downstream blocks
		std::set<NativeVariable> varsUsed;
		for (auto block: vis.edges().getValues(idAndBlock.first))
			for (auto v: blocks[block].liveOnInput())
				varsUsed.insert(v);

		//get vars mentioned in the terminator
		for (auto var: ExtractAllVariablesOfGivenTypeVisitor<NativeVariable>::extract(idAndBlock.second.term()))
			varsUsed.insert(var);

		auto defs = idAndBlock.second.defs();
		std::set<long> toDrop;

		for (long k = ((long)defs.size()) - 1; k >= 0; k--)
			if (varsUsed.find(defs[k].first) != varsUsed.end() ||
					hasSideEffects(defs[k].second))
				{
				//it's used
				varsUsed.insert(defs[k].first);

				//implicitly we also use any variables that this expression uses.
				for (auto subVar: ExtractAllVariablesOfGivenTypeVisitor<NativeVariable>::extract(defs[k].second))
					varsUsed.insert(subVar);
				}
			else
				toDrop.insert(k);

		if (toDrop.size())
			{
			auto oldBlock = idAndBlock.second;
			idAndBlock.second.defs() = emptyTreeVec();
			for (long k = 0; k < oldBlock.defs().size();k++)
				if (toDrop.find(k) == toDrop.end())
					idAndBlock.second.defs() = idAndBlock.second.defs() + oldBlock.defs()[k];
			}
		}
	}

//TODO CLEANUP brax: Remove extraneous NativeCodeSimplification operations in the native code.
void	simplifyFlattenedCode(	map<NativeBlockID, NativeCodeFlattened::Block>& outBlocks,
								const RuntimeConfig& inConfig,
								std::string funcName
								)
	{
	//prune any unused blocks
		{
		Ufora::ScopedProfiler<std::string> profiler("LLVMFunctionBuilder::Simplify::02::removeUnusedBlocks");
		removeUnusedBlocks(outBlocks);
		}
	//remove "nothing" variables (e.g. variables with empty type
		{
		Ufora::ScopedProfiler<std::string> profiler("LLVMFunctionBuilder::Simplify::04::removeEmptyVariables");
		removeEmptyVariables(outBlocks);
		}

	//get rid of sequential blocks. can only be applied when every variable is defined exactly once
		{
		Ufora::ScopedProfiler<std::string> profiler("LLVMFunctionBuilder::Simplify::05::collapseLinearBlocks");
		collapseLinearBlocks(outBlocks);
		}

	//get rid of simple variable definitions. can only be applied when every variable is defined exactly once, and where there are no circular definitions
	//note that we ran removeUnusedBlocks before this to get rid of unreachable cycles
		{
		Ufora::ScopedProfiler<std::string> profiler("LLVMFunctionBuilder::Simplify::06::removeVariableRewrites");
		removeVariableRewrites(outBlocks);
		}

	if (inConfig.duplicateNativeEntrypoints())
		{
		Ufora::ScopedProfiler<std::string> profiler("LLVMFunctionBuilder::Simplify::08::duplicateNativeEntrypoints");
		duplicateEntrypoints(outBlocks);
		}


	auto oldBlocks = outBlocks;

	if (inConfig.unrollHotLoopsWithComparisons())
		{
		Ufora::ScopedProfiler<std::string> profiler("LLVMFunctionBuilder::Simplify::09::UnrollHotLoopsWithComparisons");
		detupleFlattenedNativeCode(outBlocks, funcName);
		unrollHotLoopsWithComparisons(outBlocks, funcName);
		}

	if (inConfig.validateVariablesDefinedBeforeUseInFlatCode())
		{
		Ufora::ScopedProfiler<std::string> profiler("LLVMFunctionBuilder::Simplify::09::UnrollHotLoopsWithComparisons");
		verifyAllVariablesDefinedBeforeUsed(outBlocks);
		}

	//get rid of "live" variables, dump everything. e.g. reset the "dump" state of the system.
		{
		Ufora::ScopedProfiler<std::string> profiler("LLVMFunctionBuilder::Simplify::10::EnlivenAllVariables");
		allocateVariableDumpsAndUnrollHotpathLoops(outBlocks);
		}


	removeUnnecessaryDefs(outBlocks);

	//get rid of interrupt check nodes that we don't need
		{
		Ufora::ScopedProfiler<std::string> profiler("LLVMFunctionBuilder::Simplify::11::dropInterrupts");
		dropInterrupts(outBlocks);
		}

	//finally, prune any unused blocks
		{
		Ufora::ScopedProfiler<std::string> profiler("LLVMFunctionBuilder::Simplify::12::removeUnusedBlocks");
		removeUnusedBlocks(outBlocks);
		}

	}

