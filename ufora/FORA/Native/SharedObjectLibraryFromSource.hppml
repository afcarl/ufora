/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/
#pragma once

#include "../../core/math/Hash.hpp"
#include "../../core/containers/ImmutableTreeMap.hppml"
#include "../../core/containers/ImmutableTreeVector.hppml"
#include "../../core/cppml/CPPMLPrettyPrinter.hppml"
#include "NativeType.hppml"

namespace Fora {
namespace SharedObjectLibraryFromSource {

//LibraryType - models types found in C++, C, or Fortran code. This type information is used
//to help coerce FORA values into the appropriate datastructures.
@type
	LibraryType =
		Void of ()
	-|	Integer of uint32_t bits, bool isSigned, bool isConst
	-|	Float of uint32_t bits, bool isConst
	-|	Pointer of LibraryType element, bool isConst
	-|	Reference of LibraryType element
	-|	Struct of ImmutableTreeVector<pair<std::string, LibraryType> > elements, bool isConst
	-|	Array of LibraryType element, uint32_t size, bool isConst
{
public:
	NativeType toNativeType() const;

	bool isConst() const;
};


@type LibrarySource =
	-|	CFile of std::string cCode
	-|	CppFile of std::string cppCode
	-|	CHeader of std::string hCode
	-|	CppHeader of std::string hppCode
	-|	Directory of ImmutableTreeMap<std::string, LibrarySource> subfolders
with
	hash_type hash = (hashCPPMLDirect(*this))
{
public:

};

@type FunctionSignature =
	std::string mangledFunctionName,
	LibraryType returnType,
	ImmutableTreeVector<LibraryType> argTypes,
	ImmutableTreeVector<std::string> argNames
	;

@type FunctionManifest = ImmutableTreeMap<std::string, FunctionSignature> signatures;

@type Library =
	LibrarySource source,
	FunctionManifest manifest
{
public:
	FunctionSignature operator[](const std::string& in) const
		{
		return *manifest().signatures()[in];
		}
};

@type BuildError = std::string errorString;

@type BuildResult =
	-|	Success of Library lib
	-|	Failure of BuildError error
	;

}
}


template<>
class CPPMLPrettyPrint<Fora::SharedObjectLibraryFromSource::LibraryType> {
public:
	static void prettyPrint(CPPMLPrettyPrintStream& s,
							const Fora::SharedObjectLibraryFromSource::LibraryType& t);
};



inline void CPPMLPrettyPrint<Fora::SharedObjectLibraryFromSource::LibraryType>::prettyPrint(
							CPPMLPrettyPrintStream& s,
							const Fora::SharedObjectLibraryFromSource::LibraryType& t
							)
		{
		@match Fora::SharedObjectLibraryFromSource::LibraryType(t)
			-| Void() ->> {
				s << "void";
				}
			-| Integer(bits, isSigned, isConst) ->> {
				if (isConst)
					s << "const ";

				if (!isSigned)
					s << "u";

				s << "int";
				s << bits;
				s << "_t";
				}
			-| Float(bits, isConst) ->> {
				if (isConst)
					s << "const ";

				if (bits == 32)
					s << "float";
				if (bits == 64)
					s << "double";
				}
			-| Pointer(t, isConst) ->> {
				s << t;
				if (isConst)
					s << " const ";
				s << "*";
				}
			-| Reference(t) ->> {
				s << t;
				s << "&";
				}
			-| Array(t, ct) ->> {
				s << t;
				s << "[" << ct << "]";
				}
			-| _ ->> {
				s << t.tagName() << "(?)";
				}
		}





