/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/
#include "VerifyAllVariablesDefinedBeforeUsed.hppml"
#include "../../core/containers/TwoWaySetMap.hpp"
#include "../../core/cppml/ExtractAllVariablesOfGivenTypeVisitor.hppml"
#include "../../core/math/GraphUtil.hpp"
#include "../../core/Logging.hpp"

typedef pair<ImmutableTreeVector<NativeCodeFlattened::Cont>, ImmutableTreeVector<NativeCodeFlattened::Metadata> >
		conts_and_metadata;

@type ExtractContinuationsAndMetadata = std::vector<conts_and_metadata> contsAndMetadatas {
public:
	template<class T>
	void processDown(const T& t, bool& b)
		{
		}

	template<class T>
	void processUp(const T& t)
		{
		}

	void processDown(const NativeCodeFlattened::Expression_ContinuationsType& in, bool& b)
		{
		contsAndMetadatas().push_back(make_pair(in.continuation(), in.metaData()));
		}

	void processDown(const NativeCodeFlattened::Term_CallType& in, bool& b)
		{
		contsAndMetadatas().push_back(make_pair(in.continuation(), in.metaData()));
		}
};

bool validateUseCoverage(
			const std::set<NativeBlockID>& defPoints,
			const std::set<NativeBlockID>& usePoints,
			const TwoWaySetMap<NativeBlockID, NativeBlockID>& flow
			)
	{
	std::set<NativeBlockID> allUsePoints;
	std::set<NativeBlockID> dirty = usePoints;

	while (dirty.size())
		{
		NativeBlockID block = *dirty.begin();
		dirty.erase(block);

		if (defPoints.find(block) == defPoints.end())
			{
			//this is not a def point
			if (!block.isInternal())
				return false;

			if (allUsePoints.find(block) == allUsePoints.end())
				{
				//this is a new block
				for (auto source: flow.getKeys(block))
					dirty.insert(source);

				allUsePoints.insert(block);
				}
			}
		}

	return true;
	}

bool validateUseCoverageWithinSubset(
			const std::set<NativeBlockID>& defPoints,
			const std::set<NativeBlockID>& usePoints,
			const TwoWaySetMap<NativeBlockID, NativeBlockID>& flow,
			const std::set<NativeBlockID>& subsetOfBlocks,
			NativeBlockID sourceBlock
			)
	{
	std::set<NativeBlockID> allUsePoints;
	std::set<NativeBlockID> dirty = usePoints;

	while (dirty.size())
		{
		NativeBlockID block = *dirty.begin();
		dirty.erase(block);
		if (subsetOfBlocks.find(block) != subsetOfBlocks.end())
			if (defPoints.find(block) == defPoints.end())
				{
				if (block == sourceBlock)
					return false;

				if (allUsePoints.find(block) == allUsePoints.end())
					{
					//this is a new block
					for (auto source: flow.getKeys(block))
						dirty.insert(source);

					allUsePoints.insert(block);
					}
				}
		}

	return true;
	}

const std::set<NativeBlockID>& getOrNullSet(
			const std::map<NativeVariable, std::set<NativeBlockID> >& defPoints,
			NativeVariable var
			)
	{
	static const std::set<NativeBlockID> empty;

	auto it = defPoints.find(var);
	if (it == defPoints.end())
		return empty;

	return it->second;
	}

bool intersects(const std::set<NativeBlockID>& l, const std::set<NativeBlockID>& r)
	{
	if (l.size() > r.size())
		return intersects(r,l);

	for (auto b: l)
		if (r.find(b) != r.end())
			return true;

	return false;
	}

bool validateVariablesUsedPostContinuation(
			ImmutableTreeVector<NativeCodeFlattened::Cont> conts,
			ImmutableTreeVector<NativeCodeFlattened::Metadata> metas,
			const std::map<NativeVariable, std::set<NativeBlockID> >& defPoints,
			const std::map<NativeVariable, std::set<NativeBlockID> >& usePoints,
			const TwoWaySetMap<NativeBlockID, NativeBlockID>& blockFlow
			)
	{
	for (auto cont: conts)
		{
		auto validVariables = ExtractAllVariablesOfGivenTypeVisitor<NativeVariable>::extract(metas);

		NativeBlockID sourceBlock = cont.block();

		//find all downstream blocks
		std::set<NativeBlockID> downstream;

		GraphUtil::computeReachableNodes(blockFlow, downstream, sourceBlock);

		//for every variable that's defined in these blocks
		for (auto& varAndBlocks: usePoints)
			if (intersects(varAndBlocks.second, downstream))
				//that's not a 'valid variable'
				if (!validVariables.contains(varAndBlocks.first) && !isRuntimeCallbackType(varAndBlocks.first.type()) && !varAndBlocks.first.type().isNothing())
					{
					NativeVariable var = varAndBlocks.first;

					//check that that variable (in the image of upstream values)
					//is deffed before use
					if (!validateUseCoverageWithinSubset(
								getOrNullSet(defPoints, var),
								getOrNullSet(usePoints, var),
								blockFlow,
								downstream,
								sourceBlock
								)
							)
						{
						LOG_WARN <<
							"Variable " << prettyPrintString(varAndBlocks.first)
								<< " of type " << prettyPrintString(varAndBlocks.first.type())
								<< " is used without being defined after "
								<< prettyPrintString(cont)
								;
						return false;
						}
					}
		}

	return true;
	}

void verifyAllVariablesDefinedBeforeUsed(map<NativeBlockID, NativeCodeFlattened::Block>& outBlocks, bool checkMetadataVariablesAreAccurate)
	{
	TwoWaySetMap<NativeBlockID, NativeBlockID> blockFlow;

	//make the block flow map
	for (auto idAndBlock: outBlocks)
		for (auto b: ExtractAllVariablesOfGivenTypeVisitor<NativeBlockID>::extract(idAndBlock.second))
			blockFlow.insert(idAndBlock.first, b);

	//def map - after flowing through one of these blocks, the value is
	//defined
	std::map<NativeVariable, std::set<NativeBlockID> > defPoints;

	for (auto idAndBlock: outBlocks)
		{
		for (auto arg: idAndBlock.second.args())
			defPoints[arg].insert(idAndBlock.first);
		for (auto def: idAndBlock.second.defs())
			defPoints[def.first].insert(idAndBlock.first);
		}

	//map of all uses that expect the variable to be defined
	//by a block that calls them.
	std::map<NativeVariable, std::set<NativeBlockID> > usePoints;

	for (auto idAndBlock: outBlocks)
		{
		std::set<NativeVariable> definedInThisBlock;

		for (auto arg: idAndBlock.second.args())
			definedInThisBlock.insert(arg);

		for (auto def: idAndBlock.second.defs())
			{
			ImmutableTreeSet<NativeVariable> used =
				ExtractAllVariablesOfGivenTypeVisitor<NativeVariable>::extract(def.second);

			for (auto v: used)
				if (definedInThisBlock.find(v) == definedInThisBlock.end())
					usePoints[v].insert(idAndBlock.first);

			definedInThisBlock.insert(def.first);
			}

		ImmutableTreeSet<NativeVariable> usedInTerminator =
			ExtractAllVariablesOfGivenTypeVisitor<NativeVariable>::extract(idAndBlock.second.term());

		for (auto v: usedInTerminator)
			if (definedInThisBlock.find(v) == definedInThisBlock.end())
				usePoints[v].insert(idAndBlock.first);
		}

	//for each variable, validate that use blocks can't reach external blocks
	std::set<NativeVariable> allVars;
	for (auto varAndDefs: defPoints)
		allVars.insert(varAndDefs.first);
	for (auto varAndUses: usePoints)
		allVars.insert(varAndUses.first);

	for (auto v: allVars)
		if (v.type().packedSize())
			if (!validateUseCoverage(
					defPoints[v],
					usePoints[v],
					blockFlow
					))
				{
				lassert_dump(
					false,
					"Variable " << prettyPrintString(v) << " used before definition in "
						<< prettyPrintString(outBlocks)
					);
				}

	if (checkMetadataVariablesAreAccurate)
		{
		ExtractContinuationsAndMetadata contsAndMetadatasExtractor;
		::visit(outBlocks, contsAndMetadatasExtractor);

		//verify that all variables used in the resumption of continuations before they are deffed
		//are listed in metadatas
		try{
			for (auto contAndMeta: contsAndMetadatasExtractor.contsAndMetadatas())
				if (!validateVariablesUsedPostContinuation(
						contAndMeta.first,
						contAndMeta.second,
						defPoints,
						usePoints,
						blockFlow
						))
					{
					LOG_ERROR << outBlocks;
					return;
					}
			}
		catch(...)
			{
			LOG_ERROR << "failed with " << outBlocks;
			throw;
			}
		}
 	}
