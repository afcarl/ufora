/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/
#ifndef INCL_NATIVE_CALL_SITE_STATISTICS_HPPML
#define INCL_NATIVE_CALL_SITE_STATISTICS_HPPML

#include <map>
#include <string>
#include <boost/thread.hpp>
#include <boost/utility.hpp>
#include "NativeCode.hppml"
#include "../../core/Common.hppml"
#include "CallSiteCounter.hpp"
#include "CallSite.hpp"

template<class T>
class ImmutableTreeVector;

namespace TypedFora {
class Compiler;
};

//This class is intended to be fully thread-safe in a manner
//that is transparent to users.  No external synchronization
//is required.
class NativeCallSiteStatistics : boost::noncopyable {
public:
	NativeCallSiteStatistics(const TypedFora::Compiler& inRuntime);

	//May block.
	NativeCFG tagAndInstrument(const std::string& callerFuncName,
	                           const NativeCFG& cfg);

	//Never blocks
	NativeCFG stripTagsAndInstrumentation(const NativeCFG& in) const;

	//May block. Returns a list of callsites (all in the same function)
	//to inline. If empty, then there's nothing to inline.
	ImmutableTreeVector<CallSite> recommendCallSite();

	void printOutSiteStatistics() const;


private:
	mutable boost::mutex mMutex;
	std::map<std::string, uint64_t> 	mCurrentSiteIndices;
	std::map<CallSite, CallSiteCounter> mLiveCounters;
	std::map<CallSite, CallSiteCounter> mEliminatedCounters;

	uint64_t getNextSiteIdFor(const std::string& name);

	const TypedFora::Compiler&	mTypedForaCompiler;

	//A CPPMLTransformer for instrumenting call sites, producing new
	//CallSiteCounter instances as it goes. This class is used by
	//NativeCallSiteStatistics::tagAndInstrument, and is private
	//to the implementation of NativeCallSiteStatistics.
	friend class InstrumentationTransformer;
};

#endif //INCL_NATIVE_CALL_SITE_STATISTICS_HPPML

