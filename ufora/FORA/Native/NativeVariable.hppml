/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/
#pragma once

#include "NativeType.hppml"

#include "../../core/cppml/CPPMLPrettyPrinter.hppml"
#include "../../core/cppml/CPPMLEquality.hppml"

class NativeExpression;

@type NativeVariable = uint64_t varID, NativeType type {
public:
	//Creates a temporary variable of the specified type.
	static NativeVariable Temp(const NativeType& t);

	//Returns a NativeExpression wrapping this variable.
	NativeExpression expr() const;

	void toString(CPPMLPrettyPrintStream  st) const;
};

macro_defineCppmlComparisonOperators(NativeVariable)

template<>
class CPPMLEquality<NativeVariable, void> {
public:
	static char cmp(const NativeVariable& lhs, const NativeVariable& rhs)
		{
		if (lhs.varID() < rhs.varID())
			return -1;
		if (lhs.varID() > rhs.varID())
			return 1;
		return 0;
		}
};

template<>
class CPPMLPrettyPrint<NativeVariable> {
public:
	static void prettyPrint(CPPMLPrettyPrintStream& s, const NativeVariable& t)
		{
		t.toString(s);
		}
};



