/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/
#include "NativeCodeUtilities.hppml"

namespace NativeCodeUtilities {

//returns a
NativeLetBinding packExpressionsIntoArray(
						const NativeType& inType,
						const ImmutableTreeVector<NativeExpression>& inToBind
						)
	{
	for (long k = 0; k < inToBind.size();k++)
		lassert(inType == *inToBind[k].type());

	NativeVariable varToBind = NativeVariable::Temp(inType.ptr());

	NativeVariable var = NativeVariable::Temp(inType.ptr());

	NativeExpression varCreation =
		NativeExpression::Alloc(inType, inToBind.size(), false);

	NativeExpression writeExpr = var.expr();

	for (long k = ((long)inToBind.size())-1; k >= 0; k--)
		writeExpr =
			NativeExpression::Store(var.expr()[k], inToBind[k]) >> writeExpr;

	return NativeLetBinding(
		varToBind,
		NativeExpression::Let(
			var,
			varCreation,
			writeExpr
			)
		);
	}

NativeExpression NativeLetBinding::wrap(const NativeExpression& inExpr) const
	{
	return NativeExpression::Let(variable(), expression(), inExpr);
	}


NativeExpression expressionListToDiscardFirstSequence(
							const ImmutableTreeVector<NativeExpression>& inToWrap
							)
	{
	if (!inToWrap.size())
		return NativeExpression::Nothing();

	NativeExpression tr = inToWrap[0];
	for (long k = 1; k < inToWrap.size();k++)
		tr = tr >> inToWrap[k];

	return tr;
	}
};


