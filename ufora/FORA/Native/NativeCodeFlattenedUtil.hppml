/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/

#pragma once

#include "NativeCodeFlattened.hppml"

namespace NativeCodeFlattened {

ImmutableTreeVector<NativeBlockID> orderBlocks(
								const map<NativeBlockID, NativeCodeFlattened::Block>& t
								);

//determines if a function is 'simple', meaning that it doesn't need us to build an
//a shadow stack for it. To be simple, a function must not have any 'dumps', so that
//we can load all its values directly into registers, do the work, and then return.
bool isSimpleFlatFunction(
					const map<NativeBlockID, NativeCodeFlattened::Block>& blocks
					);

};


