/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/
#include "NativeCFGTable.hppml"

#include "../../core/cppml/CPPMLTransform.hppml"
#include "../../core/cppml/CPPMLVisit.hppml"
#include "../../core/cppml/CPPMLPrettyPrinter.hppml"
#include "NativeCFGTransforms/Transforms.hppml"
#include "../../core/StringUtil.hpp"

#include "../../core/Logging.hpp"

using namespace std;

namespace {

@type KickReplacerTransformer = uword_t* triggerPtr {
public:
	template<class T>
	Nullable<T> processDown(const T& t, bool& b) const { return null(); }
	template<class T>
	Nullable<T> processUp(const T& t) const { return null(); }

	Nullable<NativeType> processDown(const NativeType& t, bool& b) const { b = false; return null(); }
	Nullable<NativeConstant> processDown(const NativeConstant& t, bool& b) const { b = false; return null(); }

	NativeExpression processDown(const NativeExpression& e, bool& cont) const
		{
		@match NativeExpression(e)
			-|	Tagged(If(cond, ifTrue, ifFalse, frequency), KickToInterpreterCheck()) ->> {
				return
					NativeExpression::Tagged(
						NativeExpression::If(
							NativeExpression::Constant(
								NativeConstant::VoidPtr((uword_t)triggerPtr())
								).cast(NativeType::uword().ptr(), true).load(false)
								 !=
							NativeExpression::Zero(NativeType::uword()),
							ifTrue,
							ifFalse,
							frequency
							),
						NativeExpressionTag::KickToInterpreterCheck()
						)
					;
				}
			-|	Tagged(e, KickToInterpreterCheck()) ->> {
				lassert_dump(
					false,
					"Unexpected expression wrapped in KickToInterpreterCheck: "
						<< prettyPrintString(e)
					);
				}
			-|	x ->> {
				return  x;
				}
			;
		}
};

}

void NativeCFGTable::define(const string& name, const NativeCFG& code)
	{
	boost::recursive_mutex::scoped_lock lock(mMutex);

	//LOG_INFO << "Defined " << name
	//			<< Ufora::indent(code.toString());

	lassert_dump(mCFGsMap.count(name) == 0,
	             "can't redefine " << name << " in NativeCFGTable.");

	mKickTriggerStatus[name][0] = new uword_t(0);

	mCFGsMap[name][0] =
		transform(
			code,
			KickReplacerTransformer(mKickTriggerStatus[name][0])
			);
	}

//TODO STABILITY brax: Add checks to this function that verify that the replacement CFG
//has a signature compatible with the initial CFG.
uint64_t NativeCFGTable::update(const string& name, const NativeCFG& code)
	{
	boost::recursive_mutex::scoped_lock lock(mMutex);

	lassert_dump(mCFGsMap.count(name) != 0, name);

	map<uint32_t, NativeCFG>& cfgsByVersion = mCFGsMap.at(name);

	uint64_t gen = cfgsByVersion.size();

	//LOG_INFO << "Updated to generation " << gen << ": " << name << endl
	//			<< Ufora::indent(code.toString());

	uint64_t initialKickStatus = 0;
	if (mFunctionsToAlwaysKickIntoInterpreter.find(name) != mFunctionsToAlwaysKickIntoInterpreter.end())
		initialKickStatus++;

	mKickTriggerStatus[name][gen] = new uword_t(initialKickStatus);

	cfgsByVersion[gen] =
		transform(
			code,
			KickReplacerTransformer(mKickTriggerStatus[name][gen])
			);

	return gen;
	}

bool NativeCFGTable::has(const string& name) const
	{
	boost::recursive_mutex::scoped_lock lock(mMutex);
	return mCFGsMap.find(name) != mCFGsMap.end();
	}

bool NativeCFGTable::hasVersion(const string& name, uint64_t version) const
	{
	boost::recursive_mutex::scoped_lock lock(mMutex);
	map<string, map<uint32_t, NativeCFG> >::const_iterator cfgVecIter = mCFGsMap.find(name);

	return cfgVecIter != mCFGsMap.end()
		&& version < cfgVecIter->second.size();
	}

const NativeCFG& NativeCFGTable::getInitial(const string& name) const
	{
	boost::recursive_mutex::scoped_lock lock(mMutex);

	lassert(has(name));

	return mCFGsMap.at(name).begin()->second;
	}

const NativeCFG& NativeCFGTable::getVersion(const string& name,
                                            uint64_t vers) const
	{
	boost::recursive_mutex::scoped_lock lock(mMutex);

	lassert_dump(
		hasVersion(name, vers),
		name
		);

	return mCFGsMap.at(name).at(vers);
	}

const NativeCFG& NativeCFGTable::getLatest(const string& name) const
	{
	boost::recursive_mutex::scoped_lock lock(mMutex);

	lassert(has(name));
	lassert(mCFGsMap.at(name).size());

	return mCFGsMap.at(name).rbegin()->second;
	}

uint64_t NativeCFGTable::latestVersionNumber(const std::string& name) const
	{
	boost::recursive_mutex::scoped_lock lock(mMutex);

	return mCFGsMap.at(name).size() - 1;
	}

std::pair<const NativeCFG&, uint64_t>
NativeCFGTable::getLatestWithNumber(const std::string& name) const
	{
	boost::recursive_mutex::scoped_lock lock(mMutex);
	return std::pair<const NativeCFG&, uint64_t>(
		getLatest(name),
		latestVersionNumber(name)
		);
	}

void	NativeCFGTable::triggerKickToInterpreter(
								std::string inFuncName,
								uint32_t inVersionID
								)
	{
	boost::recursive_mutex::scoped_lock lock(mMutex);

	//every function should have a kick trigger
	lassert(mKickTriggerStatus[inFuncName][inVersionID]);

	mKickTriggerStatus[inFuncName][inVersionID][0] = 1;
	}

void NativeCFGTable::triggerKickToInterpreterForAllVersions(std::string inFuncName)
	{
	boost::recursive_mutex::scoped_lock lock(mMutex);

	mFunctionsToAlwaysKickIntoInterpreter.insert(inFuncName);

	for (auto it = mKickTriggerStatus[inFuncName].begin(),
				it_end = mKickTriggerStatus[inFuncName].end(); it != it_end; ++it)
		it->second[0] = 1;
	}

