#include "NativeCodeFlattened.hppml"

namespace NativeCodeFlattened {

ImmutableTreeVector<NativeBlockID> orderBlocks(
										const map<NativeBlockID, Block>& t
										)
	{
	//put the blocks in a good order
	ImmutableTreeSet<NativeBlockID> blocksNotUsed;

	for (auto it = t.begin(), it_end = t.end(); it != it_end; ++it)
		blocksNotUsed = blocksNotUsed + it->first;

	ImmutableTreeVector<NativeBlockID> tr;

	if  (!t.size())
		return tr;

	NativeBlockID block = t.begin()->first;

	tr = tr + block;
	blocksNotUsed = blocksNotUsed - block;

	while (blocksNotUsed.size())
		{
		//now pick a new block
		NativeBlockID next = blocksNotUsed[0];

		@match Term(t.find(block)->second.term())
			-|	Jump((b)) ->> {
					if (blocksNotUsed.contains(b))
						next = b;
					}
			-|	Branch(_,(b1), (b2), f) ->> {
					NativeBlockID b = f > .5 ? b1 : b2;
					if (blocksNotUsed.contains(b))
						next = b;
					}
			-|	InterruptOrKickCheck((b)) ->> {
					if (blocksNotUsed.contains(b))
						next = b;
					}
			-|	_ ->> {}
			;

		block = next;

		tr = tr + block;
		blocksNotUsed = blocksNotUsed - block;
		}

	return tr;
	}


bool isSimpleFlatFunction(
					const map<NativeBlockID, NativeCodeFlattened::Block>& blocks
					)
	{
	if (blocks.size() != 1)
		return false;

	for (auto varAndDef: blocks.begin()->second.defs())
		if (varAndDef.second.isContinuations())
			return false;

	if (!blocks.begin()->second.term().isExit())
		return false;

	return true;
	}
}