/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/
#include "BlockVariableFlow.hppml"
#include "../../../core/cppml/CPPMLTransform.hppml"
#include "../../../core/cppml/CPPMLVisit.hppml"

#include "../../../core/Logging.hpp"

#include "../../../core/math/GraphUtil.hpp"

namespace NativeCFGTransforms {


/*************
BlockSlotFlowVisitor:

Builds a graph describing the flow of data amongst the slots of a set of
NativeBlocks in a NativeCFG.

Upon entry,
	inBlockVariableAssignment contains a mapping of NativeVariables to slots
		indicating which values have been bound.
	inIncomingSlots and inBadIncomingSlots should be empty and will be
		populated

Upon exit,
	inIncomingSlots contains a graph stating, for each slot, what slots flowed
		into it.
	inBadIncomingSlots contains a list of slots into which values flowed that
		were not originally from a slot

*************/

typedef pair<NativeBlockID, uint32_t>	block_slot_type;

class BlockSlotFlowVisitor {
public:
		BlockSlotFlowVisitor(
				TwoWaySetMap<block_slot_type, block_slot_type>&
												inIncomingSlots,
				set<block_slot_type>&
												inBadIncomingSlots,
				const ImmutableTreeMap<
						NativeVariable,
						block_slot_type>&
												inBlockVariableAssignment
				) :
				mIncomingSlots(inIncomingSlots),
				mBadIncomingSlots(inBadIncomingSlots),
				mBlockVariableAssignment(inBlockVariableAssignment)
			{
			}

		template<class T>
		void processDown(const T& in) {}

		Nullable<NativeType> processDown(const NativeType& t, bool& b) const
			{
			b = false;
			return null();
			}

		template<class T>
		void processUp(const T& in) {}

		ContinueOrStop processDown(const NativeExpression& in)
			{
			//check whether there's any reason to traverse down the tree
			if (!in.jumpTargets().size())
				return ContinueOrStop::Stop;

			@match NativeExpression(in)
				-|	Jump(target, arguments) ->> {
					//we found a jump. check each argument - is it a
					//value passed in one of the original block arguments?
					//if so, we mark it in the 'inIncomingSlots' graph
					//otherwise, we mark the target slot as having 'dirty'
					//inputs
					for (long k = 0; k < arguments.size();k++)
						{
						//this is the slot we are jumping to
						block_slot_type slot(target, k);

						//now mark that slot with appropriate data
						@match NativeExpression(arguments[k])
							-|	Variable(v) ->> {
								if (mBlockVariableAssignment.contains(v))
									mIncomingSlots.insert(slot,
												*mBlockVariableAssignment[v]);
									else
									mBadIncomingSlots.insert(slot);
								}
							-|	_ ->> {
								mBadIncomingSlots.insert(slot);
								}
						}
					}
				-|	Let(var, expr, within) ->> {
					//visit "expr" normally, since the variable isn't bound yet
					visit(expr, *this);

					//visit "within" without the external slot variable bound
					BlockSlotFlowVisitor subVisitor(
							mIncomingSlots,
							mBadIncomingSlots,
							mBlockVariableAssignment - var
							);

					visit(within, subVisitor);

					return ContinueOrStop::Stop;
					}
				-|	_ ->> {}
			
			return ContinueOrStop::Continue;
			}

		StopVisiting processDown(const NativeCFG& in)
			{
			//stop at subgraphs, since they don't communicate with the current
			//NativeCFG
			return StopVisiting();
			}

		StopVisiting processDown(const NativeContinuation& in)
			{
			BlockSlotFlowVisitor subVisitor(
				mIncomingSlots,
				mBadIncomingSlots,
				mBlockVariableAssignment - in.var()
				);

			visit(in.expression(),subVisitor);

			return StopVisiting();
			}
private:
		TwoWaySetMap<block_slot_type, block_slot_type>	&mIncomingSlots;

		set<block_slot_type> &mBadIncomingSlots;

		ImmutableTreeMap<NativeVariable, block_slot_type>
													mBlockVariableAssignment;
};

/*********
given a CFG and a set of blocks. produce sets of block_slots that are
guaranteed to always have the same value over the life of the call
invocation.
**********/

void	extractInvariantVariableGroups(
			const NativeCFG& inCFG,
			const set<NativeBlockID>& blocks,
			vector<set<block_slot_type> >& outComponents,
			bool includeInvariantsNotInLoops
			)
	{
	//maintains a list, for each block_slot, of incoming block slots
	TwoWaySetMap<block_slot_type, block_slot_type>	slotFlowGraph;

	//slots that have incoming values that are not originally block slots
	set<block_slot_type>							badSlots;

	for (set<NativeBlockID>::const_iterator it = blocks.begin();
				it != blocks.end(); ++it)
		{
		const NativeBlock& block(inCFG[*it]);

		ImmutableTreeMap<NativeVariable, block_slot_type>	curBlockAssignment;

		//map variables in the block arguments into slots
		for (long j = 0; j < block.args().size();j++)
			{
			curBlockAssignment =
				curBlockAssignment
					+ block.args()[j]
					+ block_slot_type(*it, j);
			}

		BlockSlotFlowVisitor vis(
			slotFlowGraph,
			badSlots,
			curBlockAssignment
			);

		visit(block.expression(), vis);
		}

	TwoWaySetMap<block_slot_type, block_slot_type>	slotFlowGraphRaw = slotFlowGraph;

	//wire every node to itself
	for (set<NativeBlockID>::const_iterator it = blocks.begin();
				it != blocks.end(); ++it)
		{
		const NativeBlock& block(inCFG[*it]);

		//map variables in the block arguments into slots
		for (long j = 0; j < block.args().size();j++)
			//every node connects to itself
			slotFlowGraph.insert(
				block_slot_type(*it, j),block_slot_type(*it, j));
		}


	//find the connected components of the graph.
	GraphUtil::computeStronglyConnectedComponents(
			slotFlowGraph,
			outComponents,
			true,
			false
			);

	//the following conditions must be met upon exit:
	//	(1) no component contains a 'bad' node
	//	(2) no component contains a value pulling in from another component
	//	(3) no component has more than one value in the same block

	//we proceed by repeatedly expanding the components to include
	//any other components that flow into them until
	//when we can no longer do that, we check conditions 1 and 3

	map<block_slot_type, uint32_t>	slotToComponentMap;
	//filter out things in slots
	for (long k = 0; k < outComponents.size();k++)
		for (set<block_slot_type>::iterator it = outComponents[k].begin();
				it != outComponents[k].end(); ++it)
			slotToComponentMap[*it] = k;

	bool done = false;
	while (!done)
		{
		done = true;

		for (long k = 0; k < outComponents.size();k++)
			{
			Nullable<uint32_t> mergeWith;

			for (set<block_slot_type>::iterator it = outComponents[k].begin();
					!mergeWith && it != outComponents[k].end(); ++it)
				{
				const set<block_slot_type>& incomingSlots =
						slotFlowGraph.getKeys(*it);

				for (set<block_slot_type>::const_iterator it2 =
					incomingSlots.begin(); it2 != incomingSlots.end(); ++it2)
					{
					if (outComponents[k].find(*it2) == outComponents[k].end())
						{
						lassert(slotToComponentMap.find(*it2)
								!= slotToComponentMap.end());
						if (slotToComponentMap[*it2] != k)
							mergeWith = slotToComponentMap[*it2];
						}
					}
				}
			//we found a component we want to merge with
			if (mergeWith)
				{
				//we'll need to do another round of checks
				done = false;

				lassert_dump(k != *mergeWith
						&& k < outComponents.size()
						&& *mergeWith < outComponents.size(),
					"can't merge " << *mergeWith << " and " << k <<
						" when outComponents has " << outComponents.size()
					);
				outComponents[k].insert(
					outComponents[*mergeWith].begin(),
					outComponents[*mergeWith].end()
					);

				for (set<block_slot_type>::iterator it = outComponents[k].begin();
						it != outComponents[k].end(); ++it)
					slotToComponentMap[*it] = k;

				//remove the component
				std::swap(outComponents[*mergeWith], outComponents.back());
				outComponents.resize(outComponents.size()-1);

				//update slotToComponentMap for the merge
				if (*mergeWith < outComponents.size())
					for (set<block_slot_type>::iterator it = outComponents[*mergeWith].begin();
							it != outComponents[*mergeWith].end(); ++it)
						slotToComponentMap[*it] = *mergeWith;

				k--;
				}
			}
		}

	//remove any outComponents where the component uses two variables in the same
	//block or where the component doesn't touch
	//every block
	for (long k = 0; k < outComponents.size();k++)
		{
		bool isBad = false;
		map<NativeBlockID, uint32_t> usedCount;

		if (outComponents[k].size() != blocks.size())
			isBad = true;

		for (set<block_slot_type>::iterator it = outComponents[k].begin();
				it != outComponents[k].end() && !isBad; ++it)
			{
			usedCount[it->first]++;
			if (usedCount[it->first] > 1 || badSlots.find(*it) != badSlots.end())
				isBad = true;
			}

		if (isBad)
			{
			std::swap(outComponents[k], outComponents.back());
			outComponents.resize(outComponents.size()-1);
			k--;
			}
		}

	if (!includeInvariantsNotInLoops)
		{
		std::vector<std::set<block_slot_type> > restrictedComponents;

		std::set<block_slot_type> allConnectedComponents;

		GraphUtil::computeStronglyConnectedComponents(
				slotFlowGraphRaw,
				restrictedComponents,
				false,
				false
				);

		for (auto& component: restrictedComponents)
			for (auto slot: component)
				allConnectedComponents.insert(slot);

		for (auto& component: outComponents)
			{
			std::set<block_slot_type> toRemove;

			for (auto slot: component)
				if (allConnectedComponents.find(slot) == allConnectedComponents.end())
					toRemove.insert(slot);

			for (auto c: toRemove)
				component.erase(c);
			}
		}
	}

/*************

BlockSlotRemover

Removes the given block slots from a CFG. Asserts that the expressions are
free of the given variables.

*************/

class BlockSlotRemover {
public:
		BlockSlotRemover(const set<block_slot_type>& toRemove) :
				mRemove(toRemove)
			{
			}


		template<class T>
		Nullable<T> processDown(const T& in, bool& ioCont) const { return null(); }


		template<class T>
		Nullable<T> processUp(const T& in) const { return null(); }


		Nullable<NativeExpression> processDown(const NativeExpression& in,
												bool& ioCont) const
			{
			@match NativeExpression(in)
				-|	Jump(maybeTarget, args) ->> {
					bool removedOne = false;
					for (long k = 0; k < args.size() && !removedOne;k++)
						if (mRemove.find(block_slot_type(maybeTarget, k)) !=
								mRemove.end())
							removedOne = true;

					if (removedOne)
						{
						ImmutableTreeVector<NativeExpression> newArgs;

						for (long k = 0; k < args.size();k++)
							if (mRemove.find(block_slot_type(maybeTarget, k)) ==
									mRemove.end())
								newArgs = newArgs + args[k];

						return null()
							<< NativeExpression::Jump(maybeTarget, newArgs);
						}
					}
				-|	_ ->> {;}
				;

			return null();
			}
		Nullable<pair<NativeBlockID, NativeBlock> > processDown(
							const pair<NativeBlockID, NativeBlock>& inBlock,
							bool& ioCont
							) const
			{
			bool removedOne = false;

			for (long k = 0; k < inBlock.second.args().size() && !removedOne;k++)
				{
				block_slot_type slot(inBlock.first, k);
				if (mRemove.find(slot) != mRemove.end())
					removedOne = true;
				}
			if (!removedOne)
				return null();

			//we're removing one. lets make sure it's not free in the expression!
			ImmutableTreeVector<NativeVariable> remainingVars;

			for (long k = 0; k < inBlock.second.args().size();k++)
				{
				block_slot_type slot(inBlock.first, k);

				if (mRemove.find(slot) == mRemove.end())
					//don't remove it
					remainingVars = remainingVars + inBlock.second.args()[k];
				}

			return null() <<
				make_pair(
					inBlock.first,
					NativeBlock(
						remainingVars,
						inBlock.second.expression(),
						inBlock.second.relativeFrequency()
						)
					);
			}

		Nullable<NativeCFG> processDown(const NativeCFG& in, bool& ioCont) const
			{
			//don't try to do this below the main CFG

			ioCont = false;
			return null();
			}

private:
		const set<block_slot_type>& mRemove;
};

ImmutableTreeMap<NativeBlockID, NativeBlock> removeBlockSlots(
			const set<block_slot_type>& toRemove,
			const ImmutableTreeMap<NativeBlockID, NativeBlock>& blocks
			)
	{
	BlockSlotRemover remover(toRemove);
	return transform(blocks, remover);
	}


}
