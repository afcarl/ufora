/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/
#pragma once

class NativeCFG;
class NativeBlock;
class NativeBlockID;
class NativeExpression;
class NativeVariable;
class NativeContinuation;

#include "../../../core/IntegerTypes.hpp"
#include "../../../core/containers/ImmutableTreeSet.hppml"
#include "../../../core/containers/ImmutableTreeMap.hppml"

namespace NativeCFGTransforms {

//Rewrite the input expression guaranteeing that every distinct variable
//binding has a new NativeVariable that's globally unique. No variables may be bound twice.

NativeCFG renameVariables(const NativeCFG& in);

NativeContinuation renameVariables(const NativeContinuation& in);

NativeBlock renameVariables(const NativeBlock& in);

NativeExpression renameVariables(const NativeExpression& in);

NativeCFG renameNonfreeVariables(const NativeCFG& in);

NativeContinuation renameNonfreeVariables(const NativeContinuation& in);

NativeBlock renameNonfreeVariables(const NativeBlock& in);

NativeExpression renameNonfreeVariables(const NativeExpression& in);

//rename variables so that indices start at zero. This is intended to allow
//direct comparison of NativeCFGs
NativeCFG renameVariablesStably(const NativeCFG& in);

NativeBlock renameVariablesStably(const NativeBlock& in);

NativeExpression renameVariablesStably(const NativeExpression& in);

ImmutableTreeSet<NativeVariable> verifyNoVarsBoundTwice(const NativeCFG& in);

ImmutableTreeSet<NativeVariable> verifyNoVarsBoundTwice(const NativeExpression& in);

//direct rewrite of variables according to the given map. doesn't try to
//do anything fancy. 
NativeCFG renameVariables(const NativeCFG& in,
                  const map<NativeVariable, NativeVariable>& inRenames);

NativeBlock renameVariables(const NativeBlock& in,
                  const map<NativeVariable, NativeVariable>& inRenames);

NativeExpression renameVariables(const NativeExpression& in,
                  const map<NativeVariable, NativeVariable>& inRenames);

ImmutableTreeMap<NativeBlockID, NativeBlock>
               renameVariables(
                  const ImmutableTreeMap<NativeBlockID, NativeBlock>&
                     inBlocks,
                  const map<NativeVariable, NativeVariable>& inRenames
                  );

}



