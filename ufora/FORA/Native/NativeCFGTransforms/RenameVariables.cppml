/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/
#include "RenameVariables.hppml"
#include "../NativeCode.hppml"
#include "../../../core/cppml/CPPMLTransform.hppml"
#include "../../../core/cppml/CPPMLVisit.hppml"
#include <map>

namespace NativeCFGTransforms {

class VariableBindingVisitor {
public:
		VariableBindingVisitor()
			{
			}

		template<class T>
		void processDown(const T& t) {  }

		template<class T>
		void processUp(const T& t) {  }

		StopVisiting processDown(const NativeType& t)
			{
			return StopVisiting();
			}

		StopVisiting processDown(const NativeConstant& t)
			{
			return StopVisiting();
			}

		void	processDown(const NativeExpression& in)
			{
			@match NativeExpression(in)
				-|	Let(v, e, within) ->> {
						bind(v);
						}
				-|	_ ->> {}
				;
			}

		void processDown(const NativeBlock& in)
			{
			for( long k = 0; k < in.args().size(); k++)
				bind(in.args()[k]);
			}

		void processDown(const NativeContinuation& in)
			{
			bind(in.var());
			}

		void bind(NativeVariable in)
			{
			if (mBoundPreviously.find(in) != mBoundPreviously.end())
				mBoundMultiply.insert(in);

			mBoundPreviously.insert(in);
			}

		set<NativeVariable> mBoundPreviously;
		set<NativeVariable> mBoundMultiply;

};

@type RenameAllVariablesTransformer = std::map<NativeVariable, NativeVariable>* varsSeen, bool startAtZero {
public:
	template<class T>
	Nullable<T> processDown(const T& t, bool& b) const { return null(); }

	template<class T>
	Nullable<T> processUp(const T& t) const { return null(); }

	Nullable<NativeType> processDown(const NativeType& t, bool& b) const
		{
		b = false;
		return null();
		}

	Nullable<NativeVariable> processDown(const NativeVariable& v, bool& outContinue) const
		{
		std::map<NativeVariable, NativeVariable>& vars(*varsSeen());

		if (vars.find(v) == vars.end())
			{
			if (startAtZero())
				vars[v] = NativeVariable(vars.size(), v.type());
			else
				vars[v] = NativeVariable::Temp(v.type());
			}

		return null() << vars[v];
		}

	template<class T>
	static T apply(const T& in, bool startAtZero)
		{
		std::map<NativeVariable, NativeVariable> vars;

		RenameAllVariablesTransformer transformer(&vars, startAtZero);

		return ::transform(in, transformer);
		}

	template<class T>
	static T applyToNonfree(const T& in)
		{
		std::map<NativeVariable, NativeVariable> vars;

		for (auto f: in.freeVariables())
			vars[f] = f;

		RenameAllVariablesTransformer transformer(&vars, false);

		return ::transform(in, transformer);
		}
};

NativeCFG renameVariables(const NativeCFG& in)
	{
	return RenameAllVariablesTransformer::apply(in, false);
	}

NativeBlock renameVariables(const NativeBlock& in)
	{
	return RenameAllVariablesTransformer::apply(in, false);
	}

NativeContinuation renameVariables(const NativeContinuation& in)
	{
	return RenameAllVariablesTransformer::apply(in, false);
	}

NativeExpression renameVariables(const NativeExpression& in)
	{
	return RenameAllVariablesTransformer::apply(in, false);
	}

NativeCFG renameNonfreeVariables(const NativeCFG& in)
	{
	return RenameAllVariablesTransformer::applyToNonfree(in);
	}

NativeBlock renameNonfreeVariables(const NativeBlock& in)
	{
	return RenameAllVariablesTransformer::applyToNonfree(in);
	}

NativeContinuation renameNonfreeVariables(const NativeContinuation& in)
	{
	return RenameAllVariablesTransformer::applyToNonfree(in);
	}

NativeExpression renameNonfreeVariables(const NativeExpression& in)
	{
	return RenameAllVariablesTransformer::applyToNonfree(in);
	}

NativeCFG renameVariablesStably(const NativeCFG& in)
	{
	return RenameAllVariablesTransformer::apply(in, true);
	}

NativeBlock renameVariablesStably(const NativeBlock& in)
	{
	return RenameAllVariablesTransformer::apply(in, true);
	}

NativeExpression renameVariablesStably(const NativeExpression& in)
	{
	return RenameAllVariablesTransformer::apply(in, true);
	}


/****************

SimpleVariableRenameTransformer

Applies a simple renaming of some NativeVariables.  Doesn't try to do anything
fancy (like take care of let bindings that cover variables) or anything like
that.

***********/

class	SimpleVariableRenameTransformer {
public:
	SimpleVariableRenameTransformer (
			const map<NativeVariable, NativeVariable>&	inRenames
			) :
			mRenames(inRenames)
		{
		}


	template<class T>
	Nullable<T> processDown(const T& t, bool& b) const { return null(); }

	Nullable<NativeVariable> processDown(const NativeVariable& t,
										 bool& b) const
		{
		if (mRenames.find(t) == mRenames.end())
			return null();
		return null() << mRenames.find(t)->second;
		}

	template<class T>
	Nullable<T> processUp(const T& t) const { return null(); }
private:
	const map<NativeVariable, NativeVariable>& mRenames;
};

NativeCFG			renameVariables(const NativeCFG& in,
						const map<NativeVariable, NativeVariable>& inRenames)
	{
	SimpleVariableRenameTransformer renamer(inRenames);
	return transform(in, renamer);
	}

ImmutableTreeMap<NativeBlockID, NativeBlock>
					renameVariables(
						const ImmutableTreeMap<NativeBlockID, NativeBlock>& inBlocks,
						const map<NativeVariable, NativeVariable>& inRenames
						)
	{
	SimpleVariableRenameTransformer renamer(inRenames);
	return transform(inBlocks, renamer);
	}

NativeBlock			renameVariables(const NativeBlock& in,
						const map<NativeVariable, NativeVariable>& inRenames)
	{
	SimpleVariableRenameTransformer renamer(inRenames);
	return transform(in, renamer);
	}

NativeExpression	renameVariables(const NativeExpression& in,
						const map<NativeVariable, NativeVariable>& inRenames)
	{
	SimpleVariableRenameTransformer renamer(inRenames);
	return transform(in, renamer);
	}

ImmutableTreeSet<NativeVariable>	verifyNoVarsBoundTwice(const NativeCFG& in)
	{
	VariableBindingVisitor vis;
	visit(in,vis);

	return vis.mBoundMultiply;
	}

ImmutableTreeSet<NativeVariable>	verifyNoVarsBoundTwice(const NativeExpression& in)
	{
	VariableBindingVisitor vis;
	visit(in,vis);

	return vis.mBoundMultiply;
	}



}

