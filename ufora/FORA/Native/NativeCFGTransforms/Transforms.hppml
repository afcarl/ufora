/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/
#pragma once

#include "../NativeCode.hppml"
#include "RenameVariables.hppml"
#include "RenameNativeBlocks.hppml"

#include <map>

class RuntimeConfig;

//TODO CLEANUP brax: move each of these functions to appropriate headers

namespace NativeCFGTransforms {

//optimize this CFG as much as possible
NativeCFG			optimize(const NativeCFG& in, const RuntimeConfig& inConfig);

//Does inlining of simple one-return-path functions, gets rid of useless
//lets, removes variables with type "Nothing()", propagates variable-variable
//let expressions, etc.
//also, calls simplifyCFGStructure
//Assumes that all variable defs are unique (e.g. that the cfg has had
//	'renameVariables' called on it.
NativeCFG			cleanupAndSimplify(const NativeCFG& in);

//simplifies an expression rather than a whole CFG
NativeExpression   cleanupAndSimplify(const NativeExpression& in);

//Inlines "callee" into the body of "caller" wherever it is referred to with
//the name "calleeName" in a Call(External(...)) operation.
NativeCFG
	inlineCFG(
				const NativeCFG& caller,
				const NativeCFG& callee,
				const std::string& calleeName);

//remaps the NativeBlockIDs in inCFG so that 'id' points to Entry and the
//rest are internal
NativeCFG	remapNativeBlockIDsForInlining(
					const NativeCFG& inCFG,
					NativeBlockID id
					);

//Traverses down inExpr, pushing inMetadataToPush metadata elements onto any
//metadata stacks produced in a lower context. Used when we inline things, and
//need to preserve the stack information in the contexts below
NativeExpression pushMetadataOntoCallExpressions(
				const NativeExpression& inExpr,
				const ImmutableTreeVector<NativeContinuationMetadata>&
							inMetadataToPush);

NativeCFG pushMetadataOntoCallExpressions(
				const NativeCFG& inExpr,
				const ImmutableTreeVector<NativeContinuationMetadata>&
							inMetadataToPush);

};


