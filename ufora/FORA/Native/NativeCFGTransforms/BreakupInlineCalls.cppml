/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/
#include "BreakupInlineCalls.hppml"
#include "../NativeCode.hppml"
#include "../../../core/cppml/CPPMLTransform.hppml"
#include "ReplaceReturnsWithContinuations.hppml"
#include "Transforms.hppml"
#include "../../../core/Logging.hpp"
#include "../../../core/Clock.hpp"

namespace NativeCFGTransforms {


//is it easy to change this expression from an expression with a
//"Return" in it to an expression that has the value of the return?
bool isSimpleReturn(const NativeExpression& in)
	{
	@match NativeExpression(in)
		-|	Return() ->> {
			return  true;
			}
		-|	DiscardFirst(a,b) ->> {
			return  (
				!a.type() ?
					isSimpleReturn(a)
				:	a.exits().size() == 0 &&
					isSimpleReturn(b)
				);
			}
		-|	Let(v,e,within) ->> {
			return  (
				!e.type() ?
					isSimpleReturn(e)
				:	e.exits().size() == 0 &&
					isSimpleReturn(within)
				);
			}
		-|	If(cond,ifTrue,ifFalse) ->> {
			return  (
				!cond.type() ?
					isSimpleReturn(cond)
				:	(cond.exits().size() == 0 &&
						isSimpleReturn(ifTrue) &&
						isSimpleReturn(ifFalse)
				)
				);
			}
		-|	_ ->> {
			return  false;
			}
		;
	}


//transform an expression with "Return" in it to one that just evalutes
//to the returned value
NativeExpression extractFromSimpleReturn(const NativeExpression& in)
	{
	@match NativeExpression(in)
		-|	Return(_, e) ->> {
			return  e;
			}
		-|	DiscardFirst(a,b) ->> {
			return  (
				isSimpleReturn(a) ?
					a
				:	NativeExpression::DiscardFirst(a,
						extractFromSimpleReturn(b))
				);
			}
		-|	Let(v,e,within) ->> {
			return  (
				isSimpleReturn(e) ?
					e
				:	NativeExpression::Let(v,e,
						extractFromSimpleReturn(within)
						)
				);
			}
		-|	If(cond, ifTrue, ifFalse, ratio) ->> {
			return  (
				isSimpleReturn(cond) ?
					cond
				:	NativeExpression::If(cond,
						extractFromSimpleReturn(ifTrue),
						extractFromSimpleReturn(ifFalse),
						ratio
						)
				);
			}
		;
	}
class BreakUpAndInlineTransformer {
public:
		//return a single expression that evaluates 'args', passes them to the
		//slots in 'block', and feeds the
		//output into 'ret'.
		NativeExpression simpleInline(
				const NativeBlock& block,
				const NativeContinuation& ret,
				const ImmutableTreeVector<NativeExpression>& args,
				const ImmutableTreeVector<NativeContinuationMetadata>&
							metadatas
				) const
			{
			//the subexpression has no exits, so it
			//must be inlineable.
			NativeExpression exprToInline =
				pushMetadataOntoCallExpressions(
					extractFromSimpleReturn(block.expression()),
					metadatas);

			NativeExpression innerExpressionResult =
				exprToInline;

			//add the 'args' expressions as 'lets' in reverse order
			for (long k = ((long)args.size())-1; k >= 0; k--)
				innerExpressionResult = NativeExpression::Let(
					block.args()[k],
					args[k],
					innerExpressionResult
					);

			//pop the return variable on the way it expects
			NativeExpression interiorExpression =
				NativeExpression::Let(
					ret.var(),
					innerExpressionResult,
					ret.expression()
					);

			return interiorExpression;
			}

		Nullable<NativeExpression> tryInlineFunction(const NativeExpression& e) const
			{
			@match NativeExpression(e)
				-|	Call(Inline(subCFG, subLabel), rets, args, metadatas) ->> {
					//if there's looping going on, we can't inline
					if (!(subCFG.blocks().size() == 1 &&
							subCFG.blocks()[subLabel]))
						return null();

					const NativeBlock& block(*subCFG.blocks()[subLabel]);

					//there's only one block - if we're calling ourself, then
					//we definitely can't inline.
					if (block.expression().jumpTargets().size())
						return null();

					//so now we have some expression 'e' that exits over a set of
					//continuations defined in 'rets'.

					//There are two options: first, we can have several
					//continuations, but all of them can be 'return' expression.
					//if this is the case, we may replace each 'return' in the
					//inner function call with the appropriate continuation
					//'return' and not violate the semantics.

					//Alternatively, we can have one continuation f(x) which we
					//can just evaluate with the inner expression given.

					bool allContinuationsAreExits = true;
					for (long k = 0; k < rets.size() && allContinuationsAreExits;k++)
						if (rets[k].expression().type())
							allContinuationsAreExits = false;

					if (!allContinuationsAreExits && rets.size() == 1
							&& isSimpleReturn(block.expression()))
						return null() <<
							simpleInline(
								block,
								rets[0],
								args,
								metadatas
								);

					if (!allContinuationsAreExits)
						return null();

					//if we got here, allContinuationsAreExits is true, so we
					//may replace each 'return' in the subexpression
					//with the relevant 'return'
					NativeExpression exprToInline =
						pushMetadataOntoCallExpressions(
							block.expression(),
							metadatas
							);

					NativeExpression newExpr = replaceReturnsWithContinuations(
						exprToInline,
						rets
						);

					exprToInline = newExpr;

					//add the 'args' expressions as 'lets' in reverse order
					for (long k = ((long)args.size())-1; k >= 0; k--)
						exprToInline = NativeExpression::Let(
							block.args()[k],
							args[k],
							exprToInline
							);

					if (exprToInline.complexity() > e.complexity() * 1.5)
						{
						LOG_DEBUG << "expression complexity increased from "
							<< e.complexity()
							<< " -> "
							<< exprToInline.complexity()
							<< ". not inlining."
							;
						return null();
						}

					return null() << exprToInline;
					}
				-|	_ ->> { }
				;
			return null();
			}

		template<class T>
		Nullable<T> processDown(const T& t, bool& b) const { return null(); }

		Nullable<NativeType> processDown(const NativeType& t, bool& b) const
			{
			b = false;
			return null();
			}

		Nullable<NativeConstant> processDown(const NativeConstant& t, bool& b) const
			{
			b = false;
			return null();
			}

		template<class T>
		Nullable<T> processUp(const T& t) const { return null(); }

		Nullable<NativeExpression> processUp(const NativeExpression& t) const
			{
			@match NativeExpression(t)
				-|	Call(target, rets, args, metadatas) ->> {

					if (target.isInline())
						return tryInlineFunction(t);

					}
				-|	_	->> {
					;}
				;
			return null();
			}
};



NativeCFG	breakUpInlineCalls(const NativeCFG& in)
	{
	NativeCFG tr = transform(in, BreakUpAndInlineTransformer());

	lassert(!verifyNoVarsBoundTwice(tr).size());

	lassert_dump(tr.freeVariables().size() == 0,
		prettyPrintString(tr) << "\nafter inlining, has free variables "
			<< prettyPrintString(tr.freeVariables())
		);

	return tr;
	}

NativeExpression	breakUpInlineCalls(const NativeExpression& in)
	{
	NativeExpression tr = transform(in, BreakUpAndInlineTransformer());

	lassert(!verifyNoVarsBoundTwice(tr).size());

	if (in.complexity() * 2 < tr.complexity())
		LOG_WARN << "breakUpInlineCalls increased complexity from "
			<< in.complexity() << " to " << tr.complexity();

	return tr;
	}

}
