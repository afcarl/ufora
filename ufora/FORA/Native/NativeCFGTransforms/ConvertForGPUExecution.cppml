#include "ConvertForGPUExecution.hppml"
#include "../NativeCode.hppml"
#include "../NativeTypeFor.hpp"
#include "../NativeVariable.hppml"
#include "../../CUDA/CUDAVectorRecord.hpp"
#include "../../TypedFora/ABI/VectorRecord.hpp"
#include "../../TypedFora/ABI/VectorRecordCodegen.hppml"
#include "../../../core/cppml/CPPMLTransform.hppml"
#include "../../../core/Logging.hpp"

namespace NativeCFGTransforms {

NativeCFG prependNothingToReturnTypes(const NativeCFG& inCfg) {
	NativeCFG cfg(inCfg);
	cfg.returnTypes() = emptyTreeVec() + NativeType::Nothing() + cfg.returnTypes();
	return cfg;

	}

class IncrementReturnIndexTransformer {
public:
	IncrementReturnIndexTransformer(uword_t maxIdx)
		{
		mNullCont = NativeContinuation(
						NativeVariable::Temp(NativeType::Nothing()),
						NativeExpression::Return(0, NativeConstant::Nothing().expr()));
		}

	template<class T>
	Nullable<T> processDown(const T& in, bool& out) const
		{
		return null();
		}
	template<class T>
	Nullable<T> processUp(const T& in) const
		{
		return null();
		}

	Nullable<NativeCFG> processDown(const NativeCFG& inCFG, bool& cont) const
		{
		return null();
		}
	Nullable<NativeCFG> processUp(const NativeCFG& inCFG) const
		{
		return null();
		}

	NativeExpression	processUp(const NativeExpression& inExp) const
		{
		@match NativeExpression(inExp)
			-|	Return(idx, val) ->> {
				return NativeExpression::Return(idx+1, val);
				}
			-|	Call(f, continuations, args, meta) ->> {
				auto newF = f;
				@match NativeCallTarget(f)
				-|	Inline(cfg, block) ->> {
					newF = NativeCallTarget::Inline(prependNothingToReturnTypes(cfg), block);
					}
				-| _ ->> {}
				return NativeExpression::Call(
						newF,
						emptyTreeVec() + mNullCont + continuations,
						args,
						meta);
				}

			-|	_ ->> {
				return inExp;
				}
			;
		}

private:
	NativeContinuation mNullCont;
};

/// Convert NativeVariables of Vector type to GPU-Vector type
class VectorRecordForGpuTransformer {
public:
	VectorRecordForGpuTransformer()
		{
		mVectorDataType = NativeTypeFor<TypedFora::Abi::VectorRecord>::get();
		lassert(mVectorDataType.isComposite());

		NativeType_CompositeType comp = mVectorDataType.getComposite();
		lassert(comp.elements().size()==4);

		mGpuVectorDataType = NativeTypeFor<CUDAVectorRecord>::get();
		}

	template<class T>
	Nullable<T> processDown(const T& in, bool& out) const
		{
		return null();
		}
	template<class T>
	Nullable<T> processUp(const T& in) const
		{
		return null();
		}

	Nullable<NativeVariable> processDown(const NativeVariable& var, bool& cont) const
		{
		if (var.type() == mVectorDataType)
			{
			if (mGpuVectorsForForaVectors.find(var) == mGpuVectorsForForaVectors.end())
				{
				mGpuVectorsForForaVectors[var] = NativeVariable::Temp(mGpuVectorDataType);
				}
			cont = false;
			return null() << mGpuVectorsForForaVectors[var];
			}
		return null();
		}

	Nullable<NativeType> processUp(const NativeType& typ) const
		{
		if (typ == mVectorDataType)
			{
			return null() << mGpuVectorDataType;
			}
		return null();
		}

private:
	mutable std::map<NativeVariable, NativeVariable> mGpuVectorsForForaVectors;
	NativeType mVectorDataType;
	NativeType mGpuVectorDataType;
};

class StripIncompatibleForGpuTransformer {
public:
	template<class T>
	Nullable<T> processDown(const T& in, bool& out) const
		{
		return null();
		}
	template<class T>
	Nullable<T> processUp(const T& in) const
		{
		return null();
		}

	//strip out the callback variables and replace with 'nothing'
	//won't be a problem unless they get used
	NativeVariable 		processDown(const NativeVariable& var, bool& cont) const
		{
		if (isRuntimeCallbackType(var.type()))
			{
			return NativeVariable(var.varID(), NativeType::Nothing());
			}
		return var;
		}

	NativeExpression processUp(const NativeExpression& inExp) const
		{
		@match NativeExpression(inExp)
			-|	Let(v, exp, within) ->> {
				if (exp.type())
					return inExp;
				else
					return mUnsupported;
				}
			-|	_ ->> {
				return inExp;
				}
			;
		}

	NativeExpression processDown(const NativeExpression& inExp, bool& ioCont) const
		{
		@match NativeExpression(inExp)
			-|	Alloc(_) ->> {
				return mUnsupported;
				}
			-|	Selector(_) ->> {
				return mUnsupported;
				}
			-|	ElementAddress(_) ->> {
				return mUnsupported;
				}
			-|	CallLibraryFunction(_) ->> {
				return mUnsupported;
				}
			-|	Continuations(_) ->> {
				return mUnsupported;
				}
			-|	FollowContinuation(_) ->> {
				return mUnsupported;
				}
			-|	Halt()	->> {
				return mUnsupported;
				}
			-|	Tagged(_, Interrupt()) ->> {
				return  NativeExpression::Nothing();
				}
			-|	Tagged(_, KickToInterpreterCheck()) ->> {
				return  NativeExpression::Nothing();
				}
//			Why are we not discarding 'TransferToInterpreter' tagged expressions?
//			-|	Tagged(_, TransferToInterpreter()) ->> {
//				return  NativeExpression::Nothing();
//			}
			-|	_ ->> {
				return inExp;
				}
			;
		}

	StripIncompatibleForGpuTransformer()
		{
		mUnsupported = NativeExpression::Return(0, NativeConstant::Nothing().expr());
		}
private:
	NativeExpression mUnsupported;
};

class RewireOuterCfgExceptionalPaths {
public:
	RewireOuterCfgExceptionalPaths() : mMaxIdx(0), mCfgDepth(0) {}

	template<class T>
	Nullable<T> processDown(const T& in, bool& out) const
		{
		return null();
		}
	template<class T>
	Nullable<T> processUp(const T& in) const
		{
		return null();
		}
	Nullable<NativeCFG> processDown(const NativeCFG& inCFG, bool& cont) const
		{
		mCfgDepth += 1;
		if (mCfgDepth > 1)
			{
			cont = false;
			}
		else // mCfgDepth == 1
			{
			lassert(mCfgDepth==1);
			mMaxIdx = inCFG.returnTypes().size();
			}
		return null();
		}
	Nullable<NativeCFG> processUp(const NativeCFG& inCFG) const
		{
		mCfgDepth -= 1;
		return null();
		}

	NativeExpression processDown(const NativeExpression& inExp, bool& cont) const
		{
		@match NativeExpression(inExp)
			-|	Return(idx, val) ->> {
				if (idx < mMaxIdx)
					return inExp;
				else
					return NativeExpression::Return(0, NativeConstant::Nothing().expr());
				}
			-|	_ ->> {
				return inExp;
				}
			;
		}
private:
	mutable uword_t mMaxIdx;
	mutable uword_t mCfgDepth;
};

class ConvertHomogenousVectorLookup {
public:
	ConvertHomogenousVectorLookup() {}
	template<class T>
	Nullable<T> processDown(const T& in, bool& out) const
		{
		return null();
		}
	template<class T>
	Nullable<T> processUp(const T& in) const
		{
		return null();
		}
	NativeExpression	processUp(const NativeExpression& inExp) const
		{
		@match NativeExpression(inExp)
			-|	Tagged(e, HomogenousVectorLookup(vectorRecord, index, type)) ->> {
				auto res = NativeExpression::BinaryOp(
								NativeBinaryOpcode::Add(),
								NativeExpression::ValueExtract(
										emptyTreeVec() + (uword_t)0,
										vectorRecord).cast(type.ptr(), false),
								index
								);
				lassert_dump(
					e.type() == res.type(),
					prettyPrintString(e.type()) << " != " << prettyPrintString(res.type()));
				return res;
				}

			-|	_ ->> {
				return inExp;
				}
			;
		}
};

NativeCFG convertForGpuExecution(const NativeCFG& in, unsigned int resultPartSize)
	{
	NativeCFG cfg(in);

	LOG_DEBUG << "convertForGpuExecution: BEGIN!";
	LOG_DEBUG << prettyPrintString(cfg);
	// 1. Convert VectorRecords to GPU VectorRecords.
	cfg = transform(cfg, VectorRecordForGpuTransformer());
	LOG_DEBUG << "convertForGpuExecution: after VectorRecord transformer";
	LOG_DEBUG << prettyPrintString(cfg);

	// 2. Add a Nothing as the first return type, update continuations,
	//    and remove some runtime stuff
	LOG_DEBUG << "convertForGpuExecution: before ReturnIndex transformer. resultPartSize=" << resultPartSize;
	cfg = transform(cfg, IncrementReturnIndexTransformer(resultPartSize));
	LOG_DEBUG << "convertForGpuExecution: after ReturnIndex transformer";
	LOG_DEBUG << prettyPrintString(cfg);

	// 3. Rewire Exceptional pathways of the outer CFG to return to that 1st 'Nothing'
	LOG_DEBUG << "convertForGpuExecution: before Rewire Outer CFG Exceptions transformer.";
	cfg.returnTypes() =
			emptyTreeVec() + NativeType::Nothing() +
			cfg.returnTypes().slice(0, resultPartSize);
	cfg = transform(cfg, RewireOuterCfgExceptionalPaths());
	LOG_DEBUG << "convertForGpuExecution: after Rewire Outer CFG Exceptions transformer.";

	// 4. Convert HomogenousVectorLookup to simple pointer+offset representation
	// without any bounds checks
	cfg = transform(cfg, ConvertHomogenousVectorLookup());

	// 5. Remove unsupported code and rewire it to return to that 1st 'Nothing'
	//    type which we added in an earlier pass
	cfg = transform(cfg, StripIncompatibleForGpuTransformer());

	LOG_DEBUG << "convertForGpuExecution: DONE!";
	return cfg;
	}

}
