/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/
#include "Transforms.hppml"
#include "../../../core/UnitTest.hpp"
#include "../../../core/UnitTestCppml.hpp"

using namespace NativeCFGTransforms;

namespace {

NativeBinaryOpcode add = NativeBinaryOpcode::Add();
NativeBinaryOpcode sub = NativeBinaryOpcode::Sub();
NativeBinaryOpcode mul = NativeBinaryOpcode::Mul();

template<class T> NativeConstant Bool(T t) { return NativeConstant::Bool(t); }
template<class T> NativeConstant UInt8(T t) { return NativeConstant::UInt8(t); }
template<class T> NativeConstant UInt16(T t) { return NativeConstant::UInt16(t); }
template<class T> NativeConstant UInt32(T t) { return NativeConstant::UInt32(t); }
template<class T> NativeConstant UInt64(T t) { return NativeConstant::UInt64(t); }
template<class T> NativeConstant Int8(T t) { return NativeConstant::Int8(t); }
template<class T> NativeConstant Int16(T t) { return NativeConstant::Int16(t); }
template<class T> NativeConstant Int32(T t) { return NativeConstant::Int32(t); }
template<class T> NativeConstant Int64(T t) { return NativeConstant::Int64(t); }

void test(NativeBinaryOpcode op, NativeConstant c1, NativeConstant c2, NativeConstant target)
	{
	BOOST_CHECK_EQUAL_CPPML(
		cleanupAndSimplify(
			NativeExpression::BinaryOp(
				op,
				NativeExpression::Constant(c1),
				NativeExpression::Constant(c2)
				)
			),
		NativeExpression::Constant(target)
		);

	}

}

BOOST_AUTO_TEST_CASE( test_NativeCFGTransforms_CleanupAndSimplify_Constants )
	{
	//full truth table exercising for bool
	test(add, Bool(true), Bool(true), Bool(false));
	test(add, Bool(false), Bool(true), Bool(true));
	test(add, Bool(true), Bool(false), Bool(true));
	test(add, Bool(false), Bool(false), Bool(false));

	test(sub, Bool(true), Bool(false), Bool(true));
	test(sub, Bool(false), Bool(true), Bool(true));
	test(sub, Bool(false), Bool(false), Bool(false));
	test(sub, Bool(true), Bool(true), Bool(false));

	test(mul, Bool(true), Bool(true), Bool(true));
	test(mul, Bool(false), Bool(false), Bool(false));
	test(mul, Bool(false), Bool(true), Bool(false));
	test(mul, Bool(true), Bool(false), Bool(false));

	//check that add, sub, and mul produce correct types
	test(add, UInt8(1), UInt8(1), UInt8(2));
	test(add, Int8(1), Int8(1), Int8(2));
	test(add, UInt16(1), UInt16(1), UInt16(2));
	test(add, Int16(1), Int16(1), Int16(2));
	test(add, UInt32(1), UInt32(1), UInt32(2));
	test(add, Int32(1), Int32(1), Int32(2));
	test(add, UInt64(1), UInt64(1), UInt64(2));
	test(add, Int64(1), Int64(1), Int64(2));

	test(sub, UInt8(3), UInt8(1), UInt8(2));
	test(sub, Int8(3), Int8(1), Int8(2));
	test(sub, UInt16(3), UInt16(1), UInt16(2));
	test(sub, Int16(3), Int16(1), Int16(2));
	test(sub, UInt32(3), UInt32(1), UInt32(2));
	test(sub, Int32(3), Int32(1), Int32(2));
	test(sub, UInt64(3), UInt64(1), UInt64(2));
	test(sub, Int64(3), Int64(1), Int64(2));

	test(mul, UInt8(1), UInt8(1), UInt8(1));
	test(mul, Int8(1), Int8(1), Int8(1));
	test(mul, UInt16(1), UInt16(1), UInt16(1));
	test(mul, Int16(1), Int16(1), Int16(1));
	test(mul, UInt32(1), UInt32(1), UInt32(1));
	test(mul, Int32(1), Int32(1), Int32(1));
	test(mul, UInt64(1), UInt64(1), UInt64(1));
	test(mul, Int64(1), Int64(1), Int64(1));
	}

