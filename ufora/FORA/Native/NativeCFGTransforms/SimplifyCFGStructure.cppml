/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/
#include "SimplifyCFGStructure.hppml"
#include "RenameVariables.hppml"
#include "../NativeCode.hppml"
#include "../../../core/cppml/CPPMLTransform.hppml"
#include "../../../core/cppml/CPPMLVisit.hppml"
#include "../../../core/math/GraphUtil.hpp"
#include "../../../core/Logging.hpp"

namespace NativeCFGTransforms {

@type CountBlockJumps = map<NativeBlockID, uword_t> counts {
public:
	template<class T>
	void processDown(const T& t)
		{
		}

	template<class T>
	void processUp(const T& t)
		{
		}

	StopVisiting processDown(const NativeType& t) const
		{
		return StopVisiting();
		}

	StopVisiting processDown(const NativeCFG& t) const
		{
		return StopVisiting();
		}

	void processDown(const NativeExpression& t)
		{
		@match NativeExpression(t)
			-|	Jump(jumpBlock, expressions) ->> {
				counts()[jumpBlock]++;
				}
			-|	_ ->> {
				}
			;
		}

	//don't look outside of this CFG
	StopVisiting processDown(const NativeCFG& t)
		{
		return StopVisiting();
		}
};


//everywhere we "jump" to 'targetID', replace it with the actual inline
//expression given in 'targetBlock'
@type ReplaceJumpsWithJump =
			NativeBlockID toReplace, NativeBlockID replaceWith {
public:
	template<class T>
	Nullable<T> processDown(const T& t, bool& ioContinue) const
		{
		return null();
		}

	template<class T>
	Nullable<T> processUp(const T& t) const
		{
		return null();
		}

	Nullable<NativeType> processDown(const NativeType& t, bool& b) const
		{
		b = false;
		return null();
		}

	Nullable<NativeConstant> processDown(const NativeConstant& t, bool& b) const
		{
		b = false;
		return null();
		}

	Nullable<NativeExpression> processDown(
							const NativeExpression& t,
							bool& ioContinue
							) const
		{
		@match NativeExpression(t)
			-|	Jump(jumpBlock, expressions) ->> {
				if (jumpBlock == toReplace())
					return null() << NativeExpression::Jump(replaceWith(), expressions);
				}
			-|	_ ->> {
				}
			;
		return null();
		}

	//don't look outside of this CFG
	Nullable<NativeCFG> processDown(
							const NativeCFG& t,
							bool& ioContinue
							) const
		{
		ioContinue = false;
		return null();
		}
};

//everywhere we "jump" to 'targetID', replace it with the actual inline
//expression given in 'targetBlock'
@type ReplaceJumpsWithCalls =
			NativeBlockID targetID, NativeBlock targetBlock {
public:
	template<class T>
	Nullable<T> processDown(const T& t, bool& ioContinue) const
		{
		return null();
		}

	template<class T>
	Nullable<T> processUp(const T& t) const
		{
		return null();
		}

	Nullable<NativeType> processDown(const NativeType& t, bool& b) const
		{
		b = false;
		return null();
		}

	Nullable<NativeConstant> processDown(const NativeConstant& t, bool& b) const
		{
		b = false;
		return null();
		}

	Nullable<NativeExpression> processDown(
							const NativeExpression& t,
							bool& ioContinue
							) const
		{
		@match NativeExpression(t)
			-|	Jump(jumpBlock, expressions) ->> {
				if (jumpBlock != targetID())
					return null();

				ioContinue = false;

				NativeExpression finalExpression =
					targetBlock().expression();

				for (long k = ((long)expressions.size())-1; k >= 0; k--)
					finalExpression =
						NativeExpression::Let(
							targetBlock().args()[k],
							transform(expressions[k], *this),
							finalExpression
							);

				return null() << renameNonfreeVariables(finalExpression);
				}
			-|	_ ->> {
				return null();
				}
			;
		}

	//don't look outside of this CFG
	Nullable<NativeCFG> processDown(
							const NativeCFG& t,
							bool& ioContinue
							) const
		{
		ioContinue = false;
		return null();
		}
};

uword_t getIncomingCount(	const map<NativeBlockID, uword_t>& incomingCounts,
							const NativeBlockID& blockID
							)
	{
	auto it = incomingCounts.find(blockID);

	if (it == incomingCounts.end())
		return 0;
	else
		return it->second;
	}

bool isInlineableBlockExpression(const NativeExpression& inExpression,
							const NativeBlockID& blockID,
							const map<NativeBlockID, uword_t>& incomingCounts
							)
	{
	//TODO CLEANUP brax: move this constant into RuntimeConfig
	bool result = getIncomingCount(incomingCounts, blockID) < 2
		&& !inExpression.jumpTargets().contains(blockID)
		&& blockID.isInternal()
		;

	return result;
	}

//check whether 'block' is "very simple" (e.g. doesn't call itself, has very
//little logic in it, etc.), in which case we can find all uses of the block
//and replace the 'jump' expression with the expression in 'block'
Nullable<NativeCFG> attemptToInlineCFGBlock(
		const NativeCFG& cfg,
		const NativeBlock& block,
		const NativeBlockID& blockID,
		const map<NativeBlockID, uword_t>& incomingCounts,
		const map<NativeBlockID, uword_t>& incomingCountsIncludingExternal
		)
	{
	if (isInlineableBlockExpression(block.expression(), blockID, incomingCounts))
		{
		return null() <<
			NativeCFG(
				cfg.returnTypes(),
				transform(
					cfg.blocks() - blockID,
					ReplaceJumpsWithCalls(blockID, block)
					),
				cfg.name()
				);
		}
		else
		//check whether we're just a simple jump expression, in which case we
		//can merge the target expression into ourselves
		{
		@match NativeExpression(block.expression())
			-|	Jump(target, argExprs) ->> {
				//only do this if we're jumping to an internal node
				if (!target.isInternal() || target == blockID ||
							getIncomingCount(incomingCountsIncludingExternal, target) > 1)
					return null();

				for (long k = 0; k < argExprs.size();k++)
					if (!argExprs[k].isVariable() && !argExprs[k].isConstant())
						return null();

				//get a copy of the block with globally unique names
				NativeBlock newTargetBlock = cfg[target];

				NativeExpression newBody = newTargetBlock.expression();

				for (long k = 0; k < argExprs.size();k++)
					newBody = NativeExpression::Let(
						newTargetBlock.args()[k],
						argExprs[k],
						newBody
						);

				ImmutableTreeMap<NativeBlockID, NativeBlock> tgtBlocks =
					cfg.blocks() + blockID + NativeBlock(block.args(), newBody);

				tgtBlocks = tgtBlocks - target;

				return null() <<
					NativeCFG(
						cfg.returnTypes(),
						tgtBlocks,
						cfg.name()
						);
				}
			-|	_ ->> {
				return null();
				}
			;
		}
	}

//look for simple jump blocks and merge their targets into them.
//remove any internal blocks that are not being used
Nullable<NativeCFG>	cleanupAndSimplifyNativeCFGStructure(const NativeCFG& in)
	{
	bool changedAnything = false;

	NativeCFG cfg = in;

	CountBlockJumps jumpCounter;
	CountBlockJumps jumpCounterIncludingExternal;

	for (auto blockIdAndBlock: cfg.blocks())
		{
		if (blockIdAndBlock.first.isInternal())
			visit(blockIdAndBlock.second, jumpCounter);
		visit(blockIdAndBlock.second, jumpCounterIncludingExternal);
		}

	//first, merge in any simple jump blocks
	for (long k = 0; k < cfg.size();k++)
		{
		if (cfg.name(k).isInternal())
			{
			Nullable<NativeCFG> mergedCFG =
				attemptToInlineCFGBlock(
					cfg,
					cfg[k],
					cfg.name(k),
					jumpCounter.counts(),
					jumpCounterIncludingExternal.counts()
					);

			if (mergedCFG)
				{
				changedAnything = true;
				cfg = *mergedCFG;
				k = -1;
				}
			}
		}

	if (changedAnything)
		return null() << cfg;

	return null();
	}

Nullable<NativeCFG> removeUnusedBlocks(const NativeCFG& in)
	{
	ImmutableTreeMap<NativeBlockID, NativeBlock> blocks = in.blocks();
	ImmutableTreeSet<NativeBlockID> usedBlocks;

	for (long k = 0; k < in.size();k++)
		usedBlocks = usedBlocks + in[k].expression().jumpTargets();

	bool removedAny = false;

	for (long k = 0; k < in.size();k++)
		if (in.name(k).isInternal() && !usedBlocks.contains(in.name(k)))
			{
			blocks = blocks - in.name(k);
			removedAny = true;
			}

	if (removedAny)
		return null() << NativeCFG(in.returnTypes(), blocks, in.name());
	else
		return null();
	}

Nullable<NativeCFG> removeExternalBlocksFromLoops(const NativeCFG& cfg)
	{
	//ensure that external native blocks are not used in loops
	CountBlockJumps jumpCounter;
	visit(cfg.blocks(), jumpCounter);

	std::set<NativeBlockID> externalBlocksToRewrite;

	for (auto blockAndCount: jumpCounter.counts())
		if (!blockAndCount.first.isInternal())
			externalBlocksToRewrite.insert(blockAndCount.first);

	if (!externalBlocksToRewrite.size())
		return null();

	NativeCFG result = cfg;

	for (auto blockId: externalBlocksToRewrite)
		{
		NativeBlockID newBlockID = NativeBlockID::internal();

		ImmutableTreeVector<NativeVariable> newVars;
		ImmutableTreeVector<NativeExpression> newJumpExpressions;

		NativeBlock existingBlock = cfg[blockId];

		for (auto var: existingBlock.args())
			newVars = newVars + NativeVariable::Temp(var.type());

		for (auto var: newVars)
			newJumpExpressions = newJumpExpressions + var.expr();

		NativeBlock newBlock(
			newVars,
			NativeExpression::Jump(newBlockID, newJumpExpressions)
			);

		result.blocks() =
			result.blocks() +
				newBlockID + existingBlock +
				blockId + newBlock
				;

		ReplaceJumpsWithJump replacer(blockId, newBlockID);

		result.blocks() = ::transform(result.blocks(), replacer);
		}

	return null() << result;
	}

class SimplifyCFGStructureTransform {
public:
	SimplifyCFGStructureTransform()
		{
		}

	template<class T>
	Nullable<T> processDown(const T& t, bool& b) const { return null(); }
	template<class T>
	Nullable<T> processUp(const T& t) const { return null(); }


	Nullable<NativeType> processDown(const NativeType& t, bool& ioContinue) const
		{
		ioContinue = false;

		return null();
		}

	Nullable<NativeCFG> processUp(const NativeCFG& t) const
		{
		Nullable<NativeCFG> tr1 =
			removeExternalBlocksFromLoops(t);

		Nullable<NativeCFG> tr2 =
			cleanupAndSimplifyNativeCFGStructure(tr1 ? *tr1 : t);

		Nullable<NativeCFG> tr3 =
			removeUnusedBlocks(tr2 ? *tr2 : tr1 ? *tr1 : t);

		if (tr3)
			return tr3;

		if (tr2)
			return tr2;

		if (tr1)
			return tr1;

		return null();
		}
};

NativeCFG			simplifyCFGStructure(const NativeCFG& in)
	{
	return transform(in, SimplifyCFGStructureTransform());
	}

NativeExpression	simplifyCFGStructure(const NativeExpression& in)
	{
	return transform(in, SimplifyCFGStructureTransform());
	}


}

