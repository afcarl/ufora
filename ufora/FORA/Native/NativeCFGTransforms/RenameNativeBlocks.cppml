/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/
#include "RenameNativeBlocks.hppml"
#include "../../../core/cppml/CPPMLVisit.hppml"
#include "../../../core/cppml/CPPMLTransform.hppml"

namespace NativeCFGTransforms {

/****************
NativeBlockIDRenamer

Applies a simple renaming of some NativeBlockID objects in jump expressions.

Doesn't peer through sub NativeCFGs since we don't have any restrictions
on the names of NativeBlockIDs across cfgs.

***********/

class	NativeBlockIDRenamer {
public:
		NativeBlockIDRenamer(
				ImmutableTreeMap<NativeBlockID, NativeBlockID>	inRenames
				) :
				mRenames(inRenames)
			{
			}


		template<class T>
		Nullable<T> processDown(const T& t, bool& b) const { return null(); }

		//don't look into call targets which contain subCFGs and targets within
		//them.
		Nullable<NativeCallTarget> processDown(const NativeCallTarget& t, bool& b) const
			{
			b = false;
			return null();
			}


		Nullable<NativeBlockID> processDown(const NativeBlockID& t, bool& b) const
			{
			if (mRenames[t])
				return null() << *mRenames[t];
			return null();
			}

		template<class T>
		Nullable<T> processUp(const T& t) const { return null(); }

private:
		ImmutableTreeMap<NativeBlockID, NativeBlockID> mRenames;
};


ImmutableTreeMap<NativeBlockID, NativeBlock>
		renameNativeBlocks(
			const ImmutableTreeMap<NativeBlockID, NativeBlock>& in,
			ImmutableTreeMap<NativeBlockID, NativeBlockID> inRenames
			)
	{
	NativeBlockIDRenamer renamer(inRenames);
	return transform(in, renamer);
	}

ImmutableTreeMap<NativeBlockID, NativeCodeFlattened::Block>
		renameNativeBlocks(
			const ImmutableTreeMap<NativeBlockID, NativeCodeFlattened::Block>& in,
			ImmutableTreeMap<NativeBlockID, NativeBlockID> inRenames
			)
	{
	NativeBlockIDRenamer renamer(inRenames);
	return transform(in, renamer);
	}

NativeCFG
		renameNativeBlocks(
			const NativeCFG& in,
			ImmutableTreeMap<NativeBlockID, NativeBlockID> inRenames
			)
	{
	NativeBlockIDRenamer renamer(inRenames);
	return transform(in, renamer);
	}

}
