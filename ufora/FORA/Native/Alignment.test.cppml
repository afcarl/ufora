#include "NativeType.hppml"
#include "../../core/containers/ImmutableTreeVector.hppml"
#include "../../core/UnitTest.hpp"

void helper_test_size_POD(const NativeType& in)
	{
	BOOST_CHECK_EQUAL(in.packedSize(), in.alignedSize());
	}

BOOST_AUTO_TEST_CASE(test_sizes_POD)
	{
	helper_test_size_POD(NativeType::int8());
	helper_test_size_POD(NativeType::uint8());
	helper_test_size_POD(NativeType::int16());
	helper_test_size_POD(NativeType::uint16());
	helper_test_size_POD(NativeType::int32());
	helper_test_size_POD(NativeType::uint32());
	helper_test_size_POD(NativeType::int64());
	helper_test_size_POD(NativeType::uint64());
	helper_test_size_POD(NativeType::uint1());
	helper_test_size_POD(NativeType::uword());
	helper_test_size_POD(NativeType::sword());
	}

BOOST_AUTO_TEST_CASE(test_sizes_tuples)
	{
	NativeType
		i8   = NativeType::int8(),
		ui8  = NativeType::uint8(),
		i16  = NativeType::int16(),
		ui16 = NativeType::uint16(),
		i32  = NativeType::int32(),
		ui32 = NativeType::uint32(),
		i64  = NativeType::int64(),
		ui64 = NativeType::uint64(),
		ui1  = NativeType::uint1(),
		uw   = NativeType::uword(),
		sw   = NativeType::sword(),

		c1   = NativeType::Composite(emptyTreeVec() + i8 + ui64),
		c2   = NativeType::Composite(emptyTreeVec() + ui8 + i16 + ui32 + ui64),
		c3   = NativeType::Composite(emptyTreeVec() + i8 + ui64 + i16 + i32);

	BOOST_CHECK(c1.packedSize() == 9);
	BOOST_CHECK(c1.alignedSize() == 16);
	BOOST_CHECK(c1.alignment() == 8);

	BOOST_CHECK(c2.packedSize() == 15);
	BOOST_CHECK(c2.alignedSize() == 16);
	BOOST_CHECK(c2.alignment() == 8);

	BOOST_CHECK(c3.packedSize() == 15);
	BOOST_CHECK(c3.alignedSize() == 24);
	BOOST_CHECK(c3.alignment() == 8);
}
