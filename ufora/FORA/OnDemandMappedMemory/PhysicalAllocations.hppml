/***************************************************************************
    Copyright 2016 Ufora Inc.

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
****************************************************************************/

#pragma once

#include "AllocationZoneMapping.hppml"

class PhysicalAllocations {
public:
    PhysicalAllocations(
                boost::function<uint8_t* (PhysicalMemoryAllocation alloc)> inAllocator,
                boost::function<void (PhysicalMemoryAllocation alloc, uint8_t*)> inDeallocator
                );

    Nullable<PhysicalMemoryAllocation> allocForAddress(uint8_t* addr) const;

    IntegerRanges<false>& allocationsForZone(AllocationZone zone);

    uint8_t* addressForAllocation(PhysicalMemoryAllocation alloc);

    int64_t countOfMemoryViewAllocs() const;

    Nullable<PhysicalMemoryAllocation> oldestMemoryViewAlloc();

    Nullable<MemoryBlockId> getOldestBlock();

    void removeBlockFromReplacementQueue(MemoryBlockId block);

    pair<PhysicalMemoryAllocation, int64_t> allocContaining(uint8_t* addr);

    void allocatePhysicalMemory(PhysicalMemoryAllocation allocation);

    void deallocatePhysicalMemory(PhysicalMemoryAllocation allocation);

    void setMappableAddress(
                BlockOrViewId target,
                uint8_t* address,
                uint64_t bytecount
                );

    uint8_t* getMappableAddress(BlockOrViewId target);

    void dropMappingTarget(BlockOrViewId target);

    Nullable<pair<BlockOrViewId, int64_t> >
            translateMappingAddress(uint8_t* mappingBase, uint64_t offsetInMapping);

    int64_t totalBytesMapped() const;

    bool allocHasCopyTasks(PhysicalMemoryAllocation alloc) const;

    bool blockHasCopyTasks(MemoryBlockId id) const;

    void copyAddressRefcountChange(uint8_t* addr, Nullable<PhysicalMemoryAllocation> givenAlloc, int64_t direction);

private:
    int64_t mTotalBytesMapped;

    int64_t mIncreasingIndex;

    map<PhysicalMemoryAllocation, int64_t> mPhysicalAllocCopyTaskCount;

    map<MemoryBlockId, int64_t> mBlockAllocZoneCopyTaskCount;

    MapWithIndex<PhysicalMemoryAllocation, int64_t> mMemoryViewAllocationOrder;

    MapWithIndex<MemoryBlockId, int64_t> mBlockZoneAllocations;

    map<AllocationZone, IntegerRanges<false> > mZoneBytecountRangesPhysicallyAllocated;

    MapWithIndex<PhysicalMemoryAllocation, uint8_t*> mPhysicalMemoryAddresses;

    MapWithIndex<BlockOrViewId, uint8_t*> mMappingAddresses;

    IntegerRanges<false> mMappingAddressesAsRanges;

    IntegerRanges<false> mPhysicalMemoryAddressesAsRanges;

    boost::function<uint8_t* (PhysicalMemoryAllocation alloc)> mAllocateFunc;

    boost::function<void (PhysicalMemoryAllocation alloc, uint8_t*)> mDeallocateFunc;
};

