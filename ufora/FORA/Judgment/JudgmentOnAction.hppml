/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/
#ifndef FORA_JudgmentOnAction
#define FORA_JudgmentOnAction

#include "JudgmentOnValue.hppml"

@type JudgmentOnAction = JudgmentOnResult resultPart, JudgmentOnResult throwPart, bool hasSideEffects {
public:
		JudgmentOnAction(JudgmentOnResult resJor, JudgmentOnResult throwJor)
			{
			resultPart() = resJor;
			throwPart() = throwJor;
			hasSideEffects() = false;
			}

		JudgmentOnAction(JudgmentOnValue val, bool isException)
			{
			if (isException)
				throwPart() = JudgmentOnResult(val);
				else
				resultPart() = JudgmentOnResult(val);

			hasSideEffects() = false;
			}
		JudgmentOnAction(JudgmentOnResult val, bool isException)
			{
			if (isException)
				throwPart() = val;
				else
				resultPart() = val;

			hasSideEffects() = false;
			}
		static JudgmentOnAction 	Value(JudgmentOnValue in)
			{
			return JudgmentOnAction(
							JudgmentOnResult(in),
							JudgmentOnResult(),
							false
							);
			}
		static JudgmentOnAction 	Throws(JudgmentOnValue in)
			{
			return JudgmentOnAction(
							JudgmentOnResult(),
							JudgmentOnResult(in),
							false
							);
			}
		static JudgmentOnAction 	HasSideEffects()
			{
			return JudgmentOnAction(JudgmentOnResult(), JudgmentOnResult(), true);
			}
		static JudgmentOnAction 	Value(JudgmentOnResult in)
			{
			return JudgmentOnAction(in, JudgmentOnResult());
			}
		static JudgmentOnAction 	Throws(JudgmentOnResult in)
			{
			return JudgmentOnAction(JudgmentOnResult(), in);
			}
		static const JudgmentOnAction& Unknown()
			{
			static JudgmentOnAction unknownJOA = JudgmentOnAction(
							JudgmentOnResult(JudgmentOnValue::Unknown()),
							JudgmentOnResult(JudgmentOnValue::Unknown()),
							true
							);

			return unknownJOA;
			}
		static JudgmentOnAction 	Nonterminal(void)
			{
			return JudgmentOnAction();
			}
		bool definitelyThrows(void) const
			{
			return !resultPart() && throwPart();
			}
		bool definitelyValue(void) const
			{
			return resultPart() && !throwPart();
			}
		bool nonterminal(void) const
			{
			return !resultPart() && !throwPart();
			}

		bool covers(const JudgmentOnAction& other) const;

		bool isUnknown(void) const;


		JudgmentOnAction operator|(const JudgmentOnAction& other);

		JudgmentOnAction operator&(const JudgmentOnAction& other);

		Nullable<uword_t> smallestCovering(
							const JudgmentOnValue& in,
							bool isThrow) const;

		Nullable<uword_t> smallestCovering(
							const pair<JudgmentOnValue, bool>& in
							) const
			{
			return smallestCovering(in.first, in.second);
			};

		uword_t size(void) const
			{
			return resultPart().size() + throwPart().size();
			}

		const JudgmentOnResult& jorByIsException(bool b) const
			{
			if (b)
				return throwPart();
			else
				return resultPart();
			}

		pair<JudgmentOnValue, bool> jovAndIsExceptionByIndex(uword_t ix) const
			{
			if (ix < resultPart().size())
				return make_pair(resultPart()[ix], false);
			else
				return make_pair(throwPart()[ix - resultPart().size()], true);
			}

		JudgmentOnAction operator|(const JudgmentOnAction& other) const;

		JudgmentOnAction relaxed() const;

};
macro_defineCppmlComparisonOperators(JudgmentOnAction)

template<>
class CPPMLPrettyPrint<JudgmentOnAction> {
public:
		static void prettyPrint(CPPMLPrettyPrintStream& s, const JudgmentOnAction& t)
			{
			s << "JOA(";
			s << "returns " << t.resultPart();
			s << ", ";
			s << "throws " << t.throwPart();
			if (t.hasSideEffects())
				s << ", hasSideEffects";
			s << ")";
			}
};


#endif

