/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/
#include "JudgmentOnValue.hppml"
#include "../Vector/MutableVectorRecord.hppml"
#include "../TypedFora/ABI/MutableVectorHandle.hpp"

JudgmentOnValue	JudgmentOnValueMutableVector::FromLiveValue(const ImplVal& inImplVal)
	{
	const JOV& elementJOV(
		inImplVal.cast<MutableVectorRecord>().elementJOV()
		);

	return JudgmentOnValue::MutableVector(
		JudgmentOnValueMutableVector(
			JOJOV::Known(elementJOV)
			)
		);
	}

JudgmentOnValue	JudgmentOnValueMutableVector::OfType(const Type& type)
	{
	lassert(type.isMutableVector());

	return JudgmentOnValue::MutableVector(
		JudgmentOnValueMutableVector(
			JOJOV::Unknown()
			)
		);
	}

Nullable<Type>			JudgmentOnValueMutableVector::computeType() const
	{
	return null() << Type::MutableVector();
	}

Nullable<bool>			JudgmentOnValueMutableVector::computeIsCST() const
	{
	return null() << false;
	}

Nullable<CSTValue>		JudgmentOnValueMutableVector::computeConstant() const
	{
	return null();
	}

void		JudgmentOnValueMutableVector::toString(CPPMLPrettyPrintStream& s, bool isJOVAsValue) const
	{
	if (!isJOVAsValue)
		s << "{";

	@match JudgmentOnValueMutableVector(*this)
		-| (Unknown(Unknown())) ->> {
			//this is the canonical constant
			s << "MutableVector";
			}
		-| _ ->> {
			s << "MutableVector(";
			elementJudgment().toString(s, true);
			s << ")";
			}

	if (!isJOVAsValue)
		s << "}";
	}

bool 					JudgmentOnValueMutableVector::covers(const ImplVal& impl) const
	{
	if (!impl.type().isMutableVector())
		return false;

	return elementJudgment().covers(
		JOV::JOVAsValue(
			JOJOV::Known(impl.cast<MutableVectorRecord>().elementJOV())
			)
		);
	}

bool 					JudgmentOnValueMutableVector::covers(const JudgmentOnValue& impl) const
	{
	return elementJudgment().covers(
		JOV::JOVAsValue(
			impl.getMutableVector().jov().elementJudgment()
			)
		);
	}
bool 					JudgmentOnValueMutableVector::disjoint(const JudgmentOnValue& impl) const
	{
	return elementJudgment().disjoint(
		JOV::JOVAsValue(
			impl.getMutableVector().jov().elementJudgment()
			)
		);
	}

JudgmentOnResult 		JudgmentOnValueMutableVector::intersectWith(const JudgmentOnValue& in) const
	{
	JudgmentOnResult elementsJOR = elementJudgment().intersectWith(
		JOV::JOVAsValue(
			in.getMutableVector().jov().elementJudgment()
			)
		);

	ImmutableTreeSet<JOV> tr;

	for (long k = 0; k < elementsJOR.size();k++)
		tr = tr + JOV::MutableVector(
			JudgmentOnValueMutableVector(
				elementsJOR[k].getJOVAsValue().jov()
				)
			);

	return JudgmentOnResult(tr);
	}

JudgmentOnResult 		JudgmentOnValueMutableVector::restrictedToCSTness(bool inCSTness) const
	{
	if (!inCSTness)
		return JudgmentOnResult(JOV::MutableVector(*this));

	return JudgmentOnResult();
	}

JudgmentOnValue			JudgmentOnValueMutableVector::smallestCovering(const JudgmentOnValue& in) const
	{
	if (!in.isMutableVector())
		return ::smallestCovering(JudgmentOnValue::MutableVector(*this), in);

	JOV jojovOfCovering = elementJudgment().smallestCovering(
		JOV::JOVAsValue(
			in.getMutableVector().jov().elementJudgment()
			)
		);

	return JOV::MutableVector(
		JudgmentOnValueMutableVector(
			jojovOfCovering.getJOVAsValue().jov()
			)
		);
	}

JudgmentOnValue	jovMutableVectorOfNothing()
	{
	return
		JOV::MutableVector(
			JudgmentOnValueMutableVector(
				JOJOV::Known(JOV::Constant(CSTValue()))
				)
			);
	}

JudgmentOnValue	jovAnyMutableVector()
	{
	return
		JOV::MutableVector(
			JudgmentOnValueMutableVector(
				JOJOV::Unknown(JOV::Unknown())
				)
			);
	}

JudgmentOnValue	jovMutableVector(JOV held)
	{
	return
		JOV::MutableVector(
			JudgmentOnValueMutableVector(
				JOJOV::Known(held)
				)
			);
	}



