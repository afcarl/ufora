/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/
#include "JudgmentOnValue.hppml"

JudgmentOnResult::JudgmentOnResult(const JudgmentOnValue& in)
	{
	vals() = emptyTreeSet() + in;
	}

Nullable<uword_t> JudgmentOnResult::smallestCovering(const JudgmentOnValue& in) const
	{
	Nullable<uword_t> tr;
	for (long k = 0; k < size();k++)
		if ( (*this)[k].covers(in))
			{
			if (!tr || (*this)[*tr].covers( (*this)[k] ))
				tr = k;
			}

	return tr;
	}

Nullable<uword_t> JudgmentOnResult::smallestCovering(const ImplValContainer& in) const
	{
	Nullable<uword_t> tr;
	for (long k = 0; k < size();k++)
		if ( (*this)[k].covers(in))
			{
			if (!tr || (*this)[*tr].covers( (*this)[k] ))
				tr = k;
			}

	return tr;
	}

Nullable<uword_t> JudgmentOnResult::smallestCovering(const ImplVal& in) const
	{
	Nullable<uword_t> tr;
	for (long k = 0; k < size();k++)
		if ( (*this)[k].covers(in))
			{
			if (!tr || (*this)[*tr].covers( (*this)[k] ))
				tr = k;
			}

	return tr;
	}

Nullable<JudgmentOnValue> JudgmentOnResult::smallestCoveringJOV(const JudgmentOnValue& in) const
	{
	Nullable<uword_t> tr = smallestCovering(in);

	if (tr)
		return null() << (*this)[*tr];

	return null();
	}

Nullable<JudgmentOnValue> JudgmentOnResult::smallestJOVCoveringAll() const
	{
	Nullable<JudgmentOnValue> tr;

	for (auto it = vals().begin(), it_end = vals().end(); it != it_end; ++it)
		{
		if (!tr)
			tr = *it;
			else
			tr = tr->smallestCovering(*it);
		}

	return tr;
	}

bool JudgmentOnResult::covers(const JudgmentOnResult& other) const
	{
	for (long k = 0; k < other.size();k++)
		if (!smallestCovering(other[k]))
			return false;
	return true;
	}

bool JudgmentOnResult::covers(const JudgmentOnValue& other) const
	{
	if (!smallestCovering(other))
		return false;
	return true;
	}

bool JudgmentOnResult::disjoint(const JudgmentOnResult& other) const
	{
	for (long k = 0; k < other.size();k++)
		{
		bool allDisjointFromThisOne = true;

		for (long j = 0; j < size();j++)
			if (!other[k].disjoint((*this)[j]))
				allDisjointFromThisOne = false;

		if (allDisjointFromThisOne)
			return true;
		}
	return false;
	}

bool JudgmentOnResult::isUnknown(void) const
	{
	return size() == 1 && vals()[0].isUnknown();
	}

JudgmentOnResult	JudgmentOnResult::operator+(const JudgmentOnResult& in) const
	{
	return JudgmentOnResult(vals() + in.vals());
	}

JudgmentOnResult operator&(	const JudgmentOnResult& left,
							const JudgmentOnValue& right)
	{
	if (!left)
		return left;
	ImmutableTreeSet<JudgmentOnValue> vals;
	for (long k = 0; k < left.size();k++)
		vals = vals + (left[k] & right).vals();

	return JudgmentOnResult(vals);
	}

JudgmentOnResult operator&(	const JudgmentOnValue& left,
							const JudgmentOnResult& right)
	{
	return right & left;
	}

//whatever is true if either one is a possibility
JudgmentOnResult operator|(	const JudgmentOnValue& left,
							const JudgmentOnValue& right)
	{
	if (left.covers(right))
		return JudgmentOnResult(left);
	if (right.covers(left))
		return JudgmentOnResult(right);

	return JudgmentOnResult(emptyTreeSet() + left + right);
	}

JudgmentOnResult operator|(	const JudgmentOnValue& left,
							const JudgmentOnResult& right)
	{
	return JudgmentOnResult(right.vals() + left);
	}

JudgmentOnResult operator|(	const JudgmentOnResult& left,
							const JudgmentOnValue& right)
	{
	return right | left;
	}

JudgmentOnResult operator|(	const JudgmentOnResult& left,
							const JudgmentOnResult& right)
	{
	return JudgmentOnResult(left.vals() + right.vals());
	}

JudgmentOnResult operator&(	const JudgmentOnResult& lhs,
							const JudgmentOnResult& rhs)
	{
	if (!lhs || !rhs)
		return JudgmentOnResult();

	ImmutableTreeSet<JudgmentOnValue> res;
	for (long k = 0; k < lhs.size();k++)
		for (long j = 0; j < rhs.size();j++)
			res = res + (lhs[k] & rhs[j]).vals();

	return JudgmentOnResult(res);
	}

JudgmentOnResult::operator bool (void) const
	{
	return vals().size() != 0;
	}

JudgmentOnValue JudgmentOnResult::operator[](uword_t ix) const
	{
	return vals()[ix];
	}

uword_t JudgmentOnResult::size(void) const
	{
	return vals().size();
	}

JudgmentOnResult    JudgmentOnResult::limitNumberOfJOVs(uword_t limit) const
    {
    if (size() > limit)
    	return JudgmentOnResult(JudgmentOnValue::Unknown());

    return *this;
    }

JudgmentOnResult	JudgmentOnResult::restrictedToCSTness(bool inCSTness) const
	{
	JudgmentOnResult tr;
	for (long k = 0; k < size(); k++)
		tr = tr + (*this)[k].restrictedToCSTness(inCSTness);
	return tr;
	}

void JudgmentOnResult::toString(CPPMLPrettyPrintStream& s) const
	{
	s << "[";
	for (long k = 0; k < size();k++)
		{
		if (k != 0)
			s << ", ";
		(*this)[k].toString(s, false);
		}
	s << "]";
	}

Nullable<bool>	JudgmentOnResult::isCST() const
	{
	bool anyAreNull = false;

	for (long k = 0; k < vals().size(); k++)
		if (vals()[k].isCST() && !*vals()[k].isCST())
			//at least one is mutable
			return null() << false;
			else
		if (!vals()[k].isCST())
			anyAreNull = true;

	if (anyAreNull)
		return null();

	return null() << true;
	}

JudgmentOnResult JudgmentOnResult::removeExtraneousJudgments() const
	{
	ImmutableTreeSet<JudgmentOnValue> jovs = vals();

	for (long k = 0; k < jovs.size(); k++)
		for (long j = 0; j < jovs.size(); j++)
			{
			if (k != j && jovs[j].covers(jovs[k]))
				{
				jovs = jovs - jovs[k];

				k--;
				j = jovs.size();
				}
			}

	return JudgmentOnResult(jovs);
	}





