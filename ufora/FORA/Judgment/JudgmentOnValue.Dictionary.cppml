/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/
#include "JudgmentOnValue.hppml"

namespace {

@type JOVDPair = JudgmentOnValueDictionary l, JudgmentOnValueDictionary r;

}

JudgmentOnValue		JudgmentOnValueDictionary::FromLiveValue(const ImplVal& inImplVal)
	{
	lassert(inImplVal.type().isDictionary());

	return JudgmentOnValue::Dictionary(
		JudgmentOnValueDictionary::Typed(inImplVal.type().getDictionary().isCST())
		);
	}
JudgmentOnValue		JudgmentOnValueDictionary::OfType(const Type& inType)
	{
	@match Type(inType)
		-|	Dictionary(isCST) ->> {
			return
				JudgmentOnValue::Dictionary(
					JudgmentOnValueDictionary::Typed(isCST)
					);
			}
		;
	}
Nullable<Type>		JudgmentOnValueDictionary::computeType() const
	{
	@match JudgmentOnValueDictionary(*this)
		-|	Unknown() ->> {
			return  null();
			}
		-|	Typed(isCST) ->> {
			return  null() << Type::Dictionary(isCST);
			}
		;
	}
Nullable<bool>		JudgmentOnValueDictionary::computeIsCST() const
	{
	@match JudgmentOnValueDictionary(*this)
		-|	Unknown() ->> {
			return  null();
			}
		-|	Typed(isCST) ->> {
			return  (null() << isCST);
			}
		;
	}

Nullable<CSTValue>	JudgmentOnValueDictionary::computeConstant() const
	{
	return null();
	}

void	JudgmentOnValueDictionary::toString(CPPMLPrettyPrintStream& s, bool isJOVAsValue) const
	{
	if (!isJOVAsValue)
		s << "{";

	s << "Dictionary";

	@match JudgmentOnValueDictionary(*this)
		-|	Unknown() ->> {
			s << "(*)";
			}
		-|	Typed(isCST) ->> {
			s << "(";
			if (isCST)
				s << "CST";
			else
				s << "NotCST";
			s << ")";
			}
		;

	if (!isJOVAsValue)
		s << "}";
	}
bool 				JudgmentOnValueDictionary::covers(const ImplVal& impl) const
	{
	if (!impl.type().isDictionary())
		return false;

	if (isUnknown())
		return true;

	return getTyped().isCST() == impl.type().getDictionary().isCST();
	}
bool 				JudgmentOnValueDictionary::covers(const JudgmentOnValue& impl) const
	{
	if (!impl.isDictionary())
		return false;

	JOVDPair p(*this, impl.getDictionary().jov());

	@match JOVDPair(p)
		-|	(Unknown(), _) ->> {
			return  true;
			}
		-|	(Typed(cst1), Typed(cst2)) ->> {
			return  cst1 == cst2;
			}
		-|	_ ->> {
			return  false;
			}
		;
	}
bool 				JudgmentOnValueDictionary::disjoint(const JudgmentOnValue& impl) const
	{
	if (!impl.isDictionary())
		return true;

	JOVDPair p(*this, impl.getDictionary().jov());

	@match JOVDPair(p)
		-|	(Unknown(), _) ->> {
			return  false;
			}
		-|	(_, Unknown()) ->> {
			return  false;
			}
		-|	(Typed(cst1), Typed(cst2)) ->> {
			return  cst1 != cst2;
			}
		;
	}
JudgmentOnResult 	JudgmentOnValueDictionary::intersectWith(const JudgmentOnValue& in) const
	{
	if (disjoint(in))
		return JudgmentOnResult();
	if (covers(in))
		return JudgmentOnResult(in);

	JOV thisJOV = JudgmentOnValue::Dictionary(*this);

	if (in.covers(thisJOV))
		return JudgmentOnResult(thisJOV);

	return JudgmentOnResult();
	}
JudgmentOnResult 	JudgmentOnValueDictionary::restrictedToCSTness(bool inCSTness) const
	{
	@match JudgmentOnValueDictionary(*this)
		-|	Unknown() ->> {
			return
			JudgmentOnResult(
				JudgmentOnValue::Dictionary(
					JudgmentOnValueDictionary::Typed(inCSTness)
					)
				);
			}
		-|	Typed(c) ->> {
			return  (
				c == inCSTness ?
					JudgmentOnResult(JudgmentOnValue::Dictionary(*this))
				:	JudgmentOnResult()
				);
			}
		;
	}
JudgmentOnValue		JudgmentOnValueDictionary::smallestCovering(const JudgmentOnValue& other) const
	{
	if (!other.isDictionary())
		//defer to the main function, which should return Unknown
		return ::smallestCovering(JudgmentOnValue::Dictionary(*this), other);
	if (covers(other))
		return JudgmentOnValue::Dictionary(*this);
		else
	if (other.covers(JudgmentOnValue::Dictionary(*this)))
		return other;
		else
		return JudgmentOnValue::Dictionary(JudgmentOnValueDictionary::Unknown());
	}
JOV jovAnyDictionary(void)
	{
	return JudgmentOnValue::Dictionary(JudgmentOnValueDictionary::Unknown());
	}

