/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/
#include "JudgmentOnValueRelaxations.hppml"

#include <stdint.h>
#include <boost/python.hpp>
#include "../../native/Registrar.hpp"
#include "../../core/python/CPPMLWrapper.hpp"
#include "../../core/python/ScopedPyThreads.hpp"
#include <boost/random.hpp>

class JudgmentOnValueRelaxationsWrapper :
	public native::module::Exporter<JudgmentOnValueRelaxationsWrapper> {
public:
	std::string		getModuleName(void)
        {
		return "FORA";
        }
	static boost::python::object relaxedJOVsToPythonList(const JOV& inJOV)
        {
		ImmutableTreeVector<JOV> jovs = JOVRelaxations(inJOV);
		boost::python::list toReturn;
		for (long k = 0 ; k < jovs.size(); k++)
			toReturn.append(jovs[k]);
		return toReturn;
        }

    static boost::python::object relaxedJOVTsToPythonList(const JOVT& inJOVT)
        {
        return relaxedJOVsToPythonList(JOV::Tuple(inJOVT));
        }

	static boost::python::object randomJOVRelaxation(
			const JOV& jov,
			boost::mt19937& generator
			)
		{
		return boost::python::object(RandomJOVRelaxation(jov, generator));
		}

	static boost::python::object randomJOVTRelaxation(
			const JOVT& jovt,
			boost::mt19937& generator
			)
		{
		JOV random_jov = RandomJOVRelaxation(JOV::Tuple(jovt), generator);

        // Based on the structure of JOVTs, this SHOULD terminate.
        while (random_jov == JOV::Unknown())
            random_jov = RandomJOVRelaxation(JOV::Tuple(jovt), generator);

		@match JOV(random_jov)
			-| Tuple(t) ->> {
				return boost::python::object(t);
				}
				;
		}

	void exportPythonWrapper()
        {
		using namespace boost::python;

        def("JOVTRelaxations", &relaxedJOVTsToPythonList);
		def("JOVRelaxations", &relaxedJOVsToPythonList);
		def("randomJOVRelaxation", &randomJOVRelaxation);
		def("randomJOVTRelaxation", &randomJOVTRelaxation);
		}

    };

//explicitly instantiating the registration element causes the linker to need
//this file
template<>
char native::module::Exporter<JudgmentOnValueRelaxationsWrapper>::mEnforceRegistration =
	native::module::ExportRegistrar<
	JudgmentOnValueRelaxationsWrapper>::registerWrapper();

