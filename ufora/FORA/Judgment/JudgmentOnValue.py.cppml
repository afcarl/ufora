/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/
#include "JudgmentOnValue.hppml"

#include <boost/python.hpp>
#include <boost/random.hpp>

#include "../../native/Registrar.hpp"
#include "../../core/python/CPPMLWrapper.hpp"
#include "../../core/python/ScopedPyThreads.hpp"
#include "../../core/python/ValueLikeCPPMLWrapper.hppml"
#include "../../core/containers/ImmutableTreeVector.py.hpp"
#include "../../core/containers/ImmutableTreeSet.py.hpp"


class JudgmentOnValueWrapper :
		public native::module::Exporter<JudgmentOnValueWrapper> {
public:
		class IndexError{};

		static void indexError(IndexError arg)
			{
			PyErr_SetString(PyExc_IndexError, "Index out of range");
			}

		std::string		getModuleName(void)
			{
			return "FORA";
			}

		static JOV implValToJOV(const ImplValContainer& inIVC)
			{
			return JOV::FromLiveValue(inIVC.getReference());
			}

		static bool JOVEquals(const JOV& j1, const JOV& j2)
			{
			return j1 == j2;
			}

        static bool JOREquals(const JudgmentOnResult& jor1, const JudgmentOnResult& jor2)
            {
            return jor1 == jor2;
            }

		static bool JOVNotEquals(const JOV& j1, const JOV& j2)
			{
			return j1 != j2;
			}

		static bool JORNotEquals(const JudgmentOnResult& j1, const JudgmentOnResult& j2)
			{
			return j1 != j2;
			}

		static bool JOVTEquals(const JOVT& j1, const JOVT& j2)
			{
			return j1 == j2;
			}

		static bool JOVTNotEquals(const JOVT& j1, const JOVT& j2)
			{
			return j1 != j2;
			}

		static boost::python::object JOVconstant(const JOV& j)
			{
			Nullable<CSTValue> c = j.constant();
			if (c)
				return boost::python::object(*c);
			return boost::python::object();
			}

		static boost::python::list JOVTGetJOVsAsPythonList(const JOVT& jovt)
			{
			boost::python::list toReturn;
			ImmutableTreeVector<JOV> jovs = jovt.jovs();
			for (uint32_t i = 0; i < jovs.size(); i++)
				toReturn.append(jovs[i]);
			return toReturn;
			}

		static boost::python::list JOVTGetNamesAsPythonList(const JOVT& jovt)
			{
			boost::python::list toReturn;
			ImmutableTreeVector<Nullable<Symbol> > names = jovt.names();
			for (uint32_t i = 0; i < names.size(); i++)
				if (names[i])
					toReturn.append(names[i]->toString());
				else
					toReturn.append(boost::python::object());

			return toReturn;
			}

		static boost::python::object JOTToJOV(const JOVT& jovt)
			{
			return boost::python::object(JOV::Tuple(jovt));
			}

		static boost::python::object getTuple(const JOV& jov)
			{
			@match JOV(jov)
				-| Tuple(t) ->> { return boost::python::object(t); }
				-| _ ->> { return boost::python::object(); }
				;
			}

		 static JOV JOVFromLiveValue(const ImplValContainer& ivc)
			{
			return JOV::FromLiveValue(ivc.getReference());
			}

		static JOV VectorElementJOVFromLiveValue(const ImplValContainer& ivc)
			{
			return JOV::VectorElementJOVFromLiveValue(ivc.getReference());
			}

		static JOVT JOVListToJOVT(const boost::python::list& l)
			{
			ImmutableTreeVector<JOV> tr;
			for (boost::python::ssize_t i = 0; i < boost::python::len(l); i++)
				tr = tr + boost::python::extract<JOV&>(l[i])();
			return JOVT::Unnamed(tr);
			}

		static int32_t JOVCmp(JudgmentOnValue& v, boost::python::object o)
			{
			boost::python::extract<JudgmentOnValue> x(o);
			if (x.check())
				return cppmlCmp(v,x());
			return 1;
			}

		static boost::python::object JOVIsCST(const JudgmentOnValue& jov)
			{
			if (jov.isCST())
				return boost::python::object(*jov.isCST());
			return boost::python::object();
			}

		static boost::python::object JudgmentOnValueIntersection(
											const JudgmentOnValue& jov,
											const JudgmentOnValue& jov2
											)
			{
			JudgmentOnResult res = jov.intersectWith(jov2);
			if (res.size() != 1)
				return boost::python::object();
				else
				return boost::python::object(res[0]);
			}

		static boost::python::object vectorElementJOV(const JudgmentOnValue& jov)
			{
			Nullable<JOV> vectorElementJOV = jov.vectorElementJOV();
			if (!vectorElementJOV)
				return boost::python::object();
			return boost::python::object(*vectorElementJOV);
			}

		static JOV JudgmentOnValueConstant(ImplValContainer& container)
			{
			return JOV::Constant(CSTValue(container));
			}

		static JOV JudgmentOnValueConstantJOV(JudgmentOnValue& jov)
			{
			return JOV::Constant(CSTValue(jov));
			}

		static hash_type JudgmentOnValueHash(JudgmentOnValue& jov)
			{
			return jov.hash();
			}

        static JOV JudgmentOnValueUnknown()
            {
            return JOV::Unknown();
            }

        static JOV JudgmentOnResultIndex(JudgmentOnResult& jor, long index)
        	{
        	if (index < 0 || index >= jor.size())
        		throw IndexError();

        	return jor[index];
        	}

		void exportPythonWrapper()
			{
			using namespace boost::python;

			boost::python::register_exception_translator<IndexError>(&indexError);

			PythonWrapper<ImmutableTreeVector<JudgmentOnValue> >::exportPythonInterface("JOVList");
			PythonWrapper<ImmutableTreeSet<JudgmentOnValue> >::exportPythonInterface("JOVSet");

			Ufora::python::CPPMLWrapper<JudgmentOnValue>(true).class_()
				.def("__str__", ValueLikeCPPMLWrapper::scopedPrettyPrinter<JudgmentOnValue>)
				.def("__repr__", ValueLikeCPPMLWrapper::scopedPrettyPrinter<JudgmentOnValue>)
				.def("Constant", JudgmentOnValueConstant)
				.def("Constant", JudgmentOnValueConstantJOV)
				.staticmethod("Constant")
				.def("covers", (bool (JudgmentOnValue::*)(const JudgmentOnValue&) const) &JudgmentOnValue::covers)
				.def("covers", (bool (JudgmentOnValue::*)(const CSTValue&) const) & JudgmentOnValue::covers)
				.def("covers", (bool (JudgmentOnValue::*)(const ImplVal&) const) & JudgmentOnValue::covers)
				.def("covers", (bool (JudgmentOnValue::*)(const ImplValContainer&) const) & JudgmentOnValue::covers)
				.def("disjoint", (bool (JudgmentOnValue::*)(const JudgmentOnValue&) const)& JudgmentOnValue::disjoint)
				.def("disjoint", (bool (JudgmentOnValue::*)(const CSTValue&) const)& JudgmentOnValue::disjoint)
				.def("smallestCovering", &JudgmentOnValue::smallestCovering)
				.def("intersectWith", &JudgmentOnValueIntersection)
				.def("restrictedToCSTness", &JudgmentOnValue::restrictedToCSTness)
				.add_property("hash", &JudgmentOnValueHash)
				.def("__cmp__", &JOVCmp)
				.def("getTuple", &getTuple)
				.def("constant", &JOVconstant)
				.add_property("cst", &JOVIsCST)
				.def("__eq__", &JOVEquals)
				.def("__ne__", &JOVNotEquals)
				.def("vectorElementJOV", &vectorElementJOV)
                .def("Anything", &JudgmentOnValueUnknown)
                .staticmethod("Anything")
				;

			Ufora::python::CPPMLWrapper<JudgmentOnValueTuple>(true).class_()
				.def("__str__", ValueLikeCPPMLWrapper::scopedPrettyPrinter<JudgmentOnValueTuple>)
				.def("__repr__", ValueLikeCPPMLWrapper::scopedPrettyPrinter<JudgmentOnValueTuple>)
				.def("covers", (bool (JudgmentOnValueTuple::*)(const JudgmentOnValueTuple&) const) &JudgmentOnValueTuple::covers)
				.def("__eq__", &JOVTEquals)
				.def("__ne__", &JOVTNotEquals)
				.def("getJOVsAsPythonList", &JOVTGetJOVsAsPythonList)
				.def("getNamesAsPythonList", &JOVTGetNamesAsPythonList)
				.def("covers", (bool (JudgmentOnValueTuple::*)(const JudgmentOnValue&) const) &JudgmentOnValueTuple::covers)
				.def("disjoint", (bool (JudgmentOnValueTuple::*)(const JudgmentOnValueTuple&) const) &JudgmentOnValueTuple::disjoint)
				.def("disjoint", (bool (JudgmentOnValueTuple::*)(const JudgmentOnValue&) const) &JudgmentOnValueTuple::disjoint)
				.def("toJOV", &JOTToJOV)
				;

			Ufora::python::CPPMLWrapper<JudgmentOnValueTupleExtras>(true).class_()
				.def("__str__", ValueLikeCPPMLWrapper::scopedPrettyPrinter<JudgmentOnValueTupleExtras>)
				;

			Ufora::python::CPPMLWrapper<JudgmentOnValueAtom>(true).class_()
				.def("__str__", ValueLikeCPPMLWrapper::scopedPrettyPrinter<JudgmentOnValueAtom>)
				;

			Ufora::python::CPPMLWrapper<JudgmentOnValueVector>(true).class_()
				.def("__str__", ValueLikeCPPMLWrapper::scopedPrettyPrinter<JudgmentOnValueVector>)
				;

			Ufora::python::CPPMLWrapper<JudgmentOnResult>(true).class_()
				.def("__str__", ValueLikeCPPMLWrapper::scopedPrettyPrinter<JudgmentOnResult>)
				.def("__getitem__", &JudgmentOnResultIndex)
				.def("__len__", &JudgmentOnResult::size)
                .def("__eq__", &JOREquals)
                .def("__ne__", &JORNotEquals)
                .def("__cmp__", ValueLikeCPPMLWrapper::comparer<JudgmentOnResult>)
                .def("covers", (bool (JudgmentOnResult::*)(const JudgmentOnResult&) const) &JudgmentOnResult::covers)
				;

			Ufora::python::CPPMLWrapper<Type>(true).class_();

			def("implValToJOV", &implValToJOV);
			def("JOVFromLiveValue", &JOVFromLiveValue);
			def("JOVListToJOVT", &JOVListToJOVT);
			def("VectorElementJOVFromLiveValue", &VectorElementJOVFromLiveValue);
			}
};

//explicitly instantiating the registration element causes the linker to need
//this file
template<>
char native::module::Exporter<JudgmentOnValueWrapper>::mEnforceRegistration =
		native::module::ExportRegistrar<
			JudgmentOnValueWrapper>::registerWrapper();


