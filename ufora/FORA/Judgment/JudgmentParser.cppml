/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/
#include "JudgmentParser.hppml"
#include "JudgmentOnValue.hppml"
#include "../Language/Parser.hppml"
#include "../Language/ParserExpressions.hppml"
#include "../Core/ClassMediator.hppml"
#include "../../core/StringUtil.hpp"
#include "../../core/Logging.hpp"

JudgmentOnValue jovJudgmentToJOV(const JudgmentOnValue& jov, const SimpleParseNode& node)
	{
	@match JudgmentOnValue(jov)
		-|	JOVAsValue(Known(j)) ->> {
			return  j;
			}
		//TODO BUG brax: this looks wrong { jovsbelow ... } doesn't make sense and should be an error
		-|	JOVAsValue(Unknown()) ->> {
			return  JOV();
			}
		-|	_ ->> {
			throw JudgmentParseError("can't make the set of things covered by " +
				prettyPrintString(jov) + " since it's not a judgment", node)
				;
			}
		;
	}

JudgmentOnValue JudgmentParser::parseJOV(const SimpleParseNode& inNode)
	{
	@match SimpleParseNode(inNode)
		-|	Grouping(Parens(), subnode) ->> {
			return JOV::Tuple(parseJOVT(subnode));
			}
		-|	Operator(op) ->> {
			if (op == "*")
				return JOV::Unknown();
			throw JudgmentParseError("unknown operator " + op, inNode);
			}
		-|	Identifier(i) ->> {
			if (i.size() && i[0] == '`')
				{
				std::string symbolVal = i.substr(1);
				if (symbolVal.size() && symbolVal[0] == '`')
					symbolVal = " " + symbolVal.substr(1);

				return JOV::Constant(CSTValue(Symbol(symbolVal)));
				}
			else
			if (i.size() && i[0] == '#')
				{
				std::string symbolVal = i.substr(1);
				if (symbolVal.size() && symbolVal[0] == '#')
					symbolVal = " " + symbolVal.substr(1);

				return JOV::Constant(CSTValue::Tag(Symbol(symbolVal)));
				}
			else
				{
				auto found = ParserExpressions::constants().find(i);
				if (found != ParserExpressions::constants().end())
					return JOV::Constant(
						found->second
						);
				else
					throw JudgmentParseError("unknown identifier " + i, inNode);
				}
			}
		-|	Number(n) ->> {
			return JOV::Constant(parseNumericConstant(n));
			}
		-|	Quote(q) ->> {
			return JOV::Constant(CSTValue(q));
			}
		-|	Sequence(Concatenation(), nodes) ->> {
			return parseJOVFromConcat(nodes);
			}
		-|	Grouping(Braces(), node) ->> {
			JOV jov = parseJOV(node);
			return jovJudgmentToJOV(jov, node);
			}
		-|	_ ->> {
			throw JudgmentParseError("expected JOV here", inNode);
			}
		;
	lassert(false);
	return JOV();
	}

JOVT	JudgmentParser::parseJOVT(const SimpleParseNode& inNode)
	{
	@match SimpleParseNode(inNode)
		-|	Empty() ->> {
			return JudgmentOnValueTuple();
			}
		-|	Sequence(Comma(), nodes) ->> {

			if (nodes.size() == 0)
				return JOVT();

			ImmutableTreeVector<JudgmentOnValue>	jovs;
			JOVTE									jovte;
			ImmutableTreeVector<Nullable<Symbol> >	names;

			for (long k = 0; k < nodes.size();k++)
				{
				bool isExtras = false;
				pair<JOV, Nullable<Symbol> > parseRes =
					parseJOVTTerm(nodes[k], isExtras);

				if (isExtras)
					{
					if (k + 1 != nodes.size())
						throw JudgmentParseError("can't use ... except in "
							"last term of a JOVT", nodes[k]);
					jovte = JOVTE::Extras(parseRes.first);
					}
				else
					{
					jovs = jovs + parseRes.first;
					names = names + parseRes.second;
					}
				}

			return JOVT(jovs, names, jovte);
			}
		-|	node ->> {

			bool isExtras = false;

			pair<JOV, Nullable<Symbol> > parseRes =
										parseJOVTTerm(node, isExtras);

			if (isExtras)
				return JOVT() + JOVTE::Extras(parseRes.first);
			else
				return JOVT(
						emptyTreeVec() + parseRes.first,
						emptyTreeVec() + parseRes.second,
						JOVTE()
						);

			}
		;
	}

pair<JOV, Nullable<Symbol> > JudgmentParser::parseJOVTTerm(
								const SimpleParseNode& inNode,
								bool& outIsExtras
								)
	{
	@match SimpleParseNode(inNode)
		-|	Sequence(Concatenation(), nodes) ->> {
			if (nodes[0] == "...")
				{
				outIsExtras = true;
				if (nodes.size() == 1)
					throw JudgmentParseError("expected JOV after ...", nodes[0]);

				return make_pair(parseJOVFromConcat(nodes.slice(1)), null());
				}
			else
				{
				outIsExtras = false;
				return make_pair(parseJOVFromConcat(nodes), null());
				}
			}
		-|	Sequence(Colon(), nodes) ->> {
			// Handles a name:value pair in a Tuple.
			if (nodes.size() != 2)
				throw JudgmentParseError("invalid JOVT term", nodes);

			// Parse the name.
			Symbol s;
			@match SimpleParseNode(nodes[0])
				-|	Operator(o) ->> { s = o; ;}
				-|	Identifier(o) ->> { s = o; ;}
				-|	_ ->> { throw JudgmentParseError("invalid name", nodes[0]);; }
				;

			outIsExtras = false;
			return make_pair(
				parseJOV(nodes[1]),
				null() << s
				);
			}
		-|	_ ->> {
			outIsExtras = false;
			return make_pair(
				parseJOV(inNode),
				null()
				);
			}
		;
	}

JudgmentOnResult JudgmentParser::parseJOR(const SimpleParseNode& node)
	{
	@match SimpleParseNode(node)
		-|	Grouping(Brackets(), Empty()) ->> {
				return JudgmentOnResult();
				}
		-|	Grouping(Brackets(), Sequence(Comma(), elts)) ->> {

				ImmutableTreeSet<JOV> jovs;

				for (long k = 0; k < elts.size();k++)
					jovs = jovs + parseJOV(elts[k]);

				return JudgmentOnResult(jovs);
				}
		-|	Grouping(Brackets(), node) ->> {
				return JudgmentOnResult(parseJOV(node));
				}
		-|	_ ->> {
				throw JudgmentParseError("badly formed JudgmentOnResult", node);
				}
		;
	return JudgmentOnResult();
	}

Nullable<JOV> negateJOV(const JOV& inJOV)
	{
	if (!inJOV.constant())
		return null();
	@match Type(*inJOV.type())
		-|	Integer(bits, isSigned) ->> {
			if (!isSigned)
                {
                if (bits == 1)
                    return null() << inJOV;
				return null();
                }
			if (bits == 64)
				return null() << JOV::Constant(CSTValue(inJOV.constant()->cast<int64_t>() * -1));
			else
			if (bits == 32)
				return null() << JOV::Constant(CSTValue(inJOV.constant()->cast<int32_t>() * ((int32_t)-1)));
			else
			if (bits == 16)
				return null() << JOV::Constant(CSTValue(inJOV.constant()->cast<int16_t>() * ((int16_t)-1)));
			else
			if (bits == 8)
				return null() << JOV::Constant(CSTValue(inJOV.constant()->cast<int8_t>() * ((int8_t)-1)));
			}
		-|	Float(bits) ->> {
			if (bits == 64)
				return null() << JOV::Constant(CSTValue(inJOV.constant()->cast<double>() * -1));
			else
			if (bits == 32)
				return null() << JOV::Constant(CSTValue(inJOV.constant()->cast<float>() * ((float)-1.0)));
			}
		-|	_ ->> {
			}
		;
	return null();
	}

JudgmentOnValue JudgmentParser::parseJOVFromConcat(
		const ImmutableTreeVector<SimpleParseNode>& nodes
		)
	{
	lassert(nodes.size());

	if (nodes.size() == 1)
		return parseJOV(nodes[0]);

	if (nodes[0] == "fun")
		{
		//this should be a function
		ParserExpressions parser(true, CodeDefinitionPoint(), "");

		pair<Function, ImmutableTreeVector<SimpleParseNode> >
			funAndRemainingNodes = parser.extractFunction(nodes.slice(1));

		if (funAndRemainingNodes.second.size())
			throw JudgmentParseError("badly formed function", funAndRemainingNodes.second);

		return JOV::Constant(
			CSTValue::blankOf(
				Type::Class(
					emptyTreeVec(),
					ClassMediator::Axiom("", funAndRemainingNodes.first),
					ClassMediatorResumption::Entry()
					)
				)
			);
		}
	if (nodes[0] == "jovof")
		{
		if (nodes.size() == 1)
			throw JudgmentParseError("bad jovof expression", nodes);

		JOV tr = JOV::JOVAsValue(JOJOV::Known(parseJOVFromConcat(nodes.slice(1))));

		return tr;
		}

	if (nodes[0] == "jovsbelow")
		{
		if (nodes.size() == 1)
			throw JudgmentParseError("bad jovsbelow expression", nodes);

		JOV tr = JOV::JOVAsValue(JOJOV::Unknown(parseJOVFromConcat(nodes.slice(1))));

		return tr;
		}

    if (nodes[0] == "-")
        {
        if (nodes.size() != 2)
            throw JudgmentParseError("bad - expression", nodes);
		JOV parsedJOV = parseJOV(nodes[1]);
		Nullable<JOV> negatedJOV = negateJOV(parsedJOV);
		if (!negatedJOV)
			throw JudgmentParseError("Can't negate " + prettyPrintString(parsedJOV), nodes);
		return *negatedJOV;
        }

	if (nodes[0] == "Class")
		{
		if (nodes.size() != 2)
			throw JudgmentParseError("bad Class expression", nodes);

		@match SimpleParseNode(nodes[1])
			-|	Grouping(Parens(), subnode) ->> {
				if (subnode != "*")
					throw JudgmentParseError("bad Class expression", subnode);

				return JudgmentOnValue::JOVAsValue(
					JOJOV::Known(
						JudgmentOnValue::Class(
							JudgmentOnValueClass::Unknown()
							)
						)
					);
				}
			-|	_ ->> {
				throw JudgmentParseError("bad Class expression", nodes);
				}
			;
		}

	if (nodes[0] == "MutableVector")
		{
		if (nodes.size() != 2)
			throw JudgmentParseError("bad MutableVector expression", nodes);

		@match SimpleParseNode(nodes[1])
			-|	Grouping(Parens(), vecElts) ->> {

				JOV parsedJOV = parseJOV(vecElts);

				if (!parsedJOV.isJOVAsValue())
					throw JudgmentParseError("bad MutableVector expression", nodes);

				return JudgmentOnValue::JOVAsValue(
					JOJOV::Known(
						JudgmentOnValue::MutableVector(
							JudgmentOnValueMutableVector(
								parsedJOV.getJOVAsValue().jov()
								)
							)
						)
					);
				}
			-|	_ ->> {
				}
			;
		throw JudgmentParseError("bad MutableVector expression", nodes);
		}

	if (nodes[0] == "Vector")
		{
		if (nodes.size() != 2)
			throw JudgmentParseError("bad Vector expression", nodes);
		@match SimpleParseNode(nodes[1])
			-|	Grouping(Parens(), vecElts) ->> {

				return JudgmentOnValue::JOVAsValue(
					JOJOV::Known(
						JudgmentOnValue::Vector(
							JudgmentOnValueVector(
								parseJOR(vecElts)
								)
							)
						)
					);
				}
			-|	_ ->> {
				}
			;
		throw JudgmentParseError("bad Vector expression", nodes);
		}

	if (nodes[0] == "Union")
		{
		if (nodes.size() != 2)
			throw JudgmentParseError("bad Union expression", nodes);
		@match SimpleParseNode(nodes[1])
			-|	Grouping(Parens(), vecElts) ->> {

				auto jor = parseJOR(vecElts);

				if (jor.size() == 0)
					throw JudgmentParseError("bad Union expression", nodes);

				return JudgmentOnValue::JOVAsValue(
					JOJOV::Known(
						JudgmentOnValue::Union(
							jor
							)
						)
					);
				}
			-|	_ ->> {
				}
			;
		throw JudgmentParseError("bad Union expression", nodes);
		}

	if (nodes[0] == "Alternative")
		{
		if (nodes.size() != 2)
			throw JudgmentParseError("bad Alternative expression", nodes);
		@match SimpleParseNode(nodes[1])
			-|	Grouping(Parens(), Sequence(Comma(), altElts)) ->> {

				if (altElts.size() == 2)
					{
					Nullable<Symbol> sym;
					JOV symJOV = parseJOV(altElts[0]);
					if (!symJOV.isUnknown())
						{
						if (!symJOV.constant() || !(symJOV.constant()->type().isSymbol() ||
														symJOV.constant()->type().isTag()))
							throw JudgmentParseError("first argument to Alternative must be "
								"* or a symbol", altElts[0]);
						sym = symJOV.constant()->cast<Symbol>();
						}
					return JudgmentOnValue::JOVAsValue(
						JOJOV::Known(
							JudgmentOnValue::Alternative(
								JudgmentOnValueAlternative(
									sym,
									parseJOV(altElts[1])
									)
								)
							)
						);
					}
				}
			-|	_ ->> {
				}
			;
		throw JudgmentParseError("bad Alternative expression", nodes);
		}

	throw JudgmentParseError("bad JOV expression " + prettyPrintString(nodes), nodes);
	}

