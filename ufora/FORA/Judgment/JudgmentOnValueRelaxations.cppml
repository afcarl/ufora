/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/
#include "JudgmentOnValueRelaxations.hppml"
#include <boost/generator_iterator.hpp>


ImmutableTreeVector<JOV> JOVAtomRelaxations(const JOV& jov);
ImmutableTreeVector<JOV> JOVTupleRelaxations(const JOV& jov);
ImmutableTreeVector<JOV> JOVVectorRelaxations(const JOV& jov);
ImmutableTreeVector<JOV> JOVAlternativeRelaxations(const JOV& jov);

/*
  Returns an ITV of (some) relaxed JOV's of `jov`.
*/
ImmutableTreeVector<JOV> JOVRelaxations(const JOV& jov)
	{
	@match JOV(jov)
		-| Unknown() ->> {
			return  emptyTreeVec() + jov;
			}
		-| JOVAsValue(j) ->> {
			return  emptyTreeVec() + JOV::Unknown();
			}
		-| Atom(j) ->> {
			return  JOVAtomRelaxations(jov) ;
			}
		-| Vector(j) ->> {
			return  JOVVectorRelaxations(jov);
			}
		-| Alternative(j) ->> {
			return  JOVAlternativeRelaxations(jov);
			}
		-| Tuple(j) ->> {
			return  JOVTupleRelaxations(jov);
			}
		-| Class(j) ->> {
			return  emptyTreeVec() + JOV::Unknown();
			}
		-|	_ ->> {
			return  emptyTreeVec() + JOV();
			}
		;
	}

ImmutableTreeVector<JOV> JOVAtomRelaxations(const JOV& jov)
	{
	if (jov.constant())
		return (emptyTreeVec() + JOV::OfType(*jov.type())) + JOV::Unknown();
	return emptyTreeVec() + JOV::Unknown();
	}

ImmutableTreeVector<JOV> JOVVectorRelaxations(const JOV& jov)
	{
	//only one relaxation for the empty vector or the Any vector
	if (jov == jovEmptyVector() || jov == jovAnyVector())
		return emptyTreeVec() + JOV();

	JudgmentOnResult jor = jov.getVector().jov().elementsJOR();

	ImmutableTreeVector<JOV> tr;

	for (long i = 0; i < jor.vals().size(); i++)
		{
		JudgmentOnResult local_jor;
		for (long k = 0; k < jor.vals().size(); k++)
			{
			if (k != i)
				local_jor = local_jor + JudgmentOnResult(jor.vals()[k]);
			}
		local_jor = local_jor + JudgmentOnResult(JOV::Unknown());
		tr = tr + JOV::Vector(JudgmentOnValueVector(local_jor));
		}
	return tr;
	}

ImmutableTreeVector<JOV> JOVAlternativeRelaxations(const JOV& jov)
	{
	Nullable<Symbol> curSym;
	JudgmentOnValue curJOV;

	@match JOV(jov) -| Alternative((symbol, a)) ->> { curSym = symbol; };
	@match JOV(jov) -| Alternative((symbol, a)) ->> { curJOV = a; };

	ImmutableTreeVector<JudgmentOnValue> subRelaxations;
	if (!curJOV.isUnknown())
		subRelaxations = JOVRelaxations(curJOV);


	ImmutableTreeVector<JOV> result;

	for (long k = 0; k < subRelaxations.size();k++)
		result = result +
			JOV::Alternative(
				JudgmentOnValueAlternative(
					curSym,
					subRelaxations[k]
					)
				);

	if (curSym)
		result = result +
			JOV::Alternative(
				JudgmentOnValueAlternative(
					null(),
					curJOV
					)
				);

	if (!result.size())
		result = result + JOV();

	return result;
	}

/*
  Generally produces an ITV of size 4 * n + 1, where n is the size of
  the flattening of the argument `jov`. This is generally by no means the
  complete set of relaxations of the argument.
 */
ImmutableTreeVector<JOV> JOVTupleRelaxations(const JOV& jov)
	{
	JudgmentOnValueTuple jovt = jov.getTuple().jov();

	ImmutableTreeVector<Nullable<Symbol> > names = jovt.names();
	JudgmentOnValueTupleExtras extras = jovt.extras();
	ImmutableTreeVector<JOV> values = jovt.jovs();
	ImmutableTreeVector<JOV> to_return = emptyTreeVec();
	uint32_t num_jov = values.size();

	/*
	  this step essentially computes two relaxations for each element
	  in the flattening of the tuple `jovt`
	*/
	for (uint32_t i = 0; i < num_jov; i++)
		{
		ImmutableTreeVector<JOV> local_relaxations = JOVRelaxations(values[i]);
		for (uint32_t j = 0; j < local_relaxations.size(); j++)
			{
			ImmutableTreeVector<JOV> current_values;
			for (uint32_t k = 0; k < i; k++)
				current_values = current_values + values[k];
			current_values = current_values + local_relaxations[j];
			for (uint32_t k = i + 1; k < num_jov; k++)
				current_values = current_values + values[k];
			JudgmentOnValueTuple jovt(current_values, names);
			JOV a_relaxation(JOV::Tuple(jovt + extras));
			to_return = to_return + a_relaxation;
			}
		}
	if (extras.isExtras()) {
		ImmutableTreeVector<JOV> current_values;
		for (uint32_t i = 0; i < num_jov; i++)
			current_values = current_values + values[i];
		JudgmentOnValueTuple jovt(current_values, names);
		JOV a_relaxation(JOV::Tuple(jovt + JOVTE::Extras()));
		@match JOVTE(extras)
		  -| Extras(e) ->> {
			  ImmutableTreeVector<JOV> extras_relaxations = JOVRelaxations(e);
			  for (uint32_t j = 0; j < extras_relaxations.size(); j++)
				{
				JOV another_relaxation(
					JOV::Tuple(JudgmentOnValueTuple(
	  				  current_values,
		  				names,
						  JudgmentOnValueTupleExtras(extras_relaxations[j])
																	  )));
				to_return = to_return + a_relaxation;
				}
		  }
		  ;
		}

	/*
	  Now let's compute things like this:
	  ("a string",1,{Int64},2) -> ("a string",1,...{Int64}),
	  ("a string",...{Int64}),
	  ( ... *) using the `LeastCover` function
	 */
	if (extras.isExtras() && num_jov > 0)
		{
		JudgmentOnValueTupleExtras current_extras = extras;
		// a little silliness since num_jov is unsigned
		uint32_t i = num_jov;
		while (true)
			{
			--i;
			JOV current_extras_as_jov = current_extras.getExtras().jov();

			current_extras = JOVTE::Extras(smallestCovering(
										  current_extras_as_jov, values[i]));
			ImmutableTreeVector<JOV> current_values;
			ImmutableTreeVector<Nullable<Symbol> > current_names;
			for (uint32_t j = 0; j < i; j++)
				{
				current_values = current_values + values[j];
				current_names = current_names + names[j];
				}
			JudgmentOnValueTuple jovt(current_values, current_names);
			JOV a_relaxation(JOV::Tuple(jovt + current_extras));
			to_return = to_return + a_relaxation;
			if (i == 0) break;
			}
		} else if (num_jov > 1)
		{
		JOV rightmost_jov = values[num_jov - 1];
		uint32_t i = num_jov - 1;
		while (true)
			{
			--i;
			rightmost_jov = smallestCovering(rightmost_jov, values[i]);
			ImmutableTreeVector<JOV> current_values;
			ImmutableTreeVector<Nullable<Symbol> > current_names;
			for (uint32_t j = 0; j < i; j++)
				{
				current_values = current_values + values[j];
				current_names = current_names + names[j];
				}
			JudgmentOnValueTuple jovt(current_values, current_names);
			JOVTE current_extras = JOVTE::Extras(rightmost_jov);
			JOV a_relaxation(JOV::Tuple(jovt + current_extras));
			to_return = to_return + a_relaxation;
			if (i == 0) break;
			}
		}

	return to_return + JOV::Unknown();
	}

JOV RandomJOVRelaxation(const JOV& jov, boost::mt19937& generator)
  {
  ImmutableTreeVector<JOV> relaxations = JOVRelaxations(jov);
      boost::variate_generator<boost::mt19937&, boost::uniform_int<> >
        rand_int_gen(
            generator, boost::uniform_int<>(0,
                relaxations.size() - 1));
  return relaxations[rand_int_gen()];
  }



