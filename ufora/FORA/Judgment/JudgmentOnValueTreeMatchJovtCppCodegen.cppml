/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/
#include "JudgmentOnValueTreeMatchJovtCppCodegen.hppml"
#include "../../core/Logging.hpp"

namespace Fora {

JudgmentOnValueTreeMatchJovtCppCodegen::JudgmentOnValueTreeMatchJovtCppCodegen(
										const JudgmentOnValueTree& inTree
										)
	{
	allocateTreeIds(inTree);

	for (auto tree: mTrees)
		dump(tree);
	}

std::string JudgmentOnValueTreeMatchJovtCppCodegen::str() const
	{
	return std::string() +
		"#include \"AxiomSearch.hppml\"\n" +
		"#include \"../Core/ApplyArgFrame.hppml\"\n" +
		"#include \"../Judgment/JudgmentOnValue.hppml\"\n" +
		"#include \"../Primitives/Symbol.hpp\"\n" +
		"#include \"../Core/Type.hppml\"\n" +
		"#include \"../TypedFora/ABI/VectorRecord.hpp\"\n" +
		"#include \"../Judgment/JudgmentOnValueTree.hppml\"\n" +
		"using TypedFora::Abi::VectorRecord;\n" +
		"namespace Fora {\n" +
		"namespace {\n" +
		mJovDeclarations.str() + "\n" +
		mVariableDeclarations.str() + "\n" +
		"}\n" +
		"Nullable<uword_t> searchJOVTree(const JudgmentOnValueTuple& vals, long curTreeId)\n\t{\n" +
		"\tswitch (curTreeId) {\n" +
		mLookupCode.str() +
		"default: return null();\n"
		"\t\t}\n" +
		"\t}\n" +
		"Nullable<uword_t> searchJOVTree(const JudgmentOnValueTuple& vals)\n\t{\n" +
		"\treturn searchJOVTree(vals, 0);\n" +
		"\t}\n" +
		"}\n"
		;
	}

void JudgmentOnValueTreeMatchJovtCppCodegen::dumpRuleMatchText(const JudgmentOnValueTreeBinaryRule& inRule)
	{
	mLookupCode << "\tmatchType = " << varForRule(inRule) << ".covers(vals);\n";
	}

std::string JudgmentOnValueTreeMatchJovtCppCodegen::varForCommon(const std::set<uword_t>& commonIndices)
	{
	hash_type hash = hashValue(commonIndices);

	if (mDeclaredCommonVars.find(hash) == mDeclaredCommonVars.end())
		{
		mDeclaredCommonVars.insert(hash);

		mVariableDeclarations << "\tstatic std::set<uword_t> common_" << hashToString(hash);
        if (commonIndices.empty())
			mVariableDeclarations << " = std::set<uword_t> { ";
        else
			mVariableDeclarations << " = { ";

		bool first = true;
		for (auto commonIndex : commonIndices)
			{
			if (!first)
				mVariableDeclarations << ", ";
			first = false;

			mVariableDeclarations << commonIndex;
			}
		mVariableDeclarations << "};\n";
		}

	return "common_" + hashToString(hash);
	}

std::string JudgmentOnValueTreeMatchJovtCppCodegen::varForRule(const JudgmentOnValueTreeBinaryRule& rule)
	{
	hash_type hash = hashValue(rule);

	if (mDeclaredRules.find(hash) == mDeclaredRules.end())
		{
		mVariableDeclarations << "\tstatic JudgmentOnValueTreeBinaryRule rule_"
			<< hashToString(hash) << " = ";

		@match JudgmentOnValueTreeBinaryRule(rule)
			-|	ExactCount(ct) ->> {
				mVariableDeclarations << "JudgmentOnValueTreeBinaryRule::ExactCount(" << ct << ")";
				}
			-|	Matches(dim, jov, fieldName) ->> {
				mVariableDeclarations << "JudgmentOnValueTreeBinaryRule::Matches("
					<< dim << ", "
					<< mJovDeclarations.jovVariable(jov)
					<< ", "
					<< (fieldName ?
						"null() << " + mJovDeclarations.symbolVariable(*fieldName)
						: std::string("null()"))
					<< ")";
				}
			-|	MatchesAllAbove(dim, jov) ->> {
				mVariableDeclarations << "JudgmentOnValueTreeBinaryRule::MatchesAllAbove("
					<< dim << ", "
					<< mJovDeclarations.jovVariable(jov)
					<< ")";
				}
		mVariableDeclarations << ";\n";

		mDeclaredRules.insert(hash);
		}

	return "rule_" + hashToString(hash);
	}

void JudgmentOnValueTreeMatchJovtCppCodegen::allocateTreeIds(const JudgmentOnValueTree& subtree)
	{
	if (mTreeHashMap.find(subtree.hash()) != mTreeHashMap.end())
		return;

	mTreeHashMap[subtree.hash()] = mTrees.size();
	mTrees.push_back(subtree);

	@match JudgmentOnValueTree(subtree)
		-| Leaf(value) ->> {}
		-| Rule(rule, ifTrue, ifFalse) ->> {
			allocateTreeIds(ifTrue);
			allocateTreeIds(ifFalse);
			}
	}

void JudgmentOnValueTreeMatchJovtCppCodegen::dump(const JudgmentOnValueTree& subtree)
	{
	mLookupCode << "case " << mTreeHashMap[subtree.hash()] << ": {";

	@match JudgmentOnValueTree(subtree)
		-| Leaf(value) ->> {
			mLookupCode << "\treturn Nullable<uword_t>(" << value << ");\n";
			}
		-| Rule(rule, ifTrue, ifFalse, commonIndices) ->> {
			mLookupCode << "\treturn lookupAgainstRule(vals, "
				<< varForRule(rule) << ", "
				<< varForCommon(commonIndices) << ", "
				<< mTreeHashMap[ifTrue.hash()] << ", "
				<< mTreeHashMap[ifFalse.hash()]
				<< ");\n"
				;
			}

	mLookupCode << "\t}\n";
	}

std::string JudgmentOnValueTreeMatchJovtCppCodegen::generateLookupCppCode(const JudgmentOnValueTree& inTree)
	{
	JudgmentOnValueTreeMatchJovtCppCodegen codegenerator(inTree);

	return codegenerator.str();
	}

}

