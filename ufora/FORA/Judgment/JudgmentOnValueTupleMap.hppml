/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/
#pragma once

#include "JudgmentOnValueTupleSet.hppml"

namespace Fora {
namespace Interpreter {

class EvalFrameArgList;

}
}

namespace Fora {

template<class T>
class JudgmentOnValueTupleMap {
public:
	JudgmentOnValueTupleMap()
		{
		}

	const JudgmentOnValueTupleSet& keys() const
		{
		return mKeys;
		}

	const std::map<JOVT, T>& keyValueMap() const
		{
		return mValueMap;
		}

	bool contains(const JOVT& inJOV) const
		{
		return mKeys.contains(inJOV);
		}

	void judgmentsCovering(
			const ImplValContainer& implVal,
			std::vector<JOVT>& outJudgments
			) const
		{
		return mKeys.judgmentsCovering(implVal, outJudgments);
		}

	void judgmentsCovering(
			const JOVT& inJOVT,
			std::vector<JOVT>& outJudgments
			) const
		{
		return mKeys.judgmentsCovering(inJOVT, outJudgments);
		}

	void judgmentsCoveredBy(
			const JOVT& inJOVT,
			std::vector<JOVT>& outJudgments
			) const
		{
		return mKeys.judgmentsCoveredBy(inJOVT, outJudgments);
		}

	template<class T2>
	Nullable<JOVT> smallestJovtCovering(const T2& in)
		{
		return mKeys.smallestJovtCovering(in);
		}

	T& operator[](const JOVT& in)
		{
		if (!mKeys.contains(in))
			mKeys.insert(in);

		return mValueMap[in];
		}

	typename std::map<JOVT, T>::const_iterator find(const JOVT& in) const
		{
		return mValueMap.find(in);
		}

	typename std::map<JOVT, T>::iterator find(const JOVT& in)
		{
		return mValueMap.find(in);
		}

	size_t size() const
		{
		return mValueMap.size();
		}

	void erase(const JOVT& in)
		{
		mKeys.erase(in);
		mValueMap.erase(in);
		}

private:
	JudgmentOnValueTupleSet mKeys;

	std::map<JOVT, T> mValueMap;
};

}

