/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/
#include "JudgmentUtil.hppml"

bool jorMightHaveVectorsWithin(const JudgmentOnResult& jor)
	{
	for (long k = 0; k < jor.size(); k++)
		if (jovMightHaveVectorsWithin(jor[k]))
			return true;

	return false;
	}

bool jovMightHaveVectorsWithin(const JOV& jov)
	{
	if (!jov.type())
		return true;

	if (jov.constant())
		return false;

	return typeMightHaveVectorsWithin(*jov.type());
	}

bool typeMightHaveVectorsWithin(const Type& type)
	{
	if (type.isPOD())
		return false;

	@match Type(type)
		-| String() ->> {
			return false;
			}
		-| JOVAsValue() ->> {
			return false;
			}
		-| StackTrace() ->> {
			return false;
			}
		-| ExternalFunction() ->> {
			return false;
			}
		-| Dictionary() ->> {
			return true;
			}
		-| MutableVector() ->> {
			return true;
			}
		-| Vector() ->> {
			return true;
			}
		-| Tuple(types, _) ->> {
			for (auto t: types)
				if (typeMightHaveVectorsWithin(t))
					return true;

			return false;
			}
		-| Class(types, _) ->> {
			for (auto t: types)
				if (typeMightHaveVectorsWithin(t))
					return true;

			return false;
			}
		-| _ ->> {
			return true;
			}
	}

bool jorMightHavePointersWithin(const JudgmentOnResult& jor)
	{
	for (long k = 0; k < jor.size(); k++)
		if (jovMightHavePointersWithin(jor[k]))
			return true;

	return false;
	}

bool jovMightHavePointersWithin(const JOV& jov)
	{
	if (!jov.type())
		return true;

	if (jov.constant())
		return false;

	return typeMightHavePointersWithin(*jov.type());
	}

bool typeMightHavePointersWithin(const Type& type)
	{
	if (type.isPOD())
		return false;

	@match Type(type)
		-| String() ->> {
			return true;
			}
		-| JOVAsValue() ->> {
			return false;
			}
		-| StackTrace() ->> {
			return false;
			}
		-| ExternalFunction() ->> {
			return false;
			}
		-| Dictionary() ->> {
			return true;
			}
		-| MutableVector() ->> {
			return true;
			}
		-| Vector() ->> {
			return true;
			}
		-| Tuple(types, _) ->> {
			for (auto t: types)
				if (typeMightHavePointersWithin(t))
					return true;

			return false;
			}
		-| Class(types, _) ->> {
			for (auto t: types)
				if (typeMightHavePointersWithin(t))
					return true;

			return false;
			}
		-| _ ->> {
			return true;
			}
	}


