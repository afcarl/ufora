/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/
#include "JudgmentOnValue.hppml"
#include "../Core/Type.hppml"
#include "../Core/ImplVal.hppml"
#include "../Core/ClassMediator.hppml"

JudgmentOnValue
JudgmentOnValueClass::VectorElementJOVFromLiveValue(const ImplVal& inImplVal)
	{
	@match Type(inImplVal.type())
		-| Class(b, classBody) ->> {

				ImmutableTreeVector<JudgmentOnValue> types =
					JudgmentOnValue::VectorElementJOVFromLiveValue(
						ImplVal(
							Type::UnnamedTuple(b),
							(char*)&inImplVal.cast<char>()
							)
						)
					.getTuple().jov().jovs();

				return JudgmentOnValue::Class(
							JudgmentOnValueClass::Class(types, classBody)
							);
				}
		;
	}

JudgmentOnValue JudgmentOnValueClass::FromLiveValue(const ImplVal& inImplVal)
	{
	@match Type(inImplVal.type())
		-| Class(b, classBody) ->> {

				ImmutableTreeVector<JudgmentOnValue> types =
					JudgmentOnValue::FromLiveValue(
						ImplVal(
							Type::UnnamedTuple(b),
							(char*)&inImplVal.cast<char>()
							)
						)
					.getTuple().jov().jovs();

				return JudgmentOnValue::Class(JudgmentOnValueClass::Class(types, classBody));
				}
		;
	}

JudgmentOnValue	JudgmentOnValueClass::OfType(const Type& type)
	{
	lassert(type.isClass());

	@match Type(type)
		-| Class(types, classBody) ->> {
				ImmutableTreeVector<JudgmentOnValue> jovs;
				for (long k = 0; k < types.size();k++)
					jovs = jovs + JudgmentOnValue::OfType(types[k]);

				return JudgmentOnValue::Class(
					JudgmentOnValueClass::Class(
						jovs,
						classBody
						)
					);
				}
		;
	}

Nullable<Type> JudgmentOnValueClass::computeType() const
	{
	@match JudgmentOnValueClass(*this)
		-|	Unknown() ->> {
				return null();
				}
		-| Class(jovs, classBody) ->> {
				ImmutableTreeVector<Type> types;
				for (long k = 0; k < jovs.size(); k++)
					if (jovs[k].type())
						types = types + *jovs[k].type();
						else
						return null();

				return null() << Type::Class(types, classBody);
				}
		;
	}

Nullable<bool> JudgmentOnValueClass::computeIsCST() const
	{
	@match JudgmentOnValueClass(*this)
		-|	Unknown() ->> {
				return null();
				}
		-| Class(jovs, classBody) ->> {

				bool anyNull = false;

				for (long k = 0; k < jovs.size(); k++)
					if (jovs[k].isCST() && !*jovs[k].isCST())
						return null() << false;
						else
					if (!jovs[k].isCST())
						anyNull = true;

				if (anyNull)
					return null();
				return null() << true;
				}
		;
	}

Nullable<CSTValue> JudgmentOnValueClass::computeConstant() const
	{
	@match JudgmentOnValueClass(*this)
		-|	Unknown() ->> {
				return null();
				}
		-| Class(jovs, classBody) ->> {
				Nullable<CSTValue> jovConstVals =
					JOV::Tuple(
						JOVT(jovs, (emptyTreeVec() + Nullable<Symbol>()) * jovs.size())
						).constant();
				if (!jovConstVals)
					return null();

				return null() << CSTValue(
					ImplVal(
						Type::Class(
							jovConstVals->type().getTuple().types(),
							classBody
							),
						jovConstVals->getData()
						)
					);
				}
		;
	}

JudgmentOnResult JudgmentOnValueClass::restrictedToCSTness(bool inCSTness) const
	{
	@match JudgmentOnValueClass(*this)
		-|	Unknown() ->> {
				return JudgmentOnResult();
				}
		-| Class(jovs, classBody) ->> {
				ImmutableTreeVector<JudgmentOnValue> subJOVs;

				for (long k = 0; k < jovs.size();k++)
					{
					JudgmentOnResult res = jovs[k].restrictedToCSTness(inCSTness);
					if (res.size() != 1)
						return JudgmentOnResult();

					subJOVs = subJOVs + res[0];
					}

				return JudgmentOnResult(
					JudgmentOnValue::Class(
						JudgmentOnValueClass::Class(
							subJOVs,
							classBody
							)
						)
					);
				}
		;
	}

JudgmentOnValue JudgmentOnValueClass::smallestCovering(const JudgmentOnValue& other) const
	{
	if (!other.isClass())
		return JOV::Unknown();

	JudgmentOnValueClass jovcOther = other.getClass().jov();

	if (isUnknown())
		return JOV::Class(*this);

	if (jovcOther.isUnknown())
		return other;

	@match JudgmentOnValueClass(*this)
		-| Class(jovs1, body1) ->> {

			@match JudgmentOnValueClass(jovcOther)
				-| Class(jovs2, body2) ->> {

					if (body1 != body2 || jovs1.size() != jovs2.size())
						return JudgmentOnValue::Class(
							JudgmentOnValueClass::Unknown()
							);

					ImmutableTreeVector<JudgmentOnValue> jovs;
					for (long k = 0; k < jovs1.size();k++)
						jovs = jovs + jovs1[k].smallestCovering(jovs2[k]);

					return JudgmentOnValue::Class(
						JudgmentOnValueClass::Class(
							jovs,
							body1
							)
						);
					}
					;

			}
		;
	}


bool JudgmentOnValueClass::covers(const ImplVal& impl) const
	{
	@match JudgmentOnValueClass(*this)
		-|	Unknown() ->> {
			return impl.type().isClass();
			}
		-| Class(t1, body1) ->> {
			@match Type(impl.type())
				-| Class(t2, body2) ->> {

					if (body1 != body2 || t1.size() != t2.size())
						return false;

					uword_t sz = 0;

					for (long k = 0; k < t1.size();k++)
						{
						if (!t1[k].covers(ImplVal(t2[k], ((char*)impl.data()) + sz)))
							return false;
						sz = sz + t2[k].size();
						}

					return true;
					}
				-|	_ ->> {
					return false;
					}
				;
			}
			;
	}
bool JudgmentOnValueClass::covers(const JudgmentOnValue& otherJOV) const
	{
	const JudgmentOnValueClass& other(otherJOV.getClass().jov());

	if (isUnknown())
		return true;
	if (other.isUnknown())
		return false;
	@match JudgmentOnValueClass(*this)
		-| Class(t1, classBody1) ->> {
		@match JudgmentOnValueClass(other)
			-| Class(t2, classBody2) ->> {

			if (t1.size() != t2.size()
					|| classBody1 != classBody2)
				return false;

			for (long k = 0; k < t1.size();k++)
				if (!t1[k].covers(t2[k]))
					return false;

			return true;
			}
		}
		;
	}
JudgmentOnValueClass JudgmentOnValueClass::Class(
				const ImmutableTreeVector<JudgmentOnValue>&		elements,
				const ClassMediator&							mediator,
				const ClassMediatorResumption&					resumption
				)
	{
	return Class(
		elements,
		ClassBody(
			CPPMLOpaqueHandle<ClassMediator>(new ClassMediator(mediator)),
			resumption
			)
		);
	}
bool JudgmentOnValueClass::disjoint(const JudgmentOnValue& otherJOV) const
	{
	const JudgmentOnValueClass& other(otherJOV.getClass().jov());

	if (isUnknown() || other.isUnknown())
		return false;

	@match JudgmentOnValueClass(*this)
		-| Class(t1, classBody1) ->> {
		@match JudgmentOnValueClass(other)
			-| Class(t2, classBody2) ->> {

			if (t1.size() != t2.size() || classBody1 != classBody2)
				return true;

			for (long k = 0; k < t1.size();k++)
				if (t1[k].disjoint(t2[k]))
					return true;

			return false;
			}
		}
		;
	}

JudgmentOnResult		JudgmentOnValueClass::intersectWith(
									const JudgmentOnValue& rightJOV
									) const
	{
	const JudgmentOnValueClass& right(rightJOV.getClass().jov());

	if (this->isUnknown())
		return JudgmentOnResult(JOV::Class(right));
	if (right.isUnknown())
		return JudgmentOnResult(JOV::Class((*this)));

	@match JudgmentOnValueClass((*this))
		-| Class(heldTypes1, classBody1) ->> {
		@match JudgmentOnValueClass(right)
		-| Class(heldTypes2, classBody2) ->> {

			if (classBody1 != classBody2 || heldTypes1.size() != heldTypes2.size())
				return JudgmentOnResult();

			ImmutableTreeVector<JOV> jovs;
			for (long k = 0; k < heldTypes1.size();k++)
				{
				JudgmentOnResult j = heldTypes1[k] & heldTypes2[k];
				if (j.size() != 1)
					return JudgmentOnResult();

				jovs = jovs + j[0];
				}

			return JudgmentOnResult(
				JudgmentOnValue::Class(
					JudgmentOnValueClass::Class(
						jovs,
						classBody1
						)
					)
				);
			}
		}
		;
	}
void		JudgmentOnValueClass::toString(CPPMLPrettyPrintStream& s, bool isJOVAsValue) const
	{
	if (!isJOVAsValue)
		s << "{";
	@match JudgmentOnValueClass(*this)
		-| Unknown() ->> { s << "c(*)"; ;}
		-| Class(t, (mediator, resumption)) ->> {
				s << mediator->name();
				@match ClassMediatorResumption(resumption)
					-| Entry() ->> {}
					-| Resumption(ix) ->> {
						s << "[resume@" << ix << "]";
					}
				s << "_" << t.size();
				s << "(";
				bool isFirst = true;
				long ix = 0;
				for (auto subtype: t)
					{
					if (!(subtype.constant() && subtype.type()->size() == 0))
						{
						if (!isFirst)
							s << ",";
						s << ix << "=";

						s << subtype;
						isFirst = false;
						}
					ix++;
					}
				s << ")";
				}
		;
	if (!isJOVAsValue)
		s << "}";
	}
