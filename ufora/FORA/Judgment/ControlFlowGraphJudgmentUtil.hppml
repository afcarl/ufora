/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/
#pragma once

#include "../../core/Common.hppml"
#include "../ControlFlowGraph/ControlFlowGraph.hppml"
#include "JudgmentOnValue.hppml"

template<class T>
class ImmutableTreeVector;

template<class T>
class Nullable;

JudgmentOnValue getJudgment(const ControlFlowArg& arg,
							const ImmutableTreeVector<JudgmentOnValue>& jmts
							);

JudgmentOnValueTuple getJudgment(const ControlFlowContinuationTupleArg& arg,
							const ImmutableTreeVector<JudgmentOnValue>& jmts,
							const Nullable<JudgmentOnValue>& result,
							const Nullable<ControlFlowNodeBody>& node
							);

JudgmentOnValue getJudgment(const ControlFlowContinuationArg& arg,
							const ImmutableTreeVector<JudgmentOnValue>& jmts,
							const Nullable<JudgmentOnValue>& result,
							const Nullable<ControlFlowNodeBody>& node
							);

ImmutableTreeVector<JudgmentOnValue> getJudgment(
											const ImmutableTreeVector<ControlFlowArg>& args,
											const ImmutableTreeVector<JudgmentOnValue>& jmts,
											const Nullable<ControlFlowNodeBody>& node
											);

ImmutableTreeVector<JudgmentOnValue> getJudgment(const ImmutableTreeVector<ControlFlowContinuationArg>& args,
												const ImmutableTreeVector<JudgmentOnValue>& jmts,
												const Nullable<JudgmentOnValue>& result,
												const Nullable<ControlFlowNodeBody>& node
												);

//return judgments for the semantic meaning of an apply operation in the FORA language, in which
//all 'tuple-called' arguments have been flattened
JudgmentOnValueTuple getApplyTupleJudgment(
							const ControlFlowApplyArg& arg,
							const ImmutableTreeVector<JudgmentOnValue>& vars,
							const Nullable<ControlFlowNodeBody>& node
							);

JudgmentOnValueTuple getApplyTupleJudgment(
								const ImmutableTreeVector<ControlFlowApplyArg>& args,
								const ImmutableTreeVector<JudgmentOnValue>& vars,
								const Nullable<ControlFlowNodeBody>& node
								);

//return judgments for the individual arguments of an apply tuple in the target CFG
//which are one-to-one with the source apply instructions
JudgmentOnValue getApplyJovJudgment(const ControlFlowApplyArg& arg,
							const ImmutableTreeVector<JudgmentOnValue>& vars,
							const Nullable<ControlFlowNodeBody>& node
							);

ImmutableTreeVector<JudgmentOnValue> getApplyJovJudgment(
								const ImmutableTreeVector<ControlFlowApplyArg>& args,
								const ImmutableTreeVector<JudgmentOnValue>& vars,
								const Nullable<ControlFlowNodeBody>& node
								);


