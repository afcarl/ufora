/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/
#ifndef FOO_Random_jov_generator_hppml_
#define FOO_Random_jov_generator_hppml_

#include "JudgmentOnValue.hppml"
#include <boost/random.hpp>
#include "../../core/PolymorphicSharedPtr.hpp"

namespace Fora {
namespace Interpreter {
class ExecutionContext;
}
}

class ImplValContainer;

/******************************
A class for generating random values which satisfy given JOVs

 Originally intended to be used only by Axioms/Axioms_consistency_test.py
 *******************************/

class RandomJOVGenerator : public PolymorphicSharedPtrBase<RandomJOVGenerator> {
public:
    RandomJOVGenerator(PolymorphicSharedPtr<Fora::Interpreter::ExecutionContext> inExecutionContextPtr);
    RandomJOVGenerator( int seed,
                        PolymorphicSharedPtr<Fora::Interpreter::ExecutionContext>inExectuionContextPtr
                        );
    RandomJOVGenerator( boost::mt19937& inMersenneTwister,
                        PolymorphicSharedPtr<Fora::Interpreter::ExecutionContext> inExecutionContextPtr
                        );
    RandomJOVGenerator& setSymbolStrings(const std::vector<std::string>& inSymbolStrings);
    RandomJOVGenerator& setMaxExtras(int inMaxExtras);
    RandomJOVGenerator& setMaxTupleSize(int inMaxTupleSize);
    RandomJOVGenerator& setMaxTriesForRandomValue(int inMaxTriesForRandomValue);
    RandomJOVGenerator& setMaxStringLength(int inMaxStringLength);
    RandomJOVGenerator& setLikelyMaxInt(int inLikelyMaxInt);
    RandomJOVGenerator& setLikelyMinInt(int inLikelyMinInt);
    RandomJOVGenerator& setMaxReal(double inMaxReal);
    RandomJOVGenerator& setMinReal(double inMinReal);
    RandomJOVGenerator& setLikelyMaxUnsignedInt(unsigned int inLikelyMaxUnsignedInt);
    RandomJOVGenerator& setProbabilityIntsLieInLikelyRange(double pr);

    Nullable<ImplValContainer> RandomValue(const JOV& jov, bool allowMutableTypes = true) const;
    Nullable<ImplValContainer> AtomRandomValue(const JudgmentOnValueAtom& jova) const ;
    Nullable<ImplValContainer> TypeRandomValue(const Type& t) const;
    Nullable<ImplValContainer> TupleRandomValue(const JOVT& jovt) const;
    Nullable<ImplValContainer> VectorRandomValue(const JudgmentOnValueVector& jov) const;

    Nullable<ImplValContainer> UnknownRandomValue(bool allowMutableTypes) const;
    Type randomIntegerType(void) const;
    Type randomFloatType(void) const;
/*
    Type randomVectorType(bool allowMutableTypes);
*/
    Type randomTupleType(void) const;

    /*****************************
    Returns a non-Unknown type. Used for constructing random values for "*"

    Only implemented for some basic types.
    *************************************/
    Type randomType(bool allowMutableTypes = true) const;
private:
    // returns a uniformly distributed integer in range 0, INT_MAX
    int randInt(void) const;
    double randDouble(void) const;
    float randFloat(void) const;
    bool randBool(void) const;
    // returns a real in [0,1], with uniform distribution.
    double randRealInZeroToOne(void) const;

    const int mNumTypes;
    const int mNumBitTypes;

    std::vector<std::string> mSymbolStrings;
    int mMaxExtras;
    int mMaxTupleSize;
    int mMaxVectorSize;
    int mMaxReal;
    int mMinReal;
    int mMaxTriesForRandomValue;
    int mMaxStringLength;

    PolymorphicSharedPtr<Fora::Interpreter::ExecutionContext> mExecutionContextPtr;

    /*
    In `TypeRandomValue` we ask for random ints, but ``generally'' want them to be small.
    The two following ints provide the range for ``most'' ints we'll get back from this function.
    For simplicity, we need mLikelyMaxInt - mLikelyMinInt <= max int8_t (128)
    */
    int mLikelyMaxInt;
    int mLikelyMinInt;
    unsigned int mLikelyMaxUnsignedInt;
    /*
    This number makes the above comment precise: this is the probability that a random int called
    by `TypeRandomValue` on `{Int64}` (or other int types) lies in the range [likely_min_int_, likely_max_int_]
    (for unsigned ints, the likely range is [0, likely_max_unsigned_int_])
    */
    double mProbabilityIntsLieInLikelyRange;
    //mutable boost::recursive_mutex mutex_;
    // These following fileds really do need to be declared after the above crap, due to the order of ctors called
    // in initializer lists.
    mutable boost::mt19937 mMersenneTwister;
    mutable boost::variate_generator<boost::mt19937&, boost::uniform_int<> > mRandIntGen;
    mutable boost::variate_generator<boost::mt19937&, boost::uniform_real<> > mRandDoubleGen;
    mutable boost::variate_generator<boost::mt19937&, boost::uniform_real<float> > mRandFloatGen;
    mutable boost::variate_generator<boost::mt19937&, boost::uniform_int<> > mRandBitGen;
    mutable boost::variate_generator<boost::mt19937&, boost::uniform_real<> > mUnifGen;
};

#endif
