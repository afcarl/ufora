/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/
#pragma once

#include "../ControlFlowGraph/ControlFlowGraph.hppml"
#include "../Judgment/JudgmentOnValue.hppml"
#include "../../core/PolymorphicSharedPtr.hpp"
#include "InstructionPtr.hpp"


class Axioms;
namespace TypedFora {
class Compiler;
};

namespace Fora {
namespace Interpreter {

class EvalFrameArgList;

class InstructionGraphRoot;

class InstructionGraph : public PolymorphicSharedPtrBase<InstructionGraph> {
public:
	InstructionGraph(
			PolymorphicSharedPtr<Axioms> inAxioms,
			PolymorphicSharedPtr<TypedFora::Compiler> inTypedForaCompiler
			);

	//find the root instruction for a given node
	InstructionPtr getInstruction(
					const ControlFlowGraph& controlFlowGraph,
					Nullable<string> inLabel
					);

	ImmutableTreeSet<ControlFlowGraph> getGraphs(void);

	PolymorphicSharedPtr<Axioms> getAxioms() const
		{
		return mAxioms;
		}

	PolymorphicSharedPtr<TypedFora::Compiler> getTypedForaCompiler() const
		{
		return mTypedForaCompiler;
		}

private:
	void ensureRoot_(const pair<hash_type, Nullable<string> >& p);

	void ensureGraph_(const ControlFlowGraph& controlFlowGraph);

	InstructionPtr createNewInstruction(
					const InstructionPtr inRootInstructionPtr,
					const ControlFlowGraph* controlFlowGraphPtr,
					Nullable<string> label
					);

	boost::recursive_mutex mMutex;

	map<hash_type, ControlFlowGraph> mControlFlowGraphs;

	ImmutableTreeSet<ControlFlowGraph> mControlFlowGraphSet;

	map<pair<hash_type, Nullable<string> >, Instruction*> mRootInstructions;

	PolymorphicSharedPtr<Axioms> mAxioms;

	PolymorphicSharedPtr<TypedFora::Compiler> mTypedForaCompiler;
};

}
}

