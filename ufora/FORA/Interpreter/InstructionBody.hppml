/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/
#pragma once

#include "../Judgment/JudgmentOnAction.hppml"
#include "ApplyArgs.hppml"
#include "InstructionPtr.hpp"

namespace Fora {
namespace Interpreter {

class SingleAxiomCache;

typedef InstructionPtr instruction_ptr;
typedef SingleAxiomCache* single_axiom_cache_ptr;
@type
	InstructionBody =
		-|	Uninitialized of ()
		-|	Jump of ()
		-|	Branch of
				uword_t which
		-|	Switch of
				uword_t which,
				ImmutableTreeVector<CSTValue> valuesToCheck,
				//map from type hash to map from value hash to the actual
				//continuation index we should use
				map<hash_type,map<hash_type, uword_t> > indexMap,
				//index of the continuation to use if we don't match anything in
				//'indexMap'
				uword_t otherwiseIx
		-|	TupleExpand of uword_t which,
				uword_t arity,
				bool arityIsExact
		-|	UnknownApply of
				ApplyArgs args
		-|	Cached of
				ApplyArgs args,
				boost::shared_ptr<JudgmentOnAction> currentResultJOAPtr
	with
		instruction_ptr instructionPtr
	{
	public:
		Nullable<uword_t> getTupleExpandIndex(void) const;

		bool isApply(void) const;
	}
	;

}
}


template<>
class CPPMLPrettyPrint<Fora::Interpreter::InstructionBody> {
public:
		static void prettyPrint(CPPMLPrettyPrintStream& s, const Fora::Interpreter::InstructionBody& t);
};


