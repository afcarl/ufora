/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/
#pragma once

#include "../ControlFlowGraph/ControlFlowGraph.hppml"
#include "../Core/CSTValue.hppml"
#include "../Core/ImplVal.hppml"
#include "../Judgment/JudgmentOnValue.hppml"

namespace Fora {
namespace Interpreter {

class EvalFrameArgList;
class InterpreterScratchSpace;
class RefcountPool;

class ContinuationArgs {
public:
	ContinuationArgs();
	ContinuationArgs(const ContinuationArgs& in);
	ContinuationArgs(const ControlFlowGraph& inGraph, const Nullable<string>& inLabel, uword_t inContinuationIndex);

	ContinuationArgs& operator=(const ContinuationArgs& in);
	~ContinuationArgs();

	void returnArgs(
			EvalFrameArgList& evalFrameArgList,
			ImplVal result,
			ImplVal* target,
			RefcountPool* inRefcountPool
			) const;

	//rewrite the arguments in 'vals' according to our continuation
	//description. use the data in 'scratch' as extra space
	void rewriteArgs(
			EvalFrameArgList& evalFrameArgList,
			ImplVal result,
			InterpreterScratchSpace& scratchSpace,
			RefcountPool* inRefcountPool
			) const;

	string toString(void) const;

	ImmutableTreeVector<JudgmentOnValue> targetJOV(
											const ImmutableTreeVector<JudgmentOnValue>& jovs
											) const;

	ImmutableTreeVector<JudgmentOnValue> targetJOV(
											const ImmutableTreeVector<JudgmentOnValue>& jovs,
											const JudgmentOnValue& result
											) const;

	ImmutableTreeVector<JudgmentOnValue> targetJOV(
											const ImmutableTreeVector<JudgmentOnValue>& jovs,
											const Nullable<JudgmentOnValue>& result
											) const;

	JudgmentOnValue jovForArg(	const ImmutableTreeVector<JudgmentOnValue>& jovs,
								const Nullable<JudgmentOnValue>& result,
								uword_t index
								) const;

	JudgmentOnResult jorForArg(	const ImmutableTreeVector<JudgmentOnValue>& jovs,
								const JudgmentOnResult& result,
								uword_t index
								) const;

	Nullable<uword_t> getNullableTupleExpandIndex(void) const;

	uword_t toLeaveAlone(void) const;

	uword_t toGrab(void) const;

	bool isConstant(uword_t  ix) const { return mArgSource[ix] == arg_source_constant; }

	bool isResult(uword_t  ix) const { return mArgSource[ix] == arg_source_result; }

	bool isContinuationForTupleExpand(void) const { return mIsTupleExpand; }

	uword_t tupleExpandArgIndex(void) const { return mIfIsTupleExpand_argument; }

	uword_t tupleExpandArity(void) const { return mIfIsTupleExpand_arity; }

	bool tupleExpandArityIsExact(void) const { return mIfIsTupleExpand_arityIsExact; }


	bool isMakeTuple(uword_t  ix) const
		{
		return mArgSource[ix] == arg_source_make_tuple;
		}

	const ImmutableTreeVector<ControlFlowContinuationTupleArg>& getMakeTupleArgs(uword_t ix) const;

	bool isTupleExpandRemainingElements(uword_t  ix) const
		{
		return mArgSource[ix] == arg_source_tuple_expand_remaining_elements;
		}

	bool isTupleExpandElement(uword_t  ix) const
		{
		return mArgSource[ix] <= arg_source_tuple_expand_element_base;
		}

	int getTupleExpandElementIndex(uword_t  ix) const
		{
		return arg_source_tuple_expand_element_base - mArgSource[ix];
		}

	bool isIndex(uword_t  ix) const { return mArgSource[ix] >= 0; }

	uword_t index(uword_t  ix) const { return mArgSource[ix]; }

	CSTValue constant(uword_t  ix) const { return mArgSourceConstants[ix]; }

	bool usesResult(void) const { return mUsesResult; }

private:
	void initializeReturnContinuation(const ControlFlowContinuationArg& arg);

	void initializeNodeContinuation(const ImmutableTreeVector<ControlFlowContinuationArg>& args);

	void initializeControlFlowArg(const ControlFlowContinuationArg& arg, uword_t ix);

	JudgmentOnValue getJOVForTupleExpandRemainingElements(const JudgmentOnValue& inResult) const;

	JudgmentOnValue getJOVForTupleExpandElement(const JudgmentOnValue& inResult, uword_t inIndex) const;

	ImplVal createOwnedTupleFromLiveValues(
						const EvalFrameArgList& evalFrameArgList,
						ImplVal result,
						const ImmutableTreeVector<ControlFlowContinuationTupleArg>& inArg,
						RefcountPool* inPool
						) const;


	void extractTupleElt(
						const EvalFrameArgList& evalFrameArgList,
						ImplVal result,
						const ControlFlowContinuationTupleArg& inArg,
						Fora::ApplyArgFrame& ioVals,
						RefcountPool* inPool
						) const;

	ImplVal extractTupleElt(
						const EvalFrameArgList& evalFrameArgList,
						ImplVal result,
						const ControlFlowContinuationArg& inArg,
						RefcountPool* inPool
						) const;

	JudgmentOnValue getJOVForMakeTuple(
						const ImmutableTreeVector<JudgmentOnValue>& jovs,
						const Nullable<JudgmentOnValue>& result,
						const ImmutableTreeVector<ControlFlowContinuationTupleArg>& args
						) const;


	JudgmentOnValueTuple getJOVTForMakeTupleArg(
						const ImmutableTreeVector<JudgmentOnValue>& jovs,
						const Nullable<JudgmentOnValue>& result,
						const ControlFlowContinuationTupleArg& arg
						) const;


	JudgmentOnValue getJOVForContinuationArg(
						const ImmutableTreeVector<JudgmentOnValue>& jovs,
						const Nullable<JudgmentOnValue>& result,
						const ControlFlowContinuationArg& arg
						) const;

	void destroyData(void);

	uword_t mArgsToLeaveAlone;		//how many arguments do we just leave alone?

	uword_t mArgsToGrab;			//how many to grab

	long* mArgSource;

	enum  {
		arg_source_constant = -1,
		arg_source_result = -2,
		arg_source_make_tuple = -3,
		arg_source_tuple_expand_remaining_elements = -4,
		arg_source_tuple_expand_element_base = -5
	};

	CSTValue* mArgSourceConstants;

	uword_t * mRefCount;

	ImmutableTreeVector<ControlFlowContinuationTupleArg>* mMakeTupleArgs;

	bool mUsesResult;

	bool mIsTupleExpand;
	uword_t mIfIsTupleExpand_argument;
	uword_t mIfIsTupleExpand_arity;
	bool mIfIsTupleExpand_arityIsExact;

	ControlFlowContinuation mContinuation;
};

}
}

