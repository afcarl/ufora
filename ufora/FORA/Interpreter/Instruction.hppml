/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/
#pragma once

#include "../../core/containers/ArbitraryTypeMap.hpp"
#include "../ControlFlowGraph/ControlFlowGraph.hppml"
#include "../Runtime.hppml"
#include "Continuation.hppml"
#include "InstructionBody.hppml"
#include "InstructionPtr.hpp"
#include "../Judgment/JudgmentOnValueTupleMap.hppml"
#include "../Axioms/Axiom.hppml"
#include "CompilerEntrypointMap.hppml"

namespace TypedFora {

class TypedJumpTarget;

}

namespace Fora {
namespace Interpreter {

class InstructionGraph;
class InstructionGraphRoot;
class ApplyArgs;
class CompilerEntrypointMap;

/******
Instruction

Represents a single instruction in a reasoning graph.

Every instruction is indexed by a tuple
	(CFG, node)
these are the properties that make the instruction unique.

********/

class Instruction {
public:
	Instruction(
		InstructionGraph* instructionGraphPtr,
		const ControlFlowGraph* controlFlowGraphPtr,
		Nullable<string> label
		);

	~Instruction();

	bool isApply(void) const;

	//does this node produce a result? E.g. is it an apply or a CacheCall?
	bool hasResult(void) const;

	uword_t argCount(void) const;

	long graphMaxArgCount(void) const;

	const InstructionBody& getInstructionBody(void) const;

	const ControlFlowGraph& getGraph(void) const;

	const Nullable<string>& getLabel(void) const;

	hash_type hash(void) const;

	uint64_t& executionCount(void);

	Continuation& getContinuation(uword_t index);

	const Continuation& getContinuation(uword_t index) const;

	size_t getContinuationCount() const;

	string toString(bool headerOnly = true, bool deterministicTrace = true) const;

	InstructionGraph& instructionGraph(void);

	Fora::Interpreter::CompilerEntrypointMap& getCompilerEntrypointMap()
		{
		return mCompilerEntrypointMap;
		}

	void ensureInitialized(void);

private:
	bool isInitialized() const;

	void init();

	void addContinuationDuringInit(
			const ControlFlowContinuation& inCFC,
			bool hasResult,
			uword_t indexInCFGNode
			);

	void initializeInstructionBody();

	void initializeJumpOrSwitchInstructionBody(
			const vector<pair<CSTValue, uword_t> >& continuationIndices,
			const ImmutableTreeVector<CSTValue>& cstValuesToCheck,
			uint32_t ix
			);

	void initializeInstructionBodyForBranch(
			uint32_t ix,
			ControlFlowContinuation trueContinuation,
			ControlFlowContinuation falseContinuation
			);

	void initializeInstructionBodyForSwitchOnIndex(
			uint32_t ix,
			const ImmutableTreeMap<CSTValue, ControlFlowContinuation>& branches,
			ControlFlowContinuation otherwise
			);

	void initializeInstructionBodyTupleExpand(
			uword_t inIndex,
			const ControlFlowTupleContinuation& ifMatch,
			const ControlFlowContinuation& ifNoMatch
			);

	void initializeInstructionBodyForSwitchOnConstant(
			const CSTValue& cstValue,
			const ImmutableTreeMap<CSTValue, ControlFlowContinuation>& branches,
			ControlFlowContinuation otherwise
			);

	void initializeInstructionBodyForApply(
			const ImmutableTreeVector<ControlFlowApplyArg>& args,
			const ControlFlowContinuation& normalContinuation,
			const ControlFlowContinuation& exceptionalContinuation
			);

	const ControlFlowGraph*	mControlFlowGraphPtr;

	Nullable<string> mLabel;

	hash_type mHash;

	//times this instruction has been executed by the interpreter
	uint64_t mExecutionCount;

	vector<Continuation> mContinuations;

	InstructionBody	mInstructionBody;

	InstructionGraph* mInstructionGraphPtr;

	//is the node finished? if so, then reasoning shouldn't affect it any further
	bool mIsFinished;

	bool mIsInitialized;

	long mArgCount;

	CompilerEntrypointMap mCompilerEntrypointMap;
};


}
}


template<>
class CPPMLPrettyPrint<Fora::Interpreter::Instruction*> {
public:
	static void prettyPrint(CPPMLPrettyPrintStream& s,
							Fora::Interpreter::Instruction* t)
		{
		s << t->toString();
		}
};


namespace Ufora {
namespace python {

template<class T>
class ExposeAsClass;

template<>
class ExposeAsClass<Fora::Interpreter::Instruction*> {
public:
		const static bool value = true;
};

}
}

