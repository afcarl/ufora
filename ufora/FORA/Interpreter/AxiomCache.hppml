/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/
#pragma once

#include "../Runtime.hppml"
#include "../Judgment/JudgmentOnValueTree.hppml"
#include <boost/random.hpp>
#include "../Axioms/Axioms.hppml"
#include "../Axioms/Axiom.hppml"
#include "../Axioms/AxiomGroup.hppml"
#include <boost/unordered_map.hpp>
#include "../Native/NativeFunctionPointerAndEntrypointId.hppml"

namespace Fora {
namespace Interpreter {

class InterpreterScratchSpace;

//holds a single axiom and provides services to allow the Interpreter
//to call it
class SingleAxiomCache {
public:
		SingleAxiomCache(TypedFora::Compiler* inCompiler, const Axiom& inAxiom);

		enum {
			cmd_pack_nothing = 0,
			cmd_pack_data = 1,
			cmd_pack_implval = 2,
			cmd_pack_remainingArgs = 3
			};

		//check what kind of axiom this is
		bool isExpansion();
		bool isNativeCall();

		//if we're an expansion, get the CFG for a given set of values and symbols
		const ControlFlowGraph& getControlFlowGraph(const ApplySignature& sig) const;

		bool lastIsStarArgs() const;

		//if we're a native axiom, get the NativeFunctionPointer
		NativeFunctionPointerAndEntrypointId getPtr();

		//if we're a native axiom, pack the arguments into 'data'
		void packEntryArguments(char* data,
								Fora::ApplyArgFrame& ioImplVals,
								InterpreterScratchSpace& scratchSpace
								);

		//if we're a native axiom, how much data do we need for packEntryArguments?
		uword_t entryDataSize();

		const Axiom& getAxiom(void) const;

private:
		Axiom mAxiom;

		TypedFora::Compiler* mRuntime;

		uword_t mUseCount;

		uword_t mAxiomEntryBlockSize;

		Nullable<NativeFunctionPointerAndEntrypointId> mNativeEntryPointer;

		vector<uword_t> mAxiomEntryPackCmds;

		bool mLastIsStarArgs;

		mutable boost::recursive_mutex mMutex;

		bool mIsInitialized;

		mutable std::map<hash_type, ControlFlowGraph> mGraphs;

		mutable pair<const hash_type, ControlFlowGraph>* mLastLookupPair;
};

class SingleAxiomGroupCache {
public:
		SingleAxiomGroupCache(	PolymorphicSharedPtr<AxiomGroup> inGroup,
								TypedFora::Compiler* inCompiler
								);

		SingleAxiomCache* whichAxiom(
								const Fora::ApplyArgFrame& values
								);

private:
		PolymorphicSharedPtr<AxiomGroup> mGroup;
		TypedFora::Compiler* mRuntime;
		boost::shared_ptr<AxiomGroupInterpreterCache> mCache;
};

/**********

Holds all the data necessary to look up and run Axioms

***********/

class AxiomCache {
public:
		AxiomCache(	TypedFora::Compiler* inCompiler,
					PolymorphicSharedPtr<Axioms> inAxioms
					);

		//get the best SingleAxiomCache* - should never return null
		SingleAxiomCache* whichAxiom(const Fora::ApplyArgFrame& values);

		//get the current compiler
		TypedFora::Compiler*	typedForaCompiler(void) const;
private:
		TypedFora::Compiler* mRuntime;

		vector<uword_t> mUseCount;

		ImmutableTreeVector<pair<JudgmentOnValueTuple,
			PolymorphicSharedPtr<AxiomGroup> > > mInterpreterAxioms;

		vector<SingleAxiomGroupCache*> mGroupCaches;

		long mClassGroupIndex;

		boost::recursive_mutex mMutex;

};

}
}


class CPPMLPrettyPrintStream;

template<class T>
class CPPMLPrettyPrint;

template<>
class CPPMLPrettyPrint<Fora::Interpreter::SingleAxiomCache*> {
public:
		static void prettyPrint(CPPMLPrettyPrintStream& s,
								Fora::Interpreter::SingleAxiomCache* t)
			{
			}
};



