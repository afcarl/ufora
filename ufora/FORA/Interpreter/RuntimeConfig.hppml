/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/
#pragma once

#include <string>

//options to control the FORA Runtime
@type RuntimeConfig =
		bool			traceDefinitions,
		bool			traceArguments,
		bool			tracePaths,
		bool			useInlineMemoryManagement,
		bool			duplicateNativeEntrypoints,
		bool			validateVariablesDefinedBeforeUseInFlatCode,
		float			inlineComplexity,
		bool			useLLVMOptimization,
		bool			applyRefcountOptimization,
		bool			generateMachineCodeVectorAxioms,
		std::string		sharedObjectLibraryPath,
		uint32_t		compilerThreadCount,
		uint32_t		mediumPriorityCodeComplexityThreshold,
		uint32_t		dynamicInlinerSleepTimeMilliseconds,
		std::string		instructionDefinitionDumpDir,
		std::string		compilerDefinitionDumpDir,
		bool			kickIntoInterpreterOnInline,
		//number of times a CallSite has to be touched before we'll
		//dynamically inline
		uint32_t		dynamicInlineCallThreshold,
		//given that we're going to inline something in a function,
		//check all other callsites in the function against this lower
		//threshold
		uint32_t		dynamicInlineCallThresholdSecondary,
		bool			useReasoningCompiler,
		bool			disableSplitting,
		bool            useDynamicInlining,
		uint32_t        maxDynamicInlineComplexity,
		bool 			extraDebugChecksDuringCompilation,
		bool			unrollHotLoopsWithComparisons,
		bool 			enableDoubleVectorStashing,
		bool 			enableCodeExpansionRewriteRules,
		std::string		ptxLibraryPath,
		std::string		compilerDiskCacheDir
		;

