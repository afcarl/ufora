/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/
#pragma once

#include "../ControlFlowGraph/ControlFlowGraph.hppml"
#include "ContinuationArgs.hppml"
#include "InstructionPtr.hpp"

namespace Fora {
namespace Interpreter {

class EvalFrameArgList;
class InterpreterScratchSpace;
class RefcountPool;

//represents a set of exit points from an instruction,
//grouped by whether they're exceptions or normals
class Continuation {
public:
	Continuation(
		InstructionPtr instructionPtr,
		const ControlFlowContinuation& controlFlowContinuation,
		bool hasResult,
		long indexInCfgNode
		);

	~Continuation();

	bool isReturn(void) const;

	bool requiresResult(void) const;

	bool usesResult(void) const;

	bool returnIsException(void) const;

	void returnArgs(
			EvalFrameArgList& evalFrameArgList,
			ImplVal result,
			ImplVal* target,
			RefcountPool* inPool
			) const;

	void rewriteArgs(
			EvalFrameArgList& evalFrameArgList,
			ImplVal result,
			InterpreterScratchSpace& scratchSpace,
			RefcountPool* inPool
			) const;

	string toString(void) const;

	string getName(void) const;

	InstructionPtr getSourceInstruction(void) const;

	InstructionPtr getTargetInstruction(void) const
		{
		return mTargetInstructionPtr;
		}

	const ContinuationArgs& getContinuationArgs(void) const;

	uint64_t& executionCount(void)
		{
		return mExecutionCount;
		}

	const ControlFlowContinuation& getControlFlowContinuation(void) const;

private:
	ControlFlowContinuation mControlFlowContinuation;

	uint64_t mExecutionCount;

	InstructionPtr mSourceInstructionPtr;

	InstructionPtr mTargetInstructionPtr;

	bool mRequiresResult;

	bool mIsReturn;

	bool mIfReturnIsException;

	ContinuationArgs mContinuationArgs;

	Nullable<string> mLabel;
};


}
}

