/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/
#include "CompilerEntrypointMap.hppml"
#include "../TypedFora/JitCompiler/TypedJumpTarget.hppml"
#include "../Judgment/JudgmentOnValueTupleMap.hppml"
#include "../../core/Logging.hpp"

namespace Fora {
namespace Interpreter {

CompilerEntrypointMap::CompilerEntrypointMap() :
		mJumpTargets(0)
	{
	}

Nullable<TypedFora::TypedJumpTarget> CompilerEntrypointMap::getJumpTarget(
		const Fora::Interpreter::EvalFrameArgList& values
		)
	{
	if (!mJumpTargets)
		return null();

	boost::shared_lock<boost::shared_mutex> lock(mMutex);

	if (!mJumpTargets)
		mJumpTargets = new Fora::JudgmentOnValueTupleMap<TypedFora::TypedJumpTarget>();

	Nullable<JudgmentOnValueTuple> match = mJumpTargets->smallestJovtCovering(values);

	if (match)
		return null() << (*mJumpTargets)[*match];

	return null();
	}

Nullable<TypedFora::TypedJumpTarget> CompilerEntrypointMap::getJumpTarget(
		const JOVT& values
		)
	{
	if (!mJumpTargets)
		return null();

	boost::shared_lock<boost::shared_mutex> lock(mMutex);

	if (!mJumpTargets)
		mJumpTargets = new Fora::JudgmentOnValueTupleMap<TypedFora::TypedJumpTarget>();

	Nullable<JudgmentOnValueTuple> match = mJumpTargets->smallestJovtCovering(values);

	if (match)
		return null() << (*mJumpTargets)[*match];

	return null();
	}

void CompilerEntrypointMap::setJumpTarget(const JOVT& inJOVT, const TypedFora::TypedJumpTarget& inTarget)
	{
	boost::upgrade_lock<boost::shared_mutex> lock(mMutex);

	boost::upgrade_to_unique_lock<boost::shared_mutex> uniqueLock(lock);

	if (!mJumpTargets)
		mJumpTargets = new Fora::JudgmentOnValueTupleMap<TypedFora::TypedJumpTarget>();

	(*mJumpTargets)[inJOVT] = inTarget;
	}

void CompilerEntrypointMap::removeJumpTarget(const JOVT& inJOVT)
	{
	boost::upgrade_lock<boost::shared_mutex> lock(mMutex);

	boost::upgrade_to_unique_lock<boost::shared_mutex> uniqueLock(lock);

	if (!mJumpTargets)
		return;

	lassert(mJumpTargets->contains(inJOVT));

	(*mJumpTargets).erase(inJOVT);
	}

bool CompilerEntrypointMap::hasJumpTarget(const JOVT& values)
	{
	return getJumpTarget(values).isValue();
	}
}
}

