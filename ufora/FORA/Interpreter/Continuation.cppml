/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/
#include "Continuation.hppml"
#include "Instruction.hppml"
#include "InstructionGraph.hppml"
#include "EvalFrameArgList.hpp"
#include "InterpreterScratchSpace.hpp"
#include "../Language/FunctionToCFG.hppml"
#include "../../core/StringUtil.hpp"
#include <boost/lexical_cast.hpp>

namespace Fora {
namespace Interpreter {

Continuation::Continuation(
			InstructionPtr instructionPtr,
			const ControlFlowContinuation& controlFlowContinuation,
			bool hasResult,
			long indexInCfgNode
			) :
		mSourceInstructionPtr(instructionPtr),
		mRequiresResult(hasResult),
		mControlFlowContinuation(controlFlowContinuation),
		mExecutionCount(0),
		mIsReturn(false),
		mIfReturnIsException(false)
	{
	mIsReturn = false;
	mIfReturnIsException = false;

	mControlFlowContinuation = controlFlowContinuation;
	mRequiresResult = hasResult;

	mContinuationArgs =
		ContinuationArgs(
			mSourceInstructionPtr->getGraph(),
			mSourceInstructionPtr->getLabel(),
			indexInCfgNode
			);

	@match ControlFlowContinuation(controlFlowContinuation)
		-|	Node(label, args) ->> {
			mLabel = label;

			mTargetInstructionPtr =
				mSourceInstructionPtr->instructionGraph().getInstruction(
					mSourceInstructionPtr->getGraph(),
					null() << label
					);
			}
		-|	Return(arg, isException) ->> {
			mIsReturn = true;
			mIfReturnIsException = isException;
			}
		;
	}

Continuation::~Continuation()
	{
	}

const ContinuationArgs& Continuation::getContinuationArgs(void) const
	{
	return mContinuationArgs;
	}

bool Continuation::isReturn(void) const
	{
	return mIsReturn;
	}

bool Continuation::requiresResult(void) const
	{
	return mRequiresResult;
	}

string Continuation::getName(void) const
	{
	return 	"[Continuation]";
	}

bool Continuation::returnIsException(void) const
	{
	return mIfReturnIsException;
	}

void Continuation::returnArgs(
			EvalFrameArgList& evalFrameArgList,
			ImplVal result,
			ImplVal* target,
			RefcountPool* inPool
			) const
	{
	mContinuationArgs.returnArgs(evalFrameArgList, result, target, inPool);
	}

void Continuation::rewriteArgs(
		EvalFrameArgList& evalFrameArgList,
		ImplVal result,
		InterpreterScratchSpace& scratchSpace,
		RefcountPool* inPool
		) const
	{
	mContinuationArgs.rewriteArgs(
		evalFrameArgList,
		result,
		scratchSpace,
		inPool
		);
	}

string Continuation::toString(void) const
	{
	return "<Interpreter::Continuation>";
	}

InstructionPtr Continuation::getSourceInstruction(void) const
	{
	return mSourceInstructionPtr;
	}

bool Continuation::usesResult(void) const
	{
	return mContinuationArgs.usesResult();
	}

const ControlFlowContinuation& Continuation::getControlFlowContinuation(void) const
	{
	return mControlFlowContinuation;
	}

}
}

