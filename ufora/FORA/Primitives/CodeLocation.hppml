/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/
#pragma once

#include "../../core/threading/ThreadSafeMap.hpp"
#include "../../core/SimpleParse/SimpleParse.hppml"

typedef hash_type CodeLocationId;

@type
	//where a piece of code was defined. In "External", the paths are
	//user defined at parse time. Internal gives the actual source code
	//defining it
	CodeDefinitionPoint =
			External of ImmutableTreeVector<string> paths
		-|	Axioms of ()
		-|	Internal of string source
	{
	public:
			void toString(CPPMLPrettyPrintStream& stream) const;
	}
and
	/******
	CodeLocation represent a specific location in some CodeDefinitionPoint.
	start is an inclusive character range, stop is an exclusive character range
	*****/
	CodeLocation = CodeDefinitionPoint defPoint, SimpleParseRange range
	{
	public:
			void toString(CPPMLPrettyPrintStream& stream) const;
	}
and
	ForaStackTrace = StackTrace of ImmutableTreeVector<CodeLocationId> elements
	{
	public:
			const ImmutableTreeVector<CodeLocationId>& elements(void) const;
			ForaStackTrace operator+(const ForaStackTrace& in) const;
			void toString(CPPMLPrettyPrintStream& stream) const;
	}
	;

template<>
class CPPMLPrettyPrint<CodeLocation> {
public:
		static void prettyPrint(CPPMLPrettyPrintStream& stream, const CodeLocation& toPr)
			{
			toPr.toString(stream);
			}
};

template<>
class CPPMLPrettyPrint<CodeDefinitionPoint> {
public:
		static void prettyPrint(CPPMLPrettyPrintStream& stream, const CodeDefinitionPoint& toPr)
			{
			toPr.toString(stream);
			}
};

template<>
class CPPMLPrettyPrint<ForaStackTrace> {
public:
		static void prettyPrint(CPPMLPrettyPrintStream& stream, const ForaStackTrace& toPr)
			{
			toPr.toString(stream);
			}
};

class GlobalCodeLocationRegistry {
public:
		static void setCodeLocation(const CodeLocationId& id, const CodeLocation& codeLocation);

		static Nullable<CodeLocation> getCodeLocation(const CodeLocationId& id);

private:
		static ThreadSafeMap<CodeLocationId, CodeLocation>&		codeLocationsMap();
};

macro_defineCppmlComparisonOperators(CodeLocation)

