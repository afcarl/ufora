/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/
#ifndef TimeDuration_hpp
#define TimeDuration_hpp

#include "../../core/Common.hppml"
#include "../../core/AtomicOps.hpp"
#include <string>
#include <stdint.h>
#include "../../core/math/Hash.hpp"
#include "../../core/cppml/CPPMLEquality.hppml"
#include "../../core/cppml/CPPMLPrettyPrinter.hppml"
#include "../../core/serialization/Serialization.hpp"
#include "String.hppml"

// HACK: This prevents a strange compile error on Mac with Boost 1.53. Maybe some define or header
// is missing regarding date/time locales?
#include "../../core/Platform.hpp"
#ifdef BSA_PLATFORM_APPLE
#define BOOST_DATE_TIME_NO_LOCALE
#endif

static_assert(sizeof(long) == sizeof(int64_t), "need 64 bit longs");
static_assert(sizeof(int) == sizeof(int32_t), "need 32 bit ints");

#include <boost/date_time/posix_time/posix_time.hpp>
#include <ctime>

typedef boost::posix_time::time_duration time_duration_impl_type;

class TimeDuration {
public:
    TimeDuration();
    TimeDuration(
        int64_t hours,
        int64_t minutes,
        int64_t second,
        int64_t fractional_seconds
        );
    TimeDuration(
        int64_t hours,
        int64_t minutes,
        int64_t seconds,
        int64_t milliseconds,
        int64_t microseconds
        );
    TimeDuration(const time_duration_impl_type& in);

    std::string stdString() const;

    int64_t hours() const;
    int64_t minutes() const;
    int64_t seconds() const;
    int64_t totalSeconds() const;
    int64_t totalMilliseconds() const;
    int64_t totalMicroseconds() const;
    int64_t totalNanoSeconds() const;
    int64_t fractionalSeconds() const;
    bool isNegative() const;
    TimeDuration invertSign() const;

    char cmp(const TimeDuration& in) const;

    TimeDuration operator+(const TimeDuration& in) const;
    TimeDuration operator-(const TimeDuration& in) const;
    TimeDuration operator/(int64_t in) const;
    TimeDuration operator*(int64_t in) const;

    static TimeDuration fromString(const std::string& inStr);
    static TimeDuration fromString(const String& inStr);
    static TimeDuration fromHours(int64_t inHours);
    static TimeDuration fromMinutes(int64_t inMinutes);
    static TimeDuration fromSeconds(int64_t inSeconds);
    static TimeDuration fromMicroseconds(int64_t inMicroseconds);
    static TimeDuration fromMilliseconds(int64_t inMilliseconds);

    hash_type hash() const;

    time_duration_impl_type posix_time() const;

private:
    time_duration_impl_type mTimeDurationRecord;
};

template<>
class CPPMLEquality<TimeDuration, void> {
public:
    static char cmp(const TimeDuration& lhs, const TimeDuration& rhs)
        {
        return lhs.cmp(rhs);
        }
};

template<>
class CPPMLPrettyPrint<TimeDuration> {
public:
    static void prettyPrint(CPPMLPrettyPrintStream& stream, const TimeDuration& toPr)
        {
        stream << "FORATimeDuration(" + toPr.stdString() + ")";
        }
};

template<class T, class T2>
class CPPMLTransform;

template<>
class CPPMLTransform<TimeDuration, void> {
public:
    template<class F>
    static Nullable<TimeDuration> apply(const TimeDuration& in, const F& f)
        {
        return null();
        }
};

template<class T, class T2>
class CPPMLTransformWithIndex;

template<>
class CPPMLTransformWithIndex<TimeDuration, void> {
public:
    template<class F, class F2>
    static Nullable<TimeDuration> apply(const TimeDuration& in, const F& f, const F2& f2)
        {
        return null();
        }
};

template<class T, class T2>
class CPPMLVisit;

template<>
class CPPMLVisit<TimeDuration, void> {
public:
    template<class F>
    static void apply(const TimeDuration& in, F& f)
        {
        }
};

template<class T, class T2>
class CPPMLVisitWithIndex;

template<>
class CPPMLVisitWithIndex<TimeDuration, void> {
public:
    template<class F, class indices_type>
    static void apply(const TimeDuration& in, const F& f, const indices_type& inIndices)
        {
        }
};

macro_defineCppmlComparisonOperators(TimeDuration)
macro_defineMemberHashFunction(TimeDuration)

#endif

