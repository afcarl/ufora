/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/
#include "String.hppml"
#include "../../core/UnitTest.hpp"
#include "../../core/Clock.hpp"
#include "../Core/ExecutionContextMemoryPool.hppml"
#include "../VectorDataManager/VectorDataMemoryManager.hppml"

BOOST_AUTO_TEST_CASE( test_FORA_String )
{
	MemoryPool* freePool = MemoryPool::getFreeStorePool();

	std::string asdf("asdf");

	String		asdfString(asdf, freePool);

	BOOST_CHECK(asdfString.isEmptyOrPackedIntoPointer());

	String		asdfString_2;
	asdfString_2 = asdfString;

	String		bsdfString("bsdf", freePool);

	String		csdfString("bsdf", 3, freePool);

	BOOST_CHECK_EQUAL(  csdfString.size(), 3);
	BOOST_CHECK_EQUAL(  csdfString.stdString(), std::string("bsd"));

	BOOST_CHECK_EQUAL(  asdf.size(), asdfString.size() );
	BOOST_CHECK_EQUAL(  asdf, asdfString.stdString() );
	BOOST_CHECK_EQUAL(  asdf, std::string(asdfString.c_str()) );

	BOOST_CHECK(  asdfString.hash() == asdfString_2.hash() );
	BOOST_CHECK(  asdfString.hash() != bsdfString.hash() );

	ExecutionContextMemoryPool pool(
		nullptr,
		PolymorphicSharedPtr<VectorDataMemoryManager>(
			new VectorDataMemoryManager(
				CallbackScheduler::singletonForTesting(),
				CallbackScheduler::singletonForTesting()
				)
			)
		);

		{
		std::string aLargeStdString("asdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdf");

		String aLargeString(aLargeStdString, freePool);

		//verify that each of the 3 constructors work correctly in the VectorPage
		String aStringInPool(aLargeString, &pool);

		String aStringInPool2("asdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdf", &pool);

		String aStringInPool3("asdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdf", 48, &pool);

		BOOST_CHECK(aStringInPool.hash() == aLargeString.hash());

		BOOST_CHECK(aStringInPool.getOwningMemoryPool() == &pool);
		BOOST_CHECK(aStringInPool2.getOwningMemoryPool() == &pool);
		BOOST_CHECK(aStringInPool3.getOwningMemoryPool() == &pool);
		}
}

