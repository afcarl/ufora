/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/
#ifndef Dictionary_hpp
#define Dictionary_hpp

//#include "../core/Common.hppml"
#include <string>
#include <stdint.h>
#include "../../core/math/Hash.hpp"
#include "../../core/cppml/CPPMLEquality.hppml"
#include "../../core/cppml/CPPMLPrettyPrinter.hppml"
#include "../../core/serialization/Serialization.hpp"

#include "../../core/containers/ImmutableTreeMap.hppml"
#include "../Core/CSTValue.hppml"
#include "../Core/ImplVal.hppml"

//TODO BUG brax: make dictionaries not use CSTValue for keys, since CSTValue objects
//are implicitly not tracked!

/*******************

Dictionaries are maps from keys to values, first implemented as a wrapper
for an ImmutableTreeMap.

In this first implementation, keys are CSTValue and value are ImplValContainers.

Other places where Dictionary implementation appears:

	Type: FORA/Type.hppml
	Serialization: FORA/SerializedObjectFlattener.cppml
	Memory layout: FORA/Axioms/LayoutType.*
	Low-level axioms:
		FORA/Axioms/Dictionary.cppml
		FORA/Axioms/AxiomFunctions.cppml
	High-level axioms: FORA/Axioms/axioms.fora
	Judgments: FORA/JudgmentOnValue.*
	Judgment Parser: FORA/JudgmentParser.cppml
	Parsing: FORA/Language/ParserExpressions.*
	C++ tests: FORA/Dictionary.test.cppml
	FORA tests: FORA/test/dictionary.fora
	Symbol representation (in the language): FORA/Symbol.*

*******************/

typedef ImmutableTreeMap<CSTValue, ImplValContainer> dict_map_type;
typedef pair<CSTValue, ImplValContainer> dict_pair_type;

class Dictionary {
public:
	Dictionary()
		{
		}
	Dictionary(const Dictionary& dict) : mTreeMap(dict.mTreeMap)
		{
		}
	~Dictionary()
		{
		}
	Dictionary(const dict_map_type& map) : mTreeMap(map)
		{
		}

	// Required by the interface ------------------------------------------

	char cmp(const Dictionary& in) const;

	std::string	stdString(void) const;

	// Return the number of pairs contained by the Dictionary.
	size_t size(void) const;

	hash_type hash(void) const;

	// Return an empty Dictionary.
	static Dictionary empty(void);

	// Dictionary-specific implementation ---------------------------------

	const dict_map_type& getMap(void) const;

	// Add two dictionaries together to get a new one.
	Dictionary addDictionary(const Dictionary& other) const;

	// Add a single key-value pair to the dictionary and return a new dict.
	Dictionary addPair(const dict_pair_type& p) const;

	// Like addPair but adds the key and value explicitly without the pair<> container.
	Dictionary addKeyValue(const CSTValue& key, const ImplValContainer& value) const;

	// Return a list of the keys.
	ImmutableTreeVector<CSTValue> keys(void) const;

	// Return a list of the values.
	ImmutableTreeVector<ImplValContainer> values(void) const;

	// Dictionaries are indexed, return the pair at a particular index.
	dict_pair_type pairAtPosition(uint64_t ix);

	// Return whether the Dictionary contains a key.
	bool hasKey(const CSTValue& key) const;

	// Return a new Dictionary without the key/value represented by the given key.
	Dictionary removePairByKey(const CSTValue& key) const;

	// Return the value mapped to the given key. d[key] = value
	Nullable<const ImplValContainer&> operator[](const CSTValue& key) const;

private:
	dict_map_type mTreeMap;
};

template<>
class CPPMLEquality<Dictionary, void> {
public:
		static char cmp(const Dictionary& lhs, const Dictionary& rhs)
			{
			return lhs.cmp(rhs);
			}
};


template<>
class CPPMLPrettyPrint<Dictionary> {
public:
		static void prettyPrint(CPPMLPrettyPrintStream& stream, const Dictionary& toPr)
			{
			stream << toPr.stdString();
			}
};

template<class storage_type>
class Serializer<Dictionary, storage_type> {
public:
		static void serialize(storage_type& s, const Dictionary& d)
			{
			s.serialize(d.getMap());
			}
};
template<class storage_type>
class Deserializer<Dictionary, storage_type> {
public:
		static void deserialize(storage_type& s, Dictionary& d)
			{
			dict_map_type tree;
			s.deserialize(tree);
			d = Dictionary(tree);
			}
};


// Copied from String.hppml.

template<class T, class T2>
class CPPMLTransform;

template<>
class CPPMLTransform<Dictionary, void> {
public:
		template<class F>
		static Nullable<Dictionary> apply(const Dictionary& in, const F& f)
			{
			return null();
			}
};

template<class T, class T2>
class CPPMLTransformWithIndex;

template<>
class CPPMLTransformWithIndex<Dictionary, void> {
public:
		template<class F, class F2>
		static Nullable<Dictionary> apply(const Dictionary& in, const F& f, const F2& f2)
			{
			return null();
			}
};

template<class T, class T2>
class CPPMLVisit;

template<>
class CPPMLVisit<Dictionary, void> {
public:
		template<class F>
		static void apply(const Dictionary& in, F& f)
			{
			}
};

template<class T, class T2>
class CPPMLVisitWithIndex;

template<>
class CPPMLVisitWithIndex<Dictionary, void> {
public:
		template<class F, class indices_type>
		static void apply(const Dictionary& in, const F& f, const indices_type& inIndices)
			{
			}
};



macro_defineCppmlComparisonOperators(Dictionary)
macro_defineMemberHashFunction(Dictionary)

#endif
