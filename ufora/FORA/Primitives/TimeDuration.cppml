/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/
#include "TimeDuration.hppml"


TimeDuration::TimeDuration()
    : mTimeDurationRecord(0, 0, 0, 0)
    {}

TimeDuration::TimeDuration(
            int64_t hours,
            int64_t minutes,
            int64_t seconds,
            int64_t fractional_seconds
            )
    :    mTimeDurationRecord(hours, minutes, seconds, fractional_seconds)
    {}

TimeDuration::TimeDuration(
    int64_t hours,
    int64_t minutes,
    int64_t seconds,
    int64_t milliseconds,
    int64_t microseconds
    )
    :   mTimeDurationRecord(
            boost::posix_time::hours(hours) +
            boost::posix_time::minutes(minutes) +
            boost::posix_time::seconds(seconds) +
            boost::posix_time::milliseconds(milliseconds) +
            boost::posix_time::microseconds(microseconds)
            )
    {}

TimeDuration::TimeDuration(const time_duration_impl_type& in)
    : mTimeDurationRecord(in)
    {}

time_duration_impl_type TimeDuration::posix_time() const
    {
    return mTimeDurationRecord;
    }

std::string TimeDuration::stdString() const
    {
    return to_simple_string(mTimeDurationRecord);
    }


int64_t TimeDuration::hours() const
    {
    return mTimeDurationRecord.hours();
    }

int64_t TimeDuration::minutes() const
    {
    return mTimeDurationRecord.minutes();
    }

int64_t TimeDuration::seconds() const
    {
    return mTimeDurationRecord.seconds();
    }

int64_t TimeDuration::totalSeconds() const
    {
    // don't be fooled by the boost documentation!!
    // http://www.boost.org/doc/libs/1_57_0/doc/html/date_time/posix_time.html#date_time.posix_time.time_duration
    // boost::date_time::ptime offers a total_seconds member, but it returns
    // a "sec_type", which i believe is an int32_t, while total_milliseconds
    // and total_microseconds return a "tick_type", which i believe is an
    // int64_t (with our current configuration). Maybe these are configurable
    // somehow? Who knows ... let's keep the types the same (without overflows)
    // by the following:

    return totalMilliseconds() / 1000;
    }

int64_t TimeDuration::totalMilliseconds() const
    {
    return mTimeDurationRecord.total_milliseconds();
    }

int64_t TimeDuration::totalMicroseconds() const
    {
    return mTimeDurationRecord.total_microseconds();
    }

int64_t TimeDuration::totalNanoSeconds() const
    {
    return mTimeDurationRecord.total_nanoseconds();
    }

int64_t TimeDuration::fractionalSeconds() const
    {
    return mTimeDurationRecord.fractional_seconds();
    }

bool TimeDuration::isNegative() const
    {
    return mTimeDurationRecord.is_negative();
    }

TimeDuration TimeDuration::invertSign() const
    {
    return TimeDuration(mTimeDurationRecord.invert_sign());
    }

char TimeDuration::cmp(const TimeDuration& in) const
    {
    if (mTimeDurationRecord < in.mTimeDurationRecord)
        return -1;
    if (mTimeDurationRecord > in.mTimeDurationRecord)
        return 1;
    return 0;
    }


TimeDuration TimeDuration::operator+(const TimeDuration& in) const
    {
    return TimeDuration(mTimeDurationRecord + in.mTimeDurationRecord);
    }

TimeDuration TimeDuration::operator-(const TimeDuration& in) const
    {
    return TimeDuration(mTimeDurationRecord - in.mTimeDurationRecord);
    }

TimeDuration TimeDuration::operator/(int64_t in) const
    {
    return TimeDuration(mTimeDurationRecord / in);
    }

TimeDuration TimeDuration::operator*(int64_t in) const
    {
    return TimeDuration(mTimeDurationRecord * in);
    }

TimeDuration TimeDuration::fromString(const std::string& inStr)
    {
    return TimeDuration(boost::posix_time::duration_from_string(inStr));
    }

TimeDuration TimeDuration::fromString(const String& inStr)
    {
    return TimeDuration::fromString(inStr.stdString());
    }

TimeDuration TimeDuration::fromHours(int64_t inHours)
    {
    return TimeDuration(boost::posix_time::hours(inHours));
    }

TimeDuration TimeDuration::fromMinutes(int64_t inMinutes)
    {
    return TimeDuration(boost::posix_time::minutes(inMinutes));
    }

TimeDuration TimeDuration::fromSeconds(int64_t inSeconds)
    {
    // don't be fooled by the boost documentation!!
    // http://www.boost.org/doc/libs/1_57_0/doc/html/date_time/posix_time.html#date_time.posix_time.time_duration
    // apparently boost::posix_time::seconds(inSeconds) can result in overflow,
    // for example boost::posix_time::seconds(2366841600)

    return fromMilliseconds(inSeconds * 1000);
    }

TimeDuration TimeDuration::fromMilliseconds(int64_t inMilliseconds)
    {
    return TimeDuration(boost::posix_time::milliseconds(inMilliseconds));
    }

TimeDuration TimeDuration::fromMicroseconds(int64_t inMicroseconds)
    {
    return TimeDuration(boost::posix_time::microseconds(inMicroseconds));
    }


hash_type TimeDuration::hash() const
    {
    Hash tr(0);
    ((time_duration_impl_type*)&tr)[0] = mTimeDurationRecord;
    return tr;
    }




