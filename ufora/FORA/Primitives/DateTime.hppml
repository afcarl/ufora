/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/
#ifndef DateTime_hpp
#define DateTime_hpp

#include "../../core/Common.hppml"
#include "../../core/AtomicOps.hpp"
#include <string>
#include <stdint.h>
#include "../../core/math/Hash.hpp"
#include "../../core/cppml/CPPMLEquality.hppml"
#include "../../core/cppml/CPPMLPrettyPrinter.hppml"
#include "../../core/serialization/Serialization.hpp"

#include "TimeDuration.hppml"
#include <boost/date_time/posix_time/posix_time.hpp>

static_assert(sizeof(long) == sizeof(int64_t), "need 64 bit longs");
static_assert(sizeof(int) == sizeof(int32_t), "need 32 bit ints");
static_assert(sizeof(unsigned short) == sizeof(uint16_t),
    "need 16 bit unsigned shorts");

typedef boost::posix_time::ptime date_time_impl_type;
typedef boost::gregorian::date date_impl_type;

class String;

class DateTime {
public:
    DateTime();
    // For the next three constructors, the arguments are with respect to the
    // Gregorian calendar.
    DateTime(unsigned short inYear, unsigned short inMonth, unsigned short inDay);
    DateTime(
        unsigned short inYear,
        unsigned short inMonth,
        unsigned short inDay,
        const TimeDuration& td
        );
    DateTime(
        unsigned short inYear,
        unsigned short inMonth,
        unsigned short inDay,
        int64_t inHour,
        int64_t inMin,
        int64_t inSec,
        int64_t inMicrosec,
        int64_t inMillisec
        );
    DateTime(const date_time_impl_type& in);
    DateTime(const date_impl_type& in);
    DateTime(std::time_t time);

    std::string stdString() const;
    String isoString() const;
    String isoExtendedString() const;
    String strformat(const std::string& format) const;

    date_impl_type gregorian_date() const;

    bool isNotADateTime() const;

    char cmp(const DateTime& in) const;

    TimeDuration timeOfDay() const;
    int64_t secondsSinceEpoch() const;
    TimeDuration timeDurationSinceEpoch() const;
    unsigned short year() const;
    unsigned short month() const;
    unsigned short day() const;

    static Nullable<DateTime> strptime(
        const String& format, const String& dateTimeStr
        );

    static DateTime fromTime_t(std::time_t time);
    static DateTime epoch();
    static DateTime bySecSinceEpoch(int64_t sec);
    static DateTime timeFromString(const std::string& in);
    static DateTime timeFromString(const String& in);
    static DateTime fromISOString(const std::string& in);
    static DateTime fromISOString(const String& in);
    static DateTime fromDateString(const std::string& in);
    static DateTime fromDateString(const String& in);
    static DateTime fromUndelimitedDateString(const std::string& in);
    static DateTime fromUndelimitedDateString(const String& in);

    TimeDuration operator-(const DateTime& in) const;
    DateTime operator-(const TimeDuration& in) const;
    DateTime operator+(const TimeDuration& in) const;

    hash_type hash() const;

    date_time_impl_type posix_time() const;

private:
    date_time_impl_type mDateTimeRecord;
};

template<>
class CPPMLEquality<DateTime, void> {
public:
    static char cmp(const DateTime& lhs, const DateTime& rhs)
        {
        return lhs.cmp(rhs);
        }
};

template<>
class CPPMLPrettyPrint<DateTime> {
public:
    static void prettyPrint(CPPMLPrettyPrintStream& stream, const DateTime& toPr)
        {
        stream << "FORADateTime(" + toPr.stdString() + ")";
        }
};

template<class T, class T2>
class CPPMLTransform;

template<>
class CPPMLTransform<DateTime, void> {
public:
    template<class F>
    static Nullable<DateTime> apply(const DateTime& in, const F& f)
        {
        return null();
        }
};

template<class T, class T2>
class CPPMLTransformWithIndex;

template<>
class CPPMLTransformWithIndex<DateTime, void> {
public:
    template<class F, class F2>
    static Nullable<DateTime> apply(const DateTime& in, const F& f, const F2& f2)
        {
        return null();
        }
};

template<class T, class T2>
class CPPMLVisit;

template<>
class CPPMLVisit<DateTime, void> {
public:
    template<class F>
    static void apply(const DateTime& in, F& f)
        {
        }
};

template<class T, class T2>
class CPPMLVisitWithIndex;

template<>
class CPPMLVisitWithIndex<DateTime, void> {
public:
    template<class F, class indices_type>
    static void apply(const DateTime& in, const F& f, const indices_type& inIndices)
        {
        }
};

macro_defineCppmlComparisonOperators(DateTime)
macro_defineMemberHashFunction(DateTime)

#endif

