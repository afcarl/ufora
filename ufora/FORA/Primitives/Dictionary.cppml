/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/
#include "Dictionary.hppml"

std::string	Dictionary::stdString(void) const
	{
	return prettyPrintString(mTreeMap);
	}

size_t Dictionary::size(void) const
	{
	return mTreeMap.size();
	}

hash_type Dictionary::hash(void) const
	{
	return mTreeMap.hash();
	}

char Dictionary::cmp(const Dictionary& in) const
	{
	return hash().cmp(in.hash());
	}

const dict_map_type& Dictionary::getMap(void) const
	{
	return mTreeMap;
	}

Dictionary Dictionary::empty(void)
	{
	return Dictionary();
	}

Dictionary Dictionary::addDictionary(const Dictionary& other) const
	{
	return Dictionary(mTreeMap + other.mTreeMap);
	}

Dictionary Dictionary::addPair(const dict_pair_type& p) const
	{
	return Dictionary(mTreeMap + p);
	}

Dictionary Dictionary::addKeyValue(const CSTValue& key, const ImplValContainer& value) const
	{
	return Dictionary(mTreeMap + key + value);
	}

ImmutableTreeVector<CSTValue> Dictionary::keys(void) const
	{
	return mTreeMap.keys();
	}

ImmutableTreeVector<ImplValContainer> Dictionary::values(void) const
	{
	return mTreeMap.values();
	}

dict_pair_type Dictionary::pairAtPosition(uint64_t ix)
	{
	return mTreeMap.pairAtPosition(ix);
	}

bool Dictionary::hasKey(const CSTValue& key) const
	{
	return mTreeMap.contains(key);
	}

Dictionary Dictionary::removePairByKey(const CSTValue& key) const
	{
	return Dictionary(mTreeMap - key);
	}

Nullable<const ImplValContainer&> Dictionary::operator[](const CSTValue& key) const
	{
	return mTreeMap[key];
	}

