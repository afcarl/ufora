/***************************************************************************
    Copyright 2015 Ufora Inc.

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
****************************************************************************/

#include "SimpleForwardReasoner.hppml"
#include "../Judgment/ControlFlowGraphJudgmentUtil.hppml"
#include "../../core/Logging.hpp"
#include "../../core/Clock.hpp"
#include "../../core/cppml/CPPMLVisit.hppml"
#include "../../core/StringUtil.hpp"
#include "../Axioms/Axiom.hppml"
#include "../Axioms/AxiomGroup.hppml"
#include "../TypedFora/JitCompiler/TypedJumpTarget.hppml"
#include "../TypedFora/Transforms/CleanupAndSimplify.hppml"
#include "../RuntimeConfig.hppml"
#include "../../core/Memory.hpp"
#include "ReasonerCodegen.hppml"
#include "ReasonerTypedCfgBuilder.hppml"
#include <boost/filesystem.hpp>
#include <fstream>

namespace Fora {

SimpleForwardReasoner::SimpleForwardReasoner(
			PolymorphicSharedPtr<TypedFora::Compiler> inCompiler,
			PolymorphicSharedPtr<TypedCfgStats> inTypedCfgStats,
			PolymorphicSharedPtr<Axioms> inAxioms
			) :
		mAxioms(inAxioms),
		mCompiler(inCompiler),
		mTypedCfgStats(inTypedCfgStats)
	{
	}

PolymorphicSharedPtr<Axioms> SimpleForwardReasoner::getAxioms() const
	{
	return mAxioms;
	}

PolymorphicSharedPtr<TypedCfgStats> SimpleForwardReasoner::getStats() const
	{
	return mTypedCfgStats;
	}

TypedFora::Compiler& SimpleForwardReasoner::getCompiler() const
	{
	return *mCompiler;
	}

PolymorphicSharedPtr<ReasonerFrame> SimpleForwardReasoner::getFrameFor(const ReasonerFrameId& frameId)
	{
	boost::recursive_mutex::scoped_lock lock(mMutex);

	return getFrameFor_(frameId);
	}

PolymorphicSharedPtr<ReasonerFrame> SimpleForwardReasoner::getFrameFor_(const ReasonerFrameId& frameId)
	{
	auto& result = mFrames[frameId];

	if (!result)
		{
		LOG_DEBUG << "Created a new frame at " << frameId;

		result.reset(new ReasonerFrame(frameId, *this));
		mFramesByGraph.set(result, frameId.entrypoint().graph());

		mGraph.markDirty(frameId);

		if (mFrames.size() % 100 == 0)
			LOG_DEBUG << "Total of " << mFrames.size() << " frames: "
				<< frameId;
		}

	return result;
	}

void SimpleForwardReasoner::computeReachableUnaddedFrames_(ReasonerFrameId frameId, std::set<ReasonerFrameId>& outFrames, const std::set<ReasonerFrameId>& toLookIn)
	{
	if (toLookIn.find(frameId) != toLookIn.end() ||
			outFrames.find(frameId) != outFrames.end())
		return;

	auto frame = getFrameFor_(frameId);

	outFrames.insert(frameId);

	for (auto& frameIdAndNodes: frame->getCalledFrames().getValueToKeys())
		if (!getFrameFor_(frameIdAndNodes.first)->exitsAreConstants())
			computeReachableUnaddedFrames_(frameIdAndNodes.first, outFrames, toLookIn);
	}

void SimpleForwardReasoner::relaxUnnecessaryFrames_(const std::set<ReasonerFrameId>& frames)
	{
	long relaxed = 0;
	for (auto frameId: frames)
		{
		auto frame = getFrameFor_(frameId);

		if (!frame->relaxesTo() && !frame->recalculationDisabled())
			for (auto otherFrame: mFramesByGraph.getKeys(frame->graph()))
				if (otherFrame->coversEntry(*frame) &&
						(frames.find(otherFrame->frameId()) != frames.end() ||
							mFramesAddedToGraph.find(otherFrame->frameId()) != mFramesAddedToGraph.end()))
					{
					relaxed++;
					frame->markRelaxesTo(otherFrame->frameId());
					frame->recalculate();

					std::set<ReasonerFrameId> newCalled;
					newCalled.insert(otherFrame->frameId());
					mGraph.setEdges(frameId, newCalled);

					break;
					}
		}
	if (relaxed)
		LOG_DEBUG_SCOPED("ReasonerPerf") << "Relaxed " << relaxed << " of " << frames.size();
	}

void SimpleForwardReasoner::addToGraph(PolymorphicSharedPtr<ReasonerFrame> frame)
	{
	boost::recursive_mutex::scoped_lock lock(mMutex);

	addToGraph_(frame);
	}

void SimpleForwardReasoner::addToGraph_(PolymorphicSharedPtr<ReasonerFrame> frame)
	{
	lassert(!mGraph.popDirtyReachableFrame());

	if (mFramesAddedToGraph.find(frame->frameId()) != mFramesAddedToGraph.end())
		return;

	double t0 = curClock();

	//first, compute the reachable frames
	std::set<ReasonerFrameId> reachableUnaddedFrames;

	lassert(mGraph.isRoot(frame->frameId()));

	computeReachableUnaddedFrames_(frame->frameId(), reachableUnaddedFrames, mFramesAddedToGraph);

	for (auto f: reachableUnaddedFrames)
		{
		lassert_dump(
			mGraph.isReachable(f),
			std::string(mGraph.computeIsReachable(f) ? "computed true" : "computed false")
			);
		}

	for (auto f: reachableUnaddedFrames)
		lassert(!mGraph.isDirty(f))

	//relax any frame that's unnecessary
	relaxUnnecessaryFrames_(reachableUnaddedFrames);

	//create the call graph on these frames
	TwoWaySetMap<ReasonerFrameId, ReasonerFrameId> frameGraph;
	for (auto frame: reachableUnaddedFrames)
		for (auto called: mGraph.getCalledFrames(frame))
			{
			ReasonerFrameId actuallyCalled = called;
			while (getFrameFor_(actuallyCalled)->relaxesTo())
				actuallyCalled = *getFrameFor_(actuallyCalled)->relaxesTo();
			frameGraph.insert(frame, actuallyCalled);
			}

	std::set<ReasonerFrameId> discard;
	std::set<ReasonerFrameId> coveringFrames;
	minimumGraphCovering(frameGraph, coveringFrames, discard, true);

	for (auto frame: coveringFrames)
		getFrameFor_(frame)->markIsRecursive();

	ImmutableTreeMap<TypedCfgGraphIdentity, TypedCfgGraph> graphs;

	addAllDependentNodesToGraph_(frame->frameId(), graphs);

	mTypedCfgStats->addGraphSet(graphs);
	}

void SimpleForwardReasoner::addAllDependentNodesToGraph_(
			ReasonerFrameId frameId, 
			ImmutableTreeMap<TypedCfgGraphIdentity, TypedCfgGraph>& graphs
			)
	{
	if (mFramesAddedToGraph.find(frameId) != mFramesAddedToGraph.end())
		return;

	lassert(!mGraph.isDirty(frameId));

	mFramesAddedToGraph.insert(frameId);

	auto frame = getFrameFor_(frameId);	

	if (!frame->relaxesTo() && frame->getNodeRoots().valueCount() > 0)
		{
		graphs = graphs + 
			ReasonerTypedCfgBuilderForFrame::entrypointNameFor(frameId) + 
			ReasonerTypedCfgBuilderForFrame(
				mAxioms,
				mCompiler,
				frame,
				this->polymorphicSharedPtrFromThis()
				).getGraph()
			;
		}

	for (auto& frameIdAndNodes: frame->getCalledFrames().getValueToKeys())
		if (!getFrameFor_(frameIdAndNodes.first)->exitsAreConstants())
			addAllDependentNodesToGraph_(frameIdAndNodes.first, graphs);
	}

void SimpleForwardReasoner::compile(PolymorphicSharedPtr<ReasonerFrame> frame)
	{
	boost::recursive_mutex::scoped_lock lock(mMutex);

	compile_(frame);
	}

void SimpleForwardReasoner::compile_(PolymorphicSharedPtr<ReasonerFrame> frame)
	{
	lassert(!mGraph.popDirtyReachableFrame());

	if (mFramesAddedToGraph.find(frame->frameId()) != mFramesAddedToGraph.end())
		return;

	double t0 = curClock();

	//first, compute the reachable frames
	std::set<ReasonerFrameId> reachableUnaddedFrames;

	lassert(mGraph.isRoot(frame->frameId()));

	computeReachableUnaddedFrames_(frame->frameId(), reachableUnaddedFrames, mFramesAddedToCompiler);

	for (auto f: reachableUnaddedFrames)
		{
		lassert_dump(
			mGraph.isReachable(f),
			std::string(mGraph.computeIsReachable(f) ? "computed true" : "computed false")
			);
		}

	for (auto f: reachableUnaddedFrames)
		lassert(!mGraph.isDirty(f))

	//relax any frame that's unnecessary
	relaxUnnecessaryFrames_(reachableUnaddedFrames);

	//create the call graph on these frames
	TwoWaySetMap<ReasonerFrameId, ReasonerFrameId> frameGraph;
	for (auto frame: reachableUnaddedFrames)
		for (auto called: mGraph.getCalledFrames(frame))
			{
			ReasonerFrameId actuallyCalled = called;
			while (getFrameFor_(actuallyCalled)->relaxesTo())
				actuallyCalled = *getFrameFor_(actuallyCalled)->relaxesTo();
			frameGraph.insert(frame, actuallyCalled);
			}

	std::set<ReasonerFrameId> discard;
	std::set<ReasonerFrameId> coveringFrames;
	minimumGraphCovering(frameGraph, coveringFrames, discard, true);

	for (auto frame: coveringFrames)
		getFrameFor_(frame)->markIsRecursive();

	addAllDependentNodesToCompiler_(frame->frameId());

	long relaxed = 0;
	for (auto frameId: reachableUnaddedFrames)
		if (getFrameFor_(frameId)->relaxesTo())
			relaxed++;

	double t1 = curClock();
	}

@type CallVisitor = int outgoingCalls {
public:
	template<class T>
	void processDown(const T& in)
		{
		}

	template<class T>
	void processUp(const T& in)
		{
		}

	void processDown(const TypedFora::CallTarget_ExternalSubgraphType&)
		{
		outgoingCalls()++;
		}
};

void SimpleForwardReasoner::addAllDependentNodesToCompiler_(ReasonerFrameId frameId)
	{
	if (mFramesAddedToCompiler.find(frameId) != mFramesAddedToCompiler.end())
		return;

	lassert(!mGraph.isDirty(frameId));

	mFramesAddedToCompiler.insert(frameId);

	auto frame = getFrameFor_(frameId);

	if (!frame->relaxesTo() && frame->getNodeRoots().valueCount() > 0)
		{
		ReasonerCodegenForFrame codegen(
			mAxioms,
			mCompiler,
			frame,
			this->polymorphicSharedPtrFromThis()
			);

		TypedFora::Callable callable = TypedFora::Transforms::cleanupAndSimplify(codegen.getCallable());

		std::string linkername = ReasonerCodegenForFrame::entrypointNameFor(frameId);

		CallVisitor vis;

		::visit(callable, vis);

		std::set<ControlFlowGraphLabel> callLabels;
		for (auto nodeAndFrame: frame->getCalledFrames().getKeyToValue())
			callLabels.insert(nodeAndFrame.first.label());

		LOG_DEBUG << "Defining " << linkername << " with " << vis.outgoingCalls() << " outgoing over "
			<< frame->getNodeRootToNodeMap().keyCount() << " roots. "
			<< frame->getNodeRootToNodeMap().valueCount() / float(frame->getNodeRootToNodeMap().keyCount()) << " nodes/root"
			<< " and "
			<< frame->getNodeRootToNodeMap().valueCount() / float(frame->getNodeRoots().keyCount()) << " nodes/label"
			<< ". outmulti="
			<< (frame->getCalledFrames().keyCount() + 0.001) / (callLabels.size() + 0.001)
			;

		mCompiler->define(linkername, callable);
		}

	for (auto& frameIdAndNodes: frame->getCalledFrames().getValueToKeys())
		if (!getFrameFor_(frameIdAndNodes.first)->exitsAreConstants())
			addAllDependentNodesToCompiler_(frameIdAndNodes.first);
	}

PolymorphicSharedPtr<ReasonerFrame> SimpleForwardReasoner::reasonAboutApply(JudgmentOnValueTuple applyJovt)
	{
	boost::recursive_mutex::scoped_lock lock(mMutex);

	auto axiom = mAxioms->axiom(*mCompiler, applyJovt);

	lassert(axiom);
	lassert(!applyJovt.hasExtras());

	//start by expanding the apply tuple
	@match Axiom(*axiom)
		-| Expands(jovt, generator) ->> {
			auto cfg = generator(ApplySignature(applyJovt.jovs().size()));

			ReasonerEntrypoint entrypoint = ReasonerEntrypoint(cfg, ControlFlowGraphLabel(), applyJovt.jovs());

			ReasonerFrameId frameId(entrypoint, ReasonerRecursionFrame::None());

			mGraph.addRoot(frameId);

			auto frame = getFrameFor_(frameId);

			double t0 = curClock();

			updateAll_();

			if (curClock() - t0 > .1)
				LOG_DEBUG_SCOPED("ReasonerPerf") << "Completed reasoning after " << curClock() - t0;

			return frame;
			}
	}

PolymorphicSharedPtr<ReasonerFrame> SimpleForwardReasoner::reason(ReasonerEntrypoint entrypoint)
	{
	boost::recursive_mutex::scoped_lock lock(mMutex);

	double t0 = curClock();

	ReasonerFrameId frameId(entrypoint, ReasonerRecursionFrame::None());

	mGraph.addRoot(frameId);

	auto frame = getFrameFor_(frameId);

	updateAll_();

	if (curClock() - t0 > .1)
		LOG_DEBUG_SCOPED("ReasonerPerf") << "Completed reasoning after " << curClock() - t0;

	return frame;
	}

Nullable<pair<TypedFora::BlockID, std::string> > SimpleForwardReasoner::compileEntrypointForApply(JudgmentOnValueTuple applyTuple)
	{
	PolymorphicSharedPtr<ReasonerFrame> frame = reasonAboutApply(applyTuple);
	if (!frame)
		return null();

	compile(frame);

	ReasonerCodegenForFrame codegen(
					mAxioms,
					mCompiler,
					frame,
					this->polymorphicSharedPtrFromThis()
					);

	if (frame->getNodeRoots().getValues(ControlFlowGraphLabel()).size() != 1)
		return null();

	if (frame->getNodeRoots().getValues(ControlFlowGraphLabel()).size() != 1)
		return null();

	auto blockID = codegen.blockForNodeRoot(*frame->getNodeRoots().getValues(ControlFlowGraphLabel()).begin());

	return null() << make_pair(blockID, ReasonerCodegenForFrame::entrypointNameFor(frame->frameId()));
	}


TypedCfgStats::NodePtr SimpleForwardReasoner::reasonAndProduceNodePtr(ReasonerEntrypoint entrypoint)
	{
	boost::recursive_mutex::scoped_lock lock(mMutex);

	lassert(!entrypoint.applyJOA());

	for (auto frame: mFramesByGraph.getKeys(entrypoint.graph()))
		if (mFramesAddedToGraph.find(frame->frameId()) != mFramesAddedToGraph.end())
			if (auto node = frame->getAnyTypedNodeCovering(entrypoint.label(), entrypoint.jovs()))
				return mTypedCfgStats->getNode(
					ReasonerTypedCfgBuilderForFrame::entrypointNameFor(frame->frameId()),
					ReasonerTypedCfgBuilderForFrame::nodeIdFor(*node)
					);

	double t0 = curClock();

	ReasonerFrameId frameId(entrypoint, ReasonerRecursionFrame::None());

	mGraph.addRoot(frameId);

	auto frame = getFrameFor_(frameId);

	updateAll_();

	addToGraph_(frame);

	if (curClock() - t0 > .1)
		LOG_DEBUG_SCOPED("ReasonerPerf") << "Completed reasoning after " << curClock() - t0;

	for (auto frame: mFramesByGraph.getKeys(entrypoint.graph()))
		if (mFramesAddedToGraph.find(frame->frameId()) != mFramesAddedToGraph.end())
			if (auto node = frame->getAnyTypedNodeCovering(entrypoint.label(), entrypoint.jovs()))
				return mTypedCfgStats->getNode(
					ReasonerTypedCfgBuilderForFrame::entrypointNameFor(frame->frameId()),
					ReasonerTypedCfgBuilderForFrame::nodeIdFor(*node)
					);
	
	lassert_dump(false, "after adding this to the compiler, we expected to actually find an entrypoint.");
	}

void SimpleForwardReasoner::updateAll_()
	{
	while (auto nEntrypoint = mGraph.popDirtyReachableFrame())
		updateFrame_(*nEntrypoint);
	}

bool SimpleForwardReasoner::updateFrame_(const ReasonerFrameId& frameId)
	{
	LOG_DEBUG << "Update " << frameId;

	bool changed = false;

	auto frame = getFrameFor_(frameId);

	JudgmentOnAction priorJOA = frame->exits();

	MapWithIndex<ReasonerFrame::Node, ReasonerFrameId> calledFrames = frame->getCalledFrames();

	frame->recalculate();

	MapWithIndex<ReasonerFrame::Node, ReasonerFrameId> newCalledFrames = frame->getCalledFrames();

	std::set<ReasonerFrameId> newCalled;

	for (auto& frameAndLabels: newCalledFrames.getValueToKeys())
		newCalled.insert(frameAndLabels.first);

	if (mGraph.setEdges(frameId, newCalled))
		{
		LOG_DEBUG << "\tEdges changed";
		changed = true;
		}

	if (priorJOA != frame->exits())
		{
		LOG_DEBUG << "\tJOA changed from " << priorJOA << " to " << frame->exits();
		changed = true;
		for (auto callingFrame: mGraph.getCallers(frameId))
			{
			LOG_DEBUG << "\t\tMarking dirty: " << callingFrame;

			getFrameFor_(callingFrame)->entrypointExitsChanged(frameId);
			mGraph.markDirty(callingFrame);
			}
		}

	for (auto& nodeAndFrame: newCalledFrames.getKeyToValue())
		if (!calledFrames.hasKey(nodeAndFrame.first) ||
					calledFrames.getValue(nodeAndFrame.first) != nodeAndFrame.second)
			{
			ImmutableTreeVector<CfgTransition> recursion =
				checkIfTransitionIsRecursive_(
					frameId,
					nodeAndFrame.first.label(),
					nodeAndFrame.second
					);

			if (recursion.size())
				createRecursion_(recursion);
			}

	return changed;
	}

void SimpleForwardReasoner::createRecursion_(const ImmutableTreeVector<CfgTransition>& transitions)
	{
	ReasonerFrameId rootFrame = transitions[0].sourceGraph();

	ReasonerRecursionFrame recursion = rootFrame.recursion();

	ImmutableTreeVector<pair<ControlFlowGraphLabel, ControlFlowGraph> > path;
	for (long k = 0; k < transitions.size();k++)
		path = path +
			make_pair(
				transitions[k].sourceLabel(),
				transitions[k].destGraph().entrypoint().graph()
				);

	ReasonerRecursionFrame newRecursion;

	@match ReasonerRecursionFrame(recursion)
		-| None() ->> {
			newRecursion = ReasonerRecursionFrame::Recursive(
				rootFrame.entrypoint(),
				emptyTreeVec() + path,
				emptyTreeVec()
				);
			}
		-| Recursive(existingEntrypoint, paths, _) ->> {
			lassert_dump(
				existingEntrypoint == rootFrame.entrypoint(),
				prettyPrintString(transitions)
				);
			newRecursion = ReasonerRecursionFrame::Recursive(
				rootFrame.entrypoint(),
				paths + path,
				emptyTreeVec()
				);
			}

	ReasonerFrameId recursedFrame(rootFrame.entrypoint(), newRecursion);

	LOG_DEBUG << "Recursing\n\t" << rootFrame << "\nto\n\t" << recursedFrame
		<< "\nbecause of \n" << transitions;

	getFrameFor_(rootFrame)->markRelaxesTo(recursedFrame);
	markFrameDirty_(rootFrame);
	}

ImmutableTreeVector<CfgTransition> SimpleForwardReasoner::checkIfTransitionIsRecursive_(
									const ReasonerFrameId& caller,
									ControlFlowGraphLabel callLocation,
									const ReasonerFrameId& callee
									)
	{
	//in looking for recursion, we're trying to find paths that look like
	//
	//	F1 -> F2-> ... -> FN -> F1 -> F2 -> ... -> FN -> F1 -> F2
	//
	//where each "F" consists of a (CFG, label) pair
	//
	//we we are being handed F1->F2, at which point we will point the tail F2
	//into the head F2
	//
	//because there might be many pathways by which we can move up, we
	//choose the shortest path to get to each upstream caller

	std::set<ReasonerFrameId> seen;

	auto isRecursiveSequence = [&](ImmutableTreeVector<CfgTransition> transitions) -> ImmutableTreeVector<CfgTransition> {
		//we have two ways of seeing recursions.

		//the specific way is to see if we exactly loop to a node we cover trivially
		//e.g. we have
		//T1 -> T2 -> ... TN
		//where T1.source and TN.dest are mergeable without producing unknown judgments
		if (transitions[0].sourceGraph().entrypoint().graph() ==
				transitions.back().destGraph().entrypoint().graph() &&
				transitions[0].sourceGraph() != transitions.back().destGraph())
			{
			ReasonerFrame::NodeRoot root1(ControlFlowGraphLabel(), transitions[0].sourceGraph().entrypoint().jovs());
			ReasonerFrame::NodeRoot root2(ControlFlowGraphLabel(), transitions.back().destGraph().entrypoint().jovs());
			if (root1.rootUnion(root2).hasNoUnknowns())
				return transitions;
			}


		//The general way, is we want to see a sequence of transitions
		//TN-> T1 -> T2 -> ... TN -> T1 -> T2 ... -> TN
		//where the sequence is repeated exactly in the interior
		if (transitions.size() % 2 != 1 || transitions.size() < 3)
			return emptyTreeVec();

		long supposedLength = transitions.size() / 2;

		for (long k = 0; k + supposedLength < transitions.size(); k++)
			if (!transitions[k].matches(transitions[k + supposedLength]))
				return emptyTreeVec();

		auto res = transitions.slice(0, supposedLength);

		lassert(res.size() && res[0].sourceGraph().entrypoint().graph()
				== res.back().destGraph().entrypoint().graph());

		return res;
		};

	boost::function3<ImmutableTreeVector<CfgTransition>, ReasonerFrameId, ReasonerFrameId, ImmutableTreeVector<CfgTransition> > checkUpstreamNode =
		[&](ReasonerFrameId caller, ReasonerFrameId callee, ImmutableTreeVector<CfgTransition> pathToGetHere) -> ImmutableTreeVector<CfgTransition> {
			if (getFrameFor_(caller)->relaxesTo())
				return emptyTreeVec();
			//roots that are not function entrypoints are not candidates for recursion
			if (caller.entrypoint().label() != ControlFlowGraphLabel())
				return emptyTreeVec();

			//any paths that are already in the middle of a cycle are not candidates
			if (caller.recursion().isWithinRecursion() || callee.recursion().isWithinRecursion())
				return emptyTreeVec();

			if (seen.find(caller) != seen.end())
				//we've already been here before
				return emptyTreeVec();
			seen.insert(caller);

			//now check if we have recursion
			auto recursion = isRecursiveSequence(pathToGetHere);
			if (recursion.size())
				{
				if (SHOULD_LOG_DEBUG())
					{
					LOGGER_DEBUG_T log = LOGGER_DEBUG;

					log << "Found recursive path:\n";
					for (long k = 0; k < pathToGetHere.size();k++)
						log << "\t" << pathToGetHere[k].sourceGraph().entrypoint().graph().graphName() << "@" << pathToGetHere[k].sourceLabel() << "\n";

					log << "\t" << pathToGetHere.back().destGraph().entrypoint().graph().graphName() << "\n";
					}

				return recursion;
				}

			for (auto upstreamFrame: mGraph.getCallers(caller))
				for (const auto& node: getFrameFor_(upstreamFrame)->getCalledFrames().getKeys(caller))
					{
					auto recursesTo = checkUpstreamNode(
							upstreamFrame,
							caller,
							CfgTransition(
								upstreamFrame,
								caller,
								node.label()
								) + pathToGetHere
							);
					if (recursesTo.size())
						return recursesTo;
					}

			return emptyTreeVec();
			};

	return checkUpstreamNode(caller, callee,
		emptyTreeVec() +
			CfgTransition(
				caller,
				callee,
				callLocation
				)
		);
	}

int64_t SimpleForwardReasoner::totalFrameCount() const
	{
	boost::recursive_mutex::scoped_lock lock(mMutex);

	return mFrames.size();
	}

void SimpleForwardReasoner::markFrameDirty_(const ReasonerFrameId& caller)
	{
	mGraph.markDirty(caller);
	}

int64_t SimpleForwardReasoner::maxOutputJudgments() const
	{
	return 10;
	}

}

