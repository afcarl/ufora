/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/

#pragma once

#include "ReasonerEntrypoint.hppml"
#include "ReasonerRecursionFrame.hppml"

namespace Fora {

@type ReasonerFrameId =
	ReasonerEntrypoint entrypoint,
	ReasonerRecursionFrame recursion,
   hash_type hash
{
public:
   ReasonerFrameId(const ReasonerEntrypoint& inEntrypoint, const ReasonerRecursionFrame& inRecursion)
      {
      entrypoint() = inEntrypoint;
      recursion() = inRecursion;
		hash() = entrypoint().hash() + recursion().hash();
		}
};

macro_defineCppmlComparisonOperators(ReasonerFrameId);

}


template<>
class CPPMLPrettyPrint<Fora::ReasonerFrameId> {
public:
      static void prettyPrint(
                     CPPMLPrettyPrintStream& stream,
                     const Fora::ReasonerFrameId& toPr
                     )
         {
         stream << "Frame(" << toPr.hash() << "," << toPr.entrypoint();
         if (toPr.recursion().isRecursive())
            stream << "," << toPr.recursion();
         stream << ")";
         }
};

template<>
class CPPMLEquality<Fora::ReasonerFrameId, void> {
public:
      static char cmp(const Fora::ReasonerFrameId& lhs, const Fora::ReasonerFrameId& rhs)
         {
         return cppmlCmp(lhs.hash(), rhs.hash());
         }
};
