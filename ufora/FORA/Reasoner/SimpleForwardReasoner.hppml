/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/

#pragma once

#include "../../core/PolymorphicSharedPtr.hpp"
#include "../Axioms/Axioms.hppml"
#include "../ControlFlowGraph/ControlFlowGraph.hppml"
#include "../../core/containers/MapWithIndex.hpp"
#include "../Judgment/JudgmentOnAction.hppml"
#include "ReasonerEntrypoint.hppml"
#include "ReasonerFrame.hppml"
#include "ReasonerEntrypointGraph.hppml"
#include "../TypedCfg/TypedCfgStats.hppml"

namespace TypedFora {

class Compiler;

}

namespace Fora {

@type CfgTransition =
	ReasonerFrameId sourceGraph,
	ReasonerFrameId destGraph,
	ControlFlowGraphLabel sourceLabel
{
public:
	bool matches(const CfgTransition& other) const
		{
		return sourceGraph().entrypoint().graph() == other.sourceGraph().entrypoint().graph() &&
			destGraph().entrypoint().graph() == other.destGraph().entrypoint().graph() &&
			sourceLabel() == other.sourceLabel()
			;
		}
};


class SimpleForwardReasoner : public PolymorphicSharedPtrBase<SimpleForwardReasoner> {
public:
	SimpleForwardReasoner(
			PolymorphicSharedPtr<TypedFora::Compiler> inCompiler,
			PolymorphicSharedPtr<TypedCfgStats> inStats,
			PolymorphicSharedPtr<Axioms> inAxioms
			);

	PolymorphicSharedPtr<Axioms> getAxioms() const;

	PolymorphicSharedPtr<TypedCfgStats> getStats() const;

	TypedFora::Compiler& getCompiler() const;

	int64_t totalFrameCount() const;

	int64_t maxOutputJudgments() const;

	void addToGraph(PolymorphicSharedPtr<ReasonerFrame> frame);

	void compile(PolymorphicSharedPtr<ReasonerFrame> frame);

	TypedCfgStats::NodePtr reasonAndProduceNodePtr(ReasonerEntrypoint entrypoint);

	PolymorphicSharedPtr<ReasonerFrame> reasonAboutApply(JudgmentOnValueTuple applyTuple);

	PolymorphicSharedPtr<ReasonerFrame> reason(ReasonerEntrypoint entrypoint);

	PolymorphicSharedPtr<ReasonerFrame> getFrameFor(const ReasonerFrameId& entrypoint);

	Nullable<pair<TypedFora::BlockID, std::string> > compileEntrypointForApply(JudgmentOnValueTuple applyTuple);

private:
	PolymorphicSharedPtr<ReasonerFrame> getFrameFor_(const ReasonerFrameId& entrypoint);

	friend class ReasonerFrame;

	void markFrameDirty_(const ReasonerFrameId& caller);

	void addToGraph_(PolymorphicSharedPtr<ReasonerFrame> frame);

	void compile_(PolymorphicSharedPtr<ReasonerFrame> frame);

	mutable boost::recursive_mutex mMutex;

	void computeReachableUnaddedFrames_(ReasonerFrameId frameId, std::set<ReasonerFrameId>& outFrames, const std::set<ReasonerFrameId>& toLookIn);

	void relaxUnnecessaryFrames_(const std::set<ReasonerFrameId>& frames);

	ImmutableTreeVector<CfgTransition> checkIfTransitionIsRecursive_(
											const ReasonerFrameId& caller,
											ControlFlowGraphLabel callLocation,
											const ReasonerFrameId& callee
											);

	void createRecursion_(const ImmutableTreeVector<CfgTransition>& transitions);

	void addAllDependentNodesToGraph_(
				ReasonerFrameId frame, 
				ImmutableTreeMap<TypedCfgGraphIdentity, TypedCfgGraph>& graphs
				);

	void addAllDependentNodesToCompiler_(
				ReasonerFrameId frame
				);

	void updateAll_();

	bool updateFrame_(const ReasonerFrameId& entrypoint);

	map<ReasonerFrameId, PolymorphicSharedPtr<ReasonerFrame> > mFrames;

	MapWithIndex<PolymorphicSharedPtr<ReasonerFrame>, ControlFlowGraph> mFramesByGraph;

	MapWithIndex<PolymorphicSharedPtr<ReasonerFrame>, ControlFlowGraph> mRecursiveFramesByGraph;

	std::set<ReasonerFrameId> mFramesAddedToGraph;

	std::set<ReasonerFrameId> mFramesAddedToCompiler;

	ReasonerEntrypointGraph mGraph;

	PolymorphicSharedPtr<TypedFora::Compiler> mCompiler;

	PolymorphicSharedPtr<TypedCfgStats> mTypedCfgStats;

	PolymorphicSharedPtr<Axioms> mAxioms;
};

}
