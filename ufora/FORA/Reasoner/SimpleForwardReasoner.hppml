/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/

#pragma once

#include "../../core/PolymorphicSharedPtr.hpp"
#include "../Axioms/Axioms.hppml"
#include "../ControlFlowGraph/ControlFlowGraph.hppml"
#include "../../core/containers/MapWithIndex.hpp"
#include "../Judgment/JudgmentOnAction.hppml"
#include "ReasonerEntrypoint.hppml"
#include "ReasonerFrame.hppml"
#include "ReasonerEntrypointGraph.hppml"
#include "../Interpreter/InstructionGraph.hppml"
#include "../Compiler/CompilerInstructionGraph/InstructionGraph.hppml"

namespace TypedFora {

class Compiler;

}

namespace Fora {

@type CfgTransition =
	ReasonerFrameId sourceGraph,
	ReasonerFrameId destGraph,
	ControlFlowGraphLabel sourceLabel
{
public:
	bool matches(const CfgTransition& other) const
		{
		return sourceGraph().entrypoint().graph() == other.sourceGraph().entrypoint().graph() &&
			destGraph().entrypoint().graph() == other.destGraph().entrypoint().graph() &&
			sourceLabel() == other.sourceLabel()
			;
		}
};


class SimpleForwardReasoner : public PolymorphicSharedPtrBase<SimpleForwardReasoner> {
public:
	SimpleForwardReasoner(
			PolymorphicSharedPtr<TypedFora::Compiler> inCompiler,
			PolymorphicSharedPtr<Fora::Interpreter::InstructionGraph> inInstructionGraph,
			PolymorphicSharedPtr<Axioms> inAxioms
			);

	PolymorphicSharedPtr<Fora::Interpreter::InstructionGraph> getInterpreterInstructionGraph() const
		{
		return mInterpreterInstructionGraph;
		}

	PolymorphicSharedPtr<ReasonerFrame> reasonAboutApply(JudgmentOnValueTuple applyTuple);

	PolymorphicSharedPtr<ReasonerFrame> reason(ReasonerEntrypoint entrypoint);

	PolymorphicSharedPtr<ReasonerFrame> reasonForTimePeriod(ReasonerEntrypoint entrypoint, double period);

	void compile(PolymorphicSharedPtr<ReasonerFrame> frame);

	Nullable<pair<TypedFora::BlockID, std::string> > compileEntrypointForApply(JudgmentOnValueTuple applyTuple);

	PolymorphicSharedPtr<ReasonerFrame> getFrameFor(const ReasonerFrameId& entrypoint);

	void markFrameDirty(const ReasonerFrameId& caller);

	PolymorphicSharedPtr<Axioms> getAxioms() const;

	TypedFora::Compiler& getCompiler();

	int64_t totalFrameCount() const;

	int64_t maxOutputJudgments() const;

	PolymorphicSharedPtr<ReasonerFrame> hasEntrypointAlreadyBeenCovered(ReasonerEntrypoint entrypoint);

private:
	void computeReachableUnaddedFrames(ReasonerFrameId frameId, std::set<ReasonerFrameId>& outFrames);

	void relaxUnnecessaryFrames(const std::set<ReasonerFrameId>& frames);

	ImmutableTreeVector<CfgTransition> checkIfTransitionIsRecursive(
											const ReasonerFrameId& caller,
											ControlFlowGraphLabel callLocation,
											const ReasonerFrameId& callee
											);

	void createRecursion(const ImmutableTreeVector<CfgTransition>& transitions);

	void addAllDependentNodesToGraph(ReasonerFrameId frame);

	void updateAll();

	bool updateAllForPeriod(double elapsed);

	bool updateFrame(const ReasonerFrameId& entrypoint);

	std::set<ReasonerFrameId> mUnlinkedEntrypoints;

	map<ReasonerFrameId, PolymorphicSharedPtr<ReasonerFrame> > mFrames;

	MapWithIndex<PolymorphicSharedPtr<ReasonerFrame>, ControlFlowGraph> mFramesByGraph;

	MapWithIndex<PolymorphicSharedPtr<ReasonerFrame>, ControlFlowGraph> mRecursiveFramesByGraph;

	std::set<ReasonerFrameId> mFramesAddedToGraph;

	ReasonerEntrypointGraph mGraph;

	PolymorphicSharedPtr<TypedFora::Compiler> mCompiler;

	PolymorphicSharedPtr<Axioms> mAxioms;

	PolymorphicSharedPtr<Fora::Interpreter::InstructionGraph> mInterpreterInstructionGraph;
};

}
