/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/

#pragma once

#include "../ControlFlowGraph/ControlFlowGraph.hppml"
#include "../ControlFlowGraph/ControlFlowGraphUtil.hppml"
#include "../../core/containers/TwoWaySetMap.hpp"
#include "../../core/Logging.hpp"

namespace Fora {

class ControlFlowGraphLoopPoints {
public:
	ControlFlowGraphLoopPoints(ControlFlowGraph graph) :
			mGraph(graph)
		{
		TwoWaySetMap<Nullable<std::string>, Nullable<std::string> > edges;

		for (auto labelAndBody: graph.subnodes())
			for (auto nextNode: ControlFlowGraphUtil::naturalNextNodes(labelAndBody.second))
				edges.insert(null() << labelAndBody.first, nextNode);

		for (auto nextNode: ControlFlowGraphUtil::naturalNextNodes(graph.entryNode()))
			edges.insert(Nullable<std::string>(), nextNode);

		//now compute order of reachability
		std::set<Nullable<std::string> > seen;
		std::deque<Nullable<std::string> > stack;

		std::vector<Nullable<std::string> > seenInOrder;

		stack.push_back(Nullable<std::string>());

		while (stack.size())
			{
			Nullable<std::string> label = stack.front();
			stack.pop_front();

			if (seen.find(label) == seen.end())
				{
				seen.insert(label);
				seenInOrder.push_back(label);

				for (auto nextNode: ControlFlowGraphUtil::naturalNextNodes(graph[label]))
					stack.push_back(nextNode);
				}
			}

		//reverse
		for (long k = 0; k < seenInOrder.size() - 1 - k; k++)
			std::swap(seenInOrder[k], seenInOrder[seenInOrder.size() - 1 - k]);

		std::set<Nullable<std::string> > discard;

		minimumGraphCovering(edges, mCoveringNodes, discard, true, seenInOrder);
		}

	bool shouldCollapseJudgmentsAtNode(Nullable<std::string> label) const
		{
		return mCoveringNodes.find(label) != mCoveringNodes.end();
		}

private:
	ControlFlowGraph mGraph;

	std::set<Nullable<std::string> > mCoveringNodes;
};

}
