/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/

#include "ReasonerEntrypointGraph.hppml"
#include "../../core/Logging.hpp"
#include "../../core/Clock.hpp"

namespace Fora {

void ReasonerEntrypointGraph::addRoot(ReasonerFrameId root)
	{
	ensure(root);

	if (mRootFrames.find(root) != mRootFrames.end())
		return;

	mRootFrames.insert(root);

	markReachable(root);
	}

void ReasonerEntrypointGraph::removeRoot(ReasonerFrameId root)
	{
	mRootFrames.erase(root);
	}

bool ReasonerEntrypointGraph::isRoot(ReasonerFrameId root) const
	{
	return mReachableFrames.find(root) != mReachableFrames.end();
	}

void ReasonerEntrypointGraph::markDirty(ReasonerFrameId entrypoint)
	{
	if (isDirty(entrypoint))
		return;

	mDirtyFrames.insert(entrypoint);

	if (isReachable(entrypoint))
		mDirtyReachableFrames.insert(entrypoint);
	}

void ReasonerEntrypointGraph::markReachable(ReasonerFrameId entrypoint)
	{
	if (isReachable(entrypoint))
		return;

	mReachableFrames.insert(entrypoint);

	if (isDirty(entrypoint))
		mDirtyReachableFrames.insert(entrypoint);

	for (auto child: getCalledFrames(entrypoint))
		markReachable(child);
	}

Nullable<ReasonerFrameId> ReasonerEntrypointGraph::popDirtyReachableFrame()
	{
	while (true)
		{
		if (mDirtyReachableFrames.size() == 0)
			return null();

		ReasonerFrameId entrypoint = *mDirtyReachableFrames.begin();

		//check that it's reachable (since we don't update the reachability graph when we drop nodes)
		//if it still is, we can return it.
		verifyIsReachable(entrypoint);

		if (isReachable(entrypoint))
			{
			mDirtyReachableFrames.erase(entrypoint);
			mDirtyFrames.erase(entrypoint);
			return null() << entrypoint;
			}
		}
	}

bool ReasonerEntrypointGraph::computeIsReachable(ReasonerFrameId entrypoint) const
	{
	std::set<ReasonerFrameId> seen;
	std::vector<ReasonerFrameId> stack;

	stack.push_back(entrypoint);

	//walk up the transitive closure of the parents marked reachable.
	//if we find a root, we're set.
	while (stack.size())
		{
		ReasonerFrameId e = stack.back();
		stack.pop_back();

		if (seen.find(e) == seen.end() && isReachable(e))
			{
			seen.insert(e);

			if (mRootFrames.find(e) != mRootFrames.end())
				return true;

			for (auto parent: getCallers(e))
				stack.push_back(parent);
			}
		}

	return false;
	}

void ReasonerEntrypointGraph::verifyIsReachable(ReasonerFrameId entrypoint)
	{
	std::set<ReasonerFrameId> seen;
	std::vector<ReasonerFrameId> stack;

	stack.push_back(entrypoint);

	//walk up the transitive closure of the parents marked reachable.
	//if we find a root, we're set.
	while (stack.size())
		{
		ReasonerFrameId e = stack.back();
		stack.pop_back();

		if (seen.find(e) == seen.end() && isReachable(e))
			{
			seen.insert(e);

			if (mRootFrames.find(e) != mRootFrames.end())
				return;

			for (auto parent: getCallers(e))
				stack.push_back(parent);
			}
		}

	//otherwise, all of these nodes should be marked unreachable
	for (auto n: seen)
		{
		mDirtyReachableFrames.erase(n);
		mReachableFrames.erase(n);
		}
	}

bool ReasonerEntrypointGraph::setEdges(ReasonerFrameId frame, const std::set<ReasonerFrameId>& called)
	{
	std::set<ReasonerFrameId> toAdd, toDrop;

	for (auto e: called)
		if (!mFrameGraph.contains(frame, e))
			toAdd.insert(e);
	for (auto e: getCalledFrames(frame))
		if (called.find(e) == called.end())
			toDrop.insert(e);

	for (auto e: toAdd)
		{
		mFrameGraph.insert(frame, e);

		if (isReachable(frame) && !isReachable(e))
			markReachable(e);
		}

	for (auto e: toDrop)
		mFrameGraph.drop(frame, e);

	return toDrop.size() || toAdd.size();
	}

const std::set<ReasonerFrameId>& ReasonerEntrypointGraph::getCalledFrames(ReasonerFrameId frame) const
	{
	return mFrameGraph.getValues(frame);
	}

const std::set<ReasonerFrameId>& ReasonerEntrypointGraph::getCallers(ReasonerFrameId frame) const
	{
	return mFrameGraph.getKeys(frame);
	}

void ReasonerEntrypointGraph::ensure(ReasonerFrameId entrypoint)
	{
	if (mFrames.find(entrypoint) != mFrames.end())
		return;

	mFrames.insert(entrypoint);
	mDirtyFrames.insert(entrypoint);
	}

bool ReasonerEntrypointGraph::isDirty(ReasonerFrameId frame) const
	{
	return mDirtyFrames.find(frame) != mDirtyFrames.end();
	}

bool ReasonerEntrypointGraph::isReachable(ReasonerFrameId frame) const
	{
	return mReachableFrames.find(frame) != mReachableFrames.end();
	}

}