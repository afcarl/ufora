/***************************************************************************
    Copyright 2015 Ufora Inc.

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
****************************************************************************/
#pragma once

#include "../../core/PolymorphicSharedPtr.hpp"
#include "../TypedFora/TypedFora.hppml"
#include "ReasonerFrame.hppml"
#include "SimpleForwardReasoner.hppml"
#include "ReasonerFrameId.hppml"

class Axioms;
namespace TypedFora {
class Compiler;
};

namespace Fora {

class ReasonerCodegenForContinuation;


class TypedForaExpressionBuilder {
public:
    TypedForaExpressionBuilder()
        {

        }

    TypedFora::Expression push(TypedFora::Expression expr)
        {
        if (expr.isConstant() || expr.isVar())
            return expr;

        letBindings.push_back(
            make_pair(TypedFora::Variable::Temp(*expr.type()), expr)
            );

        return letBindings.back().first.expr();
        }

    TypedFora::Expression wrap(TypedFora::Expression expr)
        {
        for (long k = ((long)letBindings.size())-1; k >= 0; k--)
            expr = TypedFora::Expression::Let(letBindings[k].first, letBindings[k].second, expr);
        return expr;
        }

private:
    std::vector<pair<TypedFora::Variable, TypedFora::Expression> > letBindings;
};


@type ReasonerCodegenForFrame =
	PolymorphicSharedPtr<Axioms> axioms,
	PolymorphicSharedPtr<TypedFora::Compiler> typedForaCompiler,
	PolymorphicSharedPtr<ReasonerFrame> reasonerFrame,
	PolymorphicSharedPtr<SimpleForwardReasoner> reasoner
{
public:
	TypedFora::Callable getCallable();

	static std::string entrypointNameFor(ReasonerFrameId frameId);

	TypedFora::BlockID blockForNodeRoot(ReasonerFrame::NodeRoot root) const;

	TypedFora::BlockID blockForNode(ReasonerFrame::Node root) const;

	TypedFora::BlockID blockForNodeRoot(ReasonerFrameId frameId, ReasonerFrame::NodeRoot root) const;

	TypedFora::BlockID blockForNode(ReasonerFrameId frameId, ReasonerFrame::Node root) const;

	bool nodeGeneratesBlock(ReasonerFrame::Node node) const;

	TypedFora::CallTarget callTargetForSubframe(
			ReasonerFrameId frameId,
			ReasonerFrame::NodeRoot rootInFrame
			) const;
};

@type ReasonerCodegenForNode =
		ReasonerCodegenForFrame forFrame,
		ReasonerFrame::Node node,
		ImmutableTreeVector<TypedFora::Expression> args
{
public:
	ReasonerCodegenForContinuation forContinuation(ControlFlowContinuation continuation) const;

	ReasonerCodegenForContinuation forContinuation(ControlFlowContinuation continuation, Nullable<TypedFora::Expression> result) const;

	ReasonerCodegenForContinuation forContinuation(ControlFlowContinuation continuation, TypedFora::Expression result) const;

	ImmutableTreeVector<TypedFora::Expression> packApplyArgumentsForNativeAxiom(
						                            ImmutableTreeVector<ControlFlowApplyArg> args,
						                            long individualArgs,
						                            bool finalTupleHasExtras,
                            						TypedForaExpressionBuilder& builder
						                            );

	ImmutableTreeVector<TypedFora::MetadataStackFrame>
        	metadataForNodeWithResult(TypedFora::Variable resultVariable, int indexInContinuation);

	ImmutableTreeVector<TypedFora::MetadataStackFrame> metadataForNode();

	ImmutableTreeVector<TypedFora::MetadataVariable> metadataVariables();

	TypedFora::Expression getExpressionFor(ControlFlowApplyArg arg);

	TypedFora::Expression getExpressionFor(ControlFlowArg arg);

	TypedFora::Expression getExpression();

	TypedFora::Expression getExpressionInner();
};

@type ReasonerCodegenForContinuation =
		ReasonerCodegenForNode forNode,
		ControlFlowContinuation continuation,
		Nullable<TypedFora::Expression> resultExpr
{
public:
	TypedFora::Expression getExpression();

	TypedFora::Expression getExpressionFor(ControlFlowContinuationArg arg);

	TypedFora::MakeTupleArgument getMakeTupleArgExpressionFor(ControlFlowContinuationTupleArg arg);
};

}

