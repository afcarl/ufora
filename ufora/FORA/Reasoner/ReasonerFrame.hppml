/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/

#pragma once

#include "../../core/PolymorphicSharedPtr.hpp"
#include "../../core/containers/MapWithIndex.hpp"
#include "ControlFlowGraphLoopPoints.hppml"
#include "../Judgment/JudgmentOnAction.hppml"
#include "ReasonerFrameId.hppml"

namespace TypedFora {

class Compiler;

}

namespace Fora {

class SimpleForwardReasoner;

class ReasonerFrame : public PolymorphicSharedPtrBase<ReasonerFrame> {
public:
	@type NodeRoot = ControlFlowGraphLabel label, ImmutableTreeVector<JOV> jovs {
	public:
		bool covers(const NodeRoot& root) const;

		NodeRoot rootUnion(const NodeRoot& root) const;

		bool isTyped() const;

		bool hasNoUnknowns() const;
	};

	@type Node = NodeRoot root, ControlFlowGraphLabel label, ImmutableTreeVector<JOV> jovs {
	public:
		Node(const NodeRoot& inRoot)
			{
			root() = inRoot;
			label() = inRoot.label();
			jovs() = inRoot.jovs();
			}

		bool hasNoUnknowns() const;
		
		bool isTyped() const;
	};

	ReasonerFrame(const ReasonerFrameId& frameId, SimpleForwardReasoner& inReasoner);

	hash_type hash() const;

	const ReasonerEntrypoint& entrypoint() const;

	const ReasonerFrameId& frameId() const;

	Nullable<NodeRoot> entrypointRootFor(ImmutableTreeVector<JOV> jovs);

	Nullable<Node> getAnyTypedNodeCovering(ControlFlowGraphLabel label, ImmutableTreeVector<JOV> jovs);

	void recalculate();

	JudgmentOnAction exits() const;

	ControlFlowGraph graph() const;

	ImmutableTreeVector<JOV> entryJOVs() const;

	const TwoWaySetMap<ControlFlowGraphLabel, NodeRoot>& getNodeRoots() const
		{
		return mNodeRoots;
		}

	Nullable<NodeRoot> bestRootFor(ControlFlowGraphLabel label, ImmutableTreeVector<JOV> jovs);

	bool isMergeNode(ControlFlowGraphLabel label) const;

	const MapWithIndex<Node, ReasonerFrameId>& getCalledFrames() const;

	const MapWithIndex<pair<Node, ReasonerFrameId>, JudgmentOnAction>& getCalledFrameJOAs() const { return mCalledFrameJOAs; };

	//indicate that the exits from an entrypoint in 'getCalledFrames' has changed its exit types
	void entrypointExitsChanged(const ReasonerFrameId& downstreamEntrypoint);

	void incomingRecursion(ImmutableTreeVector<JOV> entryJOVs);

	const std::set<Node>& unknownApplyNodes() const;

	const TwoWaySetMap<NodeRoot, Node>& getNodeRootToNodeMap() const;

	void dirtyAll();

	//indicate that we should completely replace this frame with 'parentFrame'
	void markRelaxesTo(ReasonerFrameId parentFrame);

	Nullable<ReasonerFrameId> relaxesTo() const;

	bool exitsAreConstants() const;

	bool coversEntry(const ReasonerFrame& other) const;

	int64_t indexOfNodeRoot(const NodeRoot& root);

	int64_t indexOfNode(const Node& root);

	void clearUnnecessaryStructuresAfterCompilation();

	bool recalculationDisabled() const;

	void markIsRecursive();

	bool isMarkedRecursive() const;

	const TwoWaySetMap<Node, Node>& getNodeFlows() const;

private:
	//determine what actual entrypoint we want to use when 'caller' is calling 'callee' at 'callLocation'
	//if there is no recursion, then this is 'callee', but it might be a parent frame in 'caller'.
	static ReasonerFrameId getFrameTransition(
							const ReasonerFrameId& caller,
							Nullable<std::string> callLocation,
							const ReasonerEntrypoint& callee
							);

	void addRoot(NodeRoot root);

	void insertRoot(NodeRoot root);

	void propagateNode(const Node& label, long pathLength = 0);

	void recalculateNodeRoot(NodeRoot root);

	void clearNodeRoot(NodeRoot root);

	void followContinuation(
			const Node& label,
			const ControlFlowContinuation& continuation,
			const ImmutableTreeVector<JOV>& jovs,
			const ControlFlowNodeBody& nodeBody,
			const Nullable<JOV>& result,
			long pathLength
			);

	bool mHasExceptions;

	bool mDisableRecalculation;

	bool mIsMarkedRecursive;

	SimpleForwardReasoner& mReasoner;

	ReasonerFrameId mFrameId;

	TwoWaySetMap<ControlFlowGraphLabel, NodeRoot> mNodeRoots;

	TwoWaySetMap<NodeRoot, Node> mNodes;

	std::set<Node> mNodesWithNonconstAxioms;

	TwoWaySetMap<Node, Node> mNodeFlows;

	std::set<Node> mNodesExiting;

	map<NodeRoot, int64_t> mNodeRootIndices;

	map<Node, int64_t> mNodeIndices;

	MapWithIndex<Node, ReasonerFrameId> mCalledFrames;

	MapWithIndex<pair<Node, ReasonerFrameId>, JudgmentOnAction> mCalledFrameJOAs;

	std::set<NodeRoot> mDirtyNodes;

	std::set<NodeRoot> mPendingRecursiveNodes;

	std::set<Node> mUnknownApplyNodes;

	std::map<NodeRoot, JudgmentOnAction> mNodeExits;

	ControlFlowGraphLoopPoints mGraphLoopPoints;

	JudgmentOnAction mExits;

	hash_type mHash;

	Nullable<ReasonerFrameId> mRelaxesTo;
};

macro_defineCppmlComparisonOperators(ReasonerFrame::Node);
macro_defineCppmlComparisonOperators(ReasonerFrame::NodeRoot);

}

