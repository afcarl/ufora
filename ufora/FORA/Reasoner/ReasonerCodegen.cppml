/***************************************************************************
    Copyright 2015 Ufora Inc.

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
****************************************************************************/

#include "ReasonerCodegen.hppml"
#include "../TypedFora/TypedForaUtil.hppml"
#include "../TypedFora/Transforms/RenameVariables.hppml"
#include "../TypedFora/Transforms/PushDownMetadata.hppml"
#include "../TypedFora/TypedForaUtil.hppml"
#include "../TypedFora/ABI/NativeLayoutType.hppml"
#include "../TypedFora/ABI/TestTypedForaValuesIdentical.hppml"
#include "../Axioms/Axiom.hppml"
#include "../Judgment/ControlFlowGraphJudgmentUtil.hppml"

namespace Fora {

TypedFora::Callable ReasonerCodegenForFrame::getCallable()
    {
    TypedFora::ResultSignature signature =
        TypedFora::resultSignatureFromJoa(
            reasonerFrame()->exits(),
            TypedFora::RefcountStyle::Pooled()
            );

    ImmutableTreeMap<TypedFora::BlockID, TypedFora::Block> blocks;

    for (auto& rootAndNodes: reasonerFrame()->getNodeRootToNodeMap().getKeysToValues())
        {
        ReasonerFrame::NodeRoot root = rootAndNodes.first;

        ImmutableTreeVector<TypedFora::Variable> args =
            mapITV(
                root.jovs(), [](JOV j) {
                    return TypedFora::Variable::Temp(TypedFora::Type(j, TypedFora::RefcountStyle::Pooled()));
                    }
                );

        //for every node root, we need to generate an external node that contains
        //a jump to an internal node. all loops are wired to internal nodes.
        blocks = blocks +
            blockForNodeRoot(rootAndNodes.first) +
            TypedFora::Block(args,
                TypedFora::Expression::Jump(
                    blockForNode(ReasonerFrame::Node(rootAndNodes.first)),
                    mapITV(args, [&](TypedFora::Variable v) { return v.expr(); })
                    ),
                1.0
                );

        blocks = blocks +
            blockForNode(ReasonerFrame::Node(rootAndNodes.first)) +
            TypedFora::Block(args,
                ReasonerCodegenForNode(
                    *this,
                    ReasonerFrame::Node(rootAndNodes.first),
                    mapITV(args, [&](TypedFora::Variable v) { return v.expr(); })
                    ).getExpression(),
                1.0
                );
        }

    for (auto& nodeAndRoots: reasonerFrame()->getNodeRootToNodeMap().getValuesToKeys())
        {
        ReasonerFrame::Node node = nodeAndRoots.first;

        if (nodeGeneratesBlock(node))
            {
            ImmutableTreeVector<TypedFora::Variable> args =
                mapITV(
                    node.jovs(), [](JOV j) {
                        return TypedFora::Variable::Temp(TypedFora::Type(j, TypedFora::RefcountStyle::Pooled()));
                        }
                    );

            blocks = blocks +
                blockForNode(node) +
                TypedFora::Block(args,
                    ReasonerCodegenForNode(
                        *this,
                        ReasonerFrame::Node(node),
                        mapITV(args, [&](TypedFora::Variable v) { return v.expr(); })
                        ).getExpression(),
                    1.0
                    );
            }
        }

    return TypedFora::Callable::Graph(signature, blocks);
    }

bool ReasonerCodegenForFrame::nodeGeneratesBlock(ReasonerFrame::Node node) const
    {
    return reasonerFrame()->getNodeFlows().getKeys(node).size() > 1;
    }

TypedFora::BlockID ReasonerCodegenForFrame::blockForNodeRoot(ReasonerFrame::NodeRoot root) const
    {
    return TypedFora::BlockID(false, reasonerFrame()->indexOfNodeRoot(root));
    }

TypedFora::BlockID ReasonerCodegenForFrame::blockForNode(ReasonerFrame::Node node) const
    {
    return TypedFora::BlockID(true, reasonerFrame()->indexOfNode(node));
    }

TypedFora::BlockID ReasonerCodegenForFrame::blockForNodeRoot(ReasonerFrameId frameId, ReasonerFrame::NodeRoot root) const
    {
    return TypedFora::BlockID(false, reasoner()->getFrameFor(frameId)->indexOfNodeRoot(root));
    }

TypedFora::BlockID ReasonerCodegenForFrame::blockForNode(ReasonerFrameId frameId, ReasonerFrame::Node node) const
    {
    return TypedFora::BlockID(true, reasoner()->getFrameFor(frameId)->indexOfNode(node));
    }

TypedFora::CallTarget ReasonerCodegenForFrame::callTargetForSubframe(ReasonerFrameId frameId, ReasonerFrame::NodeRoot rootInFrame) const
    {
    return TypedFora::CallTarget::ExternalSubgraph(
        TypedFora::resultSignatureFromJoa(
            reasoner()->getFrameFor(frameId)->exits(),
            TypedFora::RefcountStyle::Pooled(),
            TypedFora::RefcountStyle::Pooled()
            ),
        mapITV(rootInFrame.jovs(), [&](JOV j) { return TypedFora::Type(j, TypedFora::RefcountStyle::Pooled()); }),
        entrypointNameFor(frameId),
        blockForNodeRoot(frameId, rootInFrame)
        );
    }

std::string ReasonerCodegenForFrame::entrypointNameFor(ReasonerFrameId frameId)
    {
    return "RF_" + hashToString(frameId.hash());
    }

ReasonerCodegenForContinuation ReasonerCodegenForNode::forContinuation(ControlFlowContinuation continuation) const
    {
    return ReasonerCodegenForContinuation(*this, continuation, null());
    }

ReasonerCodegenForContinuation ReasonerCodegenForNode::forContinuation(ControlFlowContinuation continuation, Nullable<TypedFora::Expression> result) const
    {
    return ReasonerCodegenForContinuation(*this, continuation, result);
    }

ReasonerCodegenForContinuation ReasonerCodegenForNode::forContinuation(ControlFlowContinuation continuation, TypedFora::Expression result) const
    {
    return ReasonerCodegenForContinuation(*this, continuation, null() << result);
    }

TypedFora::Expression ReasonerCodegenForNode::getExpressionFor(ControlFlowApplyArg applyArg)
    {
    @match ControlFlowApplyArg(applyArg)
        -| Normal(field, arg) ->> {
            return getExpressionFor(arg);
            }
        -| TupleCall(arg) ->> {
            return TypedFora::Expression::MakeTuple(
                emptyTreeVec() + TypedFora::MakeTupleArgument::TupleCall(getExpressionFor(arg))
                );
            }
    }

TypedFora::Expression ReasonerCodegenForNode::getExpressionFor(ControlFlowArg arg)
    {
    @match ControlFlowArg(arg)
        -| Constant(c) ->> {
            return TypedFora::Expression::Constant(c);
            }
        -| Arg(ix) ->> {
            return args()[ix];
            }
    }

TypedFora::Expression ReasonerCodegenForNode::getExpression()
    {
    try {
        if (node() == ReasonerFrame::Node(node().root()) &&
                (forFrame().reasonerFrame()->isMergeNode(node().label()) ||
                    node().label() == ControlFlowGraphLabel() &&
                        forFrame().reasonerFrame()->isMarkedRecursive()))
            {
            ImmutableTreeVector<TypedFora::MetadataStackFrame> metas = metadataForNode();

            return
                TypedFora::Expression::DiscardFirst(
                    TypedFora::Expression::DiscardFirst(
                        TypedFora::Expression::InterruptCheck(metas),
                        TypedFora::Expression::KickCheck(
                            TypedFora::Expression::TransferToInterpreter(metas)
                            )
                        ),
                    getExpressionInner()
                    );
            }
        else
            return getExpressionInner();
        }
    catch(...)
        {
        LOG_ERROR << node();
        LOG_ERROR << forFrame().reasonerFrame()->graph()[node().label()].body();
        if (forFrame().reasonerFrame()->getCalledFrames().hasKey(node()))
            LOG_ERROR << forFrame().reasonerFrame()->getCalledFrames().getValue(node());
        throw;
        }
    }

ImmutableTreeVector<TypedFora::Expression> ReasonerCodegenForNode::packApplyArgumentsForNativeAxiom(
                            ImmutableTreeVector<ControlFlowApplyArg> args,
                            long individualArgs,
                            bool finalTupleHasExtras,
                            TypedForaExpressionBuilder& builder
                            )
    {
    ImmutableTreeVector<TypedFora::Expression> passArgs;
    ImmutableTreeVector<TypedFora::MakeTupleArgument> makeTupleArgs;

    for (uword_t k = 0; k < args.size(); k++)
        {
        TypedFora::Expression expr;

        @match ControlFlowApplyArg(args[k])
            -| Normal(field, arg) ->> {
                expr = getExpressionFor(arg);
                }
            -| TupleCall(arg) ->> {
                expr = getExpressionFor(arg);
                }

        if (args[k].isTupleCall())
            makeTupleArgs = makeTupleArgs +
                TypedFora::MakeTupleArgument::TupleCall(expr);
        else
            {
            if (makeTupleArgs.size() || args.size() == individualArgs)
                makeTupleArgs = makeTupleArgs +
                    TypedFora::MakeTupleArgument::Normal(args[k].getNormal().fieldName(), expr);
            else
                passArgs = passArgs + expr;
            }
        }

    //the tuple at the end might be too big, in which case we have to bind it in
    //a  let statement and unpack it into the target arguments
    uword_t tupleArgumentsToConsumeExplicitly = individualArgs - passArgs.size();

    TypedFora::Expression makeTupleExpr = builder.push(TypedFora::Expression::MakeTuple(makeTupleArgs));

    ImmutableTreeVector<TypedFora::Expression> exprs = passArgs;

    for (long k = 0; k < tupleArgumentsToConsumeExplicitly; k++)
        exprs = exprs + TypedFora::Expression::GetItem(makeTupleExpr, k);

    if (finalTupleHasExtras)
        {
        if (tupleArgumentsToConsumeExplicitly > 0)
            exprs = exprs +
                TypedFora::Expression::GetSlice(
                    makeTupleExpr,
                    tupleArgumentsToConsumeExplicitly
                    );
        else
            exprs = exprs + makeTupleExpr;
        }

    return exprs;
    }

bool isCanonicalReturn(ControlFlowContinuation cont)
    {
    @match ControlFlowContinuation(cont)
        -| Return(Result(), isException) ->> { return isException == false; }
        -| _ ->> { return false; }
    }

bool isCanonicalThrow(ControlFlowContinuation cont)
    {
    @match ControlFlowContinuation(cont)
        -| Return(Result(), isException) ->> { return isException == true; }
        -| _ ->> { return false; }
    }

TypedFora::Expression ReasonerCodegenForNode::getExpressionInner()
    {
    lassert_dump(
        forFrame().reasonerFrame()->getNodeRootToNodeMap().hasValue(node()),
        prettyPrintString(node()) << " not in " <<
            prettyPrintString(forFrame().reasonerFrame()->getNodeRootToNodeMap().getValues(node().root()))
        );

    ControlFlowNodeBody nodeBody = forFrame().reasonerFrame()->graph()[node().label()].body();

    @match ControlFlowNodeBody(nodeBody)
        -|  Jump(cont) ->> {
            return this->forContinuation(cont).getExpression();
            }
        -|  Branch(arg, ifTrue, ifFalse) ->> {
            TypedFora::Expression branchExpr = getExpressionFor(arg);

            if (!branchExpr.type())
                return branchExpr;

            Nullable<bool> which = branchExpr.type()->jov().convertToBoolean();

            if (which)
                return this->forContinuation(*which ? ifTrue : ifFalse).getExpression();

            return TypedFora::Expression::If(
                    branchExpr,
                    this->forContinuation(ifTrue).getExpression(),
                    this->forContinuation(ifFalse).getExpression(),
                    .5
                    );
            }
        -|  Switch(arg, branches, otherwise) ->> {
            TypedFora::Expression branchExpr = getExpressionFor(arg);

            if (!branchExpr.type())
                return branchExpr;

            if (branchExpr.type()->jov().constant())
                {
                CSTValue val = *branchExpr.type()->jov().constant();
                if (branches.contains(val))
                    return this->forContinuation(*branches[val]).getExpression();

                return this->forContinuation(otherwise).getExpression();
                }

            TypedFora::Expression curTerminator = this->forContinuation(otherwise).getExpression();

            uword_t executionCount = 2;

            for (auto valueAndContinuation: branches)
                {
                CSTValue val = valueAndContinuation.first;

                if (!branchExpr.type()->jov().disjoint(val))
                    {
                    curTerminator =
                        TypedFora::Expression::If(
                            TypedFora::Abi::exprTestArgsAreIdentical(
                                TypedFora::Expression::Constant(val),
                                branchExpr
                                ),
                            this->forContinuation(valueAndContinuation.second).getExpression(),
                            curTerminator,
                            1.0 / executionCount
                            );

                    executionCount += 1;
                    }
                }

            return curTerminator;
            }
        -|  TupleExpand(arg, (arity, arityExact, ifMatch), ifNoMatch) ->> {
            Nullable<bool> possible = jovIsTupleOfArity(args()[arg].type()->jov(), arity, arityExact);

            if (possible && !*possible)
                return this->forContinuation(ifNoMatch).getExpression();
            if (possible && *possible)
                return this->forContinuation(ifMatch, args()[arg]).getExpression();

            return TypedFora::Expression::If(
                TypedFora::Expression::IsTuple(args()[arg], arity, arityExact),
                this->forContinuation(ifMatch, args()[arg]).getExpression(),
                this->forContinuation(ifNoMatch).getExpression(),
                .5
                );
            }
        -|  Cached() ->> {
            return TypedFora::Expression::TransferToInterpreter(metadataForNode());
            }
        -|  Apply(args, normal, exception) ->> {
            JOVT applyJOVt = getApplyTupleJudgment(args, node().jovs(), null() << nodeBody);

            auto axiomJOA = forFrame().axioms()->axiomJOA(applyJOVt);

            if (!axiomJOA)
                return TypedFora::Expression::TransferToInterpreter(metadataForNode());

            TypedFora::ResultSignature possibleResults;
            TypedFora::CallTarget callable;

            TypedForaExpressionBuilder builder;

            ImmutableTreeVector<TypedFora::Expression> applyArguments;

            @match AxiomJOA(*axiomJOA)
                -| Expands() ->> {
                    ReasonerFrameId target = forFrame().reasonerFrame()->getCalledFrames().getValue(node());
                    JudgmentOnAction targetJOA = forFrame().reasonerFrame()->getCalledFrameJOAs().getValue(make_pair(node(), target));

                    auto targetFrame = forFrame().reasoner()->getFrameFor(target);

                    if (targetFrame->exitsAreConstants())
                        {
                        JudgmentOnAction res = targetFrame->exits();
                        auto jovAndIsException = res.jovAndIsExceptionByIndex(0);

                        return this->forContinuation(
                            jovAndIsException.second ? exception : normal,
                            null() << TypedFora::Expression::Constant(*jovAndIsException.first.constant())
                            ).getExpression();
                        }

                    ImmutableTreeVector<JOV> childJOVs =
                        mapITV(
                            args,
                            [&](ControlFlowApplyArg arg) -> JOV {
                                return getApplyJovJudgment(arg, node().jovs(), null() << nodeBody);
                                }
                            );

                    while (targetFrame->relaxesTo())
                        {
                        targetFrame = forFrame().reasoner()->getFrameFor(*targetFrame->relaxesTo());
                        target = targetFrame->frameId();
                        }

                    lassert(targetFrame->exits() == targetJOA);

                    ReasonerFrame::NodeRoot root = *targetFrame->entrypointRootFor(childJOVs);

                    callable = forFrame().callTargetForSubframe(target, root);

                    possibleResults =
                        resultSignatureFromJoa(
                            targetFrame->exits(),
                            TypedFora::RefcountStyle::Pooled()
                            );

                    //when we're calling an expand axiom, we expect each argument in the apply signature to
                    //contain the relevant data.
                    applyArguments = mapITV(args, [&](ControlFlowApplyArg a) { return this->getExpressionFor(a); });

                    //check if this is a tail-call recursion
                    if (target == forFrame().reasonerFrame()->frameId() && isCanonicalReturn(normal) && isCanonicalThrow(exception))
                        return TypedFora::Expression::Jump(
                            forFrame().blockForNode(ReasonerFrame::Node(root)),
                            applyArguments
                            );
                    }
                -| Native(result) ->> {
                    if (applyJOVt.computeConstant())
                        {
                        JudgmentOnAction possibleResults =
                            forFrame().reasoner()->getStats()->resolveAxiomDirectly(applyJOVt);

                        if (possibleResults.size() == 1 && possibleResults.jovAndIsExceptionByIndex(0).first.constant())
                            {
                            auto jovAndIsException = possibleResults.jovAndIsExceptionByIndex(0);

                            if (!jovAndIsException.second)
                                {
                                return this->forContinuation(
                                    jovAndIsException.second ? exception : normal,
                                    null() << TypedFora::Expression::Constant(*jovAndIsException.first.constant())
                                    ).getExpression();
                                }
                            else
                                //this definitely throws.
                                return TypedFora::Expression::TransferToInterpreter(metadataForNode());
                            }
                        }

                    Nullable<Axiom> axiom = forFrame().axioms()->axiom(*forFrame().typedForaCompiler(), applyJOVt);

                    @match Nullable<Axiom>(axiom)
                        -|  Value(Native(callSignature, sig, graph)) ->> {
                            possibleResults = graph->resultSignature();
                            callable = TypedFora::Transforms::renameVariables(TypedFora::CallTarget::Subgraph(*graph, TypedFora::BlockID::entry()));

                            //when we're calling a native axiom, we expect one argument per term in the JOVT, and
                            //a tuple for any *args.
                            applyArguments = packApplyArgumentsForNativeAxiom(
                                args,
                                applyJOVt.jovs().size(),
                                applyJOVt.hasExtras(),
                                builder
                                );
                            }
                        -| _ ->> {
                            return TypedFora::Expression::TransferToInterpreter(metadataForNode());
                            }
                    }

            ImmutableTreeVector<TypedFora::Continuation> normalConts;
            ImmutableTreeVector<TypedFora::Continuation> exceptionConts;

            for (auto t: possibleResults.normalTypes())
                {
                auto resultVariable = TypedFora::Variable::Temp(t);
                auto resExpr = this->forContinuation(normal, resultVariable.expr()).getExpression();

                normalConts = normalConts +
                    TypedFora::Continuation(
                        resultVariable,
                        resExpr,
                        resExpr.type(),
                        1.0
                        );
                }

            for (auto t: possibleResults.exceptionTypes())
                {
                auto resultVariable = TypedFora::Variable::Temp(t);

                exceptionConts = exceptionConts +
                    TypedFora::Continuation(
                        resultVariable,
                        TypedFora::Expression::TransferToInterpreter(
                            metadataForNodeWithResult(resultVariable, 1)
                            ),
                        null(),
                        1.0
                        );
                }

            return builder.wrap(
                TypedFora::Expression::Call(
                    callable,
                    applyArguments,
                    TypedFora::ContinuationFrame(normalConts, exceptionConts),
                    metadataForNode()
                    )
                );
            }

    lassert(false);
    }


ImmutableTreeVector<TypedFora::MetadataStackFrame>
        ReasonerCodegenForNode::metadataForNodeWithResult(TypedFora::Variable resultVariable, int indexInCFG)
    {
    return emptyTreeVec() +
        TypedFora::MetadataStackFrame(
            TypedFora::MetadataInstruction::NodeWithResult(
                ControlFlowGraphJumpPoint(
                    forFrame().reasonerFrame()->graph(),
                    node().label()
                    ),
                indexInCFG,
                node().jovs(),
                resultVariable.type().jov()
                ),
            metadataVariables() +
                TypedFora::MetadataVariable::Var(resultVariable)
            );
    }

ImmutableTreeVector<TypedFora::MetadataStackFrame>
        ReasonerCodegenForNode::metadataForNode()
    {
    return emptyTreeVec() +
        TypedFora::MetadataStackFrame(
            TypedFora::MetadataInstruction::Node(
                ControlFlowGraphJumpPoint(
                    forFrame().reasonerFrame()->graph(),
                    node().label()
                    ),
                node().jovs()
                ),
            metadataVariables()
            );
    }
ImmutableTreeVector<TypedFora::MetadataVariable>
        ReasonerCodegenForNode::metadataVariables()
    {
    ImmutableTreeVector<TypedFora::MetadataVariable> tr;

    for (auto argExpr: args())
        @match TypedFora::Expression(argExpr)
            -| Constant(c) ->> {
                tr = tr + TypedFora::MetadataVariable::Constant(c);
                }
            -| Var(v) ->> {
                tr = tr + TypedFora::MetadataVariable::Var(v);
                }

    return tr;
    }

TypedFora::Expression ReasonerCodegenForContinuation::getExpressionFor(ControlFlowContinuationArg arg)
    {
    @match ControlFlowContinuationArg(arg)
        -| Arg(a) ->> { return forNode().getExpressionFor(a); }
        -| Result() ->> { return *resultExpr(); }
        -| TupleElement(e) ->> { return TypedFora::Expression::GetItem(*resultExpr(), e); }
        -| TupleRemainingElements() ->> {
            ControlFlowNodeBody nodeBody =
                forNode().forFrame().reasonerFrame()->graph()[forNode().node().label()].body();
            lassert(nodeBody.isTupleExpand());

            return TypedFora::Expression::GetSlice(*resultExpr(), nodeBody.getTupleExpand().ifMatch().arity());
            }
        -| MakeTuple(args) ->> {
            return TypedFora::Expression::MakeTuple(
                mapITV(args, [&](ControlFlowContinuationTupleArg arg) {
                    return getMakeTupleArgExpressionFor(arg);
                    })
                );
            }
    }

TypedFora::MakeTupleArgument ReasonerCodegenForContinuation::getMakeTupleArgExpressionFor(ControlFlowContinuationTupleArg arg)
    {
    @match ControlFlowContinuationTupleArg(arg)
        -| Normal(field, arg) ->> {
            return TypedFora::MakeTupleArgument::Normal(field, getExpressionFor(arg));
            }
        -| TupleCall(e) ->> {
            return TypedFora::MakeTupleArgument::TupleCall(getExpressionFor(e));
            }
    }

TypedFora::Expression ReasonerCodegenForContinuation::getExpression()
    {
    @match ControlFlowContinuation(continuation())
        -| Return(arg, isException) ->> {
            return TypedFora::Expression::Return(isException, getExpressionFor(arg));
            }
        -| Node(label, args) ->> {
            ControlFlowNodeBody nodeBody =
                forNode().forFrame().reasonerFrame()->graph()[forNode().node().label()].body();

            ImmutableTreeVector<JOV> targetNodeJOVs =
                getJudgment(
                    args,
                    forNode().node().jovs(),
                    resultExpr() ? null() << resultExpr()->type()->jov() : Nullable<JOV>(),
                    null() << nodeBody
                    );

            ImmutableTreeVector<TypedFora::Expression> exprs;
            TypedForaExpressionBuilder builder;
            for (auto arg: args)
                exprs = exprs + builder.push(getExpressionFor(arg));

            //if there's a NodeRoot covering this point, we transfer to it
            //otherwise, we just compute subexpressions with appropriate "let" statements
            if (forNode().forFrame().reasonerFrame()->isMergeNode(ControlFlowGraphLabel(label)))
                {
                auto targetRoot = *forNode().forFrame().reasonerFrame()->bestRootFor(ControlFlowGraphLabel(label), targetNodeJOVs);

                return builder.wrap(
                    TypedFora::Expression::Jump(
                        forNode().forFrame().blockForNode(ReasonerFrame::Node(targetRoot)),
                        exprs
                        )
                    );
                }
            else
                {
                auto targetNode = ReasonerFrame::Node(forNode().node().root(), ControlFlowGraphLabel(label), targetNodeJOVs);

                if (forNode().forFrame().nodeGeneratesBlock(targetNode))
                    return builder.wrap(
                        TypedFora::Expression::Jump(
                            forNode().forFrame().blockForNode(targetNode),
                            exprs
                            )
                        );

                return builder.wrap(
                    ReasonerCodegenForNode(
                        forNode().forFrame(),
                        targetNode,
                        exprs
                        ).getExpression()
                    );
                }
            }
    }

}