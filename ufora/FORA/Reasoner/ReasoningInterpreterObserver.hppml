/***************************************************************************
    Copyright 2015 Ufora Inc.

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

          http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
****************************************************************************/
#pragma once

#include "../../core/threading/Queue.hpp"
#include "../Interpreter/EvalFrame.hpp"
#include "../Interpreter/Instruction.hppml"
#include "../Interpreter/InterpreterObserver.hppml"
#include "../Interpreter/InterpreterThreadObserver.hppml"
#include "SimpleForwardReasoner.hppml"
#include "../TypedFora/ABI/StackFrameVisitor.hppml"
#include "../TypedFora/JitCompiler/TypedJumpTarget.hppml"
#include "../TypedFora/ABI/UnwrapNativeContinuation.hppml"
#include "../../core/Clock.hpp"

class TypedCfgStats;
class Axioms;

namespace Fora {
namespace Interpreter {

class ReasoningInterpreterObserver;

class ReasoningInterpreterThreadObserver : public InterpreterThreadObserver {
public:
    ReasoningInterpreterThreadObserver(ReasoningInterpreterObserver* inObserver) :
          mObserver(inObserver)
        {
        }

    bool isTracing() const
        {
        return false;
        }

    double timeOfLastTraceEvent()
        {
        return 0;
        }

    void clear()
        {
        }

    void pause()
        {
        }

    void resume()
        {
        }

    //the interpreter is executing an instruction here
    void onInterpreterStep(EvalFrame* inInstruction);

    //the interpreter is returning a result to a native caller and exiting
    void onFollowingTypedNativeContinuation(
                    const NativeRuntimeContinuationValue<1>& continuation,
                    const JudgmentOnValue& inResultJOV,
                    bool isException
                    )
        {
        }

    //the interpreter tried to return to native code, but the native code couldn't handle the
    //value we handed it, so we immediately transferred to the interpreter
    void onReturnToNativeCodeButImmediatelyTransferToInterpreter()
        {
        }

    //the interpreter is transferring into native code
    void onTransferToNativeCode(EvalFrame* inEvalFrame,
                                const TypedFora::TypedJumpTarget& inTarget
                                )
		{
		}

    void continuationAdapterFollowed(bool isException, TypedFora::Type type, bool isTargetNative)
        {
        }

    void onTransferToInterpreterFromNativeCode(const NativeRuntimeContinuationBase& continuation)
        {
        }

    void onInterpreterResumedWithoutValue(EvalFrame* inEvalFrame)
        {
        }

    void onArbitraryInterpreterLogging(std::string msg)
        {
        }

    void onInterpreterInterrupted(EvalFrame* inEvalFrame)
        {
        }

    void onInterpreterInterruptedForVectorLoad(EvalFrame* inEvalFrame)
        {
        }

    void onInterpreterResumedWithValue(EvalFrame* inEvalFrame, bool isException)
        {
        }

    //the interpreter produced an axiom result
    void onAxiomResult(EvalFrame* inEvalFrame, bool isException)
        {
        }

    void onNewStackframe(EvalFrame* inEvalFrame)
        {
        }

    void onReturnedToInterpreter(EvalFrame* inEvalFrame, bool isException)
        {
        }

    void onBranch(EvalFrame* inEvalFrame, long whichBranch)
        {
        }

    void onCachecall()
        {
        }

private:
    ReasoningInterpreterObserver* mObserver;
};

class ReasoningInterpreterObserver : public Fora::Compiler::InterpreterObserver {
public:
    ReasoningInterpreterObserver(
                    PolymorphicSharedPtr<TypedFora::Compiler> inCompiler,
                    PolymorphicSharedPtr<TypedCfgStats> inStats,
                    PolymorphicSharedPtr<Fora::Interpreter::InstructionGraph> inInstructionGraph,
                    PolymorphicSharedPtr<Axioms> inAxioms
                    ) :
            mReasoner(
                new SimpleForwardReasoner(
                    inCompiler,
                    inStats,
                    inInstructionGraph,
                    inAxioms
                    )
                )
        {
        }

    ~ReasoningInterpreterObserver()
        {
        mIsTerminated.write(true);
        mReasonerThread->join();
        }

    void polymorphicSharedPtrBaseInitialized()
        {
        mReasonerThread.reset(
            new boost::thread(
                [&]() {
                    this->reasoningThreadLoop();
                    }
                )
            );
        }

    boost::shared_ptr<InterpreterThreadObserver> allocateInterpreterHistory(
                          boost::shared_ptr<ExecutionContextConfiguration> config
                          )
            {
            return boost::shared_ptr<InterpreterThreadObserver>(
                new ReasoningInterpreterThreadObserver(this)
                );
            }

    void onInterpreterStep(EvalFrame* inFrame)
        {
        if (mEntrypoints.size())
            return;

        ExtractAllInterpreterFrames extract;

        TypedFora::Abi::StackFrameVisitor::visitStackFrame(
            inFrame->callFrame.conts.base(),
            extract
            );

        mEntrypoints.write(
            extract.getEntrypoints() +
            ExtractAllInterpreterFrames::entrypointForFrame(inFrame)
            );
        }

    void onTransferFromNativeCode(ControlFlowGraphJumpPoint targetGraphPoint, ImmutableTreeVector<JOV> jovs)
        {

        }

    void onTransferToNativeCode(EvalFrame* frame, ImmutableTreeVector<TypedFora::Type> signature)
        {

        }

private:
    class ExtractAllInterpreterFrames : public TypedFora::Abi::StackFrameVisitor {
    public:
        virtual bool visitInterpreterStackFrame(
                        Fora::Interpreter::EvalFrame* stackFrame
                        )
            {
            mEntrypoints = entrypointForFrame(stackFrame) + mEntrypoints;
            return true;
            }

        static ReasonerEntrypoint entrypointForFrame(EvalFrame* inFrame)
            {
            ImmutableTreeVector<JOV> jovs = emptyTreeVec();

            for (uword_t k = 0; k < inFrame->evalFrameArgList().size(); k++)
                jovs = jovs + relaxedJOV(JOV::FromLiveValue(inFrame->evalFrameArgList()[k]));

            return ReasonerEntrypoint(
                inFrame->instructionPtr->getGraph(),
                inFrame->instructionPtr->getLabel(),
                jovs
                );
            }

        const ImmutableTreeVector<ReasonerEntrypoint>& getEntrypoints() const
            {
            return mEntrypoints;
            }

    private:
        ImmutableTreeVector<ReasonerEntrypoint> mEntrypoints;
    };

    void reasoningThreadLoop()
        {
        long timesAllFramesCoveredInARow = 0;

        while (!mIsTerminated.size())
            {
            ImmutableTreeVector<ReasonerEntrypoint> entrypoint;

            if (mEntrypoints.getTimeout(entrypoint, 0.001))
                {
                ImmutableTreeVector<ReasonerEntrypoint> origEntrypoint = entrypoint;

                if (SHOULD_LOG_DEBUG())
                    {
                    LOGGER_DEBUG_T log = LOGGER_DEBUG;

                    log << "Starting to reason:\n";

                    for (auto f: entrypoint)
                        log << "\t" << f << "\n";
                    }

                double t0 = curClock();

                double MAX_TIME_TO_REASON = 1.0;

                ImmutableTreeVector<double> times;
                ImmutableTreeVector<JudgmentOnAction> joas;
                ImmutableTreeVector<bool> reasoned;
                ImmutableTreeVector<bool> covered;
                ImmutableTreeVector<bool> hasUA;
                Nullable<JudgmentOnAction> priorJOA;

                bool allFramesAlreadyCovered = true;

                while (curClock() - t0 < MAX_TIME_TO_REASON && entrypoint.size())
                    {
                    double t1 = curClock();

                    LOG_DEBUG << "REASONING " << entrypoint.back();

                    ReasonerEntrypoint entrypointToUse = entrypoint.back().withApplyJOA(priorJOA);

                    PolymorphicSharedPtr<ReasonerFrame> frame =
                        mReasoner->hasEntrypointAlreadyBeenCovered(entrypointToUse);

                    if (!frame)
                        {
                        covered = false + covered;
                        frame = mReasoner->reasonForTimePeriod(
                            entrypointToUse,
                            MAX_TIME_TO_REASON - (curClock() - t0)
                            );
                        allFramesAlreadyCovered = false;
                        }
                    else
                        covered = true + covered;

                    if (frame)
                        {
                        mReasoner->compile(frame);
                        joas = frame->exits() + joas;
                        reasoned = true + reasoned;
                        priorJOA = frame->exits();

                        if (!frame->exits().resultPart().size())
                            priorJOA = null();

                        hasUA = (frame->unknownApplyNodes().size() > 0) + hasUA;

                        LOG_DEBUG << "PRODUCED " << frame->exits();
                        }
                    else
                        {
                        joas = JudgmentOnAction() + joas;
                        reasoned = false + reasoned;
                        priorJOA = null();
                        hasUA = false + hasUA;
                        }

                    times = (curClock() - t1) + times;
                    entrypoint = entrypoint.slice(0, entrypoint.size()-1);

                    if (!priorJOA)
                        break;
                    }

                while (entrypoint.size())
                    {
                    reasoned = false + reasoned;
                    hasUA = false + hasUA;
                    covered = false + covered;
                    times = 0.0 + times;
                    joas = JudgmentOnAction() + joas;
                    entrypoint = entrypoint.slice(0, entrypoint.size() - 1);
                    }

                if (SHOULD_LOG_DEBUG())
                    {
                    LOGGER_DEBUG_T log = LOGGER_DEBUG;

                    log << "Completed reasoning in " << curClock() - t0 << "\n";

                    for (long k = 0; k < origEntrypoint.size();k++)
                        {
                        log << "\t";
                        if (covered[k])
                            log << "[C]";
                        else
                            log << "   ";
                        if (hasUA[k])
                            log << "[U]";
                        else
                            log << "   ";

                        if (reasoned[k])
                            log << times[k] << " -- " << joas[k] << " -- " << origEntrypoint[k] << "\n";
                        else
                            log << "NO REASONING -- " << origEntrypoint[k] << "\n";
                        }
                    }

                while (mEntrypoints.getNonblock())
                    ;

                if (allFramesAlreadyCovered)
                    timesAllFramesCoveredInARow++;
                else
                    timesAllFramesCoveredInARow = 0;

                if (timesAllFramesCoveredInARow > 0)
                    sleepSeconds(0.001);
                if (timesAllFramesCoveredInARow > 5)
                    sleepSeconds(0.01);
                if (timesAllFramesCoveredInARow > 10)
                    sleepSeconds(0.1);
                if (timesAllFramesCoveredInARow > 20)
                    sleepSeconds(0.25);
                }
            }
        }

    PolymorphicSharedPtr<SimpleForwardReasoner> mReasoner;

    Queue<ImmutableTreeVector<ReasonerEntrypoint> > mEntrypoints;

    Queue<bool> mIsTerminated;

    boost::shared_ptr<boost::thread> mReasonerThread;
};


void ReasoningInterpreterThreadObserver::onInterpreterStep(EvalFrame* inEvalFrame)
    {
    mObserver->onInterpreterStep(inEvalFrame);
    }



}
}

