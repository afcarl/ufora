/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/

#pragma once

#include "../ControlFlowGraph/ControlFlowGraph.hppml"
#include "../ControlFlowGraph/ControlFlowGraphToCodeLocation.hppml"
#include "../Judgment/JudgmentOnValue.hppml"
#include "../Judgment/JudgmentOnAction.hppml"

namespace Fora {

typedef ImmutableTreeVector<pair<ControlFlowGraphLabel, ControlFlowGraph> > ReasonerRecursionPath;

@type ReasonerRecursionFrame =
	-| None of ()
	-| Recursive of
		ReasonerEntrypoint recursionEntrypoint,
		ImmutableTreeVector<ReasonerRecursionPath> paths,
		ReasonerRecursionPath pathSoFar
with
	hash_type hash = hashValue(*this)
{
public:
	bool operator<(const ReasonerRecursionFrame& other) const
		{
		return hash() < other.hash();
		}

	bool operator==(const ReasonerRecursionFrame& other) const
		{
		return hash() == other.hash();
		}

	bool operator!=(const ReasonerRecursionFrame& other) const
		{
		return hash() != other.hash();
		}

	bool flowIsRecursion(const ReasonerRecursionFrame& other) const;

	bool isWithinRecursion() const;
};

inline bool ReasonerRecursionFrame::isWithinRecursion() const
	{
	@match ReasonerRecursionFrame(*this)
		-| None() ->> { return false; }
		-| Recursive(_,_,pathSoFar) ->> { return pathSoFar.size() > 0; }
		;
	}

inline bool ReasonerRecursionFrame::flowIsRecursion(const ReasonerRecursionFrame& other) const
	{
	if (isNone() || other.isNone())
		return false;

	return getRecursive().recursionEntrypoint() == other.getRecursive().recursionEntrypoint()
		&& getRecursive().paths() == other.getRecursive().paths()
		&& other.getRecursive().pathSoFar().size() == 0
		;
	}

}

template<>
class CPPMLPrettyPrint<Fora::ReasonerRecursionFrame> {
public:
		static void prettyPrint(
							CPPMLPrettyPrintStream& stream,
							const Fora::ReasonerRecursionFrame& toPr
							)
			{
			@match Fora::ReasonerRecursionFrame(toPr)
				-| None() ->> {
					stream << "(not recursive)";
					}
				-| Recursive(entrypoint, paths, pathSoFar) ->> {
					stream << "(recursive to ";
					stream << entrypoint.hash() << ": ";
					for (auto p: paths)
						{
						stream << "(";
						for (auto e: p)
							stream << "(" << e.first << "," << e.second.graphName() << ")";
						stream << ")";
						}
					stream << ",";

					if (pathSoFar.size())
						{
						stream << " with ";
						for (auto e: pathSoFar)
							stream << "(" << e.first << "," << e.second.graphName() << ")";
						stream << " so far";
						}

					stream << ")";
					}
			}
};
