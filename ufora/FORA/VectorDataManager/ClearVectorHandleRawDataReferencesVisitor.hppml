/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/
#pragma once

#include <iostream>
#include "../TypedFora/ABI/StackFrameVisitor.hppml"
#include "../TypedFora/ABI/VectorRecord.hpp"
#include "../Vector/MutableVectorRecord.hppml"
#include "../Judgment/JudgmentUtil.hppml"
#include "../TypedFora/ABI/VectorHandle.hpp"

class ClearVectorHandleRawDataReferencesVisitor {
public:
	typedef TypedFora::Abi::VectorRecord VectorRecord;

	ClearVectorHandleRawDataReferencesVisitor()
		{
		}

	bool visitVectorRecord(const VectorRecord& leaf)
		{
		bool recurse = true;

		if (!leaf.dataPtr())
			return false;

		leaf.dataPtr()->assertHasNoReferencesToPages();

		JudgmentOnResult jor = leaf.dataPtr()->jor();

		return jorMightHaveVectorsWithin(jor);
		}

	bool visitMutableVectorRecord(const MutableVectorRecord& vec)
		{
		lassert_dump(false, "Mutable vectors shouldn't end up inside of Vectors!");

		return false;
		}

	bool visit(const Type& inType, void* inData, long inCount, long inStride)
		{
		if (inType.isPOD())
			return false;

		uint8_t* bytes = (uint8_t*)inData;

		@match Type(inType)
			-| String() ->> {
				return false;
				}
			-| JOVAsValue() ->> {
				return false;
				}
			-| StackTrace() ->> {
				return false;
				}
			-| ExternalFunction() ->> {
				return false;
				}
			-| Dictionary() ->> {
				return true;
				}
			-| MutableVector() ->> {
				return true;
				}
			-| Vector() ->> {
				return true;
				}
			-| _ ->> {
				return true;
				}
		}
};

