/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/
#include "BigVectorSliceSet.hppml"
#include "../../core/Logging.hpp"

namespace Fora {

BigVectorSliceSet BigVectorSliceSet::operator+(const BigVectorSlice& slice) const
	{
	//check if the slice is empty, in which case there's nothing to do
	if (slice.indexLow() >= slice.indexHigh())
		return *this;

	//we need to ensure that there are no overlapping ranges within the resulting set.
	//because we sort first on the bigvec identity, we can assume that all we need to do
	//is check the ranges below and above us. If they overlap we can glom them together.

	ImmutableTreeSet<BigVectorSlice> s = slices() + slice;

	long index = s.lowerBound(slice);

	if (index > 0)
		{
		BigVectorSlice below = s[index-1];

		if (below.indexHigh() >= slice.indexLow() && below.identity() == slice.identity())
			{
			return BigVectorSliceSet(s - slice - below) +
				BigVectorSlice(slice.identity(),
					std::min<uint64_t>(
						below.indexLow(),
						slice.indexLow()
						),
					std::max<uint64_t>(
						slice.indexHigh(),
						below.indexHigh()
						)
					);
			}
		}

	if (index < s.size() - 1)
		{
		BigVectorSlice above = s[index+1];

		if (above.indexLow() <= slice.indexHigh() && above.identity() == slice.identity())
			{
			return BigVectorSliceSet(s - slice - above) +
				BigVectorSlice(slice.identity(),
					std::min<uint64_t>(
						above.indexLow(),
						slice.indexLow()
						),
					std::max<uint64_t>(
						slice.indexHigh(),
						above.indexHigh()
						)
					);
			}
		}

	return BigVectorSliceSet(s);
	}

BigVectorSliceSet BigVectorSliceSet::operator+(const BigVectorSliceSet& slices) const
	{
	BigVectorSliceSet result = *this;

	for (auto slice: slices)
		result = result + slice;

	return result;
	}

bool BigVectorSliceSet::anyRangeOverlap() const
	{
	for (long k = 0; k + 1 < slices().size(); k++)
		if (slices()[k].identity() == slices()[k+1].identity() &&
				slices()[k].indexHigh() >= slices()[k+1].indexLow())
			return true;

	return false;
	}

bool BigVectorSliceSet::covers(const BigVectorSlice& slice) const
	{
	if (size() == 0)
		return false;

	if (slices().contains(slice))
		return true;

	//find the index of the value directly above us
	long lowerBound = slices().lowerBound(slice);

	if (!(lowerBound >= 0 && lowerBound < size()
			&& slices()[lowerBound].identity() == slice.identity()
			&& slices()[lowerBound].indexLow() == slice.indexLow()))
		lowerBound -= 1;

	if (lowerBound < 0 || lowerBound >= size())
		return false;

	const BigVectorSlice& candidate = slices()[lowerBound];

	return candidate.identity() == slice.identity() &&
		candidate.indexLow() <= slice.indexLow() &&
		candidate.indexHigh() >= slice.indexHigh()
		;
	}
}


