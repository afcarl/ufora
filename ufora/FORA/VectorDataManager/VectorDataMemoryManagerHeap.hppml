/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/
#pragma once

#include "../../core/MemoryHeap.hpp"
#include "../../core/PolymorphicSharedPtr.hpp"
#include <boost/unordered_set.hpp>
#include <boost/unordered_map.hpp>
#include "LargeMemoryBlockTracker.hppml"

class MemoryPool;

class VectorDataMemoryManager;

class VectorDataMemoryManagerHeap {
public:
	VectorDataMemoryManagerHeap(
				PolymorphicSharedPtr<VectorDataMemoryManager> inVDMM,
				MemoryPool* inPool
				);

	VectorDataMemoryManagerHeap(
				PolymorphicSharedPtr<VectorDataMemoryManager> inVDMM,
				MemoryPool* inPool,
				size_t pageSizeOverride
				);

	~VectorDataMemoryManagerHeap();

	void* malloc(size_t size);

	void free(void *ptr);

	void* realloc(void *ptr, size_t size);

	size_t getBytesUsed() const;

	size_t getTotalBytesAllocatedFromOS() const;

	bool detachLargeAlloc(void* addr, size_t size);

private:
	uint8_t* mInitialHeapPtr;

	void* internalMmap(size_t bytes);

	int internalMunmap(void* data, size_t bytes);

	void* internalRemap(void* data, size_t oldBytecount, size_t newBytecount, int flags);

	void initialize();

	PolymorphicSharedPtr<VectorDataMemoryManager> mVDMM;

	LargeMemoryBlockTracker mBlockTracker;

	boost::unordered_set<uint8_t*> mSlabsAllocated;

	boost::unordered_map<uint8_t*, int64_t> mLargeBlocks;

	MemoryPool* mPool;

	size_t mDefaultPageSize;

	size_t mTotalBytesAllocatedFromOS;

	boost::shared_ptr<MemoryHeap> mMemoryHeap;
};

