/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/
#include "BigVectorSliceSet.hppml"
#include "../../core/math/Random.hpp"
#include "../../core/UnitTest.hpp"
#include "../../core/Logging.hpp"

BOOST_AUTO_TEST_CASE( test_BigVectorSliceSet )
    {
    using namespace Fora;

    JudgmentOnResult jor(JOV::OfType(Type::Integer(8, false)));

    std::vector<hash_type> identities({hash_type(0), hash_type(1)});

    BigVectorSliceSet empty;
    BigVectorSlice slice1(hash_type(0), 0, 1);
    BigVectorSlice slice2(hash_type(0), 1, 2);
    BigVectorSlice slice3(hash_type(0), 2, 3);
    BigVectorSlice slice123(hash_type(0), 0, 3);

    //check basic constraints
    BOOST_CHECK(empty + slice1 + slice2 + slice3 == empty + slice123);
    BOOST_CHECK(  (empty + slice1 + slice3).covers(slice1) );
    BOOST_CHECK( !(empty + slice1 + slice3).covers(slice2) );
    BOOST_CHECK(  (empty + slice1 + slice3).covers(slice3) );

    //now check random containment
    std::vector<BigVectorSlice> slices;

    for (auto i: identities)
        for (long k = 0; k <= 20; k++)
            for (long j = 1; j < 20 - k; j++)
                slices.push_back(BigVectorSlice(i, k, k+j));

    Ufora::math::Random::Uniform<double> rand(1);

    for (long passes = 0; passes < 100; passes++)
        {
        BigVectorSliceSet sliceSet;

        for (long k = 0; k < 50; k++)
            {
            BigVectorSliceSet orig = sliceSet;
            BigVectorSlice newSlice = slices[rand() * slices.size()];

            sliceSet = sliceSet + newSlice;

            BOOST_CHECK(!sliceSet.anyRangeOverlap());
            BOOST_CHECK(sliceSet.covers(newSlice));

            if (!sliceSet.covers(newSlice))
                LOG_ERROR
                    << sliceSet
                    << " doesn't cover\n"
                    << newSlice << "\n"
                    << "orig was "
                    << orig;
            }
        }
    }


