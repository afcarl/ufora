/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/
#pragma once

#include "VectorDataMemoryManager.hppml"

class MemoryPool;

namespace Fora {

class AddOnlyMemoryHeap {
public:
	AddOnlyMemoryHeap(
		PolymorphicSharedPtr<VectorDataMemoryManager> memoryManager,
		MemoryPool* inOwningMemoryPool,
		size_t inInitialGuess,
		size_t maxBlockSize = 1024 * 1024
		);

	~AddOnlyMemoryHeap();

	uint8_t* alloc(size_t bytes);

	size_t allocSize(uint8_t* ptr);

	size_t totalBytesAllocated() const;

	size_t totalBytesAllocatedFromOS() const;

	void trimTopBlock();

private:
	bool addBlock_(size_t bytecount);

	std::vector<pair<uint8_t*, size_t> > mBlocks;

	size_t mInitialGuess;

	uint8_t* mAllocationPoint;

	size_t mBytesRemainingInTopBlock;

	size_t mTotalBytesAllocated;

	size_t mTotalBytesAllocatedFromOS;

	size_t mMaxBlockSize;

	MemoryPool* mOwningMemoryPool;

	PolymorphicSharedPtr<VectorDataMemoryManager> mMemoryManager;
};

}

