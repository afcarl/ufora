/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/
#pragma once

#include "../../core/containers/MapWithIndex.hpp"

class ByteRanges {
public:
	void dropRange(uint8_t* base, int64_t inBytes)
		{
		std::pair<uint8_t*, int64_t> range = rangeContaining(base);

		mBlocks.drop(range.first);

		if (base > range.first)
			mBlocks.set(range.first, base - range.first);

		if (base + inBytes < range.first + range.second)
			mBlocks.set(base + inBytes, range.first + range.second - (base + inBytes));
		}

	void addRange(uint8_t* base, int64_t inBytes)
		{
		std::pair<uint8_t*, int64_t> rangeBelow = rangeContaining(base - 1);
		std::pair<uint8_t*, int64_t> rangeAbove = rangeContaining(base + inBytes);

		if (rangeBelow.first && mBlocks.hasKey(rangeBelow.first))
			{
			base = rangeBelow.first;
			inBytes += rangeBelow.second;
			mBlocks.drop(rangeBelow.first);
			}

		if (rangeAbove.first && mBlocks.hasKey(rangeAbove.first))
			{
			inBytes += rangeAbove.second;
			mBlocks.drop(rangeAbove.first);
			}

		mBlocks.set(base, inBytes);
		}

	bool containsRangeEntirely(uint8_t* base, int64_t bytes) const
		{
		auto range = rangeContaining(base);

		return range.first && (range.first + range.second) >= base + bytes;
		}

	std::pair<uint8_t*, int64_t> rangeContaining(uint8_t* ptr) const
		{
		if (mBlocks.size())
			{
			auto it = mBlocks.getKeyToValue().upper_bound(ptr);

			if (it != mBlocks.getKeyToValue().begin())
				{
				it--;

				if (it->first <= ptr && it->first + it->second > ptr)
					return *it;
				}
			}

		return std::pair<uint8_t*, int64_t>(nullptr, 0);
		}

	const std::map<uint8_t*, int64_t>& getKeyToValue() const
		{
		return mBlocks.getKeyToValue();
		}

	const std::map<int64_t, std::set<uint8_t*> >& getValueToKeys() const
		{
		return mBlocks.getValueToKeys();
		}

	const std::set<uint8_t*>& blocksOfSize(int64_t size) const
		{
		return mBlocks.getKeys(size);
		}

	int64_t smallestBlockSize() const
		{
		if (!mBlocks.size())
			return 0;

		return mBlocks.lowestValue();
		}

	int64_t largestBlockSize() const
		{
		if (!mBlocks.size())
			return 0;

		return mBlocks.highestValue();
		}

	size_t blockCount() const
		{
		return mBlocks.size();
		}

private:
	MapWithIndex<uint8_t*, int64_t> mBlocks;
};

