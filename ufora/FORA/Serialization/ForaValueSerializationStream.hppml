/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/
#pragma once

#include "../../core/serialization/Serialization.hpp"
#include "../../core/serialization/IBinaryStream.hpp"
#include "../../core/serialization/OBinaryStream.hpp"
#include "../../core/RefcountingPtr.hppml"

class MemoryPool;
class MutableVectorRecord;
class ControlFlowGraph;
class Expression;
class Type;
class JudgmentOnValue;
class CSTValue;
class ImplValContainer;
class VectorDataMemoryManager;

namespace TypedFora {
namespace Abi {

class PackedForaValues;
class ForaValueArray;
class VectorRecord;
class VectorHandle;

typedef RefcountingPtr<VectorHandle> VectorHandlePtr;

}
}

namespace Cumulus {

class ComputationDefinition;
class ComputationDefinitionTerm;

}

namespace Fora {

class Pagelet;

class PageletTree;

typedef RefcountingPtr<PageletTree> PageletTreePtr;

class ForaValueSerializationStream {
public:
	ForaValueSerializationStream(OBinaryStream& stream) :
			mStream(stream)
		{
		}

	virtual ~ForaValueSerializationStream()
		{
		}

	void writeBytes(const void* data, uint32_t sz)
		{
		mStream.write(sz, (void*)data);
		}

	virtual void serialize(const Type& in) = 0;

	virtual void serialize(const JudgmentOnValue& in) = 0;

	virtual void serialize(const Expression& in) = 0;

	virtual void serialize(const ControlFlowGraph& in) = 0;

	virtual void serialize(const MutableVectorRecord& in) = 0;

	virtual void serialize(const Cumulus::ComputationDefinitionTerm& in) = 0;

	virtual void serialize(TypedFora::Abi::VectorHandlePtr const& in) = 0;

	virtual void serialize(const boost::shared_ptr<Fora::Pagelet>& in) = 0;

	template<class T>
	void serialize(const T& in)
		{
		Serializer<T, ForaValueSerializationStream>::serialize(*this, in);
		}

	OBinaryStream& getStream(void) const
		{
		return mStream;
		}
private:
	OBinaryStream& mStream;
};


class ForaValueDeserializationStream {
public:
	ForaValueDeserializationStream(
						IBinaryStream& s,
						MemoryPool* inTargetMemoryPool,
						PolymorphicSharedPtr<VectorDataMemoryManager> inVDMM
						) :
			mStream(s),
			mTargetMemoryPool(inTargetMemoryPool),
			mVDMM(inVDMM)
		{
		}

	virtual ~ForaValueDeserializationStream()
		{
		}

	void readBytes(void* data, uint32_t sz)
		{
		mStream.read(sz, data);
		}

	virtual void deserialize(Type& out) = 0;

	virtual void deserialize(JudgmentOnValue& out) = 0;

	virtual void deserialize(Expression& out) = 0;

	virtual void deserialize(ControlFlowGraph& out) = 0;

	virtual void deserialize(MutableVectorRecord& out) = 0;

	virtual void deserialize(Cumulus::ComputationDefinitionTerm& out) = 0;

	virtual void deserialize(TypedFora::Abi::VectorHandlePtr& out) = 0;

	virtual void deserialize(boost::shared_ptr<Pagelet>& out) = 0;

	template<class T>
	void deserialize(T& out)
		{
		Deserializer<T, ForaValueDeserializationStream>::deserialize(*this, out);
		}

	MemoryPool* getTargetPool() const
		{
		return mTargetMemoryPool;
		}

	PolymorphicSharedPtr<VectorDataMemoryManager> getVDMM() const
		{
		return mVDMM;
		}

	void setVDMM(PolymorphicSharedPtr<VectorDataMemoryManager> inVDMM)
		{
		mVDMM = inVDMM;
		}

	IBinaryStream& getStream()
		{
		return mStream;
		}

private:
	IBinaryStream& mStream;

	MemoryPool* mTargetMemoryPool;

	PolymorphicSharedPtr<VectorDataMemoryManager> mVDMM;
};

}


template<>
class Serializer<ImplValContainer, Fora::ForaValueSerializationStream> {
public:
	static void serialize(Fora::ForaValueSerializationStream& s, const ImplValContainer& t);
};

template<>
class Deserializer<ImplValContainer, Fora::ForaValueDeserializationStream> {
public:
	static void deserialize(Fora::ForaValueDeserializationStream& s, ImplValContainer& ivc);
};

template<>
class Serializer<TypedFora::Abi::ForaValueArray*, Fora::ForaValueSerializationStream> {
public:
	static void serialize(Fora::ForaValueSerializationStream& s, TypedFora::Abi::ForaValueArray* t);
};

template<>
class Deserializer<TypedFora::Abi::ForaValueArray*, Fora::ForaValueDeserializationStream> {
public:
	static void deserialize(Fora::ForaValueDeserializationStream& s, TypedFora::Abi::ForaValueArray*& t);
};

template<>
class Serializer<Fora::PageletTreePtr, Fora::ForaValueSerializationStream> {
public:
	static void serialize(Fora::ForaValueSerializationStream& s, const Fora::PageletTreePtr& t);
};

template<>
class Deserializer<Fora::PageletTreePtr, Fora::ForaValueDeserializationStream> {
public:
	static void deserialize(Fora::ForaValueDeserializationStream& s, Fora::PageletTreePtr& t);
};

template<>
class Serializer<CSTValue, Fora::ForaValueSerializationStream> {
public:
	static void serialize(Fora::ForaValueSerializationStream& s, const CSTValue& t);
};

template<>
class Deserializer<CSTValue, Fora::ForaValueDeserializationStream> {
public:
	static void deserialize(Fora::ForaValueDeserializationStream& s, CSTValue& cstVal);
};


template<>
class Serializer<MutableVectorRecord, Fora::ForaValueSerializationStream> {
public:
	static void serialize(Fora::ForaValueSerializationStream& s, const MutableVectorRecord& vec);
};

template<>
class Serializer<TypedFora::Abi::PackedForaValues, Fora::ForaValueSerializationStream> {
public:
	static void serialize(
						Fora::ForaValueSerializationStream& s,
						const TypedFora::Abi::PackedForaValues& values
						);
};

template<>
class Serializer<TypedFora::Abi::ForaValueArray, Fora::ForaValueSerializationStream> {
public:
	static void serialize(
						Fora::ForaValueSerializationStream& s,
						const TypedFora::Abi::ForaValueArray& values
						);
};

template<>
class Deserializer<TypedFora::Abi::ForaValueArray, Fora::ForaValueDeserializationStream> {
public:
	static void deserialize(
						Fora::ForaValueDeserializationStream& s,
						TypedFora::Abi::ForaValueArray& values
						);
};

template<>
class Deserializer<MutableVectorRecord, Fora::ForaValueDeserializationStream> {
public:
	static void deserialize(
						Fora::ForaValueDeserializationStream& s,
						MutableVectorRecord& outVector
						);
};

template<>
class Deserializer<TypedFora::Abi::PackedForaValues, Fora::ForaValueDeserializationStream> {
public:
	static void deserialize(
						Fora::ForaValueDeserializationStream& s,
						TypedFora::Abi::PackedForaValues& toInitialize
						);
};

template<>
class Serializer<TypedFora::Abi::VectorRecord, Fora::ForaValueSerializationStream> {
public:
	static void serialize(
					Fora::ForaValueSerializationStream& s,
					const TypedFora::Abi::VectorRecord& inVectorRecord
					);
};

template<>
class Deserializer<TypedFora::Abi::VectorRecord, Fora::ForaValueDeserializationStream> {
public:
	static void deserialize(Fora::ForaValueDeserializationStream& s, TypedFora::Abi::VectorRecord& outVector);
};

template<>
class Serializer<TypedFora::Abi::VectorHandlePtr, Fora::ForaValueSerializationStream> {
public:
	static void serialize(Fora::ForaValueSerializationStream&s, const TypedFora::Abi::VectorHandlePtr& handle);
};

template<>
class Deserializer<TypedFora::Abi::VectorHandlePtr, Fora::ForaValueDeserializationStream> {
public:
	static void deserialize(Fora::ForaValueDeserializationStream& s, TypedFora::Abi::VectorHandlePtr& outVector);
};




