/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/
#pragma once

#include "ForaValueSerializationStream.hppml"


namespace Fora {

class Pagelet;

class VectorMemoizingForaValueSerializationStream : public ForaValueSerializationStream {
public:
	VectorMemoizingForaValueSerializationStream(ForaValueSerializationStream& stream);

	~VectorMemoizingForaValueSerializationStream();

	void serialize(const Type& in);

	void serialize(const JudgmentOnValue& in);

	void serialize(const Expression& in);

	void serialize(const ControlFlowGraph& in);

	void serialize(const MutableVectorRecord& in);

	void serialize(const Cumulus::ComputationDefinitionTerm& in);

	void serialize(const TypedFora::Abi::VectorHandlePtr& in);

	void serialize(const boost::shared_ptr<Fora::Pagelet>& in);

	using ForaValueSerializationStream::serialize;

private:
	ForaValueSerializationStream& mBaseStream;

	map<TypedFora::Abi::VectorHandlePtr, int32_t> mVectorMemo;

	map<boost::shared_ptr<Fora::Pagelet>, int32_t> mPageletMemo;

	map<MutableVectorRecord, int32_t> mMutableVectorMemo;
};


class VectorMemoizingForaValueDeserializationStream : public ForaValueDeserializationStream {
public:
	VectorMemoizingForaValueDeserializationStream(
						ForaValueDeserializationStream& stream
						);

	~VectorMemoizingForaValueDeserializationStream();

	void deserialize(Type& out);

	void deserialize(JudgmentOnValue& out);

	void deserialize(Expression& out);

	void deserialize(ControlFlowGraph& out);

	void deserialize(MutableVectorRecord& out);

	void deserialize(Cumulus::ComputationDefinitionTerm& out);

	void deserialize(TypedFora::Abi::VectorHandlePtr& out);

	void deserialize(boost::shared_ptr<Fora::Pagelet>& out);

	using ForaValueDeserializationStream::deserialize;

private:
	ForaValueDeserializationStream& mBaseStream;

	map<int32_t, TypedFora::Abi::VectorHandlePtr> mVectorMemo;

	map<int32_t, boost::shared_ptr<Fora::Pagelet> > mPageletMemo;

	map<int32_t, MutableVectorRecord> mMutableVectorMemo;
};

}

