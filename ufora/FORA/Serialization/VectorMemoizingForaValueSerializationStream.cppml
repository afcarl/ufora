/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/
#include "VectorMemoizingForaValueSerializationStream.hppml"
#include "../Vector/MutableVectorRecord.hppml"
#include "../TypedFora/ABI/MutableVectorHandle.hpp"
#include "../TypedFora/ABI/VectorHandle.hpp"


namespace Fora {

VectorMemoizingForaValueSerializationStream::VectorMemoizingForaValueSerializationStream(
														ForaValueSerializationStream& stream
														) :
		mBaseStream(stream),
		ForaValueSerializationStream(stream.getStream())
	{
	}

VectorMemoizingForaValueSerializationStream::~VectorMemoizingForaValueSerializationStream()
	{
	}

void VectorMemoizingForaValueSerializationStream::serialize(const JOV& in)
	{
	mBaseStream.serialize(in);
	}

void VectorMemoizingForaValueSerializationStream::serialize(const Type& in)
	{
	mBaseStream.serialize(in);
	}

void VectorMemoizingForaValueSerializationStream::serialize(const Expression& in)
	{
	mBaseStream.serialize(in);
	}

void VectorMemoizingForaValueSerializationStream::serialize(const ControlFlowGraph& in)
	{
	mBaseStream.serialize(in);
	}

void VectorMemoizingForaValueSerializationStream::serialize(const MutableVectorRecord& in)
	{
	auto it = mMutableVectorMemo.find(in);

	if (it == mMutableVectorMemo.end())
		{
		int32_t index = mMutableVectorMemo.size();
		mBaseStream.serialize(index);
		mBaseStream.serialize(in);

		mMutableVectorMemo[in] = index;
		}
	else
		serialize(it->second);
	}

void VectorMemoizingForaValueSerializationStream::serialize(const Cumulus::ComputationDefinitionTerm& in)
	{
	mBaseStream.serialize(in);
	}

void VectorMemoizingForaValueSerializationStream::serialize(const TypedFora::Abi::VectorHandlePtr& in)
	{
	auto it = mVectorMemo.find(in);

	if (it == mVectorMemo.end())
		{
		int32_t index = mVectorMemo.size();
		mBaseStream.serialize(index);
		mBaseStream.serialize(in);

		mVectorMemo[in] = index;
		}
	else
		serialize(it->second);
	}

void VectorMemoizingForaValueSerializationStream::serialize(const boost::shared_ptr<Fora::Pagelet>& in)
	{
	auto it = mPageletMemo.find(in);

	if (it == mPageletMemo.end())
		{
		int32_t index = mPageletMemo.size();
		mBaseStream.serialize(index);
		mBaseStream.serialize(in);

		mPageletMemo[in] = index;
		}
	else
		serialize(it->second);
	}

VectorMemoizingForaValueDeserializationStream::VectorMemoizingForaValueDeserializationStream(
					ForaValueDeserializationStream& stream
					) :
		mBaseStream(stream),
		ForaValueDeserializationStream(
			stream.getStream(),
			stream.getTargetPool(),
			stream.getVDMM()
			)
	{
	}

VectorMemoizingForaValueDeserializationStream::~VectorMemoizingForaValueDeserializationStream()
	{
	}

void VectorMemoizingForaValueDeserializationStream::deserialize(JOV& out)
	{
	mBaseStream.deserialize(out);
	}

void VectorMemoizingForaValueDeserializationStream::deserialize(Type& out)
	{
	mBaseStream.deserialize(out);
	}

void VectorMemoizingForaValueDeserializationStream::deserialize(Expression& out)
	{
	mBaseStream.deserialize(out);
	}

void VectorMemoizingForaValueDeserializationStream::deserialize(ControlFlowGraph& out)
	{
	mBaseStream.deserialize(out);
	}

void VectorMemoizingForaValueDeserializationStream::deserialize(MutableVectorRecord& out)
	{
	int32_t index;
	mBaseStream.deserialize(index);

	auto it = mMutableVectorMemo.find(index);

	if (it != mMutableVectorMemo.end())
		{
		out = it->second;
		return;
		}

	mBaseStream.deserialize(out);

	mMutableVectorMemo[index] = out;
	}

void VectorMemoizingForaValueDeserializationStream::deserialize(Cumulus::ComputationDefinitionTerm& out)
	{
	mBaseStream.deserialize(out);
	}

void VectorMemoizingForaValueDeserializationStream::deserialize(TypedFora::Abi::VectorHandlePtr& out)
	{
	int32_t index;
	mBaseStream.deserialize(index);

	auto it = mVectorMemo.find(index);

	if (it != mVectorMemo.end())
		{
		out = it->second;
		return;
		}

	mBaseStream.deserialize(out);

	mVectorMemo[index] = out;
	}

void VectorMemoizingForaValueDeserializationStream::deserialize(boost::shared_ptr<Fora::Pagelet>& out)
	{
	int32_t index;
	mBaseStream.deserialize(index);

	auto it = mPageletMemo.find(index);

	if (it != mPageletMemo.end())
		{
		out = it->second;
		return;
		}

	mBaseStream.deserialize(out);

	mPageletMemo[index] = out;
	}


}

