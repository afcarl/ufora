///***************************************************************************
//   Copyright 2015-2016 Ufora Inc.
//
//   Licensed under the Apache License, Version 2.0 (the "License");
//   you may not use this file except in compliance with the License.
//   You may obtain a copy of the License at
//
//       http://www.apache.org/licenses/LICENSE-2.0
//
//   Unless required by applicable law or agreed to in writing, software
//   distributed under the License is distributed on an "AS IS" BASIS,
//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//   See the License for the specific language governing permissions and
//   limitations under the License.
//****************************************************************************/
#pragma once

#include "../Language/Function.hppml"
#include "../ControlFlowGraph/ControlFlowGraph.hppml"
#include "../Judgment/JudgmentOnValue.hppml"

class MemoizableObject;
@type MemoizableObject =
		MemoizableControlFlowGraph of ControlFlowGraph controlFlowGraph
	-|	MemoizableExpression of Expression expression
	-|	MemoizableType of Type type
	-|	MemoizableJOV of JOV jov
	{
	public:
		const ControlFlowGraph& extractControlFlowGraph() const;
		const Expression& extractExpression() const;
		const Type& extractType() const;
		const JOV& extractJOV() const;

		template<class T> const T& extract() const;

		static MemoizableObject makeMemoizableObject(const ControlFlowGraph& cfg);
		static MemoizableObject makeMemoizableObject(const Expression& expr);
		static MemoizableObject makeMemoizableObject(const Type& type);
		static MemoizableObject makeMemoizableObject(const JOV& jov);
		static MemoizableObject makeMemoizableObject(const MemoizableObject& obj);

		const hash_type& hash() const;
		const std::string objectTagString() const;
	};


template<>
class CPPMLEquality<MemoizableObject, void> {
public:
	static char cmp(const MemoizableObject& lhs,
					const MemoizableObject& rhs
					)
		{
		return lhs.hash().cmp(rhs.hash());
		}
};

macro_defineCppmlComparisonOperators(MemoizableObject);
