/***************************************************************************
   Copyright 2015-2016 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/
#pragma once

#include "../../core/math/Hash.hpp"
#include "../../core/cppml/CPPMLEquality.hppml"

class ControlFlowGraph;

@type CompilerMapKey = hash_type resumptionHash, hash_type codeHash, hash_type argumentsHash;

template<>
class hash<CompilerMapKey> : public std::unary_function<CompilerMapKey, std::size_t> {
public:
		std::size_t operator()(CompilerMapKey const& in) const
			{
			return boost::hash<hash_type>()(
					in.resumptionHash() + in.codeHash() + in.argumentsHash()
					);
			}
};

template<>
class CPPMLEquality<CompilerMapKey, void> {
public:
	static char cmp(const CompilerMapKey& lhs,
					const CompilerMapKey& rhs
					)
		{
		char result;

		result = lhs.resumptionHash().cmp(rhs.resumptionHash());
		if (result != 0)
			return result;
		// else
		result = lhs.codeHash().cmp(rhs.codeHash());
		if (result != 0)
			return result;
		// else
		return lhs.argumentsHash().cmp(rhs.argumentsHash());
		}
};
macro_defineCppmlComparisonOperators(CompilerMapKey);

typedef ControlFlowGraph CompilerMapValue;
