/***************************************************************************
   Copyright 2015-2016 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/
#pragma once

#include "../../core/cppml/CPPMLEquality.hppml"

class ObjectIdentifier;
@type ObjectIdentifier = std::string objectType, hash_type hash;

template<class T>
ObjectIdentifier makeObjectIdentifier(const T& obj)
	{
	static std::string typeName = Ufora::debug::StackTrace::demangle(typeid(T).name());
	return ObjectIdentifier(typeName, hashValue(obj));
	}

template<class T>
bool isType(const ObjectIdentifier& objId)
	{
	static std::string typeName = Ufora::debug::StackTrace::demangle(typeid(T).name());
	return objId.objectType() == typeName;
	}

template<>
class CPPMLEquality<ObjectIdentifier, void> {
public:
	static char cmp(const ObjectIdentifier& lhs,
					const ObjectIdentifier& rhs
					)
		{
		char c = lhs.hash().cmp(rhs.hash());
		if (c)
			return c;
		// else
		int i = lhs.objectType().compare(rhs.objectType());
		return (i<0)? -1
					: (i==0)? 0
							: 1;
		}
};

macro_defineCppmlComparisonOperators(ObjectIdentifier);

template<>
class hash<ObjectIdentifier> : public std::unary_function<ObjectIdentifier, std::size_t> {
public:
		std::size_t operator()(ObjectIdentifier const& in) const
			{
			return boost::hash<hash_type>()(in.hash());
			}
};

