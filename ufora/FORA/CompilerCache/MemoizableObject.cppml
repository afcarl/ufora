///***************************************************************************
//   Copyright 2015-2016 Ufora Inc.
//
//   Licensed under the Apache License, Version 2.0 (the "License");
//   you may not use this file except in compliance with the License.
//   You may obtain a copy of the License at
//
//       http://www.apache.org/licenses/LICENSE-2.0
//
//   Unless required by applicable law or agreed to in writing, software
//   distributed under the License is distributed on an "AS IS" BASIS,
//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//   See the License for the specific language governing permissions and
//   limitations under the License.
//****************************************************************************/
#include "MemoizableObject.hppml"

class ControlFlowGraph;
class Expression;

const ControlFlowGraph& MemoizableObject::extractControlFlowGraph() const
	{
	return getMemoizableControlFlowGraph(true).controlFlowGraph();
	}

const Expression& MemoizableObject::extractExpression() const
	{
	return getMemoizableExpression(true).expression();
	}

const Type& MemoizableObject::extractType() const
	{
	return getMemoizableType(true).type();
	}

const JOV& MemoizableObject::extractJOV() const
	{
	return getMemoizableJOV(true).jov();
	}

template<>
const ControlFlowGraph& MemoizableObject::extract() const
	{
	return extractControlFlowGraph();
	}

template<>
const Expression& MemoizableObject::extract() const
	{
	return extractExpression();
	}

template<>
const Type& MemoizableObject::extract() const
	{
	return extractType();
	}

template<>
const JOV& MemoizableObject::extract() const
	{
	return extractJOV();
	}

template<>
const MemoizableObject& MemoizableObject::extract() const
	{
	return *this;
	}

MemoizableObject MemoizableObject::makeMemoizableObject(const ControlFlowGraph& cfg)
	{
	return MemoizableControlFlowGraph(cfg);
	}

MemoizableObject MemoizableObject::makeMemoizableObject(const Expression& expr)
	{
	return MemoizableExpression(expr);
	}

MemoizableObject MemoizableObject::makeMemoizableObject(const Type& type)
	{
	return MemoizableType(type);
	}

MemoizableObject MemoizableObject::makeMemoizableObject(const JOV& jov)
	{
	return MemoizableJOV(jov);
	}

MemoizableObject MemoizableObject::makeMemoizableObject(const MemoizableObject& obj)
	{
	return MemoizableObject(obj);
	}

const std::string MemoizableObject::objectTagString() const
	{
	static const std::string prefix("Memoizable");
	std::string tag = this->tagName();
	lassert(tag.substr(0, prefix.size()) == prefix);
	return std::string(tag.substr(prefix.size()));
	}

const hash_type& MemoizableObject::hash() const
	{
	if (isMemoizableControlFlowGraph())
		return extractControlFlowGraph().hash();
	else if (isMemoizableExpression())
		return extractExpression().hash();
	else if (isMemoizableType())
		return extractType().hash();
	else if (isMemoizableJOV())
		return extractJOV().hash();
	else
		lassert_dump(false, "hash not implemented for this kind of MemoizableObject");
	}
