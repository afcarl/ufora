/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/
#include "FORAValuePrinter.hppml"
#include "../Language/Function.hppml"
#include "PrintableExpressionTree.hppml"

namespace FORAValuePrinting{

//definition of PrintableExpressionTree members
PrintableExpressionTreeProperties PrintableExpressionTree::getProperties() const
	{
	@match PrintableExpressionTree(*this)
		-| Node() with (properties) ->> {
			return properties;
			}
		-| Leaf() with (properties) ->> {
			return properties;
			}
		;
	}
FORAValuePrintingParameters PrintableExpressionTree::getParameters() const
	{
	@match PrintableExpressionTree(*this)
		-| Node() with (_,parameters) ->> {
			return parameters;
			}
		-| Leaf() with (_,parameters) ->> {
			return parameters;
			}
		;
	}

Nullable<Symbol> PrintableExpressionTree::getLowestPrecedenceOperator() const
	{
	return getProperties().lowestPrecedenceOperator;
	}

paren_type PrintableExpressionTree::getParentheses() const
	{
	return getProperties().parentheses;
	}

complexity_type PrintableExpressionTree::getComplexity() const
	{
	return getProperties().complexity;
	}

ImmutableTreeVector<PrintableExpressionTree> PrintableExpressionTree::getChildren() const
	{
	return (isNode() ? getNode().children() : ImmutableTreeVector<PrintableExpressionTree>());
	}

line_wrap PrintableExpressionTree::getLineWrap() const
	{
	return getProperties().lineBreak;
	}

Expression PrintableExpressionTree::getThis() const
	{
	return getProperties().expression;
	}

int PrintableExpressionTree::getLength() const
	{
	return getProperties().length;
	}

bool PrintableExpressionTree::containsLet() const
	{
	return getProperties().containsLet;
	}

bool PrintableExpressionTree::needsParensIfInOpExpr() const
	{
	return getProperties().needsParensIfInOpExpr;
	}

PrintableExpressionTree PrintableExpressionTree::withWraps(paren_type newWrapsVal) const
	{
	PrintableExpressionTreeProperties properties;
	properties.length = getLength();
	properties.lineBreak = getLineWrap();
	properties.lowestPrecedenceOperator = getLowestPrecedenceOperator();
	properties.parentheses = newWrapsVal;
	properties.complexity = getComplexity();
	properties.expression = getThis();
	properties.containsLet = containsLet();
	properties.needsParensIfInOpExpr = needsParensIfInOpExpr();
	@match PrintableExpressionTree(*this)
		-| Node(children) ->> {
			return PrintableExpressionTree::Node(properties,getParameters(),children);
			}
		-| Leaf() ->> {
			return PrintableExpressionTree::Leaf(properties,getParameters());
			}
		;
	}

PrintableExpressionTree PrintableExpressionTree::withLength(int newLength) const
	{
	PrintableExpressionTreeProperties properties;
	properties.length = newLength;
	properties.lineBreak = getLineWrap();
	properties.lowestPrecedenceOperator = getLowestPrecedenceOperator();
	properties.parentheses = getParentheses();
	properties.complexity = getComplexity();
	properties.expression = getThis();
	properties.containsLet = containsLet();
	properties.needsParensIfInOpExpr = needsParensIfInOpExpr();
	@match PrintableExpressionTree(*this)
		-| Node(children) ->> {
			return PrintableExpressionTree::Node(properties,getParameters(),children);
			}
		-| Leaf() ->> {
			return PrintableExpressionTree::Leaf(properties,getParameters());
			}
		;
	}

PrintableExpressionTree PrintableExpressionTree::withComplexity(complexity_type
																  newComplexity) const
	{
	PrintableExpressionTreeProperties properties;
	properties.length = getLength();
	properties.lineBreak = getLineWrap();
	properties.lowestPrecedenceOperator = getLowestPrecedenceOperator();
	properties.parentheses = getParentheses();
	properties.complexity = newComplexity;
	properties.expression = getThis();
	properties.containsLet = containsLet();
	properties.needsParensIfInOpExpr = needsParensIfInOpExpr();
	@match PrintableExpressionTree(*this)
		-| Node(children) ->> {
			return PrintableExpressionTree::Node(properties,getParameters(),children);
			}
		-| Leaf() ->> {
			return PrintableExpressionTree::Leaf(properties,getParameters());
			}
		;
	}

PrintableExpressionTree PrintableExpressionTree::withLineWrap(line_wrap newWrap) const
	{
	PrintableExpressionTreeProperties properties;
	properties.length = getLength();
	properties.lineBreak = newWrap;
	properties.lowestPrecedenceOperator = getLowestPrecedenceOperator();
	properties.parentheses = getParentheses();
	properties.complexity = getComplexity();
	properties.expression = getThis();
	properties.containsLet = containsLet();
	properties.needsParensIfInOpExpr = needsParensIfInOpExpr();
	@match PrintableExpressionTree(*this)
		-| Node(children) ->> {
			return PrintableExpressionTree::Node(properties,getParameters(),children);
			}
		-| Leaf() ->> {
			return PrintableExpressionTree::Leaf(properties,getParameters());
			}
		;
	}

PrintableExpressionTree PrintableExpressionTree::withChildren(ImmutableTreeVector<PrintableExpressionTree> newChildren) const
	{
	PrintableExpressionTreeProperties properties;
	properties.length = getLength();
	properties.lineBreak = getLineWrap();
	properties.lowestPrecedenceOperator = getLowestPrecedenceOperator();
	properties.parentheses = getParentheses();
	properties.complexity = getComplexity();
	properties.expression = getThis();
	properties.containsLet = containsLet();
	properties.needsParensIfInOpExpr = needsParensIfInOpExpr();
	@match PrintableExpressionTree(*this)
		-| Node() ->> {
			return PrintableExpressionTree::Node(properties,getParameters(), newChildren);
			}
		-| _ ->> { lassert(false); }
		;
	throw standardLogicErrorWithStacktrace(
        "This statement should not be reached. tree = " +
        prettyPrintString(*this)
        );
	}

/*****************Builds Intermediate Representation of Expressions**************/
/********************************************************************************/
/********************************************************************************/
//anonymous namespace for helper functions
namespace
{

ImmutableTreeVector<PrintableExpressionTree> decideToWrap(const ImmutableTreeVector<PrintableExpressionTree>& children,
														   paren_type parentheses,
														   const Symbol& currentOuterOp)
	{
	ImmutableTreeVector<PrintableExpressionTree> newChildren;

	for(int i = 0; i<children.size(); i++)
		{
			Expression expression = children[i].getThis();
			//check cases, add (altered) child back to newChildren
			if (extractExpression(expression).isSequence() || extractExpression(expression).isLet()
				|| extractExpression(expression).isBranch())
				newChildren = newChildren + children[i].withWraps(parentheses);
				else
			if (children[i].getLowestPrecedenceOperator().isNull())
				newChildren = newChildren + children[i];
				else
			if (!ParserOperators::opStringIsHigherPrecedence(currentOuterOp,
															*(children[i].getLowestPrecedenceOperator())))
				newChildren = newChildren + children[i];
				else
				newChildren = newChildren + children[i].withWraps(parentheses);
		}
	return newChildren;
	}

pair<ImmutableTreeVector<PrintableExpressionTree>,int>
prepareLength(const ImmutableTreeVector<PrintableExpressionTree>& children)
	{
	ImmutableTreeVector<PrintableExpressionTree> newChildren;
	int length = 0;
	for(int i = 0; i < children.size(); i++)
		{
		PrintableExpressionTree newChild = children[i];
		if (newChild.getLineWrap() != NOWRAP)
			{
			length = 0;
			newChildren = newChildren + newChild;
			}
		else
			{
			if (length > MAX_LEN)
				{
				length = newChild.getLength();
				newChildren = newChildren + newChild.withLineWrap(BREAK_BEFORE);
				}
			else
				{
				newChildren = newChildren + newChild;
				length = length + newChild.getLength();
				}
			}
		}
	return pair<ImmutableTreeVector<PrintableExpressionTree>,int>(newChildren,length);
	}

ImmutableTreeVector<PrintableExpressionTree> ifStatementFormattingVisitor(const ImmutableTreeVector<PrintableExpressionTree>& children)
	{
	ImmutableTreeVector<PrintableExpressionTree> formattedTree;
	for (int i = 0; i < children.size(); i++)
		{
		PrintableExpressionTree newChild = children[i];
		Expression expression = children[i].getThis();
		if (children[i].getParentheses() != PARENS)
			{
			newChild = newChild.withLineWrap(BREAK_BEFORE);
			if (!expression.isBranch() || i != 2) //ie is not an else if
				newChild = newChild.withWraps(OFFSET_CURLY);
			}
		if (expression.isBranch())
			{
			ImmutableTreeVector<PrintableExpressionTree> newChildren =
				ifStatementFormattingVisitor(children[i].getNode().children());
			newChild = newChild.withChildren(newChildren);
			}
		formattedTree = formattedTree + newChild.withComplexity(COMPLEX);
		}
	return formattedTree;
	}

bool toBeInlined(const Expression& expression)
	{
	return (expression.isConstant() || expression.isVariable());
	}

PrintableExpressionTreeProperties prepareDefaultProperties(const Expression& expression)
	{
	PrintableExpressionTreeProperties properties;
	properties.complexity = IGNORE;
	properties.expression = expression;
	properties.lineBreak = NOWRAP;
	properties.lowestPrecedenceOperator = null();
	properties.parentheses = NONE;
	properties.length = 0;
	properties.containsLet = false;
	properties.needsParensIfInOpExpr = false;
	return properties;
	}

}//end anonymous namespace

Expression extractExpression(const Expression& expression)
	{
	Expression interiorExpression = expression;
	while (interiorExpression.isNoStackTraceAugmentations())
		{
		@match Expression(interiorExpression)
			-| NoStackTraceAugmentations(expression) ->> {
					interiorExpression = expression;
					}
			;
		}
	return interiorExpression;
	}

PrintableExpressionTree buildExpressionTree(const Expression& toPrint)
	{
	return buildExpressionTree(toPrint,FORAValuePrintingParameters());
	}

PrintableExpressionTree buildExpressionTree(const Expression& toPrint,
											const FORAValuePrintingParameters& parameters)
	{
	PrintableExpressionTreeProperties properties = prepareDefaultProperties(toPrint);
	ImmutableTreeVector<PrintableExpressionTree> children;
	@match Expression(toPrint)
		-|	Constant(constant) ->> {
				properties.length = (int)constant.toString().length();
				return PrintableExpressionTree::Leaf(properties,parameters);
				}
		-|	Sequence(first, second) ->> {
				PrintableExpressionTree aChild = buildExpressionTree(first,parameters)
										   			.withLineWrap(NOWRAP);
				//if the child is a let which should be in a different scope...
				if (aChild.containsLet())
					{
					aChild = aChild.withWraps(PARENS);
					}
				children = children + aChild;

				aChild = buildExpressionTree(second,parameters).withLineWrap(NOWRAP);
				children = children + aChild;
				properties.containsLet = aChild.containsLet();
				properties.length = children[0].getLength() + children[1].getLength();
				properties.lineBreak = BREAK_BEFORE;
				return PrintableExpressionTree::Node(properties,parameters,children);
				}
		-|	Variable(v) ->> {
				properties.length = v.toString().length();
				return PrintableExpressionTree::Leaf(properties,parameters);
				}
		-|	Let(elts, r) ->> {
				children = children + buildExpressionTree(r,parameters)
										.withLineWrap(BREAK_BEFORE);
				properties.lineBreak = BREAK_BEFORE;
				properties.containsLet = true;
				properties.needsParensIfInOpExpr = true;
				return PrintableExpressionTree::Node(properties,parameters,children);
				}
		-|	Assign(var, val) ->> {
				children = children + buildExpressionTree(val,parameters);
				properties.needsParensIfInOpExpr = true;
				return PrintableExpressionTree::Node(properties,parameters,children);
				}
		-|	Apply(agent, args) ->> {
				PrintableExpressionTree aChild = buildExpressionTree(agent,parameters);
				if (aChild.getLowestPrecedenceOperator() != null())
					aChild = aChild.withWraps(PARENS);
				children = children + aChild;
				return PrintableExpressionTree::Node(properties,parameters,children);
				}
		-|	Call(agent, args) ->> {
				PrintableExpressionTree aChild = buildExpressionTree(agent,parameters);
				if (aChild.getLowestPrecedenceOperator() != null())
					aChild = aChild.withWraps(PARENS);
				children = children + aChild;
				return PrintableExpressionTree::Node(properties,parameters,children);
				}
		-|	And(lhs, rhs) ->> {
				children = children + buildExpressionTree(lhs,parameters)
							+ buildExpressionTree(rhs,parameters);
				children = decideToWrap(children,PARENS,Symbol("and"));
				pair<ImmutableTreeVector<PrintableExpressionTree>,
					int> prepared = prepareLength(children);
				properties.length = prepared.second+5;
				properties.lowestPrecedenceOperator = Nullable<Symbol>(Symbol("and"));
				return PrintableExpressionTree::Node(properties,parameters,prepared.first);
				}
		-|	Or(lhs, rhs) ->> {
				children = children + buildExpressionTree(lhs,parameters)
							+ buildExpressionTree(rhs,parameters);
				children = decideToWrap(children,PARENS,Symbol("or"));
				pair<ImmutableTreeVector<PrintableExpressionTree>,
					int> prepared = prepareLength(children);
				properties.length = prepared.second+4;
				properties.lowestPrecedenceOperator = Nullable<Symbol>(Symbol("or"));
				return PrintableExpressionTree::Node(properties,parameters,prepared.first);
				}
		-|	Is(lhs, rhs) ->> {
				children = children + buildExpressionTree(lhs,parameters)
							+ buildExpressionTree(rhs,parameters);
				children = decideToWrap(children,PARENS,Symbol("is"));
				pair<ImmutableTreeVector<PrintableExpressionTree>,
					int> prepared = prepareLength(children);
				properties.length = prepared.second+4;
				properties.lowestPrecedenceOperator = Nullable<Symbol>(Symbol("is"));
				return PrintableExpressionTree::Node(properties,parameters,prepared.first);
				}
		-|	IsNot(lhs, rhs) ->> {
				children = children + buildExpressionTree(lhs,parameters)
							+ buildExpressionTree(rhs,parameters);
				children = decideToWrap(children,PARENS,Symbol("is not"));
				pair<ImmutableTreeVector<PrintableExpressionTree>,
					int> prepared = prepareLength(children);
				properties.length = prepared.second+8;
				properties.lowestPrecedenceOperator = Nullable<Symbol>(Symbol("is not"));
				return PrintableExpressionTree::Node(properties,parameters,prepared.first);
				}
		-|	In(lhs, rhs) ->> {
				children = children + buildExpressionTree(lhs,parameters)
							+ buildExpressionTree(rhs,parameters);
				children = decideToWrap(children,PARENS,Symbol("in"));
				pair<ImmutableTreeVector<PrintableExpressionTree>,
					int> prepared = prepareLength(children);
				properties.length = prepared.second+4;
				properties.lowestPrecedenceOperator = Nullable<Symbol>(Symbol("in"));
				return PrintableExpressionTree::Node(properties,parameters,prepared.first);
				}
		-|	NotIn(lhs, rhs) ->> {
				children = children + buildExpressionTree(lhs,parameters)
							+ buildExpressionTree(rhs,parameters);
				children = decideToWrap(children,PARENS,Symbol("not in"));
				pair<ImmutableTreeVector<PrintableExpressionTree>,
					int> prepared = prepareLength(children);
				properties.length = prepared.second+8;
				properties.lowestPrecedenceOperator = Nullable<Symbol>(Symbol("not in"));
				return PrintableExpressionTree::Node(properties,parameters,prepared.first);
				}
		-|	Not(lhs) ->> {
				children = children + buildExpressionTree(lhs,parameters);
				children = decideToWrap(children,PARENS,Symbol("not"));
				pair<ImmutableTreeVector<PrintableExpressionTree>,
					int> prepared = prepareLength(children);
				properties.length = prepared.second+5;
				properties.lowestPrecedenceOperator = Nullable<Symbol>(Symbol("not"));
				return PrintableExpressionTree::Node(properties,parameters,prepared.first);
				}
		-|	BinaryOperator(lhs, operation, rhs) ->> {
				children = children + buildExpressionTree(lhs,parameters)
							+ buildExpressionTree(rhs,parameters);
				children = decideToWrap(children,PARENS,operation);
				pair<ImmutableTreeVector<PrintableExpressionTree>,
					int> prepared = prepareLength(children);
				properties.length = prepared.second+operation.toString().length();
				properties.lowestPrecedenceOperator = Nullable<Symbol>(operation);
				return PrintableExpressionTree::Node(properties,parameters,prepared.first);
				}
		-|	LeftOperator(operation, expression) ->> {
				children = children + buildExpressionTree(expression,parameters);
				children = decideToWrap(children,PARENS,operation);
				pair<ImmutableTreeVector<PrintableExpressionTree>,
					int> prepared = prepareLength(children);
				properties.length = prepared.second+operation.toString().length();
				properties.lowestPrecedenceOperator = Nullable<Symbol>(operation);
				return PrintableExpressionTree::Node(properties,parameters,prepared.first);
				}
		-|	RightOperator(expression, operation) ->> {
				children = children + buildExpressionTree(expression,parameters);
				children = decideToWrap(children,PARENS,operation);
				pair<ImmutableTreeVector<PrintableExpressionTree>,
					int> prepared = prepareLength(children);
				properties.length = prepared.second+operation.toString().length();
				properties.lowestPrecedenceOperator = Nullable<Symbol>(operation);
				return PrintableExpressionTree::Node(properties,parameters,prepared.first);
				}
		-|	GetItem(agent, args) ->> {
				PrintableExpressionTree aChild = buildExpressionTree(agent,parameters);
				if (aChild.getLowestPrecedenceOperator() != null())
					aChild = aChild.withWraps(PARENS);
				children = children + aChild;
				pair<ImmutableTreeVector<PrintableExpressionTree>,
					int> prepared = prepareLength(children);
				properties.length = prepared.second;
				return PrintableExpressionTree::Node(properties,parameters,prepared.first);
				}
		-|	SetItem(agent, args, toSet) ->> {
				PrintableExpressionTree aChild = buildExpressionTree(agent,parameters);
				if (aChild.getLowestPrecedenceOperator() != null())
					aChild = aChild.withWraps(PARENS);
				children = children + aChild;
				children = children + buildExpressionTree(toSet,parameters);
				pair<ImmutableTreeVector<PrintableExpressionTree>,
					int> prepared = prepareLength(children);
				properties.length = prepared.second;
				return PrintableExpressionTree::Node(properties,parameters,
													  prepared.first).withWraps(PARENS);
				}
		-|	Member(agent,_, depth) ->> {
				PrintableExpressionTree aChild = buildExpressionTree(agent,parameters);
				if (aChild.getLowestPrecedenceOperator() != null())
					aChild = aChild.withWraps(PARENS);
				children = children + aChild;
				pair<ImmutableTreeVector<PrintableExpressionTree>,
					int> prepared = prepareLength(children);
				properties.length = prepared.second;
				return PrintableExpressionTree::Node(properties,parameters,prepared.first);
				}
		-|	ComputedMember(agent, member, depth) ->> {
				PrintableExpressionTree aChild = buildExpressionTree(agent,parameters);
				if (aChild.getLowestPrecedenceOperator() != null())
					aChild = aChild.withWraps(PARENS);
				children = children + aChild;
				children = children + buildExpressionTree(member,parameters);
				pair<ImmutableTreeVector<PrintableExpressionTree>,
					int> prepared = prepareLength(children);
				properties.length = prepared.second;
				return PrintableExpressionTree::Node(properties,parameters,prepared.first);
				}
		-|	While(condition,update) ->> {
				children = children
							+ buildExpressionTree(condition,parameters).withWraps(PARENS)
							+ buildExpressionTree(update,parameters).withWraps(OFFSET_CURLY)
							   										.withLineWrap(BREAK_BEFORE);
				return PrintableExpressionTree::Node(properties,parameters,children);
				}
		-|	Break() ->> {
				properties.length = 5;
				properties.parentheses = PARENS;
				return PrintableExpressionTree::Leaf(properties,parameters);
				}
		-|	Cached(expression) ->> {
				properties.length = 0;
				properties.lineBreak = BREAK_BEFORE;
				return PrintableExpressionTree::Leaf(properties,parameters);
				}
		-|	RawCached(expression) ->> {
				properties.lineBreak = BREAK_BEFORE;
				return PrintableExpressionTree::Leaf(properties,parameters);
				}
		-|	Branch(condition,ifStatement,elseStatement) ->> {
				children = children + buildExpressionTree(condition,parameters)
										.withWraps(PARENS);
				children = children + buildExpressionTree(ifStatement,parameters);

				//determine whether or not to place all on one line, only do this if
				//a series of else-ifs
				properties.complexity = COMPLEX;
				properties.lineBreak = BREAK_BEFORE;

				//add 5 to account for if and parens
				int length = children[0].getLength() + children[1].getLength() + 5;
				if (!elseStatement && toBeInlined(extractExpression(ifStatement)))
					{
					properties.complexity = SIMPLE;
					properties.lineBreak = NOWRAP;
					}
					else
				if (!elseStatement)
					children = ifStatementFormattingVisitor(children);
				//if none of the above, has an else statement
				else
					{
					PrintableExpressionTree aChild = buildExpressionTree(*elseStatement,parameters);
					//add length to child for the else statement
					aChild = aChild.withLength(aChild.getLength() + 6);
					children = children + aChild;
					if (aChild.getComplexity() != COMPLEX
						&& toBeInlined(extractExpression(ifStatement)))
						{
						properties.complexity = SIMPLE;
						properties.lineBreak = NOWRAP;
						}
					else
						children = ifStatementFormattingVisitor(children);
					}
				return PrintableExpressionTree::Node(properties,parameters,children);
				}
		-|	Throw(expression, stacktrace) ->> {
				PrintableExpressionTree aChild = buildExpressionTree(expression,parameters);
				if (aChild.getLowestPrecedenceOperator())
					aChild = aChild.withWraps(PARENS);
				children = children + aChild;
				if (stacktrace)
					{
					aChild = buildExpressionTree(*stacktrace,parameters);
					if (aChild.getLowestPrecedenceOperator())
						aChild = aChild.withWraps(PARENS);
					children = children + aChild;
					}
				pair<ImmutableTreeVector<PrintableExpressionTree>,
					int> prepared = prepareLength(children);
				properties.length = prepared.second;
				properties.needsParensIfInOpExpr = true;
				return PrintableExpressionTree::Node(properties,parameters,prepared.first);
				}
		-|	Return(expression) ->> {
				children = children + buildExpressionTree(expression,parameters);
				properties.length = children[0].getLength();
				return PrintableExpressionTree::Node(properties,parameters,children);
				}
		-|	Yield(expression) ->> {
				children = children + buildExpressionTree(expression,parameters);
				properties.length = children[0].getLength();
				properties.needsParensIfInOpExpr = true;
				return PrintableExpressionTree::Node(properties,parameters,children);
				}
		-|	Pull(var, contArg) ->> {
				children = children + buildExpressionTree(contArg,parameters);
				properties.needsParensIfInOpExpr = true;
				return PrintableExpressionTree::Node(properties,parameters,children);
				}
		-|	Continuation(withContinuation) ->> {
				properties.length = 13;
				properties.parentheses = PARENS;
				return PrintableExpressionTree::Leaf(properties,parameters);
				}
		-|	Foreach(comprehension) ->> {
				return PrintableExpressionTree::Leaf(properties,parameters)
				}
		-|	Try(expression, catchWith, stacktrace, isRaw) ->> {
				children = children + buildExpressionTree(expression,parameters)
										.withWraps(OFFSET_CURLY)
										.withLineWrap(BREAK_BEFORE);
				return PrintableExpressionTree::Node(properties,parameters,children);
				}
		-|	Match(args, predicate) ->> {
				return PrintableExpressionTree::Leaf(properties,parameters);
				}
		-|	CreateFunction(name, predicate) ->> {
				return PrintableExpressionTree::Leaf(properties,parameters);
				}
		-|	CreateLambda(name, predicate) ->> {
				return PrintableExpressionTree::Leaf(properties,parameters);
				}
		-|	CreateObject(name, (predicate, selfName)) ->> {
				return PrintableExpressionTree::Leaf(properties,parameters);
				}
		-|	CreateClass(name, (predicate, selfName)) ->> {
				return PrintableExpressionTree::Leaf(properties,parameters);
				}
		-|	CreateTuple(args) ->> {
				return PrintableExpressionTree::Leaf(properties,parameters);
				}
		-|	CreateList(expressions) ->> {
				PrintableExpressionTree aChild;
				for (long k = 0; k < expressions.size(); k++)
					{
					aChild = buildExpressionTree(expressions[k],parameters);
					children = children+aChild;
					}
				pair<ImmutableTreeVector<PrintableExpressionTree>,
					int> prepared = prepareLength(children);
				properties.length = prepared.second;
				return PrintableExpressionTree::Node(properties,parameters,prepared.first);
				}
		-|	ListComprehension(chain, isIterator) ->> {
				properties.parentheses = SQUARE;
				return PrintableExpressionTree::Leaf(properties,parameters);
				}
		-|	NoStackTraceAugmentations(expression) ->> {
				return buildExpressionTree(expression,parameters);
				}
		-|	_ ->> { lassert(false); }
		;
	throw standardLogicErrorWithStacktrace(
        "This statement should not be reached. tree = " +
        std::string(toPrint.tagName())
        );
	}

}
