/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/
#ifndef FORA_FORAValuePrinting_PrintableExpressionTree_hppml
#define FORA_FORAValuePrinting_PrintableExpressionTree_hppml

#include "FORAValuePrinter.hppml"
#include "../Language/Function.hppml"
#include "../../core/cppml/CPPMLPrettyPrinter.hppml"

namespace FORAValuePrinting{

//Enumeration for Types of Parens in Expression Printing
enum paren_type {NONE = 0, PARENS = 1, CURLY = 2, SQUARE = 3, OFFSET_CURLY = 4};

//Enumeration for Line Wrap Formatting Values
enum line_wrap {NOWRAP = 0, BREAK_BEFORE = 1};

//Values for Determining inlining of if-else statements
enum complexity_type {IGNORE = 0, COMPLEX = -1, SIMPLE = 1, FORMATTED_SIMPLE = 2};

//maximum line length
const int MAX_LEN = 30;

//indentation string
const std::string INDENT = "    ";

//Classes to create a formatted tree representing an expression
//such that it can be easily printed
struct PrintableExpressionTreeProperties
	{
	int length;
	line_wrap lineBreak;
	Nullable<Symbol> lowestPrecedenceOperator;
	bool containsLet;
	bool needsParensIfInOpExpr;
	paren_type parentheses;
	complexity_type complexity;
	Expression expression;
	};

@type
	//Intermediate Representation for the Stringification of Expressions
	//holds expressions in tree form and determines location of parens and
	//formatting of eventual output
	PrintableExpressionTree =
		//if there are no sub expressions
		-|	Leaf of ()
		-|	Node of ImmutableTreeVector<PrintableExpressionTree> children
	with
		PrintableExpressionTreeProperties props,
		FORAValuePrintingParameters	parameters
	{
	public:
		//access members/properties
		PrintableExpressionTreeProperties getProperties() const;
		FORAValuePrintingParameters getParameters() const;
		Expression getThis() const;
		paren_type getParentheses() const;
		line_wrap getLineWrap() const;
		int getLength() const;
		complexity_type getComplexity() const;
		Nullable<Symbol> getLowestPrecedenceOperator() const;
		ImmutableTreeVector<PrintableExpressionTree> getChildren() const;
		bool containsLet() const;
		bool needsParensIfInOpExpr() const;

		//get new trees with updated members
		PrintableExpressionTree withLength(int newLength) const;
		PrintableExpressionTree withWraps(paren_type newWrapsVal) const;
		PrintableExpressionTree withLineWrap(line_wrap newWrap) const;
		PrintableExpressionTree withComplexity(complexity_type newComplexity) const;
		PrintableExpressionTree withChildren(ImmutableTreeVector<PrintableExpressionTree> c) const;

		//prints tree representation of a formatted expression
		void toString(CPPMLPrettyPrintStream& s) const;

	private:
		//help with printing of expressionTrees
		static void printableExpressionTreeLeafToString(CPPMLPrettyPrintStream& s,
										  				const PrintableExpressionTree expressionTree);
		static void printableExpressionTreeNodeToString(CPPMLPrettyPrintStream& s,
														const PrintableExpressionTree& expressionTree);
		static PrintableExpressionTree formatSimpleIfSeriesForPrinting(const PrintableExpressionTree& ifExpression);
		static PrintableExpressionTree formatSimpleIfSeriesForPrinting(const PrintableExpressionTree& ifExpression,
																		int cumulativeLength);
		static void printBinaryOperation(const ImmutableTreeVector<PrintableExpressionTree>& children,
										CPPMLPrettyPrintStream& s,
										Symbol operation);
		static void printBinaryOperation(const ImmutableTreeVector<PrintableExpressionTree>& children,
										CPPMLPrettyPrintStream& s,
										const string& operation);
	}
	;

//create trees from expressions
PrintableExpressionTree buildExpressionTree(const Expression& toPrint);

PrintableExpressionTree buildExpressionTree(const Expression& toPrint,
											const FORAValuePrintingParameters& parameters);
}

template<>
class CPPMLPrettyPrint<FORAValuePrinting::PrintableExpressionTree> {
public:
	static void prettyPrint(CPPMLPrettyPrintStream& stream,
							const FORAValuePrinting::PrintableExpressionTree& toPr);
};

#endif

