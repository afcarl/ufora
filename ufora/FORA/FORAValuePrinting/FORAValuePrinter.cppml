/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/
#include "FORAValuePrinter.hppml"
#include "../Core/ClassMediator.hppml"
#include "../Core/ImplVal.hppml"

namespace FORAValuePrinting{

//definition of FORAValuePrintingParameters members
FORAValuePrintingParameters FORAValuePrintingParameters::defaultPrintingParameters()
	{
	//by default no classes or objects are printed
	return FORAValuePrintingParameters(	false,
										false,
										ImmutableTreeMap<Symbol,Symbol>(),
										ImmutableTreeMap<Symbol,ImplVal>());
	}

FORAValuePrintingParameters FORAValuePrintingParameters::withMap(ImmutableTreeMap<Symbol,Symbol> newMap) const
	{
	return FORAValuePrintingParameters(printClasses(),
										printBoundClasses(),
										newMap,
										doNotPrint());
	}

//definition of FORAValuePrinter members
FORAValuePrinter::FORAValuePrinter(CPPMLPrettyPrintStream& inStream,
									FORAValuePrintingParameters inParameters) : printStream(inStream)
	{
	printParameters = inParameters;
	}

FORAValuePrinter::FORAValuePrinter(CPPMLPrettyPrintStream& inStream) : printStream(inStream)
	{
	printParameters = FORAValuePrintingParameters::defaultPrintingParameters();
	}

FORAValuePrintingParameters FORAValuePrinter::getPrintingParameters() const
	{
	return printParameters;
	}

CPPMLPrettyPrintStream& FORAValuePrinter::stream() const
	{
	return printStream;
	}

bool FORAValuePrinter::printBoundClasses() const
	{
	return getPrintingParameters().printBoundClasses();
	}

bool FORAValuePrinter::printClasses() const
	{
	return getPrintingParameters().printClasses();
	}

bool FORAValuePrinter::shouldPrint(const ImplVal& val) const
	{
	return !getPrintingParameters().doNotPrint().valueSet().contains(val);
	}
ImmutableTreeSet<Symbol> FORAValuePrinter::reservedNames() const
	{
	return getPrintingParameters().doNotPrint().keySet()
			+ variableSwap().valueSet();
	}

FORAValuePrinter FORAValuePrinter::withStream(CPPMLPrettyPrintStream& newStream) const
	{
	return FORAValuePrinter(newStream,getPrintingParameters());
	}

FORAValuePrinter FORAValuePrinter::withMap(ImmutableTreeMap<Symbol,Symbol> newMap) const
	{
	return FORAValuePrinter(stream(),getPrintingParameters().withMap(newMap));
	}

ImmutableTreeMap<Symbol,Symbol> FORAValuePrinter::variableSwap() const
	{
	return getPrintingParameters().variableSwap();
	}

void FORAValuePrinter::toString(const ClassMediator& mediator) const
	{
	@match ClassMediator(mediator)
		-| Function(fun,_,objectMetadata) ->> {
				objectMetadata.printMetadata(stream());
				toString(fun);
				}
		-| Lambda(fun,_) ->> {
				stream () << "{";
				toString(fun);
				stream () << "}";
				}
		-| Class(fun,_,objectMetadata) ->> {
				objectMetadata.printMetadata(stream());
				toString(fun);
				}
		-| Object(obj,_,objectMetadata) ->> {
				objectMetadata.printMetadata(stream());
				toString(obj);
				}
		-| Axiom(axiomFun) ->> {
				toString(axiomFun);
				}
		;
	}

void FORAValuePrinter::toString(const ImplVal& v) const
	{
	toString(v.type(), v.data());
	}

void FORAValuePrinter::toString(const CSTValue& val) const
	{
	toString(val.type(), val.getData());
	}

}

