/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/
#ifndef FORA_FORAValuePrinting_FORAValuePrinter_hppml
#define FORA_FORAValuePrinting_FORAValuePrinter_hppml

#include "../Language/Parser.hppml"
#include "../Language/ParserExpressions.hppml"
#include "../Language/ParserOperators.hppml"
#include "../Core/Type.hppml"
#include "../Core/CSTValue.hppml"
#include "../Judgment/JudgmentOnValue.hppml"
#include "../../core/containers/ImmutableTreeMap.hppml"
#include "../Primitives/Symbol.hpp"

namespace FORAValuePrinting{

//used to give parameters for FORA value printing, for example
//can be used to specify level of detail in which values should be
//printed. Can also permit shorthand abbreviations for certain types
//of objects, such as the bultins module.

@type
	FORAValuePrintingParameters =
	 	bool printClasses,
	 	bool printBoundClasses,
		ImmutableTreeMap<Symbol,Symbol> variableSwap,
		ImmutableTreeMap<Symbol,ImplVal> doNotPrint
	{
	public:
		static FORAValuePrintingParameters defaultPrintingParameters();
		FORAValuePrintingParameters withMap(ImmutableTreeMap<Symbol,Symbol> newMap) const;
	};

class FORAValuePrinter	{
public:
	FORAValuePrinter(CPPMLPrettyPrintStream& inStream,
					FORAValuePrintingParameters inParameters);
	FORAValuePrinter(CPPMLPrettyPrintStream& s);
	FORAValuePrintingParameters getPrintingParameters() const;
	bool printBoundClasses() const;
	bool printClasses() const;
	bool shouldPrint(const ImplVal& val) const;
	FORAValuePrinter withStream(CPPMLPrettyPrintStream& newStream) const;
	FORAValuePrinter withMap(ImmutableTreeMap<Symbol,Symbol> newMap) const;
	ImmutableTreeMap<Symbol,Symbol> variableSwap() const;
	ImmutableTreeSet<Symbol> reservedNames() const;
	CPPMLPrettyPrintStream& stream() const;

	void toString(const Function& fun) const;
	void toString(const Function& fun, bool isFirst) const;
	void toString(const Pattern& pat) const;
	void toString(const PatternWithName& namedPattern) const;
	void toString(const TuplePatternElement& toPrint) const;
	void toString(const ListComprehensionChain& list) const;
	void toString(const CacheCallArgument& argument) const;
	void toString(const ApplyArgument& applyArg) const;
	void toString(const ObjectDefinition& object) const;
	void toString(const ObjectDefinitionBody& object) const;
	void toString(const ObjectDefinitionTerm& object) const;
	void toString(const ClassDefinition& object) const;
	void toString(const ClassDefinitionBody& object) const;
	void toString(const ClassDefinitionTerm& object) const;
	void toString(const TuplePattern& pat) const;
	void toString(const Expression& toPrint) const;
	void toString(const ClassMediator& mediator) const;
	void toString(const Type& typeObject, void* data) const;
	void printTupleAsCallArgs(const Type& typeObject, void* data) const;
	void toString(const Type& typeObject) const;
	void toString(const ImplVal& v) const;
	void toString(const CSTValue& val) const;

	template<class T>
	void toString(const ImmutableTreeVector<T> toPrint) const;
private:
	CPPMLPrettyPrintStream& printStream;
	FORAValuePrintingParameters printParameters;
};

template <class T>
void FORAValuePrinter::toString(ImmutableTreeVector<T> vec) const
	{
	stream() << "(";
	for (long k = 0; k < vec.size();k++)
		{
		toString(vec[k]);
		if (k+1 < vec.size())
			stream()  << ", ";
		}
	stream() << ")";
	}

Expression extractExpression(const Expression& e);

}

#endif

