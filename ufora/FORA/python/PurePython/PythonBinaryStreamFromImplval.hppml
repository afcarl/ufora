/***************************************************************************
    Copyright 2016 Ufora Inc.

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
****************************************************************************/

#pragma once

#include "PythonAst.hppml"
#include "../../Language/Function.hppml"
#include "../../../core/PolymorphicSharedPtr.hpp"
#include "PythonBinaryStreamCommon.hppml"
#include "PythonConstantConverter.hppml"
#include "PythonListConverter.hppml"
#include "PythonTupleConverter.hppml"
#include "PythonDictConverter.hppml"
#include "PythonAstConverter.hppml"
#include "PyforaSingletonAndExceptionConverter.hppml"
#include "../../Language/FreeVariableListFromPython.hpp"
#include "../../VectorDataManager/VectorDataManager.hppml"
#include "PythonParseResult.hppml"


namespace TypedFora {
namespace Abi {
class VectorRecord;
}
}

namespace Fora {

class PythonBinaryStreamFromImplval :
        public PolymorphicSharedPtrBase<PythonBinaryStreamFromImplval> {
public:
    PythonBinaryStreamFromImplval(
            PolymorphicSharedPtr<VectorDataManager> inVDM,
            const ImplValContainer& inPyforaBuiltins,
            ImmutableTreeMap<std::string, std::string> pythonSingletonNameToPyforaName
            );

    int64_t write(OBinaryStream& stream, const ImplValContainer& value);

    void writeTerminator(OBinaryStream& stream);

protected:
    int64_t allocateId();

    int64_t writeFile(OBinaryStream& stream,
                      const std::string& path,
                      const std::string& text);
    void writeUnconvertible(OBinaryStream& stream,
                            const ImplValContainer& value,
                            int64_t objectId);
    void writePrimitive(OBinaryStream& stream,
                        const ImplVal& primitive,
                        int64_t objId);
    void _writePrimitive(OBinaryStream& stream,
                        const ImplVal& primitive);
    void writeSingleton(OBinaryStream& stream,
                        const std::string& singletonName,
                        int64_t objId);
    void writeException(OBinaryStream& stream,
                        const ImplValContainer& exceptionArgs,
                        const std::string& exceptionName,
                        bool isPyAbort,
                        int64_t objectId);
    void writeTuple(OBinaryStream& stream,
                    const ImmutableTreeVector<ImplValContainer>& tupleContents,
                    int64_t objId);
    void writeDict(
        OBinaryStream& stream,
        const std::pair<ImmutableTreeVector<CSTValue>, ImmutableTreeVector<ImplValContainer>>& dictContents,
        int64_t objId);
    void writeList(OBinaryStream& stream,
                   const ImplValContainer& listContents,
                   int64_t objId);
    void writeEmptyList(OBinaryStream& stream, int64_t objId);
    //  Returns true if write was successful, false if not
    bool tryWriteHomogeneousListOfDirectlySeralizable(
        OBinaryStream& stream,
        TypedFora::Abi::VectorRecord& vec,
        int64_t objId);
    //  Returns true if write was successful, false if not
    bool tryWriteVectorOfPrimitives(
        OBinaryStream& stream,
        TypedFora::Abi::VectorRecord& vec,
        int64_t objId);
    void writeListGeneric(OBinaryStream& stream,
                          TypedFora::Abi::VectorRecord& vec,
                          int64_t objId);
    void writeClass(OBinaryStream& stream,
                    const ImplValContainer& value,
                    int64_t objId);

    void writeClassOrFunctionMembers(
        OBinaryStream& stream,
        const ImplValContainer& value,
        map<string, int64_t>& outMemberIds
        );

    Nullable<PythonBinaryStreamCommon::DtypePrimitive>
    dtypeForImplval(const ImplValContainer& arg) const;

    bool isPrimitive(const JudgmentOnValue& jov) const;
    bool allPrimitives(const JudgmentOnResult&jov) const;

    int64_t mNextObjId;

    std::map<hash_type, int64_t> mIdMapping;

    std::map<pair<std::string, std::string>, int64_t> mFileToIdMapping;

    ImplValContainer mPyforaBuiltins;

    ImplValContainer mPyforaBoundMethodClass;

    PolymorphicSharedPtr<VectorDataManager> mVDM;

    PolymorphicSharedPtr<PythonConstantConverter> mConstantConverter;

    PolymorphicSharedPtr<PythonListConverter> mListConverter;

    PolymorphicSharedPtr<PythonTupleConverter> mTupleConverter;

    PolymorphicSharedPtr<PythonDictConverter> mDictConverter;

    PolymorphicSharedPtr<PyforaSingletonAndExceptionConverter> mSingletonAndExceptionConverter;

    ImmutableTreeMap<Symbol, pair<ImplValContainer, Nullable<Symbol> > > mBuiltinSymbolMapping;
};

}
