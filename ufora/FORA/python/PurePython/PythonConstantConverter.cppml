/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/
#include "PythonConstantConverter.hppml"
#include "PythonConstantType.hppml"
#include "../../Judgment/JudgmentOnValue.hppml"
#include "../../Core/CSTValue.hppml"
#include "../../TypedFora/ABI/VectorRecord.hpp"
#include "../../Core/ImplValContainerUtilities.hppml"
#include "../../Core/MemoryPool.hpp"

namespace Fora {

PythonConstantConverter::PythonConstantConverter(
                const ImmutableTreeMap<PythonConstantType, ImplValContainer>& primitiveTypeMapping,
                MemoryPool* targetPool
                ) : 
        mTypeConvertersMap(primitiveTypeMapping),
        mTargetMemoryPool(targetPool)
    {
    mStringPrototype = ImplValContainerUtilities::simulateClassInstantiation(
        *mTypeConvertersMap[PythonConstantType::String()], 
        ImplValContainerUtilities::createString(String())
        );
    mIntPrototype = ImplValContainerUtilities::simulateClassInstantiation(
        *mTypeConvertersMap[PythonConstantType::Int()], 
        ImplValContainerUtilities::createSignedInteger(0)
        );
    mBoolPrototype = ImplValContainerUtilities::simulateClassInstantiation(
        *mTypeConvertersMap[PythonConstantType::Boolean()], 
        ImplValContainerUtilities::createBool(false)
        );
    mNonePrototype = ImplValContainerUtilities::simulateClassInstantiation(
        *mTypeConvertersMap[PythonConstantType::None()], 
        ImplValContainer()
        );
    mFloatPrototype = ImplValContainerUtilities::simulateClassInstantiation(
        *mTypeConvertersMap[PythonConstantType::Float()], 
        ImplValContainerUtilities::createDouble(0.0)
        );

    mIntType = mIntPrototype.type();
    mBoolType = mBoolPrototype.type();
    mNoneType = mNonePrototype.type();
    mFloatType = mFloatPrototype.type();
    mStringType = mStringPrototype.type();    

    mPrototypeTypeToWrappedType[mStringType] = Type::String();
    mPrototypeTypeToWrappedType[mIntType] = Type::Integer(64, true);
    mPrototypeTypeToWrappedType[mBoolType] = Type::Integer(1, false);
    mPrototypeTypeToWrappedType[mFloatType] = Type::Float(64);
    }

ImplValContainer PythonConstantConverter::convertBoolean(uint8_t value) const
    {
    return ImplValContainer(ImplVal(*mBoolType, &value));
    }

ImplValContainer PythonConstantConverter::convertInt(int64_t value) const
    {
    return ImplValContainer(ImplVal(*mIntType, &value));
    }

ImplValContainer PythonConstantConverter::convertString(const std::string& str) const
    {
    // we might want to move this MemoryPool away from
    // the FreeStore and into a VDM eventually
    ImplValContainer strImplVal =
        ImplValContainerUtilities::createString(
            String(str, mTargetMemoryPool)
            );

    return ImplValContainer(ImplVal(*mStringType, strImplVal.data()));
    }

ImplValContainer PythonConstantConverter::convertLong(const std::string&) const
    {
    throw std::logic_error("Conversion of Python 'long' is not supported");
    }

ImplValContainer PythonConstantConverter::noneValue() const
    {
    return mNonePrototype;
    }

ImplValContainer PythonConstantConverter::convertFloat(double value) const
    {
    return ImplValContainer(ImplVal(*mFloatType, &value));
    }

Nullable<ImplValContainer>
PythonConstantConverter::unwrapToPrimitive(const ImplValContainer& value) const
    {
    Nullable<ImplVal> res = unwrapToPrimitiveRaw(value.getReference());
    if (res.isValue()) {
        return null() << ImplValContainer(*res);
        }

    return null();
    }

Nullable<ImplVal> PythonConstantConverter::unwrapToPrimitiveRaw(const ImplVal& value) const
    {
    Nullable<ImplVal> primitiveOrNull = unwrapToPrimitiveByPrototypesRaw(value);
    if (primitiveOrNull.isValue()) {
        return primitiveOrNull;
        }

    Nullable<pair<ImplVal, Nullable<Symbol>>> member =
        ImplValContainerUtilities::objectGetMemberRaw(value, Symbol("@m"));

    if (!member || member->second)
        return null();

    @match Type(member->first.type())
        -| Vector() ->> {
            JudgmentOnResult jor =
                member->first.cast<TypedFora::Abi::VectorRecord>().jor();

            if (jor.size() != 1)
                return null();

            if (jor[0] != JOV::OfType(Type::Integer(8, false)))
                return null();
            }
        -| String() ->> {}
        -| Float(bits) ->> { if (bits != 64) return null(); }
        -| Integer(bits, isSigned) ->> { if (!(bits == 64 && isSigned || bits == 1 && !isSigned)) return null(); }
        -| Nothing() ->> {}
        -| _ ->> {
            return null();
            }

    return null() << member->first;
    }


Nullable<ImplVal> PythonConstantConverter::unwrapToPrimitiveByPrototypesRaw(
        const ImplVal& value
        ) const
    {
    MemoizedAlternativePointer<Type> rawType = value.type();
    if (rawType == mNoneType) {
        return null() << ImplVal();
        }

    auto it = mPrototypeTypeToWrappedType.find(rawType);

    if (it != mPrototypeTypeToWrappedType.end()) {
        return null() << ImplVal(it->second, value.data());
        }

    return null();
    }


}

