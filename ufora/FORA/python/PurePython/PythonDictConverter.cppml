/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/
#include "PythonDictConverter.hppml"

#include "PythonAst.hppml"
#include "../../Language/Function.hppml"
#include "../../Language/FunctionStage1Simulation.hppml"
#include "../../Core/ClassMediator.hppml"
#include "../../Core/ImplValContainerUtilities.hppml"
#include "../../../core/Logging.hpp"

namespace Fora {

PythonDictConverter::PythonDictConverter(
        const ImplValContainer& pyDictClassImplVal
        ) : mPyDictClass(pyDictClassImplVal)
    {
    lassert(pyDictClassImplVal.isCST());

    mEmptyInstance = createDict(
        emptyTreeVec(), emptyTreeVec()
        );
    }

Expression PythonDictConverter::convertPyDictRaw(
        const Fora::PythonAstExpr_DictType& dictExpr,
        const std::function<Expression(const PythonAstExpr&)>&
            convertPythonAstExpressionToFora
        ) const
    {
    lassert(dictExpr.keys().size() == dictExpr.values().size());

    ImmutableTreeVector<Expression> keyExprs;
    ImmutableTreeVector<Expression> valueExprs;

    for (long ix = 0; ix < dictExpr.keys().size(); ++ix)
        {
        keyExprs = keyExprs +
            convertPythonAstExpressionToFora(dictExpr.keys()[ix]);

        valueExprs = valueExprs +
            convertPythonAstExpressionToFora(dictExpr.values()[ix]);
        }

    return createDictExprRaw(keyExprs, valueExprs);
    }

Expression PythonDictConverter::convertPyDict(
        const Fora::PythonAstExpr_DictType& dictExpr,
        const std::function<Expression(const PythonAstExpr&)>&
            convertPythonAstExpressionToFora
        ) const
    {
    auto rawForaDictExpr = convertPyDictRaw(
        dictExpr,
        convertPythonAstExpressionToFora
        );

    return instantiatePyDictExpr(rawForaDictExpr);
    }

Expression PythonDictConverter::createDictExprRaw(
        const ImmutableTreeVector<Expression>& keys,
        const ImmutableTreeVector<Expression>& values
        ) const
    {
    Expression tr = Expression::Constant(
        CSTValue::blankOf(
            Type::Dictionary(true)
            )
        );

    lassert(keys.size() == values.size());

    ApplyArgument addPairSymbol = ApplyArgument::Normal(
        null(),
        Expression::Constant(
            CSTValue(Symbol("AddPair"))
            )
        );

    for (long ix = 0; ix < keys.size(); ++ix)
        {
        ImmutableTreeVector<ApplyArgument> addKeyValueArgs;

        addKeyValueArgs = addKeyValueArgs + addPairSymbol;
        addKeyValueArgs = addKeyValueArgs + ApplyArgument::Normal(null(), keys[ix]);
        addKeyValueArgs = addKeyValueArgs + ApplyArgument::Normal(null(), values[ix]);

        tr = Expression::Apply(tr, addKeyValueArgs);
        }

    return tr;
    }

Expression PythonDictConverter::createDictExpr(
        const ImmutableTreeVector<Expression>& keys,
        const ImmutableTreeVector<Expression>& values
        ) const
    {
    Expression rawForaDictExpr = createDictExprRaw(keys, values);

    return instantiatePyDictExpr(rawForaDictExpr);
    }

Expression PythonDictConverter::instantiatePyDictExpr(
        const Expression& memberExpr
        ) const
    {
    ImmutableTreeVector<ApplyArgument> applyArguments;

    applyArguments = applyArguments +
        ApplyArgument::Normal(
            null(),
            Expression::Constant(
                CSTValue(
                    Symbol("CreateInstance")
                    )
                )
            );

    applyArguments = applyArguments + memberExpr;

    return Expression::Apply(
        Expression::Constant(
            CSTValue(mPyDictClass)
            ),
        applyArguments
        );
    }

ImplValContainer PythonDictConverter::createDict(
        const ImmutableTreeVector<ImplValContainer>& keys,
        const ImmutableTreeVector<ImplValContainer>& values
        ) const
    {
    FunctionStage1::Simulation simulation(10);

    ImmutableTreeVector<ImplValContainer> applyArgs;

    applyArgs = applyArgs + ImplValContainer(mPyDictClass);

    applyArgs = applyArgs +
        ImplValContainerUtilities::createSymbol(
            Symbol("CreateInstance")
            );

    applyArgs = applyArgs + ImplValContainerUtilities::createDict(keys, values);

    FunctionStage1::ExpressionEvaluationResult res =
        simulation.evaluateApply(applyArgs);

    lassert(res.isResult());

    return res.getResult().val();
    }

Nullable<std::pair<ImmutableTreeVector<CSTValue>, ImmutableTreeVector<ImplValContainer>>>
PythonDictConverter::invertDict(ImplValContainer possibleDict)
    {
    //if its the same class object that we would create for the empty dict
    if (possibleDict.type().isClass() && possibleDict.type().getClass().classBody() ==
            mEmptyInstance.type().getClass().classBody())
        {
        Nullable<pair<ImplValContainer, Nullable<Symbol> > > member =
                ImplValContainerUtilities::objectGetMember(possibleDict, Symbol("@m"));

        lassert_dump(member && !member->second, "Expected the PyDict '@m' field to be simple data");

        lassert(member->first.type().isDictionary());

        const Dictionary& dict = member->first.cast<Dictionary>();

        return null() <<
            std::make_pair(
                dict.keys(),
                dict.values()
                );
        }

    return null();
    }

}


