/***************************************************************************
    Copyright 2016 Ufora Inc.

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
****************************************************************************/
#pragma once

#include "../../Core/Type.hppml"

#include <unordered_map>
#include <stdint.h>


class ImplValContainer;

namespace Fora {
class PythonConstantConverter;
class PythonListConverter;
}

namespace TypedFora {
namespace Abi {
class ForaValueArray;
}
}


class PyListBuilder {
public:
    PyListBuilder(
        PolymorphicSharedPtr<Fora::PythonConstantConverter>,
        PolymorphicSharedPtr<Fora::PythonListConverter>
        );

    void appendNone() const;
    void appendInt(int64_t) const;
    void appendFloat(double) const;
    void appendBool(uint8_t) const;
    void appendPrimitive(uint8_t code, const ImplValContainer& value) const;
    void append(const ImplValContainer&) const;

    ImplValContainer buildList() const;

private:
    Type noneType() const;
    Type intType() const;
    Type floatType() const;
    Type boolType() const;

    const Type& getPrimitiveType(uint8_t code) const;

    PyListBuilder(const PyListBuilder&) = delete;
    void operator=(const PyListBuilder&) = delete;

    Type registerPrimitiveType(
        uint8_t code,
        const ImplValContainer& prototype
        ) const;

    Type getVectorElementJovType(const ImplValContainer&) const;

    TypedFora::Abi::ForaValueArray* const mForaValueArray;
    
    mutable std::unordered_map<uint8_t, Type> mPrimitiveCodeToVectorElementType;
    
    PolymorphicSharedPtr<Fora::PythonConstantConverter> mConstantConverter;

    PolymorphicSharedPtr<Fora::PythonListConverter> mListConverter;
};
