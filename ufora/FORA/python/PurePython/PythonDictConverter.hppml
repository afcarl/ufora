/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/
#pragma once

#include "../../Core/CSTValue.hppml"
#include "../../Core/ImplValContainer.hppml"
#include "../../Core/Type.hppml"
#include "../../../core/PolymorphicSharedPtr.hpp"
#include "../../../core/cppml/MemoizedAlternativePointer.hppml"

class Expression;

template<class T>
class ImmutableTreeVector;

template<class T>
class Nullable;

namespace Fora {
class PythonAstExpr;
class PythonAstExpr_DictType;
}


namespace Fora {

class PythonDictConverter:
        public PolymorphicSharedPtrBase<PythonDictConverter> {
public:
    PythonDictConverter(const ImplValContainer&);

    Expression convertPyDict(
        const Fora::PythonAstExpr_DictType& dictExpr,
        const std::function<Expression(const PythonAstExpr&)>&
            convertPythonAstExpressionToFora
        ) const;

    ImplValContainer createDict(
        const ImmutableTreeVector<ImplValContainer>& keys,
        const ImmutableTreeVector<ImplValContainer>& values
        ) const;

    Expression createDictExpr(
        const ImmutableTreeVector<Expression>& keys,
        const ImmutableTreeVector<Expression>& values
        ) const;

    // if this is a dict, extract its elements as IVCs
    // this pair here is keys, values, respectfully
    Nullable<std::pair<ImmutableTreeVector<CSTValue>, ImmutableTreeVector<ImplValContainer>>>
    invertDict(ImplValContainer possibleDict);

private:
    CSTValue mPyDictClass;

    ImplValContainer mEmptyInstance;

    MemoizedAlternativePointer<Type> mDictType;

    Expression instantiatePyDictExpr(const Expression& memberExpr) const;

    Expression convertPyDictRaw(
        const Fora::PythonAstExpr_DictType& dictExpr,
        const std::function<Expression(const PythonAstExpr&)>&
            convertPythonAstExpressionToFora
        ) const;

    Expression createDictExprRaw(
        const ImmutableTreeVector<Expression>& keys,
        const ImmutableTreeVector<Expression>& values
        ) const;

};

}

