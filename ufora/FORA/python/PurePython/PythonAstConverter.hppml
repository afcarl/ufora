/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/
#pragma once

#include "PythonAst.hppml"
#include "../../Language/Function.hppml"
#include "../../../core/PolymorphicSharedPtr.hpp"

namespace Fora {

class PythonConstantConverter;
class PythonListConverter;
class PythonTupleConverter;
class PythonDictConverter;

class PythonAstConverter :
        public PolymorphicSharedPtrBase<PythonAstConverter> {
private:
    PythonAstConverter(const PythonAstConverter& otherConverter, CSTValue newMetadata);
    PythonAstConverter(const PythonAstConverter& otherConverter, CodeDefinitionPoint newCDP);
public:
    PythonAstConverter(
        PolymorphicSharedPtr<PythonConstantConverter> constantConverter,
        PolymorphicSharedPtr<PythonListConverter> listConverter,
        PolymorphicSharedPtr<PythonTupleConverter> tupleConverter,
        PolymorphicSharedPtr<PythonDictConverter> dictConverter,
        ImplValContainer pyforaBuiltins,
        const ImmutableTreeMap<
            Symbol,
            pair<ImplValContainer, Nullable<Symbol>>
            >& builtinMemberMapping
        );

    Expression convertPythonAstExpressionToFora(const PythonAstExpr& expr) const;
    
    Expression convertPythonAstStatementToExpression(const PythonAstStatement& statements) const;

    Expression convertPythonAstLambdaToFora(
        const PythonAstArguments& arguments,
        const PythonAstExpr& body,
        const SimpleParseRange& extent
        ) const;

    Expression convertPythonAstFunctionDefToFora(
        const PythonAstStatement_FunctionDefType& functionDef,
        const SimpleParseRange& extent
        ) const;

    Expression convertPythonAstWithBlockFunctionDefToFora(
        const PythonAstStatement_FunctionDefType& functionDef,
        const SimpleParseRange& extent,
        ImmutableTreeVector<std::string> varsToConsiderFree
        ) const;

    Expression convertPythonAstClassDefToFora(
        const PythonAstStatement_ClassDefType& classDef,
        const SimpleParseRange& extent,
        ImmutableTreeVector<ImmutableTreeVector<std::string>> baseClassChains
        ) const;

    Expression replaceSymbolsWithCheckValidityExpressions(
        const Expression&,
        const ImmutableTreeVector<Symbol>&
        ) const;

    PolymorphicSharedPtr<PythonAstConverter> withObjectMetadata(CSTValue newMeta) const;

    PolymorphicSharedPtr<PythonAstConverter> withCodeDefinitionPoint(CodeDefinitionPoint newCDP) const;

private:
    Expression convertPythonAstLambdaToFora_(
        const PythonAstArguments& arguments,
        const PythonAstExpr& body,
        const SimpleParseRange& extent
        ) const;

    Expression convertPythonAstFunctionDefToFora_(
        const PythonAstStatement_FunctionDefType& functionDef,
        const SimpleParseRange& extent
        ) const;

    Expression convertPythonAstWithBlockFunctionDefToFora_(
        const PythonAstStatement_FunctionDefType& functionDef,
        const SimpleParseRange& extent,
        ImmutableTreeVector<std::string> varsToConsiderFree
        ) const;

    Expression convertPythonAstClassDefToFora_(
        const PythonAstStatement_ClassDefType& classDef,
        const SimpleParseRange& extent,
        ImmutableTreeVector<ImmutableTreeVector<std::string>> baseClassChains
        ) const;

    Expression convertPythonAstStatementToExpression_(const PythonAstStatement& statements) const;

    Expression convertPythonAstExpressionToFora_(const PythonAstExpr& expr) const;

    Expression convertExpressionToForaBoolean(const Expression& expr) const;
    
    Expression convertPythonAstExpressionToForaBoolean(const PythonAstExpr& expr) const;
    
    Expression invalidPyforaCodeExpression(SimpleParseRange extent) const;

    inline PolymorphicSharedPtr<PythonConstantConverter> constantConverter() const;

    Expression checkVariableValidityExpression(Symbol s) const;

    std::pair<Expression, TuplePattern> convertFunctionDefToForaFunctionBodyAndPattern(
        const PythonAstStatement_FunctionDefType& functionDef,
        const SimpleParseRange& extent
        ) const;

    Expression convertPythonAstSliceToExpression(
        const PythonAstSlice& slice,
        const SimpleParseRange& extent
        ) const;

    Expression convertNullableExpressionToExpression(
        const Nullable<PythonAstExpr>& expr
        ) const;

    Expression addWithBlockReturnStatement(
                    Expression expr,
                    ImmutableTreeVector<std::string> assigned
                    ) const;

    ImmutableTreeVector<ApplyArgument> convertPythonAstSliceToApplyArguments(
        const PythonAstSlice& slice
        ) const;

    Expression wrapExpressionInPyContinueCheck(Expression e) const;

    Expression getDictOfAssignedVariables(
        const ImmutableTreeVector<std::string>& assignedVariables
        ) const;

    Expression createObjectImplementingCallOperatorForFunction(
        const Function& function,
        const std::string& functionName,
        Nullable<SimpleParseRange> extent
        ) const;

    Function convertFunctionDefToForaFunction(
        const PythonAstStatement_FunctionDefType& functionDef,
        const SimpleParseRange& extent
        ) const;

    Expression wrapWithBlockFunctionBodyInTryCatch(
        const Expression& functionBody,
        const ImmutableTreeVector<std::string>& assignedVariables
        ) const;

    Expression convertPythonAstExpressionToFora_untagged(const PythonAstExpr& expr) const;

    Expression convertPythonAstStatementsToExpression(
        const ImmutableTreeVector<PythonAstStatement>& statements) const;
    Expression convertPythonAstStatementToExpression_inner(
        const PythonAstStatement& statement) const;

    PatternWithName convertPythonAstExpressionToPattern(const PythonAstExpr& expr) const;
    PatternWithName convertPythonAstExpressionToPattern_inner(const PythonAstExpr& expr) const;

    Function convertPythonAstExceptionHandlers(const ImmutableTreeVector<PythonAstExceptionHandler>& handlers) const;

    ImmutableTreeVector<ClassDefinitionTerm>
    convertPythonClassBodyFunctionDefToForaClassDefinitionTerms(
        const PythonAstStatement_FunctionDefType& functionDef,
        const SimpleParseRange& extent,
        const std::string& className
        ) const;

    ImmutableTreeVector<ClassDefinitionTerm>
    convertPythonClassBodyStatementToForaClassDefinitionTerms(
        const PythonAstStatement& statement,
        const std::string& className
        ) const;

    ImmutableTreeVector<ClassDefinitionTerm> convertPythonInitDefToForaClassDefinitionTerms(
        const PythonAstStatement_FunctionDefType& functionDef,
        const std::string& className
        ) const;

    ImmutableTreeVector<ClassDefinitionTerm>
    convertPythonClassBodyStaticMethodFunctionDefToForaClassDefinitionTerms(
        const PythonAstStatement_FunctionDefType& functionDef,
        const SimpleParseRange& extent
        ) const;

    ClassDefinitionTerm convertPythonClassBodyPropertyToForaClassDefinitionTerm(
        const PythonAstStatement_FunctionDefType& functionDef,
        const SimpleParseRange& extent
        ) const;

    ImmutableTreeVector<TuplePatternElement> computeForaArgs(
        const PythonAstArguments& pythonArgs
        ) const;

    Expression initializeUnboundVariablesForFunction(
            const TuplePattern& pattern,
            const Expression& functionBody
            ) const;

    Expression convertInlineFora(
        const PythonAstExpr_CallType& expr,
        const SimpleParseRange& extent
        ) const;

    CSTValue bindFreeVariablesInInlineForaExpressionToConstantUsingBuiltins(
        const Expression_CreateFunctionType& createFunctionExpression,
        const ImmutableTreeSet<Symbol>& freeVariables,
        const SimpleParseRange& extent
        ) const;

    ImmutableTreeVector<ApplyArgument> adaptPyArgsToForaCallingConvention(
        const ImmutableTreeVector<PythonAstExpr>& args,
        const ImmutableTreeVector<PythonAstKeyword>& keywords
        ) const;

    Expression foraFunctionBodyForPythonFunctionDef(
        const PythonAstStatement_FunctionDefType& functionDef,
        const SimpleParseRange& extent
        ) const;

    ImmutableTreeVector<pair<PatternWithName, Expression>> unpackArguments(
        const PythonAstArguments& pyFunctionSignature,
        const SimpleParseRange& extent,
        const std::string& functionName
        ) const;

    ImmutableTreeVector<pair<PatternWithName, Expression>> unpackNonDefaultArgs(
        const ImmutableTreeVector<PythonAstExpr>& nonDefaultArgs,
        const SimpleParseRange& extent,
        const std::string& functionName
        ) const;

    ImmutableTreeVector<pair<PatternWithName, Expression>> unpackDefaultArgs(
        const ImmutableTreeVector<PythonAstExpr>& defaultArgs,
        const ImmutableTreeVector<PythonAstExpr>& defaultValues,
        const SimpleParseRange& extent,
        const std::string& functionName
        ) const;

    Function forwardNewCallingConventionToOldCallingConvention(
        const std::string& funcName) const;

    Function adaptedArgumentsClauseForInit(
        const std::string& className,
        const PythonAstArguments& nonSelfArgs,
        const ImmutableTreeVector<TuplePatternElement>& foraArgs,
        const SimpleParseRange& extent
        ) const;

    ImmutableTreeVector<ApplyArgument> initApplyArgsFromForaArgs(
        const ImmutableTreeVector<TuplePatternElement>& foraArgs,
        const SimpleParseRange& extent
        ) const;

    Expression invalidPythonCallCheckExpr(
        const PythonAstStatement_FunctionDefType& functionDef
        ) const;

    Expression throwTypeErrorExpression(const std::string& message) const;

    CSTValue mObjectMetadata;

    CodeDefinitionPoint mCodeDefPoint;

    ImplValContainer mPyforaBuiltins;

    ImplValContainer mPyBoundMethod;

    ImplValContainer mPyObjectBaseMixin;

    ImplValContainer mPyGeneratorFactory;

    ImplValContainer mPySliceFactory;

    ImplValContainer mPyListType;

    ImplValContainer mTypeError;

    ImplValContainer mPyString;

    ImplValContainer mPyDictType;

    ImplValContainer mAssertionError;

    PolymorphicSharedPtr<PythonConstantConverter> mConstantConverter;

    PolymorphicSharedPtr<PythonListConverter> mPythonListConverter;

    PolymorphicSharedPtr<PythonTupleConverter> mPythonTupleConverter;

    PolymorphicSharedPtr<PythonDictConverter> mPythonDictConverter;

    ImmutableTreeMap<Symbol, pair<ImplValContainer, Nullable<Symbol>>>
        mBuiltinMemberMapping;

};

}

