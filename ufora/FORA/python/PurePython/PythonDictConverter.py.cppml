/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/
#include "PythonDictConverter.hppml"

#include "../../../native/Registrar.hpp"
#include "../../../core/python/CPPMLWrapper.hpp"
#include "../../../core/python/CPPMLToSimple.hpp"
#include "../../../core/python/ScopedPyThreads.hpp"
#include "../../../core/python/ValueLikeCPPMLWrapper.hppml"

class PythonDictConverterWrapper:
    public native::module::Exporter<PythonDictConverterWrapper> {
public:
    std::string getModuleName() {
        return "FORA";
        }

    static ImplValContainer createDict(
            PolymorphicSharedPtr<Fora::PythonDictConverter> converter,
            boost::python::dict pyDict
            )
        {
        ImmutableTreeVector<ImplValContainer> nativeKeys;
        ImmutableTreeVector<ImplValContainer> nativeValues;

        boost::python::list pyKeys = pyDict.keys();

        for (long ix = 0; ix < boost::python::len(pyKeys); ++ix)
            {
            boost::python::object pyKey = pyKeys[ix];
            boost::python::extract<ImplValContainer> keyExtractor(pyKeys[ix]);

            lassert(keyExtractor.check());

            boost::python::object pyValue = pyDict[pyKey];
            boost::python::extract<ImplValContainer> valueExtractor(pyValue);

            lassert(valueExtractor.check());

            nativeKeys = nativeKeys + keyExtractor();
            nativeValues = nativeValues + valueExtractor();
            }

        return converter->createDict(nativeKeys, nativeValues);
        }

    static boost::python::object invertDict(
            PolymorphicSharedPtr<Fora::PythonDictConverter> converter,
            ImplValContainer possible
            )
        {
        auto res = converter->invertDict(possible);

        if (!res)
            return boost::python::object();

        lassert(res->first.size() == res->second.size());

        boost::python::dict tr;

        for (long ix = 0; ix < res->first.size(); ++ix)
            {
            tr[ImplValContainer(res->first[ix])] = res->second[ix];
            }

        return tr;
        }

    static PolymorphicSharedPtr<Fora::PythonDictConverter>
    makePythonDictConverter(ImplValContainer& pyDictClass)
        {
        return PolymorphicSharedPtr<Fora::PythonDictConverter>(
            new Fora::PythonDictConverter(
                pyDictClass
                )
            );
        }

    void exportPythonWrapper()
        {
        using namespace boost::python;

        class_<PolymorphicSharedPtr<Fora::PythonDictConverter>>(
            "PythonDictConverter", no_init)
            .def("createDict", createDict)
            .def("invertDict", invertDict)
            ;

        def("makePythonDictConverter", makePythonDictConverter);
        }
};

template<>
char native::module::Exporter<PythonDictConverterWrapper>::mEnforceRegistration =
    native::module::ExportRegistrar<PythonDictConverterWrapper>::registerWrapper();




