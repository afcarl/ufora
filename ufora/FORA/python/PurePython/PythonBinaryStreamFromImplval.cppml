/***************************************************************************
    Copyright 2016 Ufora Inc.

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
****************************************************************************/

#include "PythonBinaryStreamFromImplval.hppml"
#include "../../../core/Logging.hpp"
#include "../../../core/cppml/ExtractAllObjectsMatchingPredicate.hppml"
#include "../../Language/RebindFreeMemberAccesses.hppml"
#include "../../Language/RebindFree.hppml"
#include "../../Language/ExpressionLocationTagging.hppml"
#include "../../Core/ClassMediator.hppml"
#include "../../Language/ClassMediatorBindings.hppml"
#include "../../Core/MemoryPool.hpp"
#include "../../TypedFora/ABI/ImplValVisitor.hppml"
#include "../../TypedFora/ABI/ContainsNonemptyVectorsVisitor.hppml"
#include "PythonBinaryStreamCommon.hppml"
#include "PythonConstantType.hppml"

using namespace TypedFora::Abi;

namespace Fora {

PythonBinaryStreamFromImplval::PythonBinaryStreamFromImplval(
            PolymorphicSharedPtr<VectorDataManager> inVDM,
            ImplValContainer inPyforaBuiltins,
            ImmutableTreeMap<std::string, std::string> pythonSingletonNameToPyforaName
            ) :
        mVDM(inVDM),
        mPyforaBuiltins(inPyforaBuiltins),
        mNextObjId(0)
    {
    mConstantConverter.reset(
        new PythonConstantConverter(
            emptyTreeMap() + 
                PythonConstantType::String() + *PythonBinaryStreamCommon::getMember(mPyforaBuiltins, "PyString") + 
                PythonConstantType::Int() + *PythonBinaryStreamCommon::getMember(mPyforaBuiltins, "PyInt") + 
                PythonConstantType::Float() + *PythonBinaryStreamCommon::getMember(mPyforaBuiltins, "PyFloat") + 
                PythonConstantType::None() + *PythonBinaryStreamCommon::getMember(mPyforaBuiltins, "PyNone") + 
                PythonConstantType::Boolean() + *PythonBinaryStreamCommon::getMember(mPyforaBuiltins, "PyBool"),
            MemoryPool::getFreeStorePool()
            )
        );
    mListConverter.reset(
        new PythonListConverter(
            *PythonBinaryStreamCommon::getMember(mPyforaBuiltins, "PyList"),
            MemoryPool::getFreeStorePool()
            )
        );
    mDictConverter.reset(
        new PythonDictConverter(
            *PythonBinaryStreamCommon::getMember(mPyforaBuiltins, "PyDict")
            )
        );
    mTupleConverter.reset(
        new PythonTupleConverter(
            *PythonBinaryStreamCommon::getMember(mPyforaBuiltins, "PyTuple")
            )
        );
    mSingletonAndExceptionConverter.reset(
        new PyforaSingletonAndExceptionConverter(
            mPyforaBuiltins,
            pythonSingletonNameToPyforaName
            )
        );

    mPyforaBoundMethodClass = *PythonBinaryStreamCommon::getMember(mPyforaBuiltins, "PyBoundMethod");
    }

void PythonBinaryStreamFromImplval::writeTerminator(OBinaryStream& stream)
    {
    stream << (int64_t)-1;
    }


void writeDtypeToTypeInstance(OBinaryStream& stream, PythonBinaryStreamCommon::DtypePrimitive prim)
    {
    @match PythonBinaryStreamCommon::DtypePrimitive(prim)
        -| Int(i) ->> {
            stream << PythonBinaryStreamCommon::CODE_INT;
            stream << i;
            }
        -| Str(s) ->> {
            stream << PythonBinaryStreamCommon::CODE_STR;
            stream << s;
            }
        -| Tuple(t) ->> {
            stream << PythonBinaryStreamCommon::CODE_TUPLE;
            stream << (int32_t)t.size();
            for (auto e: t)
                writeDtypeToTypeInstance(stream, e);
            }
    }

int64_t PythonBinaryStreamFromImplval::write(OBinaryStream& stream, ImplValContainer value)
    {
    auto hash = value.hash();
    auto it = mIdMapping.find(hash);

    if (it != mIdMapping.end())
        return it->second;

    int64_t objId = allocateId();
    mIdMapping[value.hash()] = objId;

    if (PythonBinaryStreamCommon::isUnconvertibleValueTuple(value))
        {
        stream << objId;
        stream << PythonBinaryStreamCommon::CODE_UNCONVERTIBLE;
        auto modulePath = *value.tupleGetItem(0);
        if (modulePath.type().isTuple())
            {
            stream << (bool)true;
            stream << (int32_t)modulePath.type().getTuple().types().size();
            for (long k = 0; k < modulePath.type().getTuple().types().size(); k++)
                {
                auto pathElt = *modulePath.tupleGetItem(k);
                lassert(pathElt.type().isString());
                stream << pathElt.cast<String>().stdString();
                }
            }
        else
            {
            lassert(modulePath.type().isNothing());
            stream << (bool)false;
            }

        return objId;
        }

    Nullable<ImplValContainer> primitive = mConstantConverter->unwrapToPrimitive(value);
    if (value.type().isString())
        primitive = value;

    if (primitive)
        {
        @match Type(primitive->type())
            -| String() ->> {
                stream << objId;
                stream << PythonBinaryStreamCommon::CODE_STR;
                stream << primitive->cast<String>().stdString();
                }
            -| Integer(sz, isSigned) ->> {
                if (sz == 64 && isSigned)
                    {
                    stream << objId;
                    stream << PythonBinaryStreamCommon::CODE_INT;
                    stream << primitive->cast<int64_t>();
                    }
                    else
                if (sz == 1 && !isSigned)
                    {
                    stream << objId;
                    stream << PythonBinaryStreamCommon::CODE_BOOL;
                    stream << primitive->cast<bool>();
                    }
                }
            -| Float(bits) ->> {
                if (bits == 64)
                    {
                    stream << objId;
                    stream << PythonBinaryStreamCommon::CODE_FLOAT;
                    stream << primitive->cast<double>();
                    }
                }
            -| Nothing() ->> {
                stream << objId;
                stream << PythonBinaryStreamCommon::CODE_NONE;
                }
            -| Vector() ->> {
                stream << objId;
                stream << PythonBinaryStreamCommon::CODE_STR;

                VectorRecord vec = primitive->cast<VectorRecord>();
                if (vec.size() && vec.isEmptyOrVectorOfUint8())
                    {
                    stream << (int32_t)vec.size();

                    int64_t bytesWritten = 0;

                    //this is a string
                    bool allLoaded = vec.visitAnyValuesPresentInVdm(
                        &*mVDM, [&](ForaValueArray* array, IntegerSequence subsequence) {
                            lassert(array->isHomogenousPodArray() && array->homogenousStride() == 1);
                            uint8_t* data = array->offsetFor(0);

                            if (subsequence.stride() != 1)
                                {
                                for (long k = 0; k < subsequence.size();k++)
                                    stream << data[subsequence.offsetForIndex(k)];
                                }
                            else
                                stream.write(subsequence.size(), data + subsequence.offset());

                            bytesWritten += subsequence.size();
                            }, 
                        IntegerSequence(vec.size())
                        );

                    if (allLoaded)
                        {
                        lassert(bytesWritten == vec.size());
                        }
                    else
                        {
                        lassert(bytesWritten != vec.size());
                        }

                    lassert_dump(allLoaded, "we should be keeping track of pages we needed to read from!");
                    }
                else
                    {
                    lassert(vec.size() == 0);
                    stream << (int32_t)0;
                    }
                }
            -| _ ->> {
                lassert_dump(false, "invalid constant of type " << prettyPrintString(primitive->type()));
                }

        return objId;
        }

    auto singletonName = mSingletonAndExceptionConverter->convertInstanceToSingletonName(value);
    if (singletonName)
        {
        stream << objId;
        stream << PythonBinaryStreamCommon::CODE_NAMED_SINGLETON;
        stream << *singletonName;
        return objId;
        }

    ImplValContainer exceptionArgs;
    bool isPyAbort;
    auto exceptionName = mSingletonAndExceptionConverter->convertExceptionInstance(value, exceptionArgs, isPyAbort);
    if (exceptionName)
        {
        int64_t argsId = write(stream, exceptionArgs);

        stream << objId;

        if (isPyAbort)
            stream << PythonBinaryStreamCommon::CODE_PY_ABORT_EXCEPTION;
        else
            stream << PythonBinaryStreamCommon::CODE_BUILTIN_EXCEPTION_INSTANCE;
        
        stream << *exceptionName;
        stream << argsId;

        return objId;
        }

    auto tupleContents = mTupleConverter->invertTuple(value);
    if (tupleContents)
        {
        std::vector<int64_t> contentsIds;

        for (auto elt: *tupleContents)
            contentsIds.push_back(write(stream, elt));

        stream << objId;
        stream << PythonBinaryStreamCommon::CODE_TUPLE;
        stream << (int64_t)contentsIds.size();
        for (auto id: contentsIds)
            stream << id;

        return objId;
        }

    auto dictContents = mDictConverter->invertDict(value);
    if (dictContents)
        {
        std::vector<int64_t> keyIds;
        std::vector<int64_t> valueIds;

        for (auto elt: dictContents->first)
            keyIds.push_back(write(stream, ImplValContainer(elt)));
        for (auto elt: dictContents->second)
            valueIds.push_back(write(stream, elt));

        stream << objId;
        stream << PythonBinaryStreamCommon::CODE_DICT;
        stream << (int64_t)keyIds.size();
        for (auto id: keyIds)
            stream << id;
        stream << (int64_t)valueIds.size();
        for (auto id: valueIds)
            stream << id;

        return objId;
        }
    

    auto listContents = mListConverter->invertList(value);
    if (listContents)
        {
        lassert(listContents->type().isVector());

        VectorRecord vec = listContents->cast<VectorRecord>();

        if (vec.size() == 0)
            {
            stream << objId;
            stream << PythonBinaryStreamCommon::CODE_LIST;
            stream << (int64_t)0;
            return objId;
            }

        if (vec.jor().size() == 1 && vec.jor()[0].type() && vec.jor()[0].type()->isDirectlySerializable())
            {
            ImplValContainer firstLoadedValue;

            bool allLoaded = vec.visitAnyValuesPresentInVdm(
                &*mVDM, [&](ForaValueArray* array, IntegerSequence subsequence) {
                    //its OK to copy this value out without using a deepcopier because its
                    //directly serializable (meaning it has no pointers in it)
                    firstLoadedValue = (*array)[subsequence.offsetForIndex(0)];
                    },
                IntegerSequence(1)
                );

            lassert(allLoaded);

            //this is homogenous data that we can just pack directly into tuples of floats, ints, etc.
            //check that this type is either the primitive type or a nested tuple of primitives
            typedef PythonBinaryStreamCommon::DtypePrimitive DtypePrimitive;

            boost::function<Nullable<DtypePrimitive> (ImplValContainer)> convert = 
                [&](ImplValContainer arg) -> Nullable<DtypePrimitive> {
                    auto prim = mConstantConverter->unwrapToPrimitive(arg);
                    if (prim)
                        {
                        if (prim->type() == Type::Float(64))
                            return null() << DtypePrimitive::Str("<f8");
                        if (prim->type() == Type::Integer(64, true))
                            return null() << DtypePrimitive::Str("<i8");
                        if (prim->type() == Type::Integer(1, false))
                            return null() << DtypePrimitive::Str("|b1");
                        }

                    auto tup = mTupleConverter->invertTuple(arg);
                    if (tup)
                        {
                        ImmutableTreeVector<DtypePrimitive> prims;
                        for (auto elt: *tup)
                            {
                            auto res = convert(elt);
                            if (!res)
                                return null();
                            prims = prims + *res;
                            }

                        return null() << DtypePrimitive::Tuple(prims);
                        }
                    return null();
                    };

            Nullable<DtypePrimitive> prim = convert(firstLoadedValue);

            if (prim)
                {
                stream << objId;
                stream << PythonBinaryStreamCommon::CODE_PACKED_HOMOGENOUS_DATA;
                writeDtypeToTypeInstance(stream, *prim);

                int64_t finalDataSize = vec.size() * firstLoadedValue.type().size();

                //2gb. This is not a good way to do this. We need to ensure ahead of time that data
                //moving across the boundary is appropriately sized.
                lassert(finalDataSize < 2000000000);
                
                stream << (int32_t)finalDataSize;

                bool allLoaded = vec.visitAnyValuesPresentInVdm(
                    &*mVDM, [&](ForaValueArray* array, IntegerSequence subsequence) {
                        if (array->isHomogenousPodArray() && subsequence.stride() == 1)
                            {
                            stream.write(
                                firstLoadedValue.type().size() * subsequence.size(), 
                                array->offsetFor(subsequence.offsetForIndex(0))
                                );
                            }
                        else
                            {
                            int64_t sz = firstLoadedValue.type().size();

                            for (long k = 0; k < subsequence.size();k++)
                                stream.write(sz, array->offsetFor(subsequence.offsetForIndex(k)));
                            }
                        },
                    IntegerSequence(vec.size())
                    );

                lassert(allLoaded);

                return objId;
                }
            }

        std::vector<int64_t> objectIds;

        bool allLoaded = vec.visitAnyValuesPresentInVdm(
            &*mVDM, [&](ForaValueArray* array, IntegerSequence subsequence) {
                for (long k = 0; k < subsequence.size();k++)
                    objectIds.push_back(write(stream, (*array)[subsequence.offsetForIndex(k)]));
                },
            IntegerSequence(vec.size())
            );

        lassert(allLoaded);

        stream << objId;
        stream << PythonBinaryStreamCommon::CODE_LIST;
        stream << (int64_t)objectIds.size();
        for (auto i: objectIds)
            stream << i;
        return objId;
        }

    if (value.type().isClass())
        {
        @match Type(value.type())
            -| Class(elts, (mediator, resumption)) ->> {
                auto codeLoc = *PythonBinaryStreamCommon::getObjectDefinitionPoint(value);
                
                if (mediator->isObject())
                    {
                    Nullable<ImplValContainer> cls = PythonBinaryStreamCommon::simulateApply(
                        emptyTreeVec() + 
                            value + 
                            ImplValContainer(CSTValue(Symbol("Class")))
                        );

                    if (cls && *cls == mPyforaBoundMethodClass)
                        {
                        auto name = ImplValContainerUtilities::objectGetMember(value, Symbol("@name"));
                        auto instance = ImplValContainerUtilities::objectGetMember(value, Symbol("@self"));

                        lassert(name && !name->second);
                        lassert(instance && !instance->second);

                        auto nameIV = name->first;
                        lassert(nameIV.type().isSymbol());

                        int64_t instanceId = write(stream, instance->first);

                        stream << objId;
                        stream << PythonBinaryStreamCommon::CODE_INSTANCE_METHOD;
                        stream << instanceId;
                        stream << nameIV.cast<Symbol>().toString().substr(1);

                        return objId;
                        }

                    if (cls)
                        {
                        auto contents = ImplValContainerUtilities::objectGetMember(value, Symbol("@m"));
                        lassert(contents && !contents->second);

                        ImplValContainer tup = contents->first;
                        lassert(tup.type().isTuple());

                        map<std::string, int64_t> memberIds;

                        int64_t classId = write(stream, *cls);

                        for (long k = 0; k < tup.type().getTuple().types().size(); k++)
                            {
                            Nullable<Symbol> name = tup.type().getTuple().names()[k];
                            ImplValContainer elt = *tup.tupleGetItem(k);

                            static Symbol uninitializedSymbol("PyforaUninitializedVariable");

                            if (!elt.type().isSymbol() || elt.cast<Symbol>() != uninitializedSymbol)
                                memberIds[name->toString()] = write(stream, elt);
                            }

                        stream << objId;
                        stream << PythonBinaryStreamCommon::CODE_CLASS_INSTANCE;
                        stream << classId;
                        stream << memberIds;

                        return objId;
                        }
                    else
                        {
                        map<std::string, int64_t> memberIds;

                        writeClassOrFunctionMembers(stream, value, memberIds);

                        std::string sourceText = *PythonBinaryStreamCommon::getObjectDefinitionSourceTextFromMetadata(value);

                        lassert(codeLoc.defPoint().isExternal());
                        int64_t sourceFileId = writeFile(stream, codeLoc.defPoint().getExternal().paths()[0], sourceText);

                        stream << objId;
                        stream << PythonBinaryStreamCommon::CODE_FUNCTION;
                        stream << sourceFileId;
                        stream << (int32_t)codeLoc.range().start().line();
                        stream << memberIds;

                        return objId;
                        }
                    }
                    else
                if (mediator->isClass())
                    {
                    map<std::string, int64_t> memberIds;

                    writeClassOrFunctionMembers(stream, value, memberIds);

                    std::string sourceText = *PythonBinaryStreamCommon::getObjectDefinitionSourceTextFromMetadata(value);

                    lassert(codeLoc.defPoint().isExternal());
                    int64_t sourceFileId = writeFile(stream, codeLoc.defPoint().getExternal().paths()[0], sourceText);

                    stream << objId;
                    stream << PythonBinaryStreamCommon::CODE_CLASS;
                    stream << sourceFileId;
                    stream << (int32_t)codeLoc.range().start().line();
                    stream << memberIds;
                    stream << (int64_t)0;
                    return objId;
                    }
                }
        }

    lassert_dump(false, "didn't know what to do with " << prettyPrintString(value));
    }

void PythonBinaryStreamFromImplval::writeClassOrFunctionMembers(OBinaryStream& stream, ImplValContainer value, map<string, int64_t>& outMemberIds)
    {
    //this is a class
    ImmutableTreeMap<Symbol, LexicalBinding> bindings = PythonBinaryStreamCommon::getObjectLexicalBindingMap(value);
    
    for (auto symbolAndBinding: bindings)
        {
        bool isDefinitelySelf = false;
        @match LexicalBinding(symbolAndBinding.second)
            -| Member(unbindSeq, subMember) ->> {
                if (unbindSeq.size() == 0)
                    isDefinitelySelf = true;
                }
            -| _ ->> {}
            ;

        if (!isDefinitelySelf)
            {
            static Symbol uninitializedSymbol("PyforaUninitializedVariable");
                            
            auto member = ImplValContainerUtilities::objectGetMember(value, symbolAndBinding.first);
            if (member && !member->second && (!member->first.type().isSymbol() || member->first.cast<Symbol>() != uninitializedSymbol))
                outMemberIds[symbolAndBinding.first.toString()] = write(stream, member->first);
            }
        }
    }

int64_t PythonBinaryStreamFromImplval::writeFile(OBinaryStream& stream, std::string path, std::string text)
    {
    auto it = mFileToIdMapping.find(make_pair(path, text));
    if (it != mFileToIdMapping.end())
        return it->second;

    int64_t objId = allocateId();
    stream << objId << PythonBinaryStreamCommon::CODE_FILE << path << text;

    mFileToIdMapping[make_pair(path, text)] = objId;

    return objId;
    }

int64_t PythonBinaryStreamFromImplval::allocateId()
    {
    return mNextObjId++;
    }


}
