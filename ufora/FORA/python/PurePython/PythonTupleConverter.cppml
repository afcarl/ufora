/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/
#include "PythonTupleConverter.hppml"

#include "PythonAst.hppml"
#include "../../Language/Function.hppml"
#include "../../Core/ClassMediator.hppml"
#include "../../Core/ImplValContainerUtilities.hppml"
#include "../../../core/Logging.hpp"

namespace Fora {

PythonTupleConverter::PythonTupleConverter(
        const ImplValContainer& pyTupleClassImplVal
        ) : mPyTupleClass(pyTupleClassImplVal)
    {
    lassert(pyTupleClassImplVal.isCST());

    mEmptyInstance = createTuple(emptyTreeVec());
    }

Expression PythonTupleConverter::convertPyTuple(
        const Fora::PythonAstExpr_TupleType& tupleExpr,
        const std::function<Expression(const PythonAstExpr&)>&
            convertPythonAstExpressionToFora
        ) const
    {
    auto rawForaTupleExpr = Expression::CreateTuple(
        mapITV(tupleExpr.elts(), convertPythonAstExpressionToFora)
        );

    return createTupleExpression(rawForaTupleExpr);
    }

Expression PythonTupleConverter::createTupleExpression(
        const Expression& memberExpr
        ) const
    {
    ImmutableTreeVector<ApplyArgument> applyArguments;

    applyArguments = applyArguments +
        ApplyArgument::Normal(
            null(),
            Expression::Constant(
                CSTValue(
                    Symbol("CreateInstance")
                    )
                )
            );

    applyArguments = applyArguments + memberExpr;

    return Expression::Apply(
        Expression::Constant(
            CSTValue(mPyTupleClass)
            ),
        applyArguments
        );
    }

ImplValContainer PythonTupleConverter::createTuple(
        const ImmutableTreeVector<ImplValContainer>& tupleElements
        ) const
    {
    auto foraTuple = ImplValContainerUtilities::createTuple(
        tupleElements
        );

    return ImplValContainerUtilities::simulateClassInstantiation(
        mPyTupleClass,
        foraTuple
        );
    }


Nullable<ImmutableTreeVector<ImplValContainer> >
                PythonTupleConverter::invertTuple(ImplValContainer possibleTuple)
    {
    //if its the same class object that we would create for the empty tuple
    if (possibleTuple.type().isClass() && possibleTuple.type().getClass().classBody() ==
            mEmptyInstance.type().getClass().classBody())
        {
        Nullable<pair<ImplValContainer, Nullable<Symbol> > > member =
                ImplValContainerUtilities::objectGetMember(possibleTuple, Symbol("@m"));

        lassert_dump(member.isValue() && !member->second, "Expected the PyTuple '@m' field to be simple data");

        typedef ImplValContainerUtilities::tuple_iterator tuple_iterator;

        ImmutableTreeVector<ImplValContainer> res;

        lassert_dump(
            member->first.type().isTuple(),
            "expected tuple as @m type. got " + prettyPrintString(
                member->first.type())
            );

        for (tuple_iterator iterator = ImplValContainerUtilities::tuple_iterator::begin(member->first),
                end = ImplValContainerUtilities::tuple_iterator::end(member->first);
                iterator != end; ++iterator)
            res = res + *iterator;
        return null() << res;
        }
    return null();
    }
}

