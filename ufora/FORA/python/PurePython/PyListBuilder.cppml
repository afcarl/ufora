/***************************************************************************
    Copyright 2016 Ufora Inc.

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
****************************************************************************/
#include "PyListBuilder.hppml"
#include "PythonBinaryStreamCommon.hppml"
#include "PythonConstantConverter.hppml"
#include "PythonListConverter.hppml"

#include "../../Core/ImplValContainer.hppml"
#include "../../Core/MemoryPool.hpp"
#include "../../Primitives/String.hppml"
#include "../../TypedFora/ABI/ForaValueArray.hppml"


PyListBuilder::PyListBuilder(
        PolymorphicSharedPtr<Fora::PythonConstantConverter> constantConverter,
        PolymorphicSharedPtr<Fora::PythonListConverter> listConverter,
        MemoryPool* targetMemoryPool
        )
    : mForaValueArray(
        TypedFora::Abi::ForaValueArray::Empty(
            targetMemoryPool
            )
        ),
      mConstantConverter(constantConverter),
      mListConverter(listConverter)
    {
    }


void PyListBuilder::appendNone() const
    {
    mForaValueArray->append(noneType().typeAsJov(), nullptr, 1, 0);
    }


void PyListBuilder::appendInt(int64_t value) const
    {
    mForaValueArray->append(
        intType().typeAsJov(),
        reinterpret_cast<uint8_t*>(&value),
        1,
        intType().size()
        );
    }


void PyListBuilder::appendFloat(double value) const
    {
    mForaValueArray->append(
        floatType().typeAsJov(),
        reinterpret_cast<uint8_t*>(&value),
        1,
        floatType().size()
        );
    }


void PyListBuilder::appendBool(uint8_t value) const
    {
    mForaValueArray->append(
        boolType().typeAsJov(),
        &value,
        1,
        boolType().size()
        );
    }


void PyListBuilder::appendString(const std::string& str) const
    {
    // this is binary-compatible with mStringPrototype type
    String foraString(str, mForaValueArray->getOwningMemoryPool());

    mForaValueArray->append(
        stringType().typeAsJov(),
        reinterpret_cast<uint8_t*>(&foraString),
        1,
        stringType().size()
        );
    }


void PyListBuilder::appendPrimitive(uint8_t code, const ImplValContainer& value) const
    {
    Type type;

    auto it = mPrimitiveCodeToVectorElementType.find(code);

    if (it != mPrimitiveCodeToVectorElementType.end()) {
        type = it->second;
        }
    else {
        type = getVectorElementJovType(value);
        }

    mForaValueArray->append(
        type.typeAsJov(),
        reinterpret_cast<uint8_t*>(value.data()),
        1,
        type.size()
        );
    }


void PyListBuilder::append(const ImplValContainer& value) const
    {
    mForaValueArray->append(value);
    }


ImplValContainer PyListBuilder::buildList() const
    {
    return mListConverter->createListFromVector(
        Fora::PythonListConverter::vectorFromForaValueArray(mForaValueArray)
        );
    }


Type PyListBuilder::noneType() const
    {
    auto it = mPrimitiveCodeToVectorElementType.find(
        Fora::PythonBinaryStreamCommon::CODE_NONE
        );

    if (it != mPrimitiveCodeToVectorElementType.end()) {
        return it->second;
        }

    return registerPrimitiveType(
        Fora::PythonBinaryStreamCommon::CODE_NONE,
        mConstantConverter->noneValue()
        );
    }


Type PyListBuilder::intType() const
    {
    auto it = mPrimitiveCodeToVectorElementType.find(
        Fora::PythonBinaryStreamCommon::CODE_INT
        );

    if (it != mPrimitiveCodeToVectorElementType.end()) {
        return it->second;
        }

    return registerPrimitiveType(
        Fora::PythonBinaryStreamCommon::CODE_INT,
        mConstantConverter->intPrototype()
        );
    }


Type PyListBuilder::floatType() const
    {
    auto it = mPrimitiveCodeToVectorElementType.find(
        Fora::PythonBinaryStreamCommon::CODE_FLOAT
        );

    if (it != mPrimitiveCodeToVectorElementType.end()) {
        return it->second;
        }

    return registerPrimitiveType(
        Fora::PythonBinaryStreamCommon::CODE_FLOAT,
        mConstantConverter->floatPrototype()
        );
    }


Type PyListBuilder::boolType() const
    {
    auto it = mPrimitiveCodeToVectorElementType.find(
        Fora::PythonBinaryStreamCommon::CODE_BOOL
        );

    if (it != mPrimitiveCodeToVectorElementType.end()) {
        return it->second;
        }

    return registerPrimitiveType(
        Fora::PythonBinaryStreamCommon::CODE_BOOL,
        mConstantConverter->boolPrototype()
        );
    }


Type PyListBuilder::stringType() const
    {
    auto it = mPrimitiveCodeToVectorElementType.find(
        Fora::PythonBinaryStreamCommon::CODE_STR
        );

    if (it != mPrimitiveCodeToVectorElementType.end()) {
        return it->second;
        }

    return registerPrimitiveType(
        Fora::PythonBinaryStreamCommon::CODE_STR,
        mConstantConverter->stringPrototype()
        );
    }


Type PyListBuilder::registerPrimitiveType(
        uint8_t code,
        const ImplValContainer& prototype
        ) const
    {
    Type type = getVectorElementJovType(prototype);

    mPrimitiveCodeToVectorElementType[code] = type;

    return type;
    }


Type PyListBuilder::getVectorElementJovType(const ImplValContainer& value) const
    {
    JudgmentOnValue jov =
        JudgmentOnValue::VectorElementJOVFromLiveValue(
            value.getReference()
            );

    Nullable<Type> typeOrNull = jov.type();

    lassert(typeOrNull.isValue());

    return *typeOrNull;
    }
