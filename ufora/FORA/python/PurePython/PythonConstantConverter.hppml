/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/
#pragma once

#include "../../../core/cppml/MemoizedAlternativePointer.hppml"
#include "../../../core/PolymorphicSharedPtr.hpp"
#include "../../../core/containers/ImmutableTreeMap.hppml"
#include "../../Core/ImplValContainer.hppml"
#include "../../Core/MemoryPool.hpp"
#include "../../Core/Type.hppml"

#include <boost/unordered_map.hpp>


class ImplVal;
class ImplValContainer;


template<class T>
class Nullable;


namespace FunctionStage1 {
class ExpressionEvaluationResult;
}


namespace Fora {

class PythonConstantType;

class PythonConstantConverter :
        public PolymorphicSharedPtrBase<PythonConstantConverter> {
public:
    PythonConstantConverter(
        const ImmutableTreeMap<PythonConstantType, ImplValContainer>& primitiveTypeMapping,
        MemoryPool* targetPool
        );

    ImplValContainer convertInt(int64_t) const;
    ImplValContainer convertLong(const std::string&) const;
    ImplValContainer convertBoolean(uint8_t) const;
    ImplValContainer noneValue() const;
    ImplValContainer convertFloat(double) const;
    ImplValContainer convertString(const std::string&) const;

    Nullable<ImplValContainer> unwrapToPrimitive(const ImplValContainer& value) const;
    Nullable<ImplVal> unwrapToPrimitiveRaw(const ImplVal& value) const;

    ImplValContainer intPrototype() const {
        return mIntPrototype;
        }
    ImplValContainer longPrototype() const {
        return mLongPrototype;
        }
    ImplValContainer boolPrototype() const {
        return mBoolPrototype;
        }
    ImplValContainer nonePrototype() const {
        return mNonePrototype;
        }
    ImplValContainer floatPrototype() const {
        return mFloatPrototype;
        }
    ImplValContainer stringPrototype() const {
        return mStringPrototype;
        }

    MemoizedAlternativePointer<Type> intType() const {
        return mIntType;
        }

    MemoizedAlternativePointer<Type> boolType() const {
        return mBoolType;
        }

    MemoizedAlternativePointer<Type> noneType() const {
        return mNoneType;
        }

    MemoizedAlternativePointer<Type> floatType() const {
        return mFloatType;
        }

    MemoizedAlternativePointer<Type> stringType() const {
        return mStringType;
        }

private:
    Nullable<ImplVal> unwrapToPrimitiveByPrototypesRaw(
        const ImplVal& value
        ) const;

    ImplValContainer simulateClassInstantiation(
        const ImplValContainer& classImpval, const ImplValContainer& memberImplVal
        ) const;

    ImmutableTreeMap<PythonConstantType, ImplValContainer> mTypeConvertersMap;
    
    MemoryPool* mTargetMemoryPool;

    ImplValContainer mIntPrototype;
    ImplValContainer mLongPrototype;
    ImplValContainer mBoolPrototype;
    ImplValContainer mNonePrototype;
    ImplValContainer mFloatPrototype;
    ImplValContainer mStringPrototype;

    MemoizedAlternativePointer<Type> mIntType;
    MemoizedAlternativePointer<Type> mBoolType;
    MemoizedAlternativePointer<Type> mNoneType;
    MemoizedAlternativePointer<Type> mFloatType;
    MemoizedAlternativePointer<Type> mStringType;

    boost::unordered_map<MemoizedAlternativePointer<Type>, Type>
        mPrototypeTypeToWrappedType;
};

}

