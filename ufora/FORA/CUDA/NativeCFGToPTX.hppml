/***************************************************************************
    Copyright 2015 Ufora Inc.

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
****************************************************************************/

#pragma once

#include "UnableToConvertToPTX.hppml"

#include <string>

class NativeCFG;

/*******************************************************************************
computePTXVectorApplyKernelFromNativeCFG

	returns a string containing the PTX for a CUDA kernel

	inCFG - the NativeCFG to build
	entryFunctionName - name of the function in the kernel.

	a "valid" type is "bool", 32/64 bit signed/unsigned integer, 32/64 bit
	float, and tuples of other valid types.

	this function will throw UnableToConvertToPTX if there's a problem
	and will cache the NativeCFG.hash() to cause it to re-throw.

	in general, the NativeCFG must have the following properties:
		one argument, of "valid" type
		one return continuation of "valid" type
		It may only use float64, float32, and int32/int64/bit operations
			internally
		it may not allocate memory, call library functions, or use
			"call" operations

	the kernel function that it produces will take three parameters: a pointer
	to the input data, a pointer to the output slots, and a word giving
	the total number of arguments.

*******************************************************************************/

std::string					computePTXVectorApplyKernelFromNativeCFG(
									const NativeCFG& inCFG,
									const std::string& entryFunctionName
									);

//returns whether computePTXVectorApplyKernelFromNativeCFG will throw
bool						nativeCFGIsValidPTXVectorApplyKernel(
									const NativeCFG& inCFG
									);

