/***************************************************************************
    Copyright 2016 Ufora Inc.
 
    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at
 
        http://www.apache.org/licenses/LICENSE-2.0
 
    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
****************************************************************************/
#include <boost/python.hpp>
#include <boost/random.hpp>

#include "../../native/Registrar.hpp"
#include "../../core/python/CPPMLWrapper.hpp"
#include "../../core/python/CPPMLToSimple.hpp"
#include "../../core/python/ScopedPyThreads.hpp"
#include "../../core/python/ValueLikeCPPMLWrapper.hppml"
#include "../../core/containers/ImmutableTreeVector.py.hpp"
#include "../TypedFora/JitCompiler/TypedNativeFunctionPointer.hpp"
#include "GpuCodegen.hppml"
#include "GpuDataflowNativeCFG.hppml"
#include "../TypedFora/ABI/VectorRecord.hpp"

class GpuCodegenWrapper :
		public native::module::Exporter<GpuCodegenWrapper> {
public:
		std::string		getModuleName(void)
			{
			return "FORA";
			}

		static std::string compileAndDumpNativeCfgForGpu(
						const ImplValContainer& inApplyObject
						)
			{
			JudgmentOnValue	funJOV = JudgmentOnValue::FromLiveValue(inApplyObject.getReference()).relaxedJOV();

			NativeCFG kernelFunction = 
				computeGpuKernelFunction(
					funJOV,
					JOV::OfType(Type::Integer(64, true))
					).first;

			return prettyPrintString(
				GpuDataflowNativeCfg::convert(kernelFunction)
				);
			}

		static boost::python::object compileAndSimulateNativeCfgForGpu(
						const ImplValContainer& inApplyObject,
						int64_t index,
						int64_t maxCycles
						)
			{
			JudgmentOnValue	funJOV = JudgmentOnValue::FromLiveValue(inApplyObject.getReference()).relaxedJOV();

			pair<NativeCFG, ImmutableTreeVector<Type> > kernelFunction = 
				computeGpuKernelFunction(
					funJOV,
					JOV::OfType(Type::Integer(64, true))
					);

			GpuDataflowNativeCfg cfg = GpuDataflowNativeCfg::convert(kernelFunction.first);

			auto compiler = Runtime::getRuntime().getTypedForaCompiler();

			TypedNativeFunctionPointer<void (*)(void*, int32_t*, int64_t**, int64_t**, int64_t*, uint8_t*, int64_t)> fp(
				compiler,
				cfg.convertedCFG()
				);

			std::vector<int32_t> threadBlockIds = { 0 };
			std::vector<std::vector<int64_t> > threadHints;
			std::vector<std::vector<int64_t> > threadStackStates;
			std::vector<int64_t> indices = { index };	

			threadHints.resize(1);
			threadHints[0].resize(cfg.threadHintChannels());

			threadStackStates.resize(1);
			threadStackStates[0].resize(cfg.stackDataChannels());

			std::vector<int64_t*> threadHintPtrs = { &threadHints[0][0] };
			std::vector<int64_t*> threadStackStatePtrs = { &threadStackStates[0][0] };

			boost::python::list ids;
			
			long tries = 0;
			while (threadBlockIds[0] != -1 && threadBlockIds[0] <= kernelFunction.second.size() && tries < maxCycles)
				{
				tries++;

				fp(	inApplyObject.data(),
					&threadBlockIds[0],
					&threadHintPtrs[0],
					&threadStackStatePtrs[0],
					&indices[0],
					nullptr,
					0
					);

				ids.append(threadBlockIds[0]);
				}

			boost::python::object resultObj;

			if (threadBlockIds[0] > 0 && threadBlockIds[0] <= kernelFunction.second.size())
				resultObj = boost::python::object(
					ImplValContainer(
						ImplVal(
							kernelFunction.second[threadBlockIds[0]-1],
							threadStackStatePtrs[0]
							)
						)
					);

			return boost::python::make_tuple(resultObj, ids);
			}

		void exportPythonWrapper()
			{
			boost::python::def("compileAndStringifyNativeCfgForGpu", compileAndDumpNativeCfgForGpu);
			boost::python::def("compileAndSimulateNativeCfgForGpu", compileAndSimulateNativeCfgForGpu);
			}
};


//explicitly instantiating the registration element causes the linker to need
//this file
template<>
char native::module::Exporter<GpuCodegenWrapper>::mEnforceRegistration =
		native::module::ExportRegistrar<
			GpuCodegenWrapper>::registerWrapper();


