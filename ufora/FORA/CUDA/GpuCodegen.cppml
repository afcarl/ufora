#include "GpuCodegen.hppml"

#include "../Reasoner/SimpleForwardReasoner.hppml"
#include "../Runtime.hppml"
#include "../TypedFora/Converter.hppml"
#include "../TypedFora/TypedFora.hppml"
#include "../TypedFora/TypedForaUtil.hppml"
#include "ConvertForGPUExecution.hppml"
#include "../Native/NativeCFGTransforms/Transforms.hppml"
#include "NativeCFGToPTX.hppml"

pair<NativeCFG, ImmutableTreeVector<Type> > computeGpuKernelFunction(JOV funJOV, JOV vecElementJov)
	{
	ImmutableTreeVector<JudgmentOnValue> signatureJOVs =
		emptyTreeVec() +
			funJOV +
			JudgmentOnValue::Constant(CSTValue(Symbol::Call())) +
			vecElementJov
		;
	LOG_DEBUG << "signature JOVs: " << prettyPrintString(signatureJOVs);

	PolymorphicSharedPtr<Fora::SimpleForwardReasoner> reasoner(
		new Fora::SimpleForwardReasoner(
			Runtime::getRuntime().getTypedForaCompiler(),
            Runtime::getRuntime().getInstructionGraph(),
            Runtime::getRuntime().getAxioms()
            )
		);

	auto frame = reasoner->reasonAboutApply(JOVT::Unnamed(signatureJOVs));

	if (frame->exits().resultPart().size() < 1 )
		{
		ostringstream msg;
		msg << "Code returns zero types ("
				<< frame->exits().resultPart().size() << "):"
				<< prettyPrintString(frame->exits().resultPart());
		throw UnableToConvertToPTX(msg.str());
		}

	auto blockIdAndCode = reasoner->compileEntrypointForApply(JOVT::Unnamed(signatureJOVs));

	lassert(blockIdAndCode->first == TypedFora::BlockID::entry());

	if (!blockIdAndCode)
		throw UnableToConvertToPTX(
			"Reasoning failed to converge."
			);

	TypedFora::Callable callable =
			Runtime::getRuntime().getTypedForaCompiler()->getDefinition(blockIdAndCode->second);

	TypedFora::Converter converter;

	callable = adaptSignatureOfCallable(
					callable,
					callable.callSignatureAsJovt(blockIdAndCode->first),
					callable.callSignatureAsJovt(blockIdAndCode->first),
					callable.resultSignature().relaxed(),
					false
					);

	NativeCFG cfg = converter.convertCallable(callable);

	cfg = convertForGpuExecution(cfg);

	while (cfg.externalBranches().size())
		{
		string nameOfSubbranch = cfg.externalBranches()[0];

		if (Runtime::getRuntime().getTypedForaCompiler()->
				getMutuallyRecursiveFunctions(nameOfSubbranch).size())
			{
			throw UnableToConvertToPTX("contains recursion");
			}

		NativeCFG cfgToInline =
				converter.convertCallable(
						Runtime::getRuntime().getTypedForaCompiler()
							->getDefinition(nameOfSubbranch));

		cfg = NativeCFGTransforms::inlineCFG(cfg,
			convertForGpuExecution(
				cfgToInline
				),
			nameOfSubbranch
			);
		}

	//a lot simpler when all variables are unique
	cfg = NativeCFGTransforms::optimize(cfg, Runtime::getRuntime().getConfig());
	cfg = NativeCFGTransforms::renameVariables(cfg);

	ImmutableTreeVector<Type> outputTypes;

	for (auto& jov : frame->exits().resultPart().vals())
		{
		Nullable<Type> t = jov.type();

		lassert(t);

		outputTypes = outputTypes + *t;
		}

	return make_pair(cfg, outputTypes);
	}