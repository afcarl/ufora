/***************************************************************************
    Copyright 2015 Ufora Inc.

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
****************************************************************************/
#include "../Native/NativeType.hppml"

static void copyBetweenAlignedAndPacked(
		bool copyFromAlignedToPacked,
		const NativeType& typ,
		uint8_t* alignedData,
		uint8_t* packedData
		)
	{
		lassert_dump(
			(uint64_t)alignedData % typ.alignment() == 0,
			"pointer to aligned data is not aligned (ptr_addr: "
			<< (uint64_t*)alignedData
			<< ", alignment:" << typ.alignment() << ")"
			);
	@match NativeType(typ)
		-|	Nothing() ->> {
			}
		-| 	Composite(types, names) ->> {
			uword_t offset = 0;
			for (long k = 0; k < types.size(); ++k)
				{
				uword_t padding = alignedOffset(types[k], offset) - offset;
				alignedData = alignedData + padding;
				copyBetweenAlignedAndPacked(copyFromAlignedToPacked, types[k], alignedData, packedData);
				alignedData = alignedData + types[k].alignedSize();
				packedData  = packedData + types[k].packedSize();
				offset += padding + types[k].alignedSize();
				}
			}
		-|	Array(type, count) ->> {
			if (type.packedSize() == type.alignedSize())
				{
				if (copyFromAlignedToPacked)
					memcpy(packedData, alignedData, type.packedSize() * count);
				else
					memcpy(alignedData, packedData, type.packedSize() * count);
				}
			else { // packedSize != alignedSize
				uword_t offset = 0;
				for (long k = 0; k < count; ++k)
					{
					uword_t padding = alignedOffset(type, offset) - offset;
					alignedData = alignedData + padding;
					// TODO :: simplify
					copyBetweenAlignedAndPacked(
						copyFromAlignedToPacked,
						type,
						alignedData, // alignedData + k * type.alignedSize()
						packedData   // packedData  + k * type.packedSize()
						);
					alignedData = alignedData + type.alignedSize();
					packedData  = packedData + type.packedSize();
					offset += padding + type.alignedSize();
					}
				}
			}
		-|	Continuations(_) ->> {
			lassert_dump(false, "not implemented yet");
			}
		-|	_ ->> {
			lassert_dump(
					typ.isInteger() || typ.isFloat() || typ.isPointer(),
					"unexpected type in aligned<->packed copy: " << prettyPrintString(typ)
					);
			lassert_dump(
					typ.packedSize() == typ.alignedSize(),
					"Type " << prettyPrintString(typ)
					<< " has different packed and aligned sizes, but it is"
					<< " not special-cased when copying (it should be)"
					);
			if (copyFromAlignedToPacked) {
				memcpy(packedData, alignedData, typ.packedSize());
				}
			else {
				memcpy(alignedData, packedData, typ.packedSize());
				}
			}
	}

void copyAlignedToPacked(const NativeType& typ, uint8_t* alignedData, uint8_t* packedData)
	{
	copyBetweenAlignedAndPacked(true, typ, alignedData, packedData);
	}

void copyPackedToAligned(const NativeType& typ, uint8_t* packedData, uint8_t* alignedData)
	{
	copyBetweenAlignedAndPacked(false, typ, alignedData, packedData);
	}

