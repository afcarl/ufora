//
// Generated by NVIDIA NVVM Compiler then manipulated manually
// Compiler built on Fri Aug  1 05:29:38 2014 (1406860178)
// Cuda compilation tools, release 6.5, V6.5.14
//

.version 4.1
.target sm_20
.address_size 64

.func (.reg .f64 %output) expf64 (.reg .f64 %input)
{
	.reg .pred 	%p<5>;
	.reg .s32 	%r<15>;
	.reg .f32 	%f<3>;
	.reg .s64 	%rd<5>;
	.reg .f64 	%fd<46>;


	{
	.reg .b32 %temp;
	mov.b64 	{%temp, %r1}, %input;
	}
	mov.b32 	 %f1, %r1;
	abs.f32 	%f2, %f1;
	setp.lt.f32	%p1, %f2, 0f40874911;
	@%p1 bra 	BB0_2;

	setp.lt.s32	%p2, %r1, 0;
	selp.f64	%fd8, 0d0000000000000000, 0d7FF0000000000000, %p2;
	abs.f64 	%fd9, %input;
	setp.gtu.f64	%p3, %fd9, 0d7FF0000000000000;
	add.f64 	%fd10, %input, %input;
	selp.f64	%output, %fd10, %fd8, %p3;
	bra.uni 	BB0_6;

BB0_2:
	mov.f64 	%fd11, 0d3FF71547652B82FE;
	mul.rn.f64 	%fd12, %input, %fd11;
	mov.f64 	%fd13, 0d4338000000000000;
	add.rn.f64 	%fd14, %fd12, %fd13;
	{
	.reg .b32 %temp;
	mov.b64 	{%r2, %temp}, %fd14;
	}
	mov.f64 	%fd15, 0dC338000000000000;
	add.rn.f64 	%fd16, %fd14, %fd15;
	mov.f64 	%fd17, 0dBFE62E42FEFA39EF;
	fma.rn.f64 	%fd18, %fd16, %fd17, %input;
	mov.f64 	%fd19, 0dBC7ABC9E3B39803F;
	fma.rn.f64 	%fd20, %fd16, %fd19, %fd18;
	mov.f64 	%fd21, 0d3E928AF3FCA213EA;
	mov.f64 	%fd22, 0d3E5ADE1569CE2BDF;
	fma.rn.f64 	%fd23, %fd22, %fd20, %fd21;
	mov.f64 	%fd24, 0d3EC71DEE62401315;
	fma.rn.f64 	%fd25, %fd23, %fd20, %fd24;
	mov.f64 	%fd26, 0d3EFA01997C89EB71;
	fma.rn.f64 	%fd27, %fd25, %fd20, %fd26;
	mov.f64 	%fd28, 0d3F2A01A014761F65;
	fma.rn.f64 	%fd29, %fd27, %fd20, %fd28;
	mov.f64 	%fd30, 0d3F56C16C1852B7AF;
	fma.rn.f64 	%fd31, %fd29, %fd20, %fd30;
	mov.f64 	%fd32, 0d3F81111111122322;
	fma.rn.f64 	%fd33, %fd31, %fd20, %fd32;
	mov.f64 	%fd34, 0d3FA55555555502A1;
	fma.rn.f64 	%fd35, %fd33, %fd20, %fd34;
	mov.f64 	%fd36, 0d3FC5555555555511;
	fma.rn.f64 	%fd37, %fd35, %fd20, %fd36;
	mov.f64 	%fd38, 0d3FE000000000000B;
	fma.rn.f64 	%fd39, %fd37, %fd20, %fd38;
	mov.f64 	%fd40, 0d3FF0000000000000;
	fma.rn.f64 	%fd41, %fd39, %fd20, %fd40;
	fma.rn.f64 	%fd44, %fd41, %fd20, %fd40;
	abs.s32 	%r6, %r2;
	setp.lt.s32	%p4, %r6, 1023;
	@%p4 bra 	BB0_4;

	add.s32 	%r7, %r2, 2046;
	shl.b32 	%r8, %r7, 19;
	and.b32  	%r9, %r8, -1048576;
	shl.b32 	%r10, %r7, 20;
	sub.s32 	%r14, %r10, %r9;
	mov.u32 	%r11, 0;
	mov.b64 	%fd42, {%r11, %r9};
	mul.f64 	%fd44, %fd44, %fd42;
	bra.uni 	BB0_5;

BB0_4:
	shl.b32 	%r12, %r2, 20;
	add.s32 	%r14, %r12, 1072693248;

BB0_5:
	mov.u32 	%r13, 0;
	mov.b64 	%fd43, {%r13, %r14};
	mul.f64 	%output, %fd44, %fd43;

BB0_6:
	ret;
}


.func (.reg .f64 %output) logf64 (.reg .f64 %input)
{
    .reg .pred  %p<9>;
    .reg .s32   %r<26>;
    .reg .f64   %fd<58>;
	

    {
    .reg .b32 %temp;
    mov.b64     {%temp, %r22}, %input;
    }
    setp.gt.f64 %p1, %input, 0d0000000000000000;
    setp.lt.s32 %p2, %r22, 2146435072;
    and.pred    %p3, %p1, %p2;
    @%p3 bra    BB0_6;

    abs.f64     %fd9, %input;
    setp.gtu.f64    %p4, %fd9, 0d7FF0000000000000;
    @%p4 bra    BB0_5;

    setp.neu.f64    %p5, %input, 0d0000000000000000;
    @%p5 bra    BB0_4;

    mov.f64     %output, 0dFFF0000000000000;
    bra.uni     BB0_12;

BB0_4:
    setp.eq.f64 %p6, %input, 0d7FF0000000000000;
    selp.f64    %output, %input, 0dFFF8000000000000, %p6;
    bra.uni     BB0_12;

BB0_5:
    add.f64     %output, %input, %input;
    bra.uni     BB0_12;

BB0_6:
    {
    .reg .b32 %temp;
    mov.b64     {%r23, %temp}, %input;
    }
    setp.lt.s32 %p7, %r22, 1048576;
    @%p7 bra    BB0_8;

    mov.u32     %r24, -1023;
    bra.uni     BB0_9;

BB0_8:
    mul.f64     %fd11, %input, 0d4350000000000000;
    {
    .reg .b32 %temp;
    mov.b64     {%temp, %r22}, %fd11;
    }
    {
    .reg .b32 %temp;
    mov.b64     {%r23, %temp}, %fd11;
    }
    mov.u32     %r24, -1077;

BB0_9:
    shr.u32     %r13, %r22, 20;
    add.s32     %r25, %r24, %r13;
    and.b32     %r14, %r22, -2146435073;
    or.b32      %r15, %r14, 1072693248;
    mov.b64     %fd56, {%r23, %r15};
    setp.lt.s32 %p8, %r15, 1073127583;
    @%p8 bra    BB0_11;

    {
    .reg .b32 %temp;
    mov.b64     {%r16, %temp}, %fd56;
    }
    {
    .reg .b32 %temp;
    mov.b64     {%temp, %r17}, %fd56;
    }
    add.s32     %r18, %r17, -1048576;
    mov.b64     %fd56, {%r16, %r18};
    add.s32     %r25, %r25, 1;

BB0_11:
    add.f64     %fd13, %fd56, 0d3FF0000000000000;
    mov.f64     %fd14, 0d3FF0000000000000;
    // inline asm
    rcp.approx.ftz.f64 %fd12,%fd13;
    // inline asm %fd1
    neg.f64     %fd15, %fd13;
    fma.rn.f64  %fd16, %fd15, %fd12, %fd14;
    fma.rn.f64  %fd17, %fd16, %fd16, %fd16;
    fma.rn.f64  %fd18, %fd17, %fd12, %fd12;
    add.f64     %fd19, %fd56, 0dBFF0000000000000;
    mul.f64     %fd20, %fd19, %fd18;
    fma.rn.f64  %fd21, %fd19, %fd18, %fd20;
    mul.f64     %fd22, %fd21, %fd21;
    mov.f64     %fd23, 0d3ED0EE258B7A8B04;
    mov.f64     %fd24, 0d3EB1380B3AE80F1E;
    fma.rn.f64  %fd25, %fd24, %fd22, %fd23;
    mov.f64     %fd26, 0d3EF3B2669F02676F;
    fma.rn.f64  %fd27, %fd25, %fd22, %fd26;
    mov.f64     %fd28, 0d3F1745CBA9AB0956;
    fma.rn.f64  %fd29, %fd27, %fd22, %fd28;
    mov.f64     %fd30, 0d3F3C71C72D1B5154;
    fma.rn.f64  %fd31, %fd29, %fd22, %fd30;
    mov.f64     %fd32, 0d3F624924923BE72D;
    fma.rn.f64  %fd33, %fd31, %fd22, %fd32;
    mov.f64     %fd34, 0d3F8999999999A3C4;
    fma.rn.f64  %fd35, %fd33, %fd22, %fd34;
    mov.f64     %fd36, 0d3FB5555555555554;
    fma.rn.f64  %fd37, %fd35, %fd22, %fd36;
    sub.f64     %fd38, %fd19, %fd21;
    add.f64     %fd39, %fd38, %fd38;
    neg.f64     %fd40, %fd21;
    fma.rn.f64  %fd41, %fd40, %fd19, %fd39;
    mul.f64     %fd42, %fd18, %fd41;
    mul.f64     %fd43, %fd37, %fd22;
    fma.rn.f64  %fd44, %fd43, %fd21, %fd42;
    xor.b32     %r19, %r25, -2147483648;
    mov.u32     %r20, -2147483648;
    mov.u32     %r21, 1127219200;
    mov.b64     %fd45, {%r19, %r21};
    mov.b64     %fd46, {%r20, %r21};
    sub.f64     %fd47, %fd45, %fd46;
    mov.f64     %fd48, 0d3FE62E42FEFA39EF;
    fma.rn.f64  %fd49, %fd47, %fd48, %fd21;
    neg.f64     %fd50, %fd47;
    fma.rn.f64  %fd51, %fd50, %fd48, %fd49;
    sub.f64     %fd52, %fd51, %fd21;
    sub.f64     %fd53, %fd44, %fd52;
    mov.f64     %fd54, 0d3C7ABC9E3B39803F;
    fma.rn.f64  %fd55, %fd47, %fd54, %fd53;
    add.f64     %output, %fd49, %fd55;

BB0_12:
    ret;
}


.func (.reg .f32 %output) logf32 (.reg .f32 %input)
{
	.reg .pred 	%p<6>;
	.reg .s32 	%r<5>;
	.reg .f32 	%f<33>;


	setp.gt.f32	%p1, %input, 0f00000000;
	setp.lt.f32	%p2, %input, 0f7F800000;
	and.pred  	%p3, %p1, %p2;
	@%p3 bra 	BB0_2;

	lg2.approx.f32 	%output, %input;
	bra.uni 	BB0_3;

BB0_2:
	setp.lt.f32	%p4, %input, 0f00800000;
	mul.f32 	%f7, %input, 0f4B800000;
	selp.f32	%f8, %f7, %input, %p4;
	selp.f32	%f9, 0fC3170000, 0fC2FE0000, %p4;
	mov.b32 	 %r1, %f8;
	and.b32  	%r2, %r1, 8388607;
	or.b32  	%r3, %r2, 1065353216;
	mov.b32 	 %f10, %r3;
	shr.u32 	%r4, %r1, 23;
	cvt.rn.f32.u32	%f11, %r4;
	add.f32 	%f12, %f9, %f11;
	setp.gt.f32	%p5, %f10, 0f3FAE147B;
	mul.f32 	%f13, %f10, 0f3F000000;
	add.f32 	%f14, %f12, 0f3F800000;
	selp.f32	%f15, %f13, %f10, %p5;
	selp.f32	%f16, %f14, %f12, %p5;
	add.f32 	%f6, %f15, 0f3F800000;
	add.f32 	%f17, %f15, 0fBF800000;
	// inline asm
	rcp.approx.ftz.f32 %f5,%f6;
	// inline asm
	neg.f32 	%f18, %f17;
	mul.f32 	%f19, %f17, %f18;
	mul.rn.f32 	%f20, %f5, %f19;
	add.rn.f32 	%f21, %f17, %f20;
	mul.f32 	%f22, %f21, %f21;
	mov.f32 	%f23, 0f3C4C6A36;
	mov.f32 	%f24, 0f3B1E94E6;
	fma.rn.f32 	%f25, %f24, %f22, %f23;
	mov.f32 	%f26, 0f3DAAAB1A;
	fma.rn.f32 	%f27, %f25, %f22, %f26;
	mul.f32 	%f28, %f27, %f22;
	fma.rn.f32 	%f29, %f28, %f21, %f20;
	add.f32 	%f30, %f29, %f17;
	mov.f32 	%f31, 0f3F317218;
	fma.rn.f32 	%output, %f16, %f31, %f30;

BB0_3:
	ret;
}

.func  (.param .b64 func_retval0) __internal_trig_reduction_slowpathd
(
    .param .b64 __internal_trig_reduction_slowpathd_param_0,
    .param .b64 __internal_trig_reduction_slowpathd_param_1
)
;
.const .align 8 .b8 __cudart_i2opi_d[144] = {8, 93, 141, 31, 177, 95, 251, 107, 234, 146, 82, 138, 247, 57, 7, 61, 123, 241, 229, 235, 199, 186, 39, 117, 45, 234, 95, 158, 102, 63, 70, 79, 183, 9, 203, 39, 207, 126, 54, 109, 31, 109, 10, 90, 139, 17, 47, 239, 15, 152, 5, 222, 255, 151, 248, 31, 59, 40, 249, 189, 139, 95, 132, 156, 244, 57, 83, 131, 57, 214, 145, 57, 65, 126, 95, 180, 38, 112, 156, 233, 132, 68, 187, 46, 245, 53, 130, 232, 62, 167, 41, 177, 28, 235, 29, 254, 28, 146, 209, 9, 234, 46, 73, 6, 224, 210, 77, 66, 58, 110, 36, 183, 97, 197, 187, 222, 171, 99, 81, 254, 65, 144, 67, 60, 153, 149, 98, 219, 192, 221, 52, 245, 209, 87, 39, 252, 41, 21, 68, 78, 110, 131, 249, 162};
.const .align 8 .b8 __cudart_sin_cos_coeffs[128] = {186, 94, 120, 249, 101, 219, 229, 61, 70, 210, 176, 44, 241, 229, 90, 190, 146, 227, 172, 105, 227, 29, 199, 62, 161, 98, 219, 25, 160, 1, 42, 191, 24, 8, 17, 17, 17, 17, 129, 63, 84, 85, 85, 85, 85, 85, 197, 191, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 129, 253, 32, 131, 255, 168, 189, 40, 133, 239, 193, 167, 238, 33, 62, 217, 230, 6, 142, 79, 126, 146, 190, 233, 188, 221, 25, 160, 1, 250, 62, 71, 93, 193, 22, 108, 193, 86, 191, 81, 85, 85, 85, 85, 85, 165, 63, 0, 0, 0, 0, 0, 0, 224, 191, 0, 0, 0, 0, 0, 0, 240, 63};


.func (.reg .f64 %output) cosf64 (.reg .f64 %input)
{
    .local .align 4 .b8     __local_depot0[4];
    .reg .b64   %SP;
    .reg .b64   %SPL;
    .reg .pred  %p<5>;
    .reg .s32   %r<11>;
    .reg .s64   %rd<11>;
    .reg .f64   %fd<42>;


    mov.u64     %SPL, __local_depot0;
    cvta.local.u64  %SP, %SPL;
    add.u64     %rd5, %SP, 0;
    cvta.to.local.u64   %rd1, %rd5;
    abs.f64     %fd14, %input;
    setp.neu.f64    %p1, %fd14, 0d7FF0000000000000;
    @%p1 bra    BB0_2;

    mov.f64     %fd15, 0d0000000000000000;
    mul.rn.f64  %input, %input, %fd15;

BB0_2:
    mul.f64     %fd16, %input, 0d3FE45F306DC9C883;
    cvt.rni.s32.f64 %r10, %fd16;
    st.local.u32    [%rd1], %r10;
    cvt.rn.f64.s32  %fd17, %r10;
    neg.f64     %fd18, %fd17;
    mov.f64     %fd19, 0d3FF921FB54442D18;
    fma.rn.f64  %fd20, %fd18, %fd19, %input;
    mov.f64     %fd21, 0d3C91A62633145C00;
    fma.rn.f64  %fd22, %fd18, %fd21, %fd20;
    mov.f64     %fd23, 0d397B839A252049C0;
    fma.rn.f64  %fd40, %fd18, %fd23, %fd22;
    {
    .reg .b32 %temp;
    mov.b64     {%temp, %r5}, %input;
    }
    and.b32     %r6, %r5, 2145386496;
    setp.lt.u32 %p2, %r6, 1105199104;
    @%p2 bra    BB0_4;

    // Callseq Start 0
    {
    .reg .b32 temp_param_reg;
    .param .b64 param0;
    st.param.f64    [param0+0], %input;
    .param .b64 param1;
    st.param.b64    [param1+0], %rd5;
    .param .b64 retval0;
    call.uni (retval0),
    __internal_trig_reduction_slowpathd,
    (
    param0,
    param1
    );
    ld.param.f64    %fd40, [retval0+0];
    }
    // Callseq End 0
    ld.local.u32    %r10, [%rd1];

BB0_4:
    add.s32     %r4, %r10, 1;
    and.b32     %r7, %r4, 1;
    shl.b32     %r8, %r7, 3;
    setp.eq.s32 %p3, %r7, 0;
    selp.f64    %fd24, 0d3DE5DB65F9785EBA, 0dBDA8FF8320FD8164, %p3;
    mul.wide.u32    %rd7, %r8, 8;
    mov.u64     %rd8, __cudart_sin_cos_coeffs;
    add.s64     %rd9, %rd7, %rd8;
    ld.const.f64    %fd25, [%rd9+8];
    mul.rn.f64  %fd7, %fd40, %fd40;
    fma.rn.f64  %fd26, %fd24, %fd7, %fd25;
    ld.const.f64    %fd27, [%rd9+16];
    fma.rn.f64  %fd28, %fd26, %fd7, %fd27;
    ld.const.f64    %fd29, [%rd9+24];
    fma.rn.f64  %fd30, %fd28, %fd7, %fd29;
    ld.const.f64    %fd31, [%rd9+32];
    fma.rn.f64  %fd32, %fd30, %fd7, %fd31;
    ld.const.f64    %fd33, [%rd9+40];
    fma.rn.f64  %fd34, %fd32, %fd7, %fd33;
    ld.const.f64    %fd35, [%rd9+48];
    fma.rn.f64  %fd8, %fd34, %fd7, %fd35;
    fma.rn.f64  %output, %fd8, %fd40, %fd40;
    @%p3 bra    BB0_6;

        mov.f64     %fd36, 0d3FF0000000000000;
    fma.rn.f64  %output, %fd8, %fd7, %fd36;

BB0_6:
    and.b32     %r9, %r4, 2;
    setp.eq.s32 %p4, %r9, 0;
    @%p4 bra    BB0_8;

    mov.f64     %fd37, 0d0000000000000000;
    mov.f64     %fd38, 0dBFF0000000000000;
    fma.rn.f64  %output, %output, %fd38, %fd37;

BB0_8:
    ret;
}

.visible .entry _Z6kernelPdS_(
	.param .u64 _Z6kernelPdS__param_0,
	.param .u64 _Z6kernelPdS__param_1
)
{
	.local .align 4 .b8 	__local_depot0[4];
	.reg .b64 	%SP;
	.reg .b64 	%SPL;
	.reg .pred 	%p<5>;
	.reg .s32 	%r<10>;
	.reg .s64 	%rd<11>;
	.reg .f64 	%fd<42>;


	mov.u64 	%SPL, __local_depot0;
	cvta.local.u64 	%SP, %SPL;
	ld.param.u64 	%rd2, [_Z6kernelPdS__param_0];
	ld.param.u64 	%rd3, [_Z6kernelPdS__param_1];
	cvta.to.global.u64 	%rd4, %rd3;
	add.u64 	%rd5, %SP, 0;
	cvta.to.local.u64 	%rd1, %rd5;
	ldu.global.f64 	%fd39, [%rd4];
	abs.f64 	%fd14, %fd39;
	setp.neu.f64	%p1, %fd14, 0d7FF0000000000000;
	@%p1 bra 	BB0_2;

	mov.f64 	%fd15, 0d0000000000000000;
	mul.rn.f64 	%fd39, %fd39, %fd15;

BB0_2:
	mul.f64 	%fd16, %fd39, 0d3FE45F306DC9C883;
	cvt.rni.s32.f64	%r9, %fd16;
	st.local.u32 	[%rd1], %r9;
	cvt.rn.f64.s32	%fd17, %r9;
	neg.f64 	%fd18, %fd17;
	mov.f64 	%fd19, 0d3FF921FB54442D18;
	fma.rn.f64 	%fd20, %fd18, %fd19, %fd39;
	mov.f64 	%fd21, 0d3C91A62633145C00;
	fma.rn.f64 	%fd22, %fd18, %fd21, %fd20;
	mov.f64 	%fd23, 0d397B839A252049C0;
	fma.rn.f64 	%fd40, %fd18, %fd23, %fd22;
	{
	.reg .b32 %temp;
	mov.b64 	{%temp, %r4}, %fd39;
	}
	and.b32  	%r5, %r4, 2145386496;
	setp.lt.u32	%p2, %r5, 1105199104;
	@%p2 bra 	BB0_4;

	// Callseq Start 0
	{
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.f64	[param0+0], %fd39;
	.param .b64 param1;
	st.param.b64	[param1+0], %rd5;
	.param .b64 retval0;
	call.uni (retval0),
	__internal_trig_reduction_slowpathd,
	(
	param0,
	param1
	);
	ld.param.f64	%fd40, [retval0+0];
	}
	// Callseq End 0
	ld.local.u32 	%r9, [%rd1];

BB0_4:
	and.b32  	%r6, %r9, 1;
	shl.b32 	%r7, %r6, 3;
	setp.eq.s32	%p3, %r6, 0;
	selp.f64	%fd24, 0d3DE5DB65F9785EBA, 0dBDA8FF8320FD8164, %p3;
	mul.wide.u32 	%rd7, %r7, 8;
	mov.u64 	%rd8, __cudart_sin_cos_coeffs;
	add.s64 	%rd9, %rd7, %rd8;
	ld.const.f64 	%fd25, [%rd9+8];
	mul.rn.f64 	%fd7, %fd40, %fd40;
	fma.rn.f64 	%fd26, %fd24, %fd7, %fd25;
	ld.const.f64 	%fd27, [%rd9+16];
	fma.rn.f64 	%fd28, %fd26, %fd7, %fd27;
	ld.const.f64 	%fd29, [%rd9+24];
	fma.rn.f64 	%fd30, %fd28, %fd7, %fd29;
	ld.const.f64 	%fd31, [%rd9+32];
	fma.rn.f64 	%fd32, %fd30, %fd7, %fd31;
	ld.const.f64 	%fd33, [%rd9+40];
	fma.rn.f64 	%fd34, %fd32, %fd7, %fd33;
	ld.const.f64 	%fd35, [%rd9+48];
	fma.rn.f64 	%fd8, %fd34, %fd7, %fd35;
	fma.rn.f64 	%fd41, %fd8, %fd40, %fd40;
	@%p3 bra 	BB0_6;

	mov.f64 	%fd36, 0d3FF0000000000000;
	fma.rn.f64 	%fd41, %fd8, %fd7, %fd36;

BB0_6:
	and.b32  	%r8, %r9, 2;
	setp.eq.s32	%p4, %r8, 0;
	@%p4 bra 	BB0_8;

	mov.f64 	%fd37, 0d0000000000000000;
	mov.f64 	%fd38, 0dBFF0000000000000;
	fma.rn.f64 	%fd41, %fd41, %fd38, %fd37;

BB0_8:
	cvta.to.global.u64 	%rd10, %rd2;
	st.global.f64 	[%rd10], %fd41;
	ret;
}

.func (.reg .f64 %output) sinf64 (.reg .f64 %input)
{
	.local .align 4 .b8 	__local_depot0[4];
	.reg .b64 	%SP;
	.reg .b64 	%SPL;
	.reg .pred 	%p<5>;
	.reg .s32 	%r<10>;
	.reg .s64 	%rd<11>;
	.reg .f64 	%fd<42>;


	mov.u64 	%SPL, __local_depot0;
	cvta.local.u64 	%SP, %SPL;
	add.u64 	%rd5, %SP, 0;
	cvta.to.local.u64 	%rd1, %rd5;
	abs.f64 	%fd14, %input;
	setp.neu.f64	%p1, %fd14, 0d7FF0000000000000;
	@%p1 bra 	BB0_2;

	mov.f64 	%fd15, 0d0000000000000000;
	mul.rn.f64 	%input, %input, %fd15;

BB0_2:
	mul.f64 	%fd16, %input, 0d3FE45F306DC9C883;
	cvt.rni.s32.f64	%r9, %fd16;
	st.local.u32 	[%rd1], %r9;
	cvt.rn.f64.s32	%fd17, %r9;
	neg.f64 	%fd18, %fd17;
	mov.f64 	%fd19, 0d3FF921FB54442D18;
	fma.rn.f64 	%fd20, %fd18, %fd19, %input;
	mov.f64 	%fd21, 0d3C91A62633145C00;
	fma.rn.f64 	%fd22, %fd18, %fd21, %fd20;
	mov.f64 	%fd23, 0d397B839A252049C0;
	fma.rn.f64 	%fd40, %fd18, %fd23, %fd22;
	{
	.reg .b32 %temp;
	mov.b64 	{%temp, %r4}, %input;
	}
	and.b32  	%r5, %r4, 2145386496;
	setp.lt.u32	%p2, %r5, 1105199104;
	@%p2 bra 	BB0_4;

	// Callseq Start 0
	{
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.f64	[param0+0], %input;
	.param .b64 param1;
	st.param.b64	[param1+0], %rd5;
	.param .b64 retval0;
	call.uni (retval0),
	__internal_trig_reduction_slowpathd,
	(
	param0,
	param1
	);
	ld.param.f64	%fd40, [retval0+0];
	}
	// Callseq End 0
	ld.local.u32 	%r9, [%rd1];

BB0_4:
	and.b32  	%r6, %r9, 1;
	shl.b32 	%r7, %r6, 3;
	setp.eq.s32	%p3, %r6, 0;
	selp.f64	%fd24, 0d3DE5DB65F9785EBA, 0dBDA8FF8320FD8164, %p3;
	mul.wide.u32 	%rd7, %r7, 8;
	mov.u64 	%rd8, __cudart_sin_cos_coeffs;
	add.s64 	%rd9, %rd7, %rd8;
	ld.const.f64 	%fd25, [%rd9+8];
	mul.rn.f64 	%fd7, %fd40, %fd40;
	fma.rn.f64 	%fd26, %fd24, %fd7, %fd25;
	ld.const.f64 	%fd27, [%rd9+16];
	fma.rn.f64 	%fd28, %fd26, %fd7, %fd27;
	ld.const.f64 	%fd29, [%rd9+24];
	fma.rn.f64 	%fd30, %fd28, %fd7, %fd29;
	ld.const.f64 	%fd31, [%rd9+32];
	fma.rn.f64 	%fd32, %fd30, %fd7, %fd31;
	ld.const.f64 	%fd33, [%rd9+40];
	fma.rn.f64 	%fd34, %fd32, %fd7, %fd33;
	ld.const.f64 	%fd35, [%rd9+48];
	fma.rn.f64 	%fd8, %fd34, %fd7, %fd35;
	fma.rn.f64 	%output, %fd8, %fd40, %fd40;
	@%p3 bra 	BB0_6;

	mov.f64 	%fd36, 0d3FF0000000000000;
	fma.rn.f64 	%output, %fd8, %fd7, %fd36;

BB0_6:
	and.b32  	%r8, %r9, 2;
	setp.eq.s32	%p4, %r8, 0;
	@%p4 bra 	BB0_8;

	mov.f64 	%fd37, 0d0000000000000000;
	mov.f64 	%fd38, 0dBFF0000000000000;
	fma.rn.f64 	%output, %output, %fd38, %fd37;

BB0_8:
	ret;
}


.func  (.param .b64 func_retval0) __internal_trig_reduction_slowpathd(
    .param .b64 __internal_trig_reduction_slowpathd_param_0,
    .param .b64 __internal_trig_reduction_slowpathd_param_1
)
{
    .local .align 8 .b8     __local_depot1[40];
    .reg .b64   %SP;
    .reg .b64   %SPL;
    .reg .pred  %p<9>;
    .reg .s32   %r<42>;
    .reg .s64   %rd<99>;
    .reg .f64   %fd<5>;


    mov.u64     %SPL, __local_depot1;
    ld.param.f64    %fd4, [__internal_trig_reduction_slowpathd_param_0];
    ld.param.u64    %rd37, [__internal_trig_reduction_slowpathd_param_1];
    add.u64     %rd38, %SPL, 0;
    {
    .reg .b32 %temp;
    mov.b64     {%temp, %r1}, %fd4;
    }
    and.b32     %r40, %r1, -2147483648;
    shr.u32     %r3, %r1, 20;
    bfe.u32     %r4, %r1, 20, 11;
    setp.eq.s32 %p1, %r4, 2047;
    @%p1 bra    BB1_14;

    add.s32     %r15, %r4, -1024;
    shr.u32     %r16, %r15, 6;
    mov.u32     %r17, 15;
    sub.s32     %r5, %r17, %r16;
    mov.u32     %r18, 19;
    sub.s32     %r19, %r18, %r16;
    mov.u32     %r20, 18;
    min.s32     %r6, %r20, %r19;
    setp.lt.s32 %p2, %r5, %r6;
    mov.u64     %rd92, %rd38;
    @%p2 bra    BB1_3;

    mov.u64     %rd93, 0;
    bra.uni     BB1_5;

BB1_3:
    mov.b64      %rd41, %fd4;
    shl.b64     %rd42, %rd41, 11;
    or.b64      %rd3, %rd42, -9223372036854775808;
    bfe.u32     %r21, %r1, 20, 11;
    add.s32     %r22, %r21, -1024;
    shr.u32     %r23, %r22, 6;
    sub.s32     %r25, %r17, %r23;
    mul.wide.s32    %rd43, %r25, 8;
    mov.u64     %rd44, __cudart_i2opi_d;
    add.s64     %rd90, %rd44, %rd43;
    mov.u64     %rd93, 0;
    mov.u64     %rd91, %rd38;
    mov.u64     %rd89, %rd38;
    mov.u32     %r39, %r5;

BB1_4:
    .pragma "nounroll";
    mov.u32     %r7, %r39;
    mov.u64     %rd6, %rd89;
    ld.const.u64    %rd47, [%rd90];
    // inline asm
    {
    .reg .u32 r0, r1, r2, r3, alo, ahi, blo, bhi, clo, chi;
    mov.b64         {alo,ahi}, %rd47;
    mov.b64         {blo,bhi}, %rd3;
    mov.b64         {clo,chi}, %rd93;
    mad.lo.cc.u32   r0, alo, blo, clo;
    madc.hi.cc.u32  r1, alo, blo, chi;
    madc.hi.u32     r2, alo, bhi,   0;
    mad.lo.cc.u32   r1, alo, bhi,  r1;
    madc.hi.cc.u32  r2, ahi, blo,  r2;
    madc.hi.u32     r3, ahi, bhi,   0;
    mad.lo.cc.u32   r1, ahi, blo,  r1;
    madc.lo.cc.u32  r2, ahi, bhi,  r2;
    addc.u32        r3,  r3,   0;
    mov.b64         %rd45, {r0,r1};
    mov.b64         %rd46, {r2,r3};
    }
    // inline asm
    st.local.u64    [%rd91], %rd45;
    add.s32     %r8, %r7, 1;
    sub.s32     %r26, %r8, %r5;
    mul.wide.s32    %rd50, %r26, 8;
    add.s64     %rd91, %rd38, %rd50;
    add.s64     %rd90, %rd90, 8;
    add.s64     %rd92, %rd6, 8;
    setp.lt.s32 %p3, %r8, %r6;
    mov.u64     %rd13, %rd92;
    mov.u64     %rd93, %rd46;
    mov.u64     %rd89, %rd13;
    mov.u32     %r39, %r8;
    @%p3 bra    BB1_4;

BB1_5:
    st.local.u64    [%rd92], %rd93;
    ld.local.u64    %rd94, [%rd38+16];
    ld.local.u64    %rd95, [%rd38+24];
    and.b32     %r9, %r3, 63;
    setp.eq.s32 %p4, %r9, 0;
    @%p4 bra    BB1_7;

    mov.u32     %r27, 64;
    sub.s32     %r28, %r27, %r9;
    shl.b64     %rd51, %rd95, %r9;
    shr.u64     %rd52, %rd94, %r28;
    or.b64      %rd95, %rd51, %rd52;
    shl.b64     %rd53, %rd94, %r9;
    ld.local.u64    %rd54, [%rd38+8];
    shr.u64     %rd55, %rd54, %r28;
    or.b64      %rd94, %rd55, %rd53;

BB1_7:
    cvta.to.local.u64   %rd56, %rd37;
    shr.u64     %rd57, %rd95, 62;
    cvt.u32.u64 %r29, %rd57;
    shr.u64     %rd58, %rd94, 62;
    shl.b64     %rd59, %rd95, 2;
    or.b64      %rd97, %rd59, %rd58;
    shl.b64     %rd96, %rd94, 2;
    shr.u64     %rd60, %rd95, 61;
    cvt.u32.u64 %r30, %rd60;
    and.b32     %r31, %r30, 1;
    add.s32     %r32, %r31, %r29;
    neg.s32     %r33, %r32;
    setp.eq.s32 %p5, %r40, 0;
    selp.b32    %r34, %r32, %r33, %p5;
    st.local.u32    [%rd56], %r34;
    setp.eq.s32 %p6, %r31, 0;
    @%p6 bra    BB1_9;

    mov.u64     %rd64, 0;
    // inline asm
    {
    .reg .u32 r0, r1, r2, r3, a0, a1, a2, a3, b0, b1, b2, b3;
    mov.b64         {a0,a1}, %rd64;
    mov.b64         {a2,a3}, %rd64;
    mov.b64         {b0,b1}, %rd96;
    mov.b64         {b2,b3}, %rd97;
    sub.cc.u32      r0, a0, b0;
    subc.cc.u32     r1, a1, b1;
    subc.cc.u32     r2, a2, b2;
    subc.u32        r3, a3, b3;
    mov.b64         %rd61, {r0,r1};
    mov.b64         %rd62, {r2,r3};
    }
    // inline asm
    xor.b32     %r40, %r40, -2147483648;
    mov.u64     %rd97, %rd62;
    mov.u64     %rd96, %rd61;

BB1_9:
    clz.b64     %r41, %rd97;
    setp.eq.s32 %p7, %r41, 0;
    @%p7 bra    BB1_11;

    shl.b64     %rd67, %rd97, %r41;
    mov.u32     %r35, 64;
    sub.s32     %r36, %r35, %r41;
    shr.u64     %rd68, %rd96, %r36;
    or.b64      %rd97, %rd68, %rd67;

BB1_11:
    mov.u64     %rd72, -3958705157555305931;
    // inline asm
    {
    .reg .u32 r0, r1, r2, r3, alo, ahi, blo, bhi;
    mov.b64         {alo,ahi}, %rd97;
    mov.b64         {blo,bhi}, %rd72;
    mul.lo.u32      r0, alo, blo;
    mul.hi.u32      r1, alo, blo;
    mad.lo.cc.u32   r1, alo, bhi, r1;
    madc.hi.u32     r2, alo, bhi,  0;
    mad.lo.cc.u32   r1, ahi, blo, r1;
    madc.hi.cc.u32  r2, ahi, blo, r2;
    madc.hi.u32     r3, ahi, bhi,  0;
    mad.lo.cc.u32   r2, ahi, bhi, r2;
    addc.u32        r3, r3,  0;
    mov.b64         %rd69, {r0,r1};
    mov.b64         %rd70, {r2,r3};
    }
    // inline asm
    setp.lt.s64 %p8, %rd70, 1;
    mov.u64     %rd98, %rd70;
    @%p8 bra    BB1_13;

    // inline asm
    {
    .reg .u32 r0, r1, r2, r3, a0, a1, a2, a3, b0, b1, b2, b3;
    mov.b64         {a0,a1}, %rd69;
    mov.b64         {a2,a3}, %rd70;
    mov.b64         {b0,b1}, %rd69;
    mov.b64         {b2,b3}, %rd70;
    add.cc.u32      r0, a0, b0;
    addc.cc.u32     r1, a1, b1;
    addc.cc.u32     r2, a2, b2;
    addc.u32        r3, a3, b3;
    mov.b64         %rd73, {r0,r1};
    mov.b64         %rd74, {r2,r3};
    }
    // inline asm
    add.s32     %r41, %r41, 1;
    mov.u64     %rd98, %rd74;

BB1_13:
    cvt.u64.u32 %rd79, %r40;
    shl.b64     %rd80, %rd79, 32;
    mov.u32     %r37, 1022;
    sub.s32     %r38, %r37, %r41;
    cvt.u64.u32 %rd81, %r38;
    shl.b64     %rd82, %rd81, 52;
    add.s64     %rd83, %rd98, 1;
    shr.u64     %rd84, %rd83, 10;
    add.s64     %rd85, %rd84, 1;
    shr.u64     %rd86, %rd85, 1;
    add.s64     %rd87, %rd86, %rd82;
    or.b64      %rd88, %rd87, %rd80;
    mov.b64      %fd4, %rd88;

BB1_14:
    st.param.f64    [func_retval0+0], %fd4;
    ret;
}
