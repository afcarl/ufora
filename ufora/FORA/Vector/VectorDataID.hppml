/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/
#pragma once

#include "../../core/math/Hash.hpp"
#include "../../core/cppml/CPPMLEquality.hppml"
#include "../../core/containers/ImmutableTreeVector.hppml"
#include "../../core/PolymorphicSharedPtr.hpp"
#include "../Core/CSTValue.hppml"
#include "ExternalDatasetDescriptor.hppml"
#include "../VectorDataManager/PageId.hppml"
#include <string>

@type
	VectorDataID =
		-| Internal of Fora::PageId page, uint32_t indexWithinPage
		-| External of ExternalDatasetDescriptor dataset
	with
		hash_type hash = (hashCPPMLDirect(*this))
	{
	public:
		static VectorDataID canonical(const Fora::PageId& inPage);

		Fora::PageId getPage() const;

		uint32_t getIndexWithinPage() const;
	};

macro_defineMemberHashFunction(VectorDataID);

macro_defineCppmlComparisonOperators(VectorDataID);


template<class T, class kind>
class CPPMLEquality;

template<>
class CPPMLEquality<VectorDataID, void> {
public:
		static char cmp(const VectorDataID& lhs, const VectorDataID& rhs)
			{
			return lhs.hash().cmp(rhs.hash());
			}
};

namespace boost {

template<>
class hash<VectorDataID> : public std::unary_function<VectorDataID, std::size_t> {
public:
		std::size_t operator()(VectorDataID const& in) const
			{
			return boost::hash<hash_type>()(in.hash());
			}
};

};


