/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/
#pragma once

#include "../Core/MemoryPool.hpp"
#include "../../core/math/Hash.hpp"

class NativeType;
class JudgmentOnValue;
class ImplValContainer;

namespace TypedFora {
namespace Abi {

class MutableVectorHandle;
class PackedForaValues;

}
}

class MutableVectorRecord {
public:
	MutableVectorRecord();

	~MutableVectorRecord();

	MutableVectorRecord(const MutableVectorRecord& inOther);

	hash_type hash() const;

	JudgmentOnValue elementJOV() const;

	size_t size() const;

	TypedFora::Abi::PackedForaValues packedValues() const;

	TypedFora::Abi::PackedForaValues appendUninitialized(long count) const;

	MutableVectorRecord& operator=(const MutableVectorRecord& inOther);

	static MutableVectorRecord allocateNewMutableVectorRecord(
			const JudgmentOnValue& inJOV,
			MemoryPool* inPool,
			hash_type inHash
			);

	static MutableVectorRecord allocateNewMutableVectorRecord(
			const JudgmentOnValue& inJOV,
			MemoryPool* inPool
			);

	static MutableVectorRecord
	allocateNewMutableVectorRecordOfNothing(MemoryPool* inPool);

	class BadSetItemException : public std::logic_error {
	public:
	explicit BadSetItemException(const std::string& err) :
		std::logic_error(err)
		{}
	};

	void setItem(int64_t inIndex, const ImplValContainer& toSet) const;

	class BadGetItemException : public std::logic_error {
	public:
	explicit BadGetItemException(const std::string& err) :
		std::logic_error(err)
		{}
	};

	ImplValContainer getItem(int64_t inIndex) const;

	bool operator<(const MutableVectorRecord& in) const
		{
		return mVectorHandlePtr < in.mVectorHandlePtr;
		}

	TypedFora::Abi::MutableVectorHandle* operator->() const
		{
		return mVectorHandlePtr;
		}

	TypedFora::Abi::MutableVectorHandle& operator*() const
		{
		return *mVectorHandlePtr;
		}

private:
	TypedFora::Abi::MutableVectorHandle* mVectorHandlePtr;
};

template<class T>
class NativeTypeForImpl;

template<>
class NativeTypeForImpl<MutableVectorRecord> {
public:
	static NativeType get();
};



