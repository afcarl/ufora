/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/
#include "MutableVectorRecord.hppml"
#include "../../core/math/RandomHashGenerator.hpp"
#include "../TypedFora/ABI/MutableVectorHandle.hpp"

MutableVectorRecord::MutableVectorRecord()
		: mVectorHandlePtr(0)
	{
	}

MutableVectorRecord::~MutableVectorRecord()
	{
	if (mVectorHandlePtr)
		mVectorHandlePtr->decrementRefcount();
	}

MutableVectorRecord::MutableVectorRecord(const MutableVectorRecord& inOther)
	{
	mVectorHandlePtr = inOther.mVectorHandlePtr;

	if (mVectorHandlePtr)
		mVectorHandlePtr->incrementRefcount();
	}

hash_type MutableVectorRecord::hash() const
	{
	return mVectorHandlePtr->identityHash();
	}

JudgmentOnValue MutableVectorRecord::elementJOV() const
	{
	return mVectorHandlePtr->elementJOV();
	}

size_t MutableVectorRecord::size() const
	{
	return mVectorHandlePtr->size();
	}

TypedFora::Abi::PackedForaValues MutableVectorRecord::packedValues() const
	{
	return mVectorHandlePtr->packedValues();
	}

TypedFora::Abi::PackedForaValues MutableVectorRecord::appendUninitialized(long count) const
	{
	return mVectorHandlePtr->appendUninitialized(count);
	}

MutableVectorRecord& MutableVectorRecord::operator=(const MutableVectorRecord& inOther)
	{
	if (inOther.mVectorHandlePtr)
		inOther.mVectorHandlePtr->incrementRefcount();

	if (mVectorHandlePtr)
		mVectorHandlePtr->decrementRefcount();

	mVectorHandlePtr = inOther.mVectorHandlePtr;

	return *this;
	}

MutableVectorRecord MutableVectorRecord::allocateNewMutableVectorRecord(
		const JudgmentOnValue& inJOV,
		MemoryPool* inPool,
		hash_type inHash
		)
	{
	MutableVectorRecord tr;

	tr.mVectorHandlePtr = inPool->construct<TypedFora::Abi::MutableVectorHandle>(
		inPool,
		inJOV,
		inHash
		);

	return tr;
	}

MutableVectorRecord MutableVectorRecord::allocateNewMutableVectorRecord(
		const JudgmentOnValue& inJOV,
		MemoryPool* inPool
		)
	{
	return allocateNewMutableVectorRecord(
		inJOV,
		inPool,
		RandomHashGenerator::singleton().generateRandomHash()
		);
	}

MutableVectorRecord
MutableVectorRecord::allocateNewMutableVectorRecordOfNothing(MemoryPool* inPool)
	{
	return allocateNewMutableVectorRecord(
		JudgmentOnValue::Constant(CSTValue()),
		inPool
		);
	}

void MutableVectorRecord::setItem(
		int64_t inIndex,
		const ImplValContainer& toSet
		) const
	{
	if (inIndex < 0)
		inIndex += (*this)->size();

	if (inIndex < 0 || inIndex >= (*this)->size())
		throw BadSetItemException("Index out of range");

	if (!(*this)->elementJOV().covers(toSet))
		throw BadSetItemException(
			"Invalid SetItem call: " + toSet.toString() + " is not covered by "
			+ prettyPrintString((*this)->elementJOV())
			);

	if (!toSet.isCST())
		throw BadSetItemException(
			"Invalid SetItem call: " + toSet.toString() + " is not CST"
			);

	(**this).setItem(inIndex, toSet);
	}

ImplValContainer MutableVectorRecord::getItem(int64_t inIndex) const
	{
	if (inIndex < 0)
		inIndex += (*this)->size();

	if (inIndex < 0 || inIndex >= (*this)->size())
		throw BadGetItemException("invalid index");

	return (**this)[inIndex];
	}

