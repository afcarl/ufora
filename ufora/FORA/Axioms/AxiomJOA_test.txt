//builtin stuff
(fun(_,_,top, f) { f.sum(top) }, `Call, {Int64}, builtin), [*, nothing, {Int64}], [*];
(fun(_,_, arg, builtin) { builtin.math.abs(arg) }, `Call, {Float64}, builtin), [{Float64}], [];



//VectorAxioms

//StructureMatch axioms - show the basic interface

(Vector([{Int64}]), `MatchFilter, Vector), [nothing, (... {JOV})], [];

(({Int64}), `StructureMatch, ()), [nothing], [];
(({Int64}), `StructureMatch, ((nothing, false))), [({Int64})], [];
(({Int64}), `StructureMatch, ((nothing, true))), [(({Int64}))], [];
(({Int64}), `StructureMatch, (#Extras)), [(({Int64}))], [];
((x: {Int64}, y: {Int64}), `StructureMatch, ((`x, false), (`y, false))), [(x: {Int64}, y:{Int64})], [];
((... *), `StructureMatch, ((`x, false), (`y, false))), [(x: *, y: *), nothing], [];
((... {Int64}), `StructureMatch, ((`x, false), (`y, false))), [(x: {Int64}, y: {Int64}), nothing], [];
((... *), `StructureMatch, ((`x, false), (`y, true))), [(x: *, y: *), nothing], [];

(({String}, `Call), `StructureMatch, 
        ((nothing, false), (nothing, false), (nothing, true), (nothing, true), (`headers, true)) ), 
    [({String}, `Call, (), (), headers: ())], 
    [];


((... {Int64}), `StructureMatch, ((nothing, false))), [({Int64}), nothing], [];
((... {Int64}), `StructureMatch, ()), [(), nothing], [];
((... {Int64}), `StructureMatch, ({Int64})), [(... *), nothing], [];

((x: {Int64}, ...*), `StructureMatch, ((`x, false), #Extras)), [(x: {Int64}, (...*))], [];

((), `StructureMatch, (#Extras)), [(())], [];
(({Int64}, ...*), `StructureMatch,
	((nothing, false), #Extras, (nothing, false))),
	[({Int64}, (...*), *), nothing], [];
((x: {Int64}, ...*), `StructureMatch,
	((`x, false), #Extras, (nothing, false))),
	[(x: {Int64}, (...*), *), nothing], [];
((x: {Int64}), `StructureMatch,
	((`x, false))),
	[(x: {Int64})], [];
((x: {Int64}), `StructureMatch,
	((`x, true))),
	[(x: ({Int64}))], [];
((x: {Int64}, y: {Int64}, z: {Int64}), `StructureMatch,
	((`x, true), (`y, true), (`z, false))),
	[(x: ({Int64}), y: ({Int64}), z: {Int64})], [];
((x: {Int64}, y: {Int64}, z: {Int64}), `StructureMatch,
	((`x, true), #Extras, (`z, false))),
	[(x: ({Int64}), (y: {Int64}), z: {Int64})], [];
((x: {Int64}, y: {Int64}, z: {Int64}), `StructureMatch,
	((`x, true), #Extras, (`z, true))),
	[(x: ({Int64}), (y: {Int64}), z: ({Int64}))], [];
((x: {Int64}, y: {Int64}, z: {Int64}), `StructureMatch,
	((`x, false), #Extras, (`z, true))),
	[(x: {Int64}, (y: {Int64}), z: ({Int64}))], [];
((x: {Int64}, y: {Int64}, z: {Int64}), `StructureMatch,
	((`x, false), #Extras, (`z, false))),
	[(x: {Int64}, (y: {Int64}), z: {Int64})], [];

//StructureMatch axioms - verify it does OK with extra args and right-side matches
(({Int64},{Int64},{Int64}), `StructureMatch,
    ((nothing, false), (nothing, false), (nothing,false))),
    [({Int64}, {Int64}, {Int64})], []
    ;
((...{Int64}), `StructureMatch, ()),
    [(), nothing], []
    ;
(({Int64},{Int64},{Int64}), `StructureMatch,
    ((nothing, false), (nothing, false), (nothing,true))),
	[({Int64}, {Int64}, ({Int64}))], []
	;
(({Int64},{Int64}), `StructureMatch,
    ((nothing, false), (nothing, false), (nothing,true))),
	[({Int64}, {Int64}, ())], []
	;
(({Int64},{Int64},... {Int64}), `StructureMatch,
    ((nothing, false), (nothing, false), (nothing,false))),
	[({Int64}, {Int64}, {Int64}), nothing], []
	;
(({Int64},{Int64},... {Int64}), `StructureMatch,
    ((nothing, false), #Extras, (nothing, false))),
	[({Int64}, (...{Int64}), {Int64}), nothing], []
	;
(({Int64},{Int64},... {Int64}), `StructureMatch,
    ((nothing, false), #Extras, (nothing, true))),
	[({Int64}, (...{Int64}), {Int64}), nothing], []
	;

//Tuple Axioms
(({Int64}), `Operator, `+, (...{Int64})), [({Int64},...{Int64})], []; 
(({Int64}), `GetItem, 0), [{Int64}], [];
((*, {Int64},{Int64}), `GetItem, 1, 3), [({Int64},{Int64})], [];

((...{Int64}), `GetItem, 1, nothing), [(...{Int64})], [];

(({Float64}, {Int64}), `GetItem, {Int64}), [{Int64}, {Float64}], [*];

(fun(_,_,A,B) {
    let v = Vector.range(10, { (_,_+1,_+2,_+3) });
    let sampler = { (x: _[A], y: _[B]) };

    v.apply(sampler)
    }, `Call, {Int64}, {Int64}), [{Vector([(x: {Int64}, y: {Int64})])}], [*];

(({Float64}, {Float64}, {Float64}, {Float64}, {Float64}, {Float64}, {Float64}, {Float64}, {Float64}, 
  {Float64}, {Float64}, {Float64}, {Float64}, {Float64}, {Float64}, {Float64}, {Float64}, {Float64}, 
  {Float64}, {Float64}, {Float64}, {Float64}, {Float64}, {Float64}, {Float64}, {Float64}, {Float64}
  ), `GetItem, {Int64}), [{Float64}], [*];

(({Float64}, {Int64}, ... {String}), `GetItem, {Int64}), [{Int64}, {Float64}, {String}], [*];
((x: {Float64}, y: {Int64}, ... {String}), `Member, {Symbol}), [{Int64}, {Float64}, {String}], [*];

(({Int64}), `GetItem, -1), [{Int64}], [];
((...{Int64}), `GetItem, -1), [{Int64}], [*];
(({String}, ... {Int64}), `GetItem, 2), [{Int64}], [*];
(({String}, ... {Int64}), `GetItem, 1), [{Int64}], [*];
(({Int64}, ... {Int64}), `GetItem, -1), [{Int64}], [*];
(({Int64}, ... 1), `GetItem, -1), [{Int64}], [*];
(({Int64}, {String}, {Float64}, {Bool}), `GetItem, -1), [{Bool}], [];
(({Int64}, {String}, {Float64}, {Bool}), `GetItem, -2), [{Float64}], [];
(({Int64}, {String}, {Float64}, {Bool}), `GetItem, -3), [{String}], [];
(({Int64}, {String}, {Float64}, {Bool}), `GetItem, -4), [{Int64}], [];
(({Int64}, {String}, {Float64}, {Bool}), `GetItem, 0), [{Int64}], [];
(({Int64}, {String}, {Float64}, {Bool}), `GetItem, 1), [{String}], [];
(({Int64}, {String}, {Float64}, {Bool}), `GetItem, 2), [{Float64}], [];
(({Int64}, {String}, {Float64}, {Bool}), `GetItem, 3), [{Bool}], [];
(({Int64}), `Operator, `+, (...{Int64})), [({Int64},...{Int64})], []; 

//classloader
(fun(...) { 10 }, `Call), [10], [];

//vector stuff
(fun(...) { 
	let sequence = fun(ix) { let x = 0; while (x < ix) { yield x; x = x + 1 } };
	[x for x in sequence(100)] 
	}, `Call), [{Vector([{Int64}])}], []
	;

(fun(...) { 
	let sequence = fun(ix) { let x = 0; while (x < ix) { yield x; x = x + 1 } };
	let v = [x for x in sequence(100)];
	[v for x in sequence(100)]
	}, `Call), 
	[{Vector([{Vector([{Int64}])}])}], []
	;
    
(fun(...) {
    let sequence = fun(ix) { let x = 0; while (x < ix) { yield x; x = x + 1 } };
    let v = [];
    for i in sequence(10000) { v = [[1]] };
    v;
    }, `Call),
    [{Vector([{Vector([{Int64}])}])}], []
    ;
    
(fun(...) { 
	[] :: 10
	}, `Call), 
	[{Vector([{Int64}])}], []
	;
	
(fun(...) { 
	[] :: ([30])
	}, `Call), 
	[{Vector([{Vector([{Int64}])}])}], []
	;

(fun(...) { 
	([] :: 10) + ([] :: 10)
	}, `Call), 
	[{Vector([{Int64}])}], [*]
	;

(fun(...) { 
	([] :: 10) + ([] :: 10.0)
	}, `Call), 
	[{Vector([{Int64}, {Float64}])}], [*]
	;
    
(fun(...) {
    [] :: 0 :: 0.0 :: "string" :: `symbol;
    }, `Call),
    [{Vector([*])}], []
    ;
    
(fun(...) {
    [] :: MutableVector(Int64).create(2,2);
    }, `Call),
    [], [*]
    ;
    
(fun(_,_,x) {
    [] :: x;
    }, `Call, {MutableVector}),
    [], [*]
    ;

(fun(_,_,v,ix,elt){
    v[ix] = elt;
    }, `Call,  {MutableVector}, {Int64}, {MutableVector}),
    [], [*]
    ;
    
(fun(_,_,x) {
    [] :: x;
    }, `Call, {AnyConstant}),
    [{Vector([*])}], [*]
    ;

(fun(...) {
    [] ::(1,2.0,"string")
    }, `Call),
    [{Vector([({Int64}, {Float64}, {String})])}], []
    ;
    
(fun(_,_,x,y)
	{
	let v = [1,2,3,4,5];
	v[x,y];
	}, `Call, {Int64}, {Int64}),
	[{Vector([{Int64}])}], []
	;
	
(fun(_,_,n,x,y)
	{
	let v = Vector.range(n);
	v[x,y];
	}, `Call, {Int64}, {Int64}, {Int64}),
	[{Vector([{Int64}])}], []
	;

(fun(...) {
    let i = 0;
    let v = [];
    while (i < 1000)
        {
        let v_loc = [];
        let j = 0;
        while (j < 100)
            {
            v_loc = v_loc :: (i + j);
            j = j + 1;
            }
        v = v :: v_loc
        i = i + 1;
        }
    v
    }, `Call),
    [{Vector([{Vector([{Int64}])}])}], []
    ;
       
(fun(...) {
    let sequence = fun(ix) { let x = 0; while (x < ix) { yield x; x = x + 1 } };
    [[(i + j) for i in sequence(1000)] for j in sequence(1000)];
    }, `Call),
    [{Vector([{Vector([{Int64}])}])}], []
    ; 
      
(fun(...) {
    let sequence = fun(ix) { let x = 0; while (x < ix) { yield x; x = x + 1 } };
    [[(i + j) for i in sequence(100)] for j in sequence(100)];
    }, `Call),
    [{Vector([{Vector([{Int64}])}])}], []
    ;

(fun(_, _, v) {
    let res = nothing;
    for vec in v {
        for elt in vec {
            res = res + elt
            }
        }
    
    res;
    }, `Call, {Vector([ {Vector([{Int64}])} ])}),
    [ nothing, {Int64} ], [ * ]
    ;

(fun(_,_,ct) {
    let rng = fun(ix, f = fun(z){z}) {
        let v = [];
        while (ix >= 0) {
            v = v :: f(ix);
            ix = ix - 1
            };
        return v
        };
    rng(ct, rng)
    }, `Call, {Int64}),
    [{Vector([{Vector([{Int64}])}])}], []
    ;

    
(fun(...) {
    [] :: () :: ();
    }, `Call),
    [ {Vector([ () ])}], []
    ;
    
(fun(_,_,ct1, ct2) {
    let i = 0;
    let v = [];
    while (i < ct1)
        {
        let v_loc = [];
        let j = 0;
        while (j < ct2)
            {
            v_loc = v_loc :: (i + j);
            j = j + 1;
            }
        v = v :: v_loc
        i = i + 1;
        }
    let res = [];
    for elt in v
        { 
        res = res :: elt.sum() 
        }
    res;
    }, `Call, {Int64}, {Int64}),
    [{Vector([nothing, {Int64}])}], [*]
    ;

(fun(...) {
    let y = 0;
    for x in Vector.range(20000001)
        y = y + x;
    y
    }, `Call),
    [ 0, {Int64} ], [*]
    ;


(fun(...) {
    let e = [];
    let f = [1.0];

    [(e,e,e,f)] + [(e,e,f,e)] + [(e,f,e,e)] + [(f,e,e,e)]
    }, `Call),
    [ {Vector([
        (   {Vector([{Float64}])},
            {Vector([{Float64}])},
            {Vector([{Float64}])},
            {Vector([{Float64}])}
            )
        ])} ], [*]
    ;

({Vector([*])}, `Member, `homogeneousElementType),
    [{JOV}], [{String}]
    ;
    
({Vector([{Int64}])}, `Member, `homogeneousElementType),
    [Int64], ["The empty vector holds no type."]
    ;
    
({Vector([])}, `Member, `homogeneousElementType),
    [], ["The empty vector holds no type."]
    ;
    
({Vector([{Int64}, {Float64}])}, `Member, `homogeneousElementType),
    [Int64, Float64], [{String}]
    ;

({Vector([{Int64}, {Float64}, {String}])}, `Member, `homogeneousElementType),
    [Int64, Float64, String], [{String}]
    ;

(fun(_,_) {
    [1,2,3].homogeneousElementType
    }, `Call),
    [Int64], [*]
    ;
    
(`JovOfVectorHolding, `Call, Int64),
    [Vector([{Int64}])], [];
  

//due to a bug in the reasoner, we need these tests to run first! 
(fun(_,_, n, a, v, builtin)
    { builtin.math.blasWrappers.scal(n, a, v) },
    `Call, {Int64}, {Float64}, {Vector([{Float64}])}, builtin),
    [{Vector([{Float64}])}], [*]
    ;
        
(fun(_,_, M, N, alpha, A, lda, X, beta, Y, builtin)
    { builtin.math.blasWrappers.gemv(false, M, N, alpha, A, lda, X, beta, Y) },
    `Call, {Int64}, {Int64}, {Float64}, {Vector([{Float64}])}, {Int64}, {Vector([{Float64}])}, {Float64}, {Vector([{Float64}])}, builtin),
    [{Vector([{Float64}])}], [*]
    ;

(fun(_,_, M, N, K, alpha, A, lda, B, ldb, beta, C, builtin)
    { builtin.math.blasWrappers.gemm(false, false, M, N, K, alpha, A, lda, B, ldb, beta, C) },
    `Call, {Int64}, {Int64}, {Int64}, {Float32}, {Vector([{Float32}])}, {Int64}, {Vector([{Float32}])}, {Float64}, {Int64}, {Vector([{Float32}])}, builtin),
    [{Vector([{Float32}])}], [*]
    ;

(fun(_,_, a, X, Y, builtin)
    { builtin.math.blasWrappers.axpy(a,X,Y) },
    `Call, {Float32}, {Vector([{Float32}])}, {Vector([{Float32}])}, builtin),
    [{Vector([{Float32}])}], [*]
    ;

//lapack stuff

(fun(_,_, n, v, builtin) 
    { builtin.math.blasWrappers.gecon('1', n, v) },
    `Call, {Int64}, {Vector([{Float64}])}, builtin),
    [{Float64}], [*]
    ;

(fun(_,_, n, v, builtin)
    { builtin.math.blasWrappers.geev('V', 'V',  n, v) },
    `Call, {Int64}, {Vector([{Float64}])}, builtin),
    [({Vector([{Float64}])}, {Vector([{Float64}])}, {Vector([{Float64}])}, {Vector([{Float64}])})], [*]
    ;
     
(fun(_,_, m, n, nrhs, A, B, builtin)
    { builtin.math.blasWrappers.gelsd(m, n, nrhs, A, B) },
    `Call, {Int64}, {Int64}, {Int64}, {Vector([{Float64}])}, {Vector([{Float64}])}, builtin),
    [({Vector([{Float64}])}, {Vector([{Float64}])}, {Int32})], [*]
    ;

(fun(_,_, m, n, A, builtin)
    { builtin.math.blasWrappers.geqrf(m, n, A); },
    `Call, {Int32}, {Int32}, {Vector([{Float64}])}, builtin),
    [({Vector([{Float64}])}, {Vector([{Float64}])})], [*]
    ;

(fun(_,_, m, n, A, builtin)
    { builtin.math.blasWrappers.gesvd("A", "A", m, n, A); },
    `Call, {Int64}, {Float32}, {Vector([{Float32}])}, builtin),
    [({Vector([{Float32}])}, {Vector([{Float32}])}, {Vector([{Float32}])})], [*]
    ;

(fun(_,_, n, nrhs, A, B, builtin)
    { builtin.math.blasWrappers.gesv(n, nrhs, A, B); },
    `Call, {Int32}, {Int32}, {Vector([{Float64}])}, {Vector([{Float64}])}, builtin),
    [{Vector([{Float64}])}], [*]
    ;

(fun(_,_, m, n, A, builtin)
    { builtin.math.blasWrappers.getrf(m, n, A); },
    `Call, {Int64}, {Int64}, {Vector([{Int64}])}, builtin),
    [], [*]
    ;

(fun(_,_, m, n, A, builtin)
    { builtin.math.blasWrappers.getrf(m, n, A); },
    `Call, {Int64}, {Int64}, {Vector([{Float64}])}, builtin),
    [({Vector([{Float64}])}, {Vector([{Int32}])})], [*]
    ;

(fun(_,_, n, A, builtin)
    { builtin.math.blasWrappers.getri(n, A) },
    `Call, {Int64}, {Vector([{Float64}])}, builtin),
    [{Vector([{Float64}])}], [*]
    ;

(fun(_,_, m, n, A, builtin)
    { builtin.math.blasWrappers.lange('1', m, n, A) },
    `Call, {Int64}, {Int64}, {Vector([{Float64}])}, builtin),
    [{Float64}], [*]
    ;

(fun(_,_, n, A, builtin)
    { builtin.math.blasWrappers.potrf('U', n, A) },
    `Call, {Int64}, {Vector([{Float64}])}, builtin),
    [{Vector([{Float64}])}], [*]
    ;

(fun(_,_, n, A, builtin)
    { builtin.math.blasWrappers.syev('V', 'U', n, A) },
    `Call, {Int64}, {Vector([{Float64}])}, builtin),
    [({Vector([{Float64}])}, {Vector([{Float64}])})], [*]
    ;

(fun(_, _, seed, nSamples, builtin)
	{
	builtin.iter.toVector(
	    builtin.iter.subseq(
		    builtin.math.random.UniformReal(1.0, 100.0, seed),
			0, nSamples
			)
		)
	},
	`Call, {Int64}, {Int64}, builtin),
	[{Vector([{Float64}])}], [*]
	;

(fun(_, _, seed, nSamples, builtin)
	{
	let res = [];
	let rng = builtin.iterator(builtin.math.random.UniformReal(1.0, 100.0, seed));
	for i in builtin.sequence(nSamples) {
	    res = res :: (pull rng);
		}

	res;
	},
	`Call, {Int64}, {Int64}, builtin),
	[{Vector([{Float64}])}], [*]
	;

(fun(_, _, vec, builtin)
    {
	builtin.sorting.sort(vec);
	},
	`Call, {Vector([{Int64}])}, builtin),
	[{Vector([{Int64}])}], [*] //we should be able to do better than this
	;