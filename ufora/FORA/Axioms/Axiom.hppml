/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/
#pragma once

#include "../Judgment/JudgmentOnValue.hppml"
#include "../Judgment/JudgmentOnAction.hppml"
#include "../Language/ApplySignature.hppml"

class NativeVariable;
class NativeExpression;
class ControlFlowGraph;
class NativeCFG;

namespace TypedFora {

class Callable;

}

@type
	Axiom =
	-|	Expands of
			JudgmentOnValueTuple signature,
			boost::function1<ControlFlowGraph, ApplySignature> graphGeneratorFunction
	-|	Native of
			JudgmentOnValueTuple callSignature,
			JudgmentOnAction resultSignature,
			CPPMLOpaqueHandle<TypedFora::Callable> callTarget
	{
	public:
			JudgmentOnValueTuple signature(void) const;

			static Axiom Native(const JudgmentOnValueTuple& sig, const JudgmentOnAction& joa, const NativeCFG& cfg);

			static Axiom Native(	const JudgmentOnValueTuple& inSignature,
									const ImmutableTreeVector<NativeVariable>& inVariables,
									const JudgmentOnValue& inResultJOV,
									bool inResultJOVIsException,
									const NativeExpression& inExpression
									);

			static Axiom Native(	const JudgmentOnValueTuple& inSignature,
									const JudgmentOnAction& resultSignature,
									const TypedFora::Callable& callTarget
									);
	}
and
	AxiomJOA =
	-|	Expands of ()
	-|	Native of JudgmentOnAction joa
	{
	public:
			static AxiomJOA Returns(const CSTValue& val);
			static AxiomJOA Returns(const JudgmentOnValue& val);
			static AxiomJOA Throws(const CSTValue& val);
			static AxiomJOA Throws(const JudgmentOnValue& val);
	}
	;

