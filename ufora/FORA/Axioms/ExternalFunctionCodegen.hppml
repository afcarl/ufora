/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/
#pragma once

#include "../Primitives/ExternalFunctionDescription.hppml"
#include "../Judgment/JudgmentOnValue.hppml"

namespace TypedFora {

class Compiler;
class Callable;

}

TypedFora::Callable getCallableForExternalFunction(
				const ExternalFunctionDescriptor& desc,
				const JOVT& inArgumentSignature,
				TypedFora::Compiler& compiler
				);

//if the function cannot be called with this signature, return null. otherwise, return
//the largest judgment we can use to produce a signature, and a bool indicating whether this
//is actually a valid call (true), or whether it should generate an exception (false).
Nullable<pair<JOVT, bool> > getCallSignatureAsJOVTForExternalFunction(
				const ExternalFunctionDescriptor& desc,
				const JOVT& inSignature,
				//is it possible this call will throw an exception?
				bool& outNeedsRuntimeCheck,
				ImmutableTreeVector<pair<string, JOV> >& outModifiedValues
				);

JudgmentOnAction getResultSignatureAsJOAForExternalFunction(
				const ExternalFunctionDescriptor& desc,
				const JOVT& inSignature
				);

std::string visibleNameForExternalFunction(const ExternalFunctionDescriptor& desc);

JudgmentOnAction invalidCallSignatureForExternalFunctionJOA(const ExternalFunctionDescriptor& desc);

