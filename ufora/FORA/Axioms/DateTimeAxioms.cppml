/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/
#include "Axioms.hppml"
#include "Axiom.hppml"
#include "AxiomGroup.hppml"
#include "LibcallAxiomGroup.hppml"
#include <boost/lexical_cast.hpp>
#include <sstream>
#include "../Runtime.hppml"
#include "../VectorDataManager/VectorDataManager.hppml"
#include "../Primitives/DateTime.hppml"
#include "../Core/ExecutionContext.hppml"
#include "../../core/lassert.hpp"
#include "../../core/Logging.hpp"
#include <boost/numeric/conversion/cast.hpp>

using namespace Fora;

extern "C" {

BSA_DLLEXPORT
bool FORA_clib_DateTimeLessThanDateTime(
            const DateTime& inDateTimeLeft,
            const DateTime& inDateTimeRight
            )
    {
    return inDateTimeLeft < inDateTimeRight;
    }

BSA_DLLEXPORT
bool FORA_clib_DateTimeGreaterThanDateTime(
            const DateTime& inDateTimeLeft,
            const DateTime& inDateTimeRight
            )
    {
    return inDateTimeLeft > inDateTimeRight;
    }

BSA_DLLEXPORT
bool FORA_clib_DateTimeLessThanEqualsDateTime(
            const DateTime& inDateTimeLeft,
            const DateTime& inDateTimeRight
            )
    {
    return inDateTimeLeft <= inDateTimeRight;
    }

BSA_DLLEXPORT
bool FORA_clib_DateTimeGreaterThanEqualsDateTime(
            const DateTime& inDateTimeLeft,
            const DateTime& inDateTimeRight
            )
    {
    return inDateTimeLeft >= inDateTimeRight;
    }

BSA_DLLEXPORT
bool FORA_clib_DateTimeEqualsDateTime(
            const DateTime& inDateTimeLeft,
            const DateTime& inDateTimeRight
            )
    {
    return inDateTimeLeft == inDateTimeRight;
    }

BSA_DLLEXPORT
ReturnValue<DateTime, ImplValContainer> FORA_clib_DateTime_from_string(
                        const String& inStr
                        )
    {
    try {
        DateTime dateTime = DateTime::timeFromString(inStr);

        return slot0(dateTime);
        }
    catch(boost::bad_lexical_cast& e)
        {
        return slot1(
            ImplValContainer(
                CSTValue::Tuple(
                    ImmutableTreeVector<CSTValue>() +
                    CSTValue("bad conversion") +
                    CSTValue(inStr) +
                    CSTValue(e.what())
                    )
                )
            );
        }
    catch(std::out_of_range& e) //boost's bad_date exceptions all derive from std::out_of_range
        {
        return slot1(
            ImplValContainer(
                CSTValue::Tuple(
                    ImmutableTreeVector<CSTValue>() +
                    CSTValue("bad conversion") +
                    CSTValue(inStr) +
                    CSTValue(e.what())
                    )
                )
            );
        }
    }

BSA_DLLEXPORT
ReturnValue<DateTime, String> FORA_clib_DateTime_createDateTime(
        uint16_t inYear, uint16_t inMonth, uint16_t inDay
        )
    {
    try {
        DateTime tr = DateTime(inYear, inMonth, inDay);

        return slot0(tr);
        }
    catch (std::out_of_range& e)
        {
        return slot1(
            String(
                std::string("Bad conversion: ") + e.what(),
                Fora::Interpreter::ExecutionContext::currentExecutionContext()
                    ->getMemoryPool()
                )
            );
        }
    }

BSA_DLLEXPORT
ReturnValue<DateTime, String> FORA_clib_DateTime_from_date_string(
                        const String& inStr
                        )
    {
    try {
        DateTime dateTime = DateTime::fromDateString(inStr);

        return slot0(dateTime);
        }
    catch(boost::bad_lexical_cast& e)
        {
        return slot1(
            String(
                "Bad Conversion: " + prettyPrintString(inStr) + ": " + e.what(),
                Fora::Interpreter::ExecutionContext::currentExecutionContext()->getMemoryPool()
                )
            );
        }
    catch(std::out_of_range& e) //boost's bad_date exceptions all derive from std::out_of_range
        {
        return slot1(
            String(
                "Bad Conversion: " + prettyPrintString(inStr) + ": " + e.what(),
                Fora::Interpreter::ExecutionContext::currentExecutionContext()->getMemoryPool()
                )
            );
        }
    }

BSA_DLLEXPORT
ReturnValue<DateTime, ImplValContainer> FORA_clib_DateTime_from_undelimited_date_string(
                        const String& inStr
                        )
    {
    try {
        DateTime dateTime = DateTime::fromUndelimitedDateString(inStr);

        return slot0(dateTime);
        }
    catch(boost::bad_lexical_cast& e)
        {
        return slot1(
            ImplValContainer(
                CSTValue::Tuple(
                    ImmutableTreeVector<CSTValue>() +
                    CSTValue("bad conversion") +
                    CSTValue(inStr) +
                    CSTValue(e.what())
                    )
                )
            );
        }
    catch(std::out_of_range& e) //boost's bad_date exceptions all derive from std::out_of_range
        {
        return slot1(
            ImplValContainer(
                CSTValue::Tuple(
                    ImmutableTreeVector<CSTValue>() +
                    CSTValue("bad conversion") +
                    CSTValue(inStr) +
                    CSTValue(e.what())
                    )
                )
            );
        }
    }

BSA_DLLEXPORT
ReturnValue<DateTime, ImplValContainer> FORA_clib_DateTime_from_iso_string(
                        const String& inStr
                        )
    {
    try {
        DateTime dateTime = DateTime::fromISOString(inStr);

        return slot0(dateTime);
        }
    catch(boost::bad_lexical_cast& e)
        {
        return slot1(
            ImplValContainer(
                CSTValue::Tuple(
                    ImmutableTreeVector<CSTValue>() +
                    CSTValue("bad conversion") +
                    CSTValue(inStr) +
                    CSTValue(" to value of type DateTime: caught C++ exception: ") +
                    CSTValue(e.what())
                    )
                )
            );
        }
    catch(std::out_of_range& e) //boost's bad_date exceptions all derive from std::out_of_range
        {
        return slot1(
            ImplValContainer(
                CSTValue::Tuple(
                    ImmutableTreeVector<CSTValue>() +
                    CSTValue("bad conversion") +
                    CSTValue(inStr) +
                    CSTValue(e.what())
                    )
                )
            );
        }
    }

BSA_DLLEXPORT
ReturnValue<DateTime, ImplValContainer> FORA_clib_DateTime_by_integer_sec_since_epoch(
                        int64_t inTime
                        )
    {
    return slot0(DateTime::bySecSinceEpoch(inTime));
    }

BSA_DLLEXPORT
ReturnValue<DateTime, ImplValContainer> FORA_clib_DateTime_by_float_sec_since_epoch(
                        double inTime
                        )
    {
    try {
        double flooredInTime = floor(inTime);
        int64_t seconds = boost::numeric_cast<int64_t>(flooredInTime);
        int64_t microseconds = boost::numeric_cast<int64_t>(
                                (inTime - flooredInTime) *
                                1000000
                                );

        return slot0(
            DateTime::epoch() +
            TimeDuration::fromSeconds(seconds) +
            TimeDuration::fromMicroseconds(microseconds)
            );
        }
    catch(boost::numeric::negative_overflow& e)
        {
        return slot1(
            ImplValContainer(
                CSTValue::Tuple(
                    ImmutableTreeVector<CSTValue>() +
                    CSTValue("bad conversion") +
                    CSTValue(inTime) +
                    CSTValue(e.what())
                    )
                )
            );
        }
    catch(boost::numeric::positive_overflow& e)
        {
        return slot1(
            ImplValContainer(
                CSTValue::Tuple(
                    ImmutableTreeVector<CSTValue>() +
                    CSTValue("can't convert ") +
                    CSTValue(inTime) +
                    CSTValue(e.what())
                    )
                )
            );
        }
    catch(boost::numeric::bad_numeric_cast& e)
        {
        return slot1(
            ImplValContainer(
                CSTValue::Tuple(
                    ImmutableTreeVector<CSTValue>() +
                    CSTValue("can't convert ") +
                    CSTValue(inTime) +
                    CSTValue(e.what())
                    )
                )
            );
        }
    }

BSA_DLLEXPORT
ReturnValue<TimeDuration> FORA_clib_DateTimeMinusDateTime(
                            const DateTime& inDateTimeLeft,
                            const DateTime& inDateTimeRight
                            )
    {
    return slot0(inDateTimeLeft - inDateTimeRight);
    }

BSA_DLLEXPORT
ReturnValue<DateTime, ImplValContainer> FORA_clib_DateTimeMinusTimeDuration(
                            const DateTime& inDateTime,
                            const TimeDuration& inTimeDuration
                            )
    {
    try {
        return slot0(inDateTime - inTimeDuration);
        }
    catch (std::out_of_range& e)
        {
        return slot1(
            ImplValContainer(
                CSTValue::Tuple(
                    ImmutableTreeVector<CSTValue>() +
                    CSTValue("bad subtraction") +
                    CSTValue(e.what())
                    )
                )
            );
        }
    }

BSA_DLLEXPORT
ReturnValue<DateTime, ImplValContainer> FORA_clib_DateTimePlusTimeDuration(
                        const DateTime& inDateTime,
                        const TimeDuration& inTimeDuration
                        )
    {
    try {
        return slot0(inDateTime + inTimeDuration);
        }
    catch (std::out_of_range& e)
        {
        return slot1(
            ImplValContainer(
                CSTValue::Tuple(
                    ImmutableTreeVector<CSTValue>() +
                    CSTValue("bad addition") +
                    CSTValue(e.what())
                    )
                )
            );
        }
    }

BSA_DLLEXPORT
ReturnValue<TimeDuration> FORA_clib_timeOfDay(const DateTime& inDateTime)
    {
    return slot0(inDateTime.timeOfDay());
    }

BSA_DLLEXPORT
ReturnValue<String> FORA_clib_isoString(const DateTime& inDateTime)
    {
    return slot0(inDateTime.isoString());
    }

BSA_DLLEXPORT
ReturnValue<String> FORA_clib_isoExtendedString(const DateTime& inDateTime)
    {
    return slot0(inDateTime.isoExtendedString());
    }

BSA_DLLEXPORT
int64_t FORA_clib_secSinceEpoch(const DateTime& inDateTime)
    {
    return inDateTime.secondsSinceEpoch();
    }

BSA_DLLEXPORT
int64_t FORA_clib_DateTimeYear(const DateTime& inDateTime)
    {
    return boost::numeric_cast<int64_t>(inDateTime.year());
    }

BSA_DLLEXPORT
int64_t FORA_clib_DateTimeMonth(const DateTime& inDateTime)
    {
    return boost::numeric_cast<int64_t>(inDateTime.month());
    }

BSA_DLLEXPORT
int64_t FORA_clib_DateTimeDay(const DateTime& inDateTime)
    {
    return boost::numeric_cast<int64_t>(inDateTime.day());
    }

BSA_DLLEXPORT
ReturnValue<String> FORA_clib_DateTimeDayOfWeek(const DateTime& inDateTime)
    {
    std::string dayOfWeek =
        inDateTime.gregorian_date().day_of_week().as_long_string();

    return slot0(
        String(
            dayOfWeek,
            Fora::Interpreter::ExecutionContext::currentExecutionContext()
            ->getMemoryPool()
            )
        );
    }

BSA_DLLEXPORT
double FORA_clib_DateTimeSecSinceEpoch_float(const DateTime& inDateTime)
    {
    TimeDuration sinceEpoch = inDateTime.timeDurationSinceEpoch();
    double secSinceEpoch = boost::numeric_cast<double>(sinceEpoch.totalSeconds());
    secSinceEpoch += (boost::numeric_cast<double>(sinceEpoch.fractionalSeconds()) /
                        pow((double)10.0, boost::posix_time::time_duration::num_fractional_digits())
                        );

    return secSinceEpoch;
    }

BSA_DLLEXPORT
ReturnValue<DateTime, ImplValContainer> FORA_clib_DateTime_strptime(
                        const String& DateTimeString,
                        const String& format
                        )
    {
    Nullable<DateTime> tr = DateTime::strptime(format, DateTimeString);

    if (tr.isNull())
        {
        return slot1(
            ImplValContainer(
                CSTValue::Tuple(
                    ImmutableTreeVector<CSTValue>() +
                    CSTValue("bad conversion") +
                    CSTValue(DateTimeString) +
                    CSTValue(format) +
                    CSTValue(
                        "cannot convert `" + DateTimeString.stdString() +
                        "` to a DateTime using format string `" +
                        format.stdString() + "`"
                        )
                    )
                )
            );
        }

    return slot0(*tr);
    }

BSA_DLLEXPORT
ReturnValue<String, ImplValContainer> FORA_clib_DateTime_strftime(
                        const DateTime& inDateTime,
                        const String& format
                        )
    {
    struct tm tm = boost::posix_time::to_tm(inDateTime.posix_time());

    // let's bound the length of the output
    const int64_t max_length = 256;

    if (format.size() == 0)
        return slot0(String());

    // see http://stackoverflow.com/questions/7935483/c-function-to-format-time-t-as-stdstring-buffer-length
    // note they comment: "some format parameters (eg. %p) might yield an empty
    // string (depending on the locale) ... ". %p doesn't seem to be a problem for us, but %z is
    std::string paddedFormatString = format.stdString();
    paddedFormatString += '\a'; // force at least one character in the result
    const char* const format_c_str = paddedFormatString.c_str();

    std::string buffer;
    buffer.resize(paddedFormatString.size());
    auto len = strftime(&buffer[0], buffer.size(), format_c_str, &tm);
    while (len == 0 and len < max_length) {
        buffer.resize(buffer.size() * 2);
        len = strftime(&buffer[0], buffer.size(), format_c_str, &tm);
        }

    if (len == 0) {
        return slot1(
            ImplValContainer(
                CSTValue("Formatting would have resulted in too long of a String")
                )
            );
        }

    buffer.resize(len - 1); // -1 due to the += '\a' line

    return slot0(
        String(
            buffer,
            Fora::Interpreter::ExecutionContext::currentExecutionContext()->getMemoryPool()
            )
        );
    }

BSA_DLLEXPORT
ReturnValue<TimeDuration> FORA_clib_timeDurationSinceEpoch(const DateTime& inDateTime)
    {
    return slot0(inDateTime.timeDurationSinceEpoch());
    }

BSA_DLLEXPORT
ReturnValue<DateTime> FORA_clib_DateTimeEpoch()
    {
    return slot0(DateTime::epoch());
    }

}

class DateTimeAxioms {
public:

        DateTimeAxioms()
            {
            //due to unsafe thread initialization in boost, we need to initialize this
            //map in a single thread. This is a reasonable place to do it, because it happens
            //before any FORA code is executed.
            //https://svn.boost.org/trac/boost/ticket/11958
            boost::gregorian::greg_month::get_month_map_ptr();

            AxiomGroups("DateTime") +=
                LibcallAxiomGroup::create(
                    JOVT() +
                        JOV::OfType(Type::DateTime()) +
                        "timeDurationSinceEpoch" +
                        JOVTE::NoExtras(),
                    ReturnSlots() + JOV::OfType(Type::TimeDuration()),
                    &FORA_clib_timeDurationSinceEpoch,
                    ImmutableTreeVector<uword_t>() + 0
                    )
                ;

            AxiomGroups("DateTime") +=
                LibcallAxiomGroup::create(
                    JOVT() +
                        JOV::OfType(Type::DateTime()) +
                        "strftime" +
                        OfType(Type::String()) +
                        JOVTE::NoExtras(),
                    ReturnSlots() +
                        ReturnSlot::Normal(JOV::OfType(Type::String())) +
                        ReturnSlot::Exception(JOV()),
                    &FORA_clib_DateTime_strftime,
                    ImmutableTreeVector<uword_t>() + 0 + 2
                    )
                ;

            AxiomGroups("DateTime") +=
                LibcallAxiomGroup::create(
                    JOVT() +
                        "createDateTime" +
                        "Call" +
                        JOV::OfType(Type::Integer(16, false)) +
                        JOV::OfType(Type::Integer(16, false)) +
                        JOV::OfType(Type::Integer(16, false)),
                    ReturnSlots() +
                        ReturnSlot::Normal(JOV::OfType(Type::DateTime())) +
                        ReturnSlot::Exception(JOV::OfType(Type::String())),
                    &FORA_clib_DateTime_createDateTime,
                    ImmutableTreeVector<uword_t>() + 2 + 3 + 4
                    )
                ;


            AxiomGroups("DateTime") +=
                LibcallAxiomGroup::create(
                    JOVT() +
                        "strftime" +
                        "Call" +
                        JOV::OfType(Type::DateTime()) +
                        JOV::OfType(Type::String()) +
                        JOVTE::NoExtras(),
                    ReturnSlots() +
                        ReturnSlot::Normal(JOV::OfType(Type::String())) +
                        ReturnSlot::Exception(JOV()),
                    &FORA_clib_DateTime_strftime,
                    ImmutableTreeVector<uword_t>() + 2 + 3
                    )
                ;

            AxiomGroups("DateTime") +=
                LibcallAxiomGroup::create(
                    JOVT() +
                        "strptime" +
                        "Call" +
                        JOV::OfType(Type::String()) +
                        JOV::OfType(Type::String()),
                    ReturnSlots() +
                        ReturnSlot::Normal(JOV::OfType(Type::DateTime())) +
                        ReturnSlot::Exception(JOV()),
                    &FORA_clib_DateTime_strptime,
                    ImmutableTreeVector<uword_t>() + 2 + 3
                    )
                ;

            AxiomGroups("DateTime") +=
                LibcallAxiomGroup::create(
                    JOVT() +
                        JOV::OfType(Type::DateTime()) +
                        "Member" +
                        "year_" +
                        JOVTE::NoExtras(),
                    ReturnSlots() + JOV::OfType(Type::Integer(64, true)),
                    &FORA_clib_DateTimeYear,
                    ImmutableTreeVector<uword_t>() + 0
                    )
                ;

            AxiomGroups("DateTime") +=
                LibcallAxiomGroup::create(
                    JOVT() +
                        OfType(Type::DateTime()) +
                        "Member" +
                        "month_" +
                        JOVTE::NoExtras(),
                    ReturnSlots() + JOV::OfType(Type::Integer(64, true)),
                    &FORA_clib_DateTimeMonth,
                    ImmutableTreeVector<uword_t>() + 0
                    )
                ;

            AxiomGroups("DateTime") +=
                LibcallAxiomGroup::create(
                    JOVT() +
                        OfType(Type::DateTime()) +
                        "Member" +
                        "day_" +
                        JOVTE::NoExtras(),
                    ReturnSlots() + JOV::OfType(Type::Integer(64, true)),
                    &FORA_clib_DateTimeDay,
                    ImmutableTreeVector<uword_t>() + 0
                    )
                ;

            AxiomGroups("DateTime") +=
                LibcallAxiomGroup::create(
                    JOVT() +
                        OfType(Type::DateTime()) +
                        "Member" +
                        "dayOfWeek_" +
                        JOVTE::NoExtras(),
                    ReturnSlots() +
                        ReturnSlot::Normal(JOV::OfType(Type::String())),
                    &FORA_clib_DateTimeDayOfWeek,
                    ImmutableTreeVector<uword_t>() + 0
                    )
                ;

            AxiomGroups("DateTime") +=
                LibcallAxiomGroup::create(
                    JOVT() +
                        JOV::OfType(Type::DateTime()) +
                        "Member" +
                        "timeOfDay_" +
                        JOVTE::NoExtras(),
                    ReturnSlots() + JOV::OfType(Type::TimeDuration()),
                    &FORA_clib_timeOfDay,
                    ImmutableTreeVector<uword_t>() + 0
                    )
                ;

            AxiomGroups("DateTime") +=
                LibcallAxiomGroup::create(
                    JOVT() +
                        JOV::OfType(Type::DateTime()) +
                        "Member" +
                        "isoString_" +
                        JOVTE::NoExtras(),
                    ReturnSlots() + JOV::OfType(Type::String()),
                    &FORA_clib_isoString,
                    ImmutableTreeVector<uword_t>() + 0
                    )
                ;

            AxiomGroups("DateTime") +=
                LibcallAxiomGroup::create(
                    JOVT() +
                        JOV::OfType(Type::DateTime()) +
                        "Member" +
                        "isoExtendedString_" +
                        JOVTE::NoExtras(),
                    ReturnSlots() + JOV::OfType(Type::String()),
                    &FORA_clib_isoExtendedString,
                    ImmutableTreeVector<uword_t>() + 0
                    )
                ;

            AxiomGroups("DateTime") +=
                LibcallAxiomGroup::create(
                    JOVT() +
                        OfType(Type::DateTime()) +
                        "Member" +
                        "secondsSinceEpoch_" +
                        JOVTE::NoExtras(),
                    ReturnSlots() + JOV::OfType(Type::Integer(64, true)),
                    &FORA_clib_secSinceEpoch,
                    ImmutableTreeVector<uword_t>() + 0
                    )
                ;

            AxiomGroups("DateTime") +=
                LibcallAxiomGroup::create(
                    JOVT() +
                        OfType(Type::DateTime()) +
                        "Member" +
                        "floatSecondsSinceEpoch_" +
                        JOVTE::NoExtras(),
                    ReturnSlots() + JOV::OfType(Type::Float(64)),
                    &FORA_clib_DateTimeSecSinceEpoch_float,
                    ImmutableTreeVector<uword_t>() + 0
                    )
                ;

            AxiomGroups("DateTime") +=
                LibcallAxiomGroup::create(
                    JOVT() +
                        JOV::OfType(Type::DateTime()) +
                        "Operator" +
                        "-" +
                        JOV::OfType(Type::DateTime()) +
                        JOVTE::NoExtras(),
                    ReturnSlots() + JOV::OfType(Type::TimeDuration()),
                    &FORA_clib_DateTimeMinusDateTime,
                    ImmutableTreeVector<uword_t>() + 0 + 3
                    )
                ;

            AxiomGroups("DateTime") +=
                LibcallAxiomGroup::create(
                    JOVT() +
                        JOV::OfType(Type::DateTime()) +
                        "Operator" +
                        "+" +
                        OfType(Type::TimeDuration()) +
                        JOVTE::NoExtras(),
                    ReturnSlots() +
                        ReturnSlot::Normal(JOV::OfType(Type::DateTime())) +
                        ReturnSlot::Exception(JOV()),
                    &FORA_clib_DateTimePlusTimeDuration,
                    ImmutableTreeVector<uword_t>() + 0 + 3
                    )
                ;

            AxiomGroups("DateTime") +=
                LibcallAxiomGroup::create(
                    JOVT() +
                        JOV::OfType(Type::DateTime()) +
                        "Operator" +
                        "-" +
                        JOV::OfType(Type::TimeDuration()) +
                        JOVTE::NoExtras(),
                    ReturnSlots() +
                        ReturnSlot::Normal(JOV::OfType(Type::DateTime())) +
                        ReturnSlot::Exception(JOV()),
                    &FORA_clib_DateTimeMinusTimeDuration,
                    ImmutableTreeVector<uword_t>() + 0 + 3
                    )
                ;

            AxiomGroups("DateTime") +=
                LibcallAxiomGroup::create(
                    JOVT() +
                        JOV::OfType(Type::DateTime()) +
                        "Operator" +
                        "<" +
                        JOV::OfType(Type::DateTime()) +
                        JOVTE::NoExtras(),
                    ReturnSlots() + JOV::OfType(Type::Integer(1, false)),
                    &FORA_clib_DateTimeLessThanDateTime,
                    ImmutableTreeVector<uword_t>() + 0 + 3
                    )
                ;

            AxiomGroups("DateTime") +=
                LibcallAxiomGroup::create(
                    JOVT() +
            			JOV::OfType(Type::DateTime()) +
						"Operator" +
						">" +
						OfType(Type::DateTime()) +
						JOVTE::NoExtras(),
					ReturnSlots() + JOV::OfType(Type::Integer(1, false)),
					&FORA_clib_DateTimeGreaterThanDateTime,
					ImmutableTreeVector<uword_t>() + 0 + 3
					)
				;

			AxiomGroups("DateTime") +=
				LibcallAxiomGroup::create(
					JOVT() +
						JOV::OfType(Type::DateTime()) +
						"Operator" +
						"<=" +
						JOV::OfType(Type::DateTime()) +
						JOVTE::NoExtras(),
					ReturnSlots() + JOV::OfType(Type::Integer(1, false)),
					&FORA_clib_DateTimeLessThanEqualsDateTime,
					ImmutableTreeVector<uword_t>() + 0 + 3
					)
				;

			AxiomGroups("DateTime") +=
				LibcallAxiomGroup::create(
					JOVT() +
						JOV::OfType(Type::DateTime()) +
						"Operator" +
						">=" +
						JOV::OfType(Type::DateTime()) +
						JOVTE::NoExtras(),
					ReturnSlots() + JOV::OfType(Type::Integer(1, false)),
					&FORA_clib_DateTimeGreaterThanEqualsDateTime,
					ImmutableTreeVector<uword_t>() + 0 + 3
					)
				;

			AxiomGroups("DateTime") +=
				LibcallAxiomGroup::create(
					JOVT() +
						JOV::OfType(Type::DateTime()) +
						"Operator" +
						"==" +
						JOV::OfType(Type::DateTime()) +
						JOVTE::NoExtras(),
					ReturnSlots() + JOV::OfType(Type::Integer(1, false)),
					&FORA_clib_DateTimeEqualsDateTime,
					ImmutableTreeVector<uword_t>() + 0 + 3
					)
				;

			AxiomGroups("DateTime") +=
				LibcallAxiomGroup::create(
					JOVT() +
						"DateTimeFromString" +
						"Call" +
						JOV::OfType(Type::String()),
					ReturnSlots() +
						ReturnSlot::Normal(JOV::OfType(Type::DateTime())) +
						ReturnSlot::Exception(JOV()),
					&FORA_clib_DateTime_from_string,
					emptyTreeVec() + (uword_t)2
					)
				;

			 AxiomGroups("DateTime") +=
				LibcallAxiomGroup::create(
					JOVT() +
						"DateTimeFromISOString" +
						"Call" +
						JOV::OfType(Type::String()),
					ReturnSlots() +
						ReturnSlot::Normal(OfType(Type::DateTime())) +
						ReturnSlot::Exception(JOV()),
					&FORA_clib_DateTime_from_iso_string,
					emptyTreeVec() + (uword_t)2
					)
				;

			AxiomGroups("DateTime") +=
				LibcallAxiomGroup::create(
					JOVT() +
						"DateTimeFromDateString" +
						"Call" +
						JOV::OfType(Type::String()),
					ReturnSlots() +
						ReturnSlot::Normal(JOV::OfType(Type::DateTime())) +
						ReturnSlot::Exception(JOV::OfType(Type::String())),
					&FORA_clib_DateTime_from_date_string,
					emptyTreeVec() + (uword_t)2
					)
				;

			AxiomGroups("DateTime") +=
				LibcallAxiomGroup::create(
					JOVT() +
						"DateTimeFromUndelimitedDateString" +
						"Call" +
						JOV::OfType(Type::String()),
					ReturnSlots() +
						ReturnSlot::Normal(JOV::OfType(Type::DateTime())) +
						ReturnSlot::Exception(JOV()),
					&FORA_clib_DateTime_from_undelimited_date_string,
					emptyTreeVec() + (uword_t)2
					)
				;

			AxiomGroups("DateTime") +=
				LibcallAxiomGroup::create(
					JOVT() +
						"DateTimeBySecSinceEpoch" +
						"Call" +
						JOV::OfType(Type::Integer(64, true)),
					ReturnSlots() +
						ReturnSlot::Normal(JOV::OfType(Type::DateTime())) +
						ReturnSlot::Exception(JOV()),
					&FORA_clib_DateTime_by_integer_sec_since_epoch,
					emptyTreeVec() + (uword_t)2
					)
				;

			AxiomGroups("DateTime") +=
				LibcallAxiomGroup::create(
					JOVT() +
						"DateTimeByFloatSecondsSinceEpoch" +
						"Call" +
						JOV::OfType(Type::Float(64)),
					ReturnSlots() +
						ReturnSlot::Normal(JOV::OfType(Type::DateTime())) +
						ReturnSlot::Exception(JOV()),
					&FORA_clib_DateTime_by_float_sec_since_epoch,
					emptyTreeVec() + (uword_t)2
					)
				;

			AxiomGroups("DateTime") +=
				LibcallAxiomGroup::create(
					JOVT() +
						"DateTimeEpoch" +
						"Call" +
						JOVTE::NoExtras(),
					ReturnSlots() + JOV::OfType(Type::DateTime()),
					&FORA_clib_DateTimeEpoch,
					emptyTreeVec()
					)
				;

			}

};

DateTimeAxioms dateTimeAxioms;

