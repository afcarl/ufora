/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/
#include "NativeAxiomVars.hppml"
#include <boost/lexical_cast.hpp>
#include "../TypedFora/ABI/NativeLayoutType.hppml"
#include "../Native/NativeCode.hppml"

using TypedFora::Abi::nativeLayoutType;

NativeAxiomVars::NativeAxiomVars(JudgmentOnValueTuple sig) : mSignature(sig)
	{
	if (hasExtras())
		mExtrasVar = NativeVariable::Temp(TypedFora::Abi::nativeTypeForImplVal());

	for (long k = 0; k < signature().jovs().size(); k++)
		mVars.push_back(
			NativeVariable::Temp(nativeLayoutType(signature().jovs()[k]))
			);
	}

uword_t NativeAxiomVars::size() const
	{
	return signature().jovs().size();
	}

bool NativeAxiomVars::hasExtras() const
	{
	return signature().extras().isExtras();
	}

NativeVariable NativeAxiomVars::var(uword_t ix) const
	{
	if (ix == signature().jovs().size() && hasExtras())
		return extrasVar();

	lassert_dump(ix < signature().jovs().size(),
				ix << " is out of range for "
					<< prettyPrintString(signature()));
	return mVars[ix];
	}

NativeExpression NativeAxiomVars::operator[](uword_t ix) const
	{
	return var(ix).expr();
	}

NativeVariable NativeAxiomVars::extrasVar() const
	{
	lassert_dump(signature().extras().isExtras(),
			prettyPrintString(signature()) << " doesn't have extras");
	return mExtrasVar;
	}

NativeExpression NativeAxiomVars::extras() const
	{
	return extrasVar().expr();
	}

ImmutableTreeVector<NativeVariable> NativeAxiomVars::vars() const
	{
	ImmutableTreeVector<NativeVariable> tr;
	for (long k = 0; k < signature().jovs().size();k++)
		tr = tr + var(k);
	if (signature().extras().isExtras())
		tr = tr + extrasVar();
	return tr;
	}

const JudgmentOnValueTuple& NativeAxiomVars::signature() const
	{
	return mSignature;
	}


