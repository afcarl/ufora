/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/
#pragma once

class NativeVariable;
class NativeExpression;

#include "../Judgment/JudgmentOnValue.hppml"
#include "../Native/NativeCode.hppml"

/***********
NativeAxiomVars

A helper class for building native axioms.  NativeAxiomVars allocates
one variable for each argument that will be passed into a native axiom with
signature JudgmentOnValueTuple, including an argument for any tuple extras.
***********/

class NativeAxiomVars {
public:
	NativeAxiomVars(JudgmentOnValueTuple signature);

	NativeAxiomVars& operator=(const NativeAxiomVars& in) = delete;
	NativeAxiomVars(const NativeAxiomVars& in) = delete;

	//how many explicit JOVs are passed to us?
	uword_t size() const;

	//do we have an 'extras' JOV?
	bool hasExtras() const;

	//get the 'ix'th NativeVariable
	NativeVariable var(uword_t ix) const;

	//get the 'ix'th NativeExpression
	NativeExpression operator[](uword_t ix) const;

	//get a variable representing the 'extras'.
	//throws if there are no extras
	NativeVariable extrasVar() const;

	//get an NativeExpression representing the 'extras'.
	//throws if there are no extras
	NativeExpression extras() const;

	//get a list of all the variables, including the 'extras' variable
	//This can be passed to NativeBlock as the args list
	ImmutableTreeVector<NativeVariable> vars() const;

	const JudgmentOnValueTuple& signature() const;
	
private:
	JudgmentOnValueTuple mSignature;

	std::vector<NativeVariable> mVars;

	NativeVariable mExtrasVar;
};


