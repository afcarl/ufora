/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/
#include "TypedForaAxiomBuilder.hppml"
#include "../TypedFora/TypedFora.hppml"
#include "../TypedFora/TypedForaUtil.hppml"
#include "../TypedFora/ABI/NativeLayoutType.hppml"
#include "../TypedFora/ABI/HomogenousVectorStashCodegen.hppml"
#include "../Native/NativeCode.hppml"
#include "../../core/Logging.hpp"

namespace TypedFora {

namespace {

ImmutableTreeVector<NativeVariable> nativeVarsFor(const ImmutableTreeVector<Variable>& vars)
	{
	ImmutableTreeVector<NativeVariable> tr;

	for (long k = 0; k < vars.size();k++)
		tr = tr + NativeVariable::Temp(TypedFora::Abi::nativeTypeForForaType(vars[k].type()));

	return tr;
	}

}

class TypedForaAxiomBuilderImpl {
public:
	TypedForaAxiomBuilderImpl(
				const JOVT& signature
				) :
			mSignature(signature)
		{
		mCallSignature =
			TypedFora::callSignatureFromJovt(
				mSignature,
				RefcountStyle::AsValueUnowned()
				);

		mVariables = TypedFora::callVariablesFromSignature(mCallSignature);

		mNativeVariables = nativeVarsFor(mVariables);
		}

	TypedForaAxiomBuilderImpl(
				const JOVT& signature,
				const TypedFora::RefcountStyle& argumentLayout
				) :
			mSignature(signature)
		{
		mCallSignature =
			TypedFora::callSignatureFromJovt(
				mSignature,
				argumentLayout
				);

		mVariables = TypedFora::callVariablesFromSignature(mCallSignature);

		mNativeVariables = nativeVarsFor(mVariables);
		}

	TypedForaAxiomBuilderImpl(
				const JOVT& signature,
				const ImmutableTreeVector<TypedFora::Type>& argumentTypes
				) :
			mSignature(signature),
			mCallSignature(argumentTypes)
		{
		mVariables = TypedFora::callVariablesFromSignature(mCallSignature);

		mNativeVariables = nativeVarsFor(mVariables);
		}


	TypedFora::Variable var(uword_t inIndex) const
		{
		return mVariables[inIndex];
		}

	Axiom axiomForExpression(
				const TypedFora::Expression& inExpression,
				const TypedFora::RefcountStyle& outputLayout,
				const JudgmentOnValue& outputJov,
				bool isException
				) const
		{
		return
			Axiom::Native(
				mSignature,
				isException ?
					JudgmentOnAction::Throws(outputJov)
				:	JudgmentOnAction::Value(outputJov)
					,
				TypedFora::Callable::SingleExpression(
					mVariables,
					inExpression,
					TypedFora::Type(outputJov, outputLayout),
					isException,
					false
					)
				);
		}

	Axiom axiomForNativeExpression(
					const NativeExpression& inNativeExpression,
					const RefcountStyle& outRefcountStyle,
					const JudgmentOnResult& outNormalJOR,
					const JudgmentOnResult& outExceptionJOR,
					Nullable<std::string> inlineExpansionName
					) const
		{
		JudgmentOnAction joa = JudgmentOnAction::Throws(outExceptionJOR) |
										JudgmentOnAction::Value(outNormalJOR);

		ImmutableTreeVector<NativeVariable> incomingVariables;

		NativeExpression axiomExpression = inNativeExpression;

		NativeVariable callbackVar("callbacks", NativeTypeFor<NativeRuntimeCallbacks>::get().ptr());

		if (inlineExpansionName)
			{
			//the argument variables in the new expansion CFG
			ImmutableTreeVector<NativeVariable> innerCfgArgs;
			innerCfgArgs = innerCfgArgs + callbackVar;

			//the new variables that will be passed in at the axiom root level
			incomingVariables = incomingVariables + NativeVariable::Temp(callbackVar.type());

			ImmutableTreeVector<NativeExpression> exprsToCallInner;
			exprsToCallInner = exprsToCallInner + incomingVariables[0].expr();

			long stashVarsUsed = 0;
			for (long k = 0; k < mNativeVariables.size();k++)
				{
				innerCfgArgs = innerCfgArgs +
					mNativeVariables[k];

				NativeVariable newVar = NativeVariable::Temp(mNativeVariables[k].type());
				incomingVariables = incomingVariables + newVar;
				exprsToCallInner = exprsToCallInner + newVar.expr();

				auto it = mNativeStashVars.find(k);
				if (it != mNativeStashVars.end())
					{
					innerCfgArgs = innerCfgArgs + it->second;
					exprsToCallInner = exprsToCallInner + NativeExpression::Zero(it->second.type());
					stashVarsUsed++;
					}
				}

			lassert_dump(stashVarsUsed == mNativeStashVars.size(), prettyPrintString(mNativeStashVars));

			//put a second CFG wrapper around this one with a passthrough
			NativeCFG innerCfg = NativeCFG( innerCfgArgs, inNativeExpression);

			axiomExpression = NativeExpression::Call(
				NativeCallTarget::Expansion(NativeCFGExpansion(*inlineExpansionName, innerCfg, inNativeExpression.hasSideEffects())),
				mapITVWithIndices(innerCfg.returnTypes(), [&](NativeType t, int64_t ix) {
					NativeVariable v = NativeVariable::Temp(t);

					return NativeContinuation(
						v,
						NativeExpression::Return(ix, v.expr())
						);
					}),
				exprsToCallInner,
				emptyTreeVec()
				);

			lassert(exprsToCallInner.size() == innerCfgArgs.size());
			}
		else
			{
			incomingVariables = callbackVar + mNativeVariables;

			//just set all the stash variables to zero
			for (auto ixAndVar: mNativeStashVars)
				axiomExpression = NativeExpression::Let(
					ixAndVar.second,
					NativeExpression::Zero(ixAndVar.second.type()),
					axiomExpression
					);
			}

		return
			Axiom::Native(
				mSignature,
				joa,
				TypedFora::graphFromNativeCfg(
					mCallSignature,
					joa,
					outRefcountStyle,
					NativeCFG(
						incomingVariables,
						axiomExpression
						)
					)
				);
		}

	NativeVariable nativeVar(uword_t inIndex) const
		{
		return mNativeVariables[inIndex];
		}

	NativeVariable nativeStashVar(uword_t inIndex) const
		{
		auto it = mNativeStashVars.find(inIndex);
		if (it != mNativeStashVars.end())
			return it->second;

		mNativeStashVars[inIndex] =
			NativeVariable::Temp(NativeTypeFor<TypedFora::Abi::HomogenousVectorStash>::get());
		return mNativeStashVars[inIndex];
		}

	Axiom axiomForNativeExpression(
					const NativeExpression& inNativeExpression,
					const RefcountStyle& outRefcountStyle,
					const JudgmentOnValue& outputJov,
					bool isException,
					Nullable<std::string> inlineExpansionName
					) const
		{
		if (inlineExpansionName)
			return axiomForNativeExpression(
				inNativeExpression,
				outRefcountStyle,
				isException ? JudgmentOnResult() : JudgmentOnResult(outputJov),
				isException ? JudgmentOnResult(outputJov) : JudgmentOnResult(),
				inlineExpansionName
				);

		ImmutableTreeVector<InlineNativeOperationArg> varmap;

		ImmutableTreeSet<NativeVariable> nativeVarSet;

		for (long k = 0; k < mCallSignature.size();k++)
			if (inNativeExpression.freeVariables().contains(nativeVar(k)))
				{
				varmap = varmap +
					InlineNativeOperationArg(
						CPPMLOpaqueHandle<NativeVariable>(nativeVar(k)),
						mVariables[k].type(),
						mVariables[k].expr()
						);
				nativeVarSet = nativeVarSet + nativeVar(k);
				}

		ImmutableTreeSet<NativeVariable> freeVarSet =
			(inNativeExpression.freeVariables() - nativeVarSet)
				- NativeVariable("callbacks", NativeTypeFor<NativeRuntimeCallbacks>::get().ptr());

		lassert_dump(
			freeVarSet.size() == 0,
			prettyPrintString(inNativeExpression) << "\n\nhas free variables " <<
			prettyPrintString(freeVarSet));

		TypedFora::Expression typedForaExpression =
			TypedFora::Expression::InlineNativeOperation(
				varmap,
				CPPMLOpaqueHandle<NativeExpression>(inNativeExpression),
				TypedFora::Type(outputJov, outRefcountStyle),
				false,
				emptyTreeVec()
				);

		return axiomForExpression(
			typedForaExpression,
			outRefcountStyle,
			outputJov,
			isException
			);
		}


private:
	JudgmentOnValueTuple mSignature;

	TypedFora::RefcountStyle mArgumentPassingStyle;

	ImmutableTreeVector<TypedFora::Type> mCallSignature;

	ImmutableTreeVector<TypedFora::Variable> mVariables;

	ImmutableTreeVector<NativeVariable> mNativeVariables;

	mutable std::map<long, NativeVariable> mNativeStashVars;
};


TypedForaAxiomBuilder::TypedForaAxiomBuilder(
			const JudgmentOnValueTuple& signature
			) :
		mImpl(new TypedForaAxiomBuilderImpl(signature))
	{
	}

TypedForaAxiomBuilder::TypedForaAxiomBuilder(
			const JudgmentOnValueTuple& signature,
			const TypedFora::RefcountStyle& argumentPassingStyle
			) :
		mImpl(new TypedForaAxiomBuilderImpl(signature, argumentPassingStyle))
	{
	}

TypedForaAxiomBuilder::TypedForaAxiomBuilder(
			const JudgmentOnValueTuple& signature,
			const ImmutableTreeVector<TypedFora::Type>& argumentVariables
			) :
		mImpl(new TypedForaAxiomBuilderImpl(signature, argumentVariables))
	{
	}

TypedFora::Variable TypedForaAxiomBuilder::var(uword_t inIndex) const
	{
	return mImpl->var(inIndex);
	}

NativeVariable TypedForaAxiomBuilder::nativeVar(uword_t inIndex) const
	{
	return mImpl->nativeVar(inIndex);
	}

NativeVariable TypedForaAxiomBuilder::nativeStashVar(uword_t inIndex) const
	{
	return mImpl->nativeStashVar(inIndex);
	}

Axiom TypedForaAxiomBuilder::axiomForNativeExpression(
			const NativeExpression& inNativeExpression,
			const RefcountStyle& outRefcountStyle,
			const JudgmentOnValue& outputJov,
			bool isException,
			Nullable<std::string> inlineExpansionName
			) const
	{
	return mImpl->axiomForNativeExpression(
		inNativeExpression,
		outRefcountStyle,
		outputJov,
		isException,
		inlineExpansionName
		);
	}

Axiom TypedForaAxiomBuilder::axiomForNativeExpression(
			const NativeExpression& inNativeExpression,
			const RefcountStyle& outRefcountStyle,
			const JudgmentOnResult& outNormalJOR,
			const JudgmentOnResult& outExceptionJOR,
			Nullable<std::string> inlineExpansionName
			) const
	{
	return mImpl->axiomForNativeExpression(
		inNativeExpression,
		outRefcountStyle,
		outNormalJOR,
		outExceptionJOR,
		inlineExpansionName
		);
	}

Axiom TypedForaAxiomBuilder::axiomForExpression(
			const TypedFora::Expression& inExpression,
			const TypedFora::RefcountStyle& outputLayout,
			const JudgmentOnValue& outputJov,
			bool isException
			) const
	{
	return mImpl->axiomForExpression(
		inExpression,
		outputLayout,
		outputJov,
		isException
		);
	}


}

