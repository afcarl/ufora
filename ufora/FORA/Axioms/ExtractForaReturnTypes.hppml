/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/
#pragma once

#include "NativeTypeAndIsPooled.hppml"
#include "ReturnValue.hpp"

namespace Fora {

template<class T>
class ExtractForaReturnTypes {
public:
	static ImmutableTreeVector<NativeTypeAndIsPooled> get()
		{
		return emptyTreeVec() + NativeTypeAndIsPooledFor<T>::get();
		}

	static bool isUsingReturnValue()
		{
		return false;
		}
};

template<class A1, class A2, class A3, class A4, class A5, class A6>
class ExtractForaReturnTypes<ReturnValue<A1, A2, A3, A4, A5, A6> > {
public:
	static ImmutableTreeVector<NativeTypeAndIsPooled> get()
		{
		ImmutableTreeVector<NativeTypeAndIsPooled> result;

		if (!Fora::IsEmptyType<A1>::result and !Fora::IsVectorLoadType<A1>::result)
			result = result + NativeTypeAndIsPooledFor<A1>::get();
		else
			return result;

		if (!Fora::IsEmptyType<A2>::result and !Fora::IsVectorLoadType<A2>::result)
			result = result + NativeTypeAndIsPooledFor<A2>::get();
		else
			return result;

		if (!Fora::IsEmptyType<A3>::result and !Fora::IsVectorLoadType<A3>::result)
			result = result + NativeTypeAndIsPooledFor<A3>::get();
		else
			return result;

		if (!Fora::IsEmptyType<A4>::result and !Fora::IsVectorLoadType<A4>::result)
			result = result + NativeTypeAndIsPooledFor<A4>::get();
		else
			return result;

		if (!Fora::IsEmptyType<A5>::result and !Fora::IsVectorLoadType<A5>::result)
			result = result + NativeTypeAndIsPooledFor<A5>::get();
		else
			return result;

		if (!Fora::IsEmptyType<A6>::result and !Fora::IsVectorLoadType<A6>::result)
			result = result + NativeTypeAndIsPooledFor<A6>::get();

		return result;
		}

	static bool isUsingReturnValue()
		{
		return true;
		}
};

}

