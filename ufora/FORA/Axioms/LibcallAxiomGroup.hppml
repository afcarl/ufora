/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/
#pragma once

#include "Axiom.hppml"
#include "AxiomGroup.hppml"
#include "ReturnValue.hpp"
#include "ExtractVectorLoadSlot.hppml"
#include "ExtractForaReturnTypes.hppml"
#include "../Native/NativeTypeFor.hpp"
#include "../TypedFora/ABI/NativeLayoutType.hppml"
#include "../../core/containers/ImmutableTreeVector.hppml"
#include "NativeTypeAndIsPooled.hppml"
#include "../Native/NativeCode.hppml"

class NativeExpressionBuilder;

namespace TypedFora {

class TypedForaAxiomBuilder;

}

namespace Fora {

@type ReturnSlot =
	-| Normal of JudgmentOnValue
	-| Exception of JudgmentOnValue
	{
	public:
		JudgmentOnValue jov() const;
	}
	;

typedef ImmutableTreeVector<ReturnSlot> ReturnSlots;

inline ReturnSlots operator+(
		const ReturnSlots& in,
		const JudgmentOnValue& normal
		)
	{
	return in + ReturnSlot::Normal(normal);
	}

class LibcallAxiomGroup : public AxiomGroup {
public:
	LibcallAxiomGroup(
				const JudgmentOnValueTuple& inputJudgments,
				const ReturnSlots& outputJudgments,
				void* inFunctionPointer,
				ImmutableTreeVector<NativeTypeAndIsPooled> fpReturnTypes,
				bool inFunctionUsesReturnValue,
				ImmutableTreeVector<NativeTypeAndIsPooled> argumentTypes,
				ImmutableTreeVector<uword_t> inputsToArguments,
				Nullable<NativeExpressionTag> tag,
				Nullable<NativeExpression> preloadExpression,
				axiom_signature_to_joa_function_ptr specializer,
				Nullable<uword_t> inVectorLoadSlot,
				bool hasSideEffects,
				const CSTValue& metadata
				) :
			AxiomGroup(inputJudgments, metadata),
			mInputJudgments(inputJudgments),
			mReturnSlots(outputJudgments),
			mFunctionPointer(inFunctionPointer),
			mFunctionReturnTypes(fpReturnTypes),
			mArgumentTypes(argumentTypes),
			mInputsToArguments(inputsToArguments),
			mTag(tag),
			mPreloadExpression(preloadExpression),
			mSpecializer(specializer),
			mFunctionUsesReturnValue(inFunctionUsesReturnValue),
			mVectorLoadSlot(inVectorLoadSlot),
			mHasSideEffects(hasSideEffects)
		{
		mAxiom = buildAxiom();
		}

	Nullable<Axiom> axiom(TypedFora::Compiler& c, const JudgmentOnValueTuple& s);

	Nullable<AxiomJOA>	axiomJOA(const JudgmentOnValueTuple& s);

	template <class function_ptr>
	static PolymorphicSharedPtr<LibcallAxiomGroup, PolymorphicSharedPtr<AxiomGroup> > create(
						const JudgmentOnValueTuple& inputJudgments,
						const ReturnSlots& outputJudgments,
						function_ptr fp,
						ImmutableTreeVector<uword_t> inputsToArguments,
						Nullable<NativeExpressionTag> inTag = null(),
						Nullable<NativeExpression> toPrepend = null(),
						axiom_signature_to_joa_function_ptr specializer = 0,
						bool hasSideEffects = false,
						const CSTValue& metadata = CSTValue()
						)
		{
		return PolymorphicSharedPtr<LibcallAxiomGroup, PolymorphicSharedPtr<AxiomGroup> >(
			new LibcallAxiomGroup(
				inputJudgments,
				outputJudgments,
				(void*)fp,
				extractFpReturnTypes(fp),
				fpReturnsReturnValue(fp),
				extractArgumentTypes(fp),
				inputsToArguments,
				inTag,
				toPrepend,
				specializer,
				extractVectorLoadSlot(fp),
				hasSideEffects,
				metadata
				)
			);
		}

	PolymorphicSharedPtr<LibcallAxiomGroup, PolymorphicSharedPtr<AxiomGroup> >
				setExpansionName(std::string name)
		{
		mInlineExpansionName = name;
		mAxiom = buildAxiom();
		return this->polymorphicSharedPtrFromThis().dynamic_pointer_cast<PolymorphicSharedPtr<LibcallAxiomGroup, PolymorphicSharedPtr<AxiomGroup> > >();
		}

	template<class function_ptr>
	static Axiom createAxiom(
			const JudgmentOnValueTuple& inputJudgments,
			const ReturnSlots& outputJudgments,
			function_ptr fp,
			ImmutableTreeVector<uword_t> inputsToArguments,
			Nullable<NativeExpressionTag> inTag = null(),
			Nullable<NativeExpression> toPrepend = null(),
			axiom_signature_to_joa_function_ptr specializer = 0,
			bool hasSideEffects = false,
			const CSTValue& metadata = CSTValue()
			)
		{
		return LibcallAxiomGroup(
				inputJudgments,
				outputJudgments,
				(void*)fp,
				extractFpReturnTypes(fp),
				fpReturnsReturnValue(fp),
				extractArgumentTypes(fp),
				inputsToArguments,
				inTag,
				toPrepend,
				specializer,
				extractVectorLoadSlot(fp),
				hasSideEffects,
				metadata
				).mAxiom;
		}

	NativeCFGExpansion getExpansion() const;

private:
	Axiom buildAxiom();

	bool needsVectorLoad() const
		{
		return !mVectorLoadSlot.isNull();
		}

	void verifyInputs() const;

	JudgmentOnAction computeJOA() const;

	ImmutableTreeVector<uword_t> computeExitPoints() const;

	uword_t computeMaxOutputSize(
		const ImmutableTreeVector<NativeType>& possibleOutputTypes
		) const;

	ImmutableTreeVector<NativeType> computePossibleOutputTypes() const;

	pair<ImmutableTreeVector<NativeExpression>, ImmutableTreeVector<bool> >
					prepareArgumentToPass(
							long argumentIndex,
							long inputIndex,
							const NativeExpression& expression,
							const TypedFora::TypedForaAxiomBuilder& axiomBuilder
							);

	template<class R>
	static ImmutableTreeVector<NativeTypeAndIsPooled> extractFpReturnTypes(R (*fp)())
		{
		return ExtractForaReturnTypes<R>::get();
		}

	template<class R, class A1>
	static ImmutableTreeVector<NativeTypeAndIsPooled> extractFpReturnTypes(R (*fp)(A1))
		{
		return ExtractForaReturnTypes<R>::get();
		}

	template<class R, class A1, class A2>
	static ImmutableTreeVector<NativeTypeAndIsPooled> extractFpReturnTypes(R (*fp)(A1, A2))
		{
		return ExtractForaReturnTypes<R>::get();
		}

	template<class R, class A1, class A2, class A3>
	static ImmutableTreeVector<NativeTypeAndIsPooled> extractFpReturnTypes(R (*fp)(A1, A2, A3))
		{
		return ExtractForaReturnTypes<R>::get();
		}

	template<class R, class A1, class A2, class A3, class A4>
	static ImmutableTreeVector<NativeTypeAndIsPooled> extractFpReturnTypes(R (*fp)(A1, A2, A3, A4))
		{
		return ExtractForaReturnTypes<R>::get();
		}

	template<class R, class A1, class A2, class A3, class A4, class A5>
	static ImmutableTreeVector<NativeTypeAndIsPooled> extractFpReturnTypes(R (*fp)(A1, A2, A3, A4, A5))
		{
		return ExtractForaReturnTypes<R>::get();
		}

	template<class R, class A1, class A2, class A3, class A4, class A5, class A6>
	static ImmutableTreeVector<NativeTypeAndIsPooled> extractFpReturnTypes(R (*fp)(A1, A2, A3, A4, A5, A6))
		{
		return ExtractForaReturnTypes<R>::get();
		}

	template<class R, class A1, class A2, class A3, class A4, class A5, class A6, class A7>
	static ImmutableTreeVector<NativeTypeAndIsPooled> extractFpReturnTypes(R (*fp)(A1, A2, A3, A4, A5, A6, A7))
		{
		return ExtractForaReturnTypes<R>::get();
		}

	template<class R, class A1, class A2, class A3, class A4, class A5, class A6, class A7, class A8>
	static ImmutableTreeVector<NativeTypeAndIsPooled> extractFpReturnTypes(R (*fp)(A1, A2, A3, A4, A5, A6, A7, A8))
		{
		return ExtractForaReturnTypes<R>::get();
		}

	template<class R, class A1, class A2, class A3, class A4, class A5, class A6, class A7, class A8, class A9>
	static ImmutableTreeVector<NativeTypeAndIsPooled> extractFpReturnTypes(R (*fp)(A1, A2, A3, A4, A5, A6, A7, A8, A9))
		{
		return ExtractForaReturnTypes<R>::get();
		}

	template<class R>
	static Nullable<uword_t> extractVectorLoadSlot(R (*fp)())
		{
		return ExtractVectorLoadSlot<R>::get();
		}

	template<class R, class A1>
	static Nullable<uword_t> extractVectorLoadSlot(R (*fp)(A1))
		{
		return ExtractVectorLoadSlot<R>::get();
		}

	template<class R, class A1, class A2>
	static Nullable<uword_t> extractVectorLoadSlot(R (*fp)(A1, A2))
		{
		return ExtractVectorLoadSlot<R>::get();
		}

	template<class R, class A1, class A2, class A3>
	static Nullable<uword_t> extractVectorLoadSlot(R (*fp)(A1, A2, A3))
		{
		return ExtractVectorLoadSlot<R>::get();
		}

	template<class R, class A1, class A2, class A3, class A4>
	static Nullable<uword_t> extractVectorLoadSlot(R (*fp)(A1, A2, A3, A4))
		{
		return ExtractVectorLoadSlot<R>::get();
		}

	template<class R, class A1, class A2, class A3, class A4, class A5>
	static Nullable<uword_t> extractVectorLoadSlot(R (*fp)(A1, A2, A3, A4, A5))
		{
		return ExtractVectorLoadSlot<R>::get();
		}

	template<class R, class A1, class A2, class A3, class A4, class A5, class A6>
	static Nullable<uword_t> extractVectorLoadSlot(R (*fp)(A1, A2, A3, A4, A5, A6))
		{
		return ExtractVectorLoadSlot<R>::get();
		}

	template<class R, class A1, class A2, class A3, class A4, class A5, class A6, class A7>
	static Nullable<uword_t> extractVectorLoadSlot(R (*fp)(A1, A2, A3, A4, A5, A6, A7))
		{
		return ExtractVectorLoadSlot<R>::get();
		}

	template<class R, class A1, class A2, class A3, class A4, class A5, class A6, class A7, class A8>
	static Nullable<uword_t> extractVectorLoadSlot(R (*fp)(A1, A2, A3, A4, A5, A6, A7, A8))
		{
		return ExtractVectorLoadSlot<R>::get();
		}

	template<class R, class A1, class A2, class A3, class A4, class A5, class A6, class A7, class A8, class A9>
	static Nullable<uword_t> extractVectorLoadSlot(R (*fp)(A1, A2, A3, A4, A5, A6, A7, A8, A9))
		{
		return ExtractVectorLoadSlot<R>::get();
		}

	template<class R>
	static bool fpReturnsReturnValue(R (*fp)())
		{
		return ExtractForaReturnTypes<R>::isUsingReturnValue();
		}

	template<class R, class A1>
	static bool fpReturnsReturnValue(R (*fp)(A1))
		{
		return ExtractForaReturnTypes<R>::isUsingReturnValue();
		}

	template<class R, class A1, class A2>
	static bool fpReturnsReturnValue(R (*fp)(A1, A2))
		{
		return ExtractForaReturnTypes<R>::isUsingReturnValue();
		}

	template<class R, class A1, class A2, class A3>
	static bool fpReturnsReturnValue(R (*fp)(A1, A2, A3))
		{
		return ExtractForaReturnTypes<R>::isUsingReturnValue();
		}

	template<class R, class A1, class A2, class A3, class A4>
	static bool fpReturnsReturnValue(R (*fp)(A1, A2, A3, A4))
		{
		return ExtractForaReturnTypes<R>::isUsingReturnValue();
		}

	template<class R, class A1, class A2, class A3, class A4, class A5>
	static bool fpReturnsReturnValue(R (*fp)(A1, A2, A3, A4, A5))
		{
		return ExtractForaReturnTypes<R>::isUsingReturnValue();
		}

 	template<class R, class A1, class A2, class A3, class A4, class A5, class A6>
	static bool fpReturnsReturnValue(R (*fp)(A1, A2, A3, A4, A5, A6))
		{
		return ExtractForaReturnTypes<R>::isUsingReturnValue();
		}

 	template<class R, class A1, class A2, class A3, class A4, class A5, class A6, class A7>
	static bool fpReturnsReturnValue(R (*fp)(A1, A2, A3, A4, A5, A6, A7))
		{
		return ExtractForaReturnTypes<R>::isUsingReturnValue();
		}

 	template<class R, class A1, class A2, class A3, class A4, class A5, class A6, class A7, class A8>
	static bool fpReturnsReturnValue(R (*fp)(A1, A2, A3, A4, A5, A6, A7, A8))
		{
		return ExtractForaReturnTypes<R>::isUsingReturnValue();
		}

 	template<class R, class A1, class A2, class A3, class A4, class A5, class A6, class A7, class A8, class A9>
	static bool fpReturnsReturnValue(R (*fp)(A1, A2, A3, A4, A5, A6, A7, A8, A9))
		{
		return ExtractForaReturnTypes<R>::isUsingReturnValue();
		}

	template<class R>
	static ImmutableTreeVector<NativeTypeAndIsPooled> extractArgumentTypes(R (*fp)())
		{
		return emptyTreeVec();
		}

	template<class R, class A1>
	static ImmutableTreeVector<NativeTypeAndIsPooled> extractArgumentTypes(R (*fp)(A1))
		{
		return emptyTreeVec() + NativeTypeAndIsPooledFor<A1>::get();
		}

	template<class R, class A1, class A2>
	static ImmutableTreeVector<NativeTypeAndIsPooled> extractArgumentTypes(R (*fp)(A1, A2))
		{
		return emptyTreeVec()
			+ NativeTypeAndIsPooledFor<A1>::get()
			+ NativeTypeAndIsPooledFor<A2>::get();
		}

	template<class R, class A1, class A2, class A3>
	static ImmutableTreeVector<NativeTypeAndIsPooled> extractArgumentTypes(R (*fp)(A1, A2, A3))
		{
		return emptyTreeVec()
			+ NativeTypeAndIsPooledFor<A1>::get()
			+ NativeTypeAndIsPooledFor<A2>::get()
			+ NativeTypeAndIsPooledFor<A3>::get()
			;
		}

	template<class R, class A1, class A2, class A3, class A4>
	static ImmutableTreeVector<NativeTypeAndIsPooled> extractArgumentTypes(R (*fp)(A1, A2, A3, A4))
		{
		return emptyTreeVec()
			+ NativeTypeAndIsPooledFor<A1>::get()
			+ NativeTypeAndIsPooledFor<A2>::get()
			+ NativeTypeAndIsPooledFor<A3>::get()
			+ NativeTypeAndIsPooledFor<A4>::get()
			;
		}

	template<class R, class A1, class A2, class A3, class A4, class A5>
	static ImmutableTreeVector<NativeTypeAndIsPooled> extractArgumentTypes(R (*fp)(A1, A2, A3, A4, A5))
		{
		return emptyTreeVec()
			+ NativeTypeAndIsPooledFor<A1>::get()
			+ NativeTypeAndIsPooledFor<A2>::get()
			+ NativeTypeAndIsPooledFor<A3>::get()
			+ NativeTypeAndIsPooledFor<A4>::get()
			+ NativeTypeAndIsPooledFor<A5>::get()
			;
		}

	template<class R, class A1, class A2, class A3, class A4, class A5, class A6>
	static ImmutableTreeVector<NativeTypeAndIsPooled> extractArgumentTypes(R (*fp)(A1, A2, A3, A4, A5, A6))
		{
		return emptyTreeVec()
			+ NativeTypeAndIsPooledFor<A1>::get()
			+ NativeTypeAndIsPooledFor<A2>::get()
			+ NativeTypeAndIsPooledFor<A3>::get()
			+ NativeTypeAndIsPooledFor<A4>::get()
			+ NativeTypeAndIsPooledFor<A5>::get()
			+ NativeTypeAndIsPooledFor<A6>::get()
			;
		}

	template<class R, class A1, class A2, class A3, class A4, class A5, class A6, class A7>
	static ImmutableTreeVector<NativeTypeAndIsPooled> extractArgumentTypes(R (*fp)(A1, A2, A3, A4, A5, A6, A7))
		{
		return emptyTreeVec()
			+ NativeTypeAndIsPooledFor<A1>::get()
			+ NativeTypeAndIsPooledFor<A2>::get()
			+ NativeTypeAndIsPooledFor<A3>::get()
			+ NativeTypeAndIsPooledFor<A4>::get()
			+ NativeTypeAndIsPooledFor<A5>::get()
			+ NativeTypeAndIsPooledFor<A6>::get()
			+ NativeTypeAndIsPooledFor<A7>::get()
			;
		}

	template<class R, class A1, class A2, class A3, class A4, class A5, class A6, class A7, class A8>
	static ImmutableTreeVector<NativeTypeAndIsPooled> extractArgumentTypes(R (*fp)(A1, A2, A3, A4, A5, A6, A7, A8))
		{
		return emptyTreeVec()
			+ NativeTypeAndIsPooledFor<A1>::get()
			+ NativeTypeAndIsPooledFor<A2>::get()
			+ NativeTypeAndIsPooledFor<A3>::get()
			+ NativeTypeAndIsPooledFor<A4>::get()
			+ NativeTypeAndIsPooledFor<A5>::get()
			+ NativeTypeAndIsPooledFor<A6>::get()
			+ NativeTypeAndIsPooledFor<A7>::get()
			+ NativeTypeAndIsPooledFor<A8>::get()
			;
		}

	template<class R, class A1, class A2, class A3, class A4, class A5, class A6, class A7, class A8, class A9>
	static ImmutableTreeVector<NativeTypeAndIsPooled> extractArgumentTypes(R (*fp)(A1, A2, A3, A4, A5, A6, A7, A8, A9))
		{
		return emptyTreeVec()
			+ NativeTypeAndIsPooledFor<A1>::get()
			+ NativeTypeAndIsPooledFor<A2>::get()
			+ NativeTypeAndIsPooledFor<A3>::get()
			+ NativeTypeAndIsPooledFor<A4>::get()
			+ NativeTypeAndIsPooledFor<A5>::get()
			+ NativeTypeAndIsPooledFor<A6>::get()
			+ NativeTypeAndIsPooledFor<A7>::get()
			+ NativeTypeAndIsPooledFor<A8>::get()
			+ NativeTypeAndIsPooledFor<A9>::get()
			;
		}

	JudgmentOnValueTuple mInputJudgments;

	ReturnSlots mReturnSlots;

	void* mFunctionPointer;

	ImmutableTreeVector<NativeTypeAndIsPooled> mFunctionReturnTypes;

	bool mFunctionUsesReturnValue;

	Nullable<uword_t> mVectorLoadSlot;

	ImmutableTreeVector<NativeTypeAndIsPooled> mArgumentTypes;

	ImmutableTreeVector<uword_t> mInputsToArguments;

	Nullable<NativeExpressionTag> mTag;

	Nullable<NativeExpression> mPreloadExpression;

	axiom_signature_to_joa_function_ptr mSpecializer;

	bool mHasSideEffects;

	Axiom mAxiom;

	Nullable<std::string> mInlineExpansionName;
};

}

