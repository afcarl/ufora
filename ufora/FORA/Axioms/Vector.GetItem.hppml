/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/
#pragma once

#include "../../core/math/Nullable.hpp"
#include "../../core/threading/CallbackScheduler.hppml"
#include "AxiomGroup.hppml"
#include "../Core/ImplVal.hppml"
#include "../Native/TypedNativeExpression.fwd.hpp"

namespace TypedFora {
class Compiler;
};
class JudgmentOnValueTuple;
class Axiom;
class AxiomJOA;

/********
VectorGetItem

implements
	(Vector([...*]), `GetItem, {Int64})

This is the standard way to get elements out of a vector.

********/

NativeExpression homogenousGetItemExpression(
					const TypedNativeExpression<TypedFora::Abi::VectorRecord>& vectorExpr,
					TypedNativeExpression<int64_t> wrappedIndex,
					NativeType elementType
					);

NativeExpression homogenousGetItemExpressionAndStashUpdate(
					NativeExpression stashExpr,
					NativeExpression vectorExpr,
					NativeExpression indexExpr,
					NativeType elementType,
					NativeExpression onBoundscheckFailure
					);

NativeExpression homogenousDoubleGetItemExpressionAndStashUpdate(
					NativeExpression stashExpr,
					NativeExpression vectorExpr,
					NativeExpression indexExpr,
					NativeExpression indexExpr2,
					NativeType elementType1,
					ImmutableTreeVector<uword_t> elts,
					NativeType elementType2,
					NativeExpression onBoundscheckFailure1,
					NativeExpression onBoundscheckFailure2
					);

class VectorGetItem : public AxiomGroup {
public:
		VectorGetItem();

		Nullable<Axiom> axiom(TypedFora::Compiler& c, const JudgmentOnValueTuple& s);

		Nullable<Axiom> axiom(
							TypedFora::Compiler& c,
							const JudgmentOnValueTuple& s,
							const JudgmentOnAction& specializedJoa
							);

		Nullable<Axiom> axiom(
							TypedFora::Compiler& c,
							const JudgmentOnValueTuple& s,
							const JudgmentOnResult& specializations
							);

		Nullable<AxiomJOA> axiomJOA(const JudgmentOnValueTuple& s);
};


