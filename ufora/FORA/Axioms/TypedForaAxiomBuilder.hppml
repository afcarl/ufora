/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/
#pragma once

#include "Axiom.hppml"
#include "../TypedFora/RefcountStyle.hppml"

class NativeVariable;
class NativeExpression;

namespace TypedFora {

class Variable;
class Expression;
class Type;

class TypedForaAxiomBuilderImpl;

class TypedForaAxiomBuilder {
public:
	TypedForaAxiomBuilder(
				const JudgmentOnValueTuple& signature
				);

	TypedForaAxiomBuilder(
				const JudgmentOnValueTuple& signature,
				const TypedFora::RefcountStyle& argumentPassingStyle
				);

	TypedForaAxiomBuilder(
				const JudgmentOnValueTuple& signature,
				const ImmutableTreeVector<TypedFora::Type>& argumentVariables
				);

	TypedFora::Variable var(uword_t inIndex) const;

	NativeVariable nativeVar(uword_t inIndex) const;

	NativeVariable nativeStashVar(uword_t inIndex) const;

	Axiom axiomForNativeExpression(
				const NativeExpression& inNativeExpression,
				const RefcountStyle& outRefcountStyle,
				const JudgmentOnValue& outputJov,
				bool isException,
				Nullable<std::string> inlineExpansionName = null()
				) const;

	Axiom axiomForNativeExpression(
				const NativeExpression& inNativeExpression,
				const RefcountStyle& outRefcountStyle,
				const JudgmentOnResult& outNormalJOR,
				const JudgmentOnResult& outExceptionJOR,
				Nullable<std::string> inlineExpansionName = null()
				) const;

	Axiom axiomForExpression(
				const TypedFora::Expression& inExpression,
				const TypedFora::RefcountStyle& outputLayout,
				const JudgmentOnValue& outputJov,
				bool isException
				) const;

private:
	boost::shared_ptr<TypedForaAxiomBuilderImpl> mImpl;
};

}

