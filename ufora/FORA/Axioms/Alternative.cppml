/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/
#include "Axioms.hppml"
#include "Axiom.hppml"
#include "LibcallAxiomGroup.hppml"
#include <boost/lexical_cast.hpp>
#include "../Runtime.hppml"
#include "../Core/Integers.hppml"
#include "../Core/ImplValContainerUtilities.hppml"
#include "../../core/SymbolExport.hpp"
#include <algorithm>
#include "../Native/NativeCode.hppml"
#include "../Primitives/String.hppml"
#include "Axioms.hppml"
#include <boost/lexical_cast.hpp>
#include "../Runtime.hppml"
#include <algorithm>
#include "AxiomGroup.hppml"
#include "../../core/Logging.hpp"

using namespace Fora;

extern "C" {

BSA_DLLEXPORT
ReturnValue<ImplValContainer> FORA_clib_introduceAlternativeWithoutType(
		const Symbol& sym, const ImplValContainer& val
		)
	{
	return slot0(
		ImplValContainerUtilities::createAlternative(
			sym, val
			)
		);
	}

BSA_DLLEXPORT
ReturnValue<ImplValContainer, Nothing> FORA_clib_extractAlternative(
		const ImplValContainer& v, const Symbol& sym
		)
	{
	try {
		return slot0(
			ImplValContainerUtilities::extractAlternative(v, sym)
			);
		}
	catch (ImplValContainerUtilities::IVCException& e) {
		return slot1(Nothing());
		}
	}

BSA_DLLEXPORT
ReturnValue<ImplValContainer> FORA_clib_extractAnyAlternative(const ImplValContainer& v)
	{
	return slot0(
		ImplValContainerUtilities::extractAnyAlternative(v)
		);
	}
}


class AlternativeAxioms {
public:
		static Nullable<AxiomJOA> createAlternativeAxiomJOA(const JOVT& inSignature)
			{
			if (inSignature.jovs().size() > 1 && inSignature.jovs()[0].constant())
				return null() << AxiomJOA::Native(
						JudgmentOnAction::Value(
							JOV::Alternative(
								JudgmentOnValueAlternative(
									null() << inSignature.jovs()[0].constant()->cast<Symbol>(),
									JOV::Tuple(inSignature.slice(2))
									)
								)
							)
						);

			return null() << AxiomJOA::Native(JudgmentOnAction::Value(JOV()));
			}

		static Nullable<AxiomJOA> extractAnyAlternativeAxiomJOA(const JOVT& inSignature)
			{
			@match JOV(inSignature.jovs()[2])
				-| Alternative((sym, jov)) ->> {
					return null() << AxiomJOA::Native(
							JudgmentOnAction::Value(jov)
							);
					}
			}

		static Nullable<AxiomJOA> extractAlternativeAxiomJOA(const JOVT& inSignature)
			{
			if (inSignature.jovs().size() < 2 || !inSignature.jovs()[2].constant())
				return null() << AxiomJOA::Native(
						JudgmentOnAction::Value(JOV())
						);

			@match JOV(inSignature.jovs()[0])
				-| Alternative((sym, jov)) ->> {
					if (!sym)
						return null() << AxiomJOA::Native(
							JudgmentOnAction::Value(JOV())
							);

					if (*sym == inSignature.jovs()[2].constant()->cast<Symbol>())
						return null() << AxiomJOA::Native(
								JudgmentOnAction::Value(jov)
								);
					else
						return null() << AxiomJOA::Native(
								JudgmentOnAction::Value(JOV::OfType(Type::Nothing()))
								);
					}
			}

		AlternativeAxioms()
			{
			AxiomGroups("AlternativeAxioms") += LibcallAxiomGroup::create(
				JOVT() +
					"ExtractAlternativeBody" +
					"Call" +
					jovAlternative(),
				ReturnSlots() + JOV(),
				&FORA_clib_extractAnyAlternative,
				ImmutableTreeVector<uword_t>() + 2,
				null(),
				null(),
				&extractAnyAlternativeAxiomJOA
				);

			AxiomGroups("AlternativeAxioms") += LibcallAxiomGroup::create(
				JOVT()
					+ JOV::OfType(Type::Tag())
					+ "Call"
					+ JOVTE::Extras(),
				ReturnSlots() + JOV(),
				&FORA_clib_introduceAlternativeWithoutType,
				emptyTreeVec() + (uword_t)0 + (uword_t)2,
				null(),
				null(),
				&createAlternativeAxiomJOA
				);

			AxiomGroups("AlternativeAxioms") +=
				LibcallAxiomGroup::create(
					JOVT() +
						jovAlternative() +
						"MatchFilter" +
						JOV::OfType(Type::Tag()) +
						JOVTE::NoExtras()
						,
					ReturnSlots() +
						ReturnSlot::Normal(JOV()) +
						ReturnSlot::Normal(JOV::OfType(Type::Nothing())),
					&FORA_clib_extractAlternative,
					ImmutableTreeVector<uword_t>() + 0 + 2,
					null(),
					null(),
					&extractAlternativeAxiomJOA
					);
			}
};

AlternativeAxioms alternativeAxioms;

