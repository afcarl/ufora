/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/
#pragma once

#include "../Core/Type.hppml"
#include "../Core/ImplVal.hppml"
#include "../TypedFora/JitCompiler/Compiler.hppml"
#include "../Judgment/JudgmentOnValue.hppml"
#include "../Judgment/JudgmentOnValueTree.hppml"

#include <string>
#include "../../core/SimpleParse/SimpleParse.hppml"
#include "../../core/PolymorphicSharedPtr.hpp"
#include "../../core/threading/CallbackScheduler.hppml"
#include "../Language/Function.fwd.hppml"

using namespace std;

namespace TypedFora {

class Compiler;

}

class ControlFlowGraph;

class Axiom;
class AxiomJOA;
class AxiomsStorage;
class AxiomGroup;

class Axioms : public PolymorphicSharedPtrBase<Axioms> {
public:
		Axioms(const std::string& inAxiomsString);

		typedef
			ImmutableTreeVector<
				pair<
					JudgmentOnValueTuple,
					PolymorphicSharedPtr<AxiomGroup>
					>
				> 									axiom_group_vector;

		//return the list of axiom groups in the order in which they
		//must be searched
		const axiom_group_vector&	interpreterAxioms();

		//return the best axiom for a given JOVT s
		Nullable<Axiom>			axiom(	TypedFora::Compiler& c,
										const JudgmentOnValueTuple& s);

		Nullable<Axiom>			axiom(	TypedFora::Compiler& c,
										const JudgmentOnValueTuple& s,
										const JudgmentOnAction& joaWithSpecializations
										);

		Nullable<uword_t>		axiomSearchLinear(const JudgmentOnValueTuple& s);

		Nullable<uword_t>		axiomSearchTree(const JudgmentOnValueTuple& s);

		//return the best AxiomJOA for a given JOVT s
		Nullable<AxiomJOA>		axiomJOA(const JudgmentOnValueTuple& s);

		//return the weakest axiom possible for a given JOVT
		Nullable<Axiom>			weakestAxiom(
										TypedFora::Compiler& c,
										const JudgmentOnValueTuple& s
										);

		JudgmentOnAction resolveAxiomDirectly(
								TypedFora::Compiler& c,
								const JudgmentOnValueTuple& jovs
								);

		pair<std::string, std::string> getCppWrapperCode();
private:
		PolymorphicSharedPtr<AxiomGroup> getBadApplyAxiom();

		Nullable<Axiom>				axiom_(	TypedFora::Compiler& c,
											const JudgmentOnValueTuple& s
											);

		Nullable<Axiom>				axiom_(	TypedFora::Compiler& c,
											const JudgmentOnValueTuple& s,
											const JudgmentOnAction& joaWithSpecializations
											);

		Nullable<uword_t>			axiomIndex(
											const JudgmentOnValueTuple& s
											);

		PolymorphicSharedPtr<AxiomGroup>	axiomGroup(const JudgmentOnValueTuple& s);

		void parseNodeToAxiom(const SimpleParseNode& node);

		boost::recursive_mutex mMutex;

		map<hash_type, Nullable<Axiom> >	mCache;

		map<hash_type, JudgmentOnAction>	mResolvedJOACache;

		map<hash_type, Nullable<uword_t> >	mIndexCache;

		AxiomsStorage*						mAxioms;

		Nullable<axiom_group_vector> 		mInterpreterAxioms;

		ImmutableTreeVector<pair<JudgmentOnValueTuple, uword_t> > mInterpreterAxiomIndexes;
};


