/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/
#include "Axioms.hppml"
#include "Axiom.hppml"
#include "AxiomGroup.hppml"
#include "LibcallAxiomGroup.hppml"
#include <boost/lexical_cast.hpp>
#include "../Runtime.hppml"
#include "../VectorDataManager/VectorDataManager.hppml"
#include "../Primitives/TimeDuration.hppml"
#include "../Core/ExecutionContext.hppml"
#include "../../core/lassert.hpp"
#include "../../core/Logging.hpp"
#include <sstream>
#include <boost/numeric/conversion/cast.hpp>

using namespace Fora;

static_assert(sizeof(boost::posix_time::time_duration) == 8, "expected 8-byte time_durations!");

extern "C" {

BSA_DLLEXPORT
bool FORA_clib_TimeDurationIsNegative(
            const TimeDuration& timeDuration
            )
    {
    return timeDuration.posix_time().is_negative();
    }

BSA_DLLEXPORT
bool FORA_clib_TimeDurationLessThanTimeDuration(
            const TimeDuration& inTimeDurationLeft,
            const TimeDuration& inTimeDurationRight
            )
    {
    return inTimeDurationLeft < inTimeDurationRight;
    }

BSA_DLLEXPORT
bool FORA_clib_TimeDurationGreaterThanTimeDuration(
            const TimeDuration& inTimeDurationLeft,
            const TimeDuration& inTimeDurationRight
            )
    {
    return inTimeDurationLeft > inTimeDurationRight;
    }

BSA_DLLEXPORT
bool FORA_clib_TimeDurationLessThanEqualsTimeDuration(
            const TimeDuration& inTimeDurationLeft,
            const TimeDuration& inTimeDurationRight
            )
    {
    return inTimeDurationLeft <= inTimeDurationRight;
    }

BSA_DLLEXPORT
bool FORA_clib_TimeDurationGreaterThanEqualsTimeDuration(
            const TimeDuration& inTimeDurationLeft,
            const TimeDuration& inTimeDurationRight
            )
    {
    return inTimeDurationLeft >= inTimeDurationRight;
    }

BSA_DLLEXPORT
bool FORA_clib_TimeDurationEqualsTimeDuration(
            const TimeDuration& inTimeDurationLeft,
            const TimeDuration& inTimeDurationRight
            )
    {
    return inTimeDurationLeft == inTimeDurationRight;
    }

BSA_DLLEXPORT
int64_t FORA_clib_hours(const TimeDuration& inTimeDuration)
    {
    return inTimeDuration.hours();
    }

BSA_DLLEXPORT
int64_t FORA_clib_minutes(const TimeDuration& inTimeDuration)
    {
    return inTimeDuration.minutes();
    }

BSA_DLLEXPORT
int64_t FORA_clib_seconds(const TimeDuration& inTimeDuration)
    {
    return inTimeDuration.seconds();
    }

BSA_DLLEXPORT
int64_t FORA_clib_totalSeconds(const TimeDuration& inTimeDuration)
    {
    return inTimeDuration.totalSeconds();
    }

BSA_DLLEXPORT
int64_t FORA_clib_totalMilliseconds(const TimeDuration& inTimeDuration)
    {
    return inTimeDuration.totalMilliseconds();
    }

BSA_DLLEXPORT
int64_t FORA_clib_totalMicroseconds(const TimeDuration& inTimeDuration)
    {
    return inTimeDuration.totalMicroseconds();
    }

BSA_DLLEXPORT
ReturnValue<TimeDuration> FORA_clib_TimeDurationTimesInteger(
                            const TimeDuration& inTimeDuration,
                            int64_t i
                            )
    {
	return slot0(inTimeDuration * i);
    }

BSA_DLLEXPORT
ReturnValue<TimeDuration> FORA_clib_TimeDurationDividedByInteger(
                            const TimeDuration& inTimeDuration,
                            int64_t i
                            )
    {
    return slot0(inTimeDuration / i);
    }

BSA_DLLEXPORT
ReturnValue<TimeDuration> FORA_clib_TimeDurationMinusTimeDuration(
                            const TimeDuration& inTimeDurationLeft,
                            const TimeDuration& inTimeDurationRight
                            )
    {
    return slot0(inTimeDurationLeft - inTimeDurationRight);
    }

BSA_DLLEXPORT
ReturnValue<TimeDuration> FORA_clib_TimeDurationPlusTimeDuration(
                            const TimeDuration& inTimeDurationLeft,
                            const TimeDuration& inTimeDurationRight
                            )
    {
    return slot0(inTimeDurationLeft + inTimeDurationRight);
    }

BSA_DLLEXPORT
ReturnValue<TimeDuration> FORA_clib_minusTimeDuration(const TimeDuration& inTimeDuration)
    {
    return slot0(inTimeDuration * -1);
    }

BSA_DLLEXPORT
ReturnValue<TimeDuration, ImplValContainer> FORA_clib_TimeDurationFromMicroseconds(
		int64_t inMicrosec
		)
    {
    return slot0(TimeDuration::fromMicroseconds(inMicrosec));
    }

BSA_DLLEXPORT
int64_t FORA_clib_fractionalSeconds(const TimeDuration& inTimeDuration)
    {
    return inTimeDuration.fractionalSeconds();
    }

BSA_DLLEXPORT
int64_t FORA_clib_TimeDuration_numFractionalDigits()
    {
    return boost::posix_time::time_duration::num_fractional_digits();
    }

BSA_DLLEXPORT
ReturnValue<TimeDuration, ImplValContainer> FORA_clib_TimeDurationFromString(
	const String& inStr
	)
    {
    try {
        return slot0(TimeDuration::fromString(inStr));
        }
	catch(std::out_of_range& e)
        {
		return slot1(
			ImplValContainer(
				CSTValue::Tuple(
					ImmutableTreeVector<CSTValue>() +
					CSTValue("bad conversion") +
					CSTValue(inStr) +
					CSTValue(e.what())
					)
				)
			);
        }
	catch(boost::bad_lexical_cast& e)
        {
		return slot1(
			ImplValContainer(
				CSTValue::Tuple(
					ImmutableTreeVector<CSTValue>() +
					CSTValue("bad conversion") +
					CSTValue(inStr) +
					CSTValue(e.what())
					)
				)
			);
        }
    }

BSA_DLLEXPORT
ReturnValue<TimeDuration, ImplValContainer> FORA_clib_TimeDuration_from_raw_double(
                            double inTime
                            )
    {
    try {
        double flooredInTime = floor(inTime);
        int64_t seconds = boost::numeric_cast<int64_t>(flooredInTime);
        int64_t microseconds = boost::numeric_cast<int64_t>(
			(inTime - flooredInTime) *
			1000000
			);

        return slot0(
			TimeDuration::fromSeconds(seconds) +
			TimeDuration::fromMicroseconds(microseconds)
			);
        }
	catch(boost::numeric::negative_overflow& e)
        {
		return slot1(
			ImplValContainer(
				CSTValue::Tuple(
					ImmutableTreeVector<CSTValue>() +
					CSTValue("bad conversion") +
					CSTValue(inTime) +
					CSTValue(e.what())
					)
				)
			);
        }
	catch(boost::numeric::positive_overflow& e)
        {
		return slot1(
			ImplValContainer(
				CSTValue::Tuple(
					ImmutableTreeVector<CSTValue>() +
					CSTValue("can't convert ") +
					CSTValue(inTime) +
					CSTValue(e.what())
					)
				)
			);
        }
	catch(boost::numeric::bad_numeric_cast& e)
        {
		return slot1(
			ImplValContainer(
				CSTValue::Tuple(
					ImmutableTreeVector<CSTValue>() +
					CSTValue("can't convert ") +
					CSTValue(inTime) +
					CSTValue(e.what())
					)
				)
			);
        }
    }

}

class TimeDurationAxioms {
public:

		TimeDurationAxioms()
			{
			AxiomGroups("TimeDuration") += LibcallAxiomGroup::create(
				JOVT() +
					CSTValue(JOV::OfType(Type::TimeDuration())) +
					"Call" +
					JOV::OfType(Type::String()) +
                    JOVTE::NoExtras(),
				ReturnSlots() +
					ReturnSlot::Normal(JOV::OfType(Type::TimeDuration())) +
					ReturnSlot::Exception(JOV()),
				&FORA_clib_TimeDurationFromString,
				emptyTreeVec() + (uword_t)2
				);

             AxiomGroups("TimeDuration") +=
				 LibcallAxiomGroup::create(
					 JOVT() +
						 "TimeDurationFromString" +
						 "Call" +
						 JOV::OfType(Type::String()),
					 ReturnSlots() +
						 ReturnSlot::Normal(JOV::OfType(Type::TimeDuration())) +
						 ReturnSlot::Exception(JOV()),
					 &FORA_clib_TimeDurationFromString,
					 emptyTreeVec() + (uword_t)2
					 )
                ;

			AxiomGroups("TimeDuration") +=
				LibcallAxiomGroup::create(
					JOVT() +
						"TimeDurationFromFloat" +
						"Call" +
						JOV::OfType(Type::Float(64)) +
						JOVTE::NoExtras(),
					ReturnSlots() +
						ReturnSlot::Normal(JOV::OfType(Type::TimeDuration())) +
						ReturnSlot::Exception(JOV()),
					&FORA_clib_TimeDuration_from_raw_double,
					ImmutableTreeVector<uword_t>() + 2
					)
				;

			AxiomGroups("TimeDuration") +=
				LibcallAxiomGroup::create(
					JOVT() +
                        JOV::Constant(CSTValue(JOV::OfType(Type::TimeDuration()))) +
                        "Call" +
                        JOV::OfType(Type::Float(64)) +
                        JOVTE::NoExtras(),
					ReturnSlots() +
						ReturnSlot::Normal(JOV::OfType(Type::TimeDuration())) +
						ReturnSlot::Exception(JOV()),
					&FORA_clib_TimeDuration_from_raw_double,
					ImmutableTreeVector<uword_t>() + 2
					)
				;

            AxiomGroups("TimeDuration") +=
                LibcallAxiomGroup::create(
                    JOVT() +
                        JOV::Constant(CSTValue(JOV::OfType(Type::TimeDuration()))) +
                        "Member" +
                        "numFractionalDigits_" +
                        JOVTE::NoExtras(),
                    ReturnSlots() + JOV::OfType(Type::Integer(64, true)),
                    &FORA_clib_TimeDuration_numFractionalDigits,
                    ImmutableTreeVector<uword_t>()
                    )
                ;

			AxiomGroups("TimeDuration") +=
				LibcallAxiomGroup::create(
					JOVT() +
                        JOV::OfType(Type::TimeDuration()) +
                        "Member" +
                        "fractionalSeconds_" +
                        JOVTE::NoExtras(),
					ReturnSlots() + JOV::OfType(Type::Integer(64, true)),
					&FORA_clib_fractionalSeconds,
					ImmutableTreeVector<uword_t>() + 0
					)
				;

			AxiomGroups("TimeDuration") +=
				LibcallAxiomGroup::create(
					JOVT() +
                        JOV::OfType(Type::TimeDuration()) +
                        "Member" +
                        "hours_" +
                        JOVTE::NoExtras(),
					ReturnSlots() + JOV::OfType(Type::Integer(64, true)),
					&FORA_clib_hours,
					ImmutableTreeVector<uword_t>() + 0
					)
				;

			AxiomGroups("TimeDuration") +=
				LibcallAxiomGroup::create(
					JOVT() +
                        JOV::OfType(Type::TimeDuration()) +
                        "Member" +
                        "minutes_" +
                        JOVTE::NoExtras(),
					ReturnSlots() + JOV::OfType(Type::Integer(64, true)),
					&FORA_clib_minutes,
					ImmutableTreeVector<uword_t>() + 0
					)
				;

			AxiomGroups("TimeDuration") +=
				LibcallAxiomGroup::create(
					JOVT() +
                        JOV::OfType(Type::TimeDuration()) +
                        "Member" +
                        "seconds_" +
                        JOVTE::NoExtras(),
					ReturnSlots() + JOV::OfType(Type::Integer(64, true)),
					&FORA_clib_seconds,
					ImmutableTreeVector<uword_t>() + 0
					)
				;

			AxiomGroups("TimeDuration") +=
				LibcallAxiomGroup::create(
					JOVT() +
                        JOV::OfType(Type::TimeDuration()) +
                        "Member" +
                        "totalSeconds_" +
                        JOVTE::NoExtras(),
					ReturnSlots() + JOV::OfType(Type::Integer(64, true)),
					&FORA_clib_totalSeconds,
					ImmutableTreeVector<uword_t>() + 0
					)
				;

			AxiomGroups("TimeDuration") +=
				LibcallAxiomGroup::create(
					JOVT() +
                        JOV::OfType(Type::TimeDuration()) +
                        "Member" +
                        "totalMilliseconds_" +
                        JOVTE::NoExtras(),
					ReturnSlots() + JOV::OfType(Type::Integer(64, true)),
					&FORA_clib_totalMilliseconds,
					ImmutableTreeVector<uword_t>() + 0
					)
				;

			AxiomGroups("TimeDuration") +=
				LibcallAxiomGroup::create(
					JOVT() +
                        JOV::OfType(Type::TimeDuration()) +
                        "Member" +
                        "totalMicroseconds_" +
                        JOVTE::NoExtras(),
					ReturnSlots() + JOV::OfType(Type::Integer(64, true)),
					&FORA_clib_totalMicroseconds,
					ImmutableTreeVector<uword_t>() + 0
					)
				;

			AxiomGroups("TimeDuration") +=
				LibcallAxiomGroup::create(
					JOVT() +
                        JOV::OfType(Type::TimeDuration()) +
                        "Member" +
                        "isNegative_" +
                        JOVTE::NoExtras(),
					ReturnSlots() + JOV::OfType(Type::Integer(1, false)),
					&FORA_clib_TimeDurationIsNegative,
					ImmutableTreeVector<uword_t>() + 0
					)
				;

            AxiomGroups("TimeDuration") +=
                LibcallAxiomGroup::create(
                    JOVT() +
                        JOV::OfType(Type::TimeDuration()) +
                        "Operator" +
                        "/" +
                        JOV::OfType(Type::Integer(64, true)) +
                        JOVTE::NoExtras(),
                    ReturnSlots() + JOV::OfType(Type::TimeDuration()),
                    &FORA_clib_TimeDurationDividedByInteger,
                    ImmutableTreeVector<uword_t>() + 0 + 3
                    )
                ;

            AxiomGroups("TimeDuration") +=
                LibcallAxiomGroup::create(
                    JOVT() +
                        JOV::OfType(Type::TimeDuration()) +
                        "Operator" +
                        "-" +
                        JOV::OfType(Type::TimeDuration()) +
                        JOVTE::NoExtras(),
                    ReturnSlots() + JOV::OfType(Type::TimeDuration()),
                    &FORA_clib_TimeDurationMinusTimeDuration,
                    ImmutableTreeVector<uword_t>() + 0 + 3
                    )
                ;

            AxiomGroups("TimeDuration") +=
                LibcallAxiomGroup::create(
                    JOVT() +
                        JOV::OfType(Type::TimeDuration()) +
                        "Operator" +
                        "+" +
                        JOV::OfType(Type::TimeDuration()) +
                        JOVTE::NoExtras(),
                    ReturnSlots() + JOV::OfType(Type::TimeDuration()),
                    &FORA_clib_TimeDurationPlusTimeDuration,
                    ImmutableTreeVector<uword_t>() + 0 + 3
                    )
                ;

            AxiomGroups("TimeDuration") +=
                LibcallAxiomGroup::create(
                    JOVT() +
                        JOV::OfType(Type::TimeDuration()) +
                        "Operator" +
                        "<" +
                        JOV::OfType(Type::TimeDuration()) +
                        JOVTE::NoExtras(),
                    ReturnSlots() + JOV::OfType(Type::Integer(1, false)),
                    &FORA_clib_TimeDurationLessThanTimeDuration,
                    ImmutableTreeVector<uword_t>() + 0 + 3
                    )
                ;

            AxiomGroups("TimeDuration") +=
                LibcallAxiomGroup::create(
                    JOVT() +
                        JOV::OfType(Type::TimeDuration()) +
                        "Operator" +
                        ">" +
                        JOV::OfType(Type::TimeDuration()) +
                        JOVTE::NoExtras(),
                    ReturnSlots() + JOV::OfType(Type::Integer(1, false)),
                    &FORA_clib_TimeDurationGreaterThanTimeDuration,
                    ImmutableTreeVector<uword_t>() + 0 + 3
                    )
                ;

            AxiomGroups("TimeDuration") +=
                LibcallAxiomGroup::create(
                    JOVT() +
                        JOV::OfType(Type::TimeDuration()) +
                        "Operator" +
                        "<=" +
                        JOV::OfType(Type::TimeDuration()) +
                        JOVTE::NoExtras(),
                    ReturnSlots() + JOV::OfType(Type::Integer(1, false)),
                    &FORA_clib_TimeDurationLessThanEqualsTimeDuration,
                    ImmutableTreeVector<uword_t>() + 0 + 3
                    )
                ;

            AxiomGroups("TimeDuration") +=
                LibcallAxiomGroup::create(
                    JOVT() +
                        JOV::OfType(Type::TimeDuration()) +
                        "Operator" +
                        ">=" +
                        JOV::OfType(Type::TimeDuration()) +
                        JOVTE::NoExtras(),
                    ReturnSlots() + JOV::OfType(Type::Integer(1, false)),
                    &FORA_clib_TimeDurationGreaterThanEqualsTimeDuration,
                    ImmutableTreeVector<uword_t>() + 0 + 3
                    )
                ;

            AxiomGroups("TimeDuration") +=
                LibcallAxiomGroup::create(
                    JOVT() +
                        JOV::OfType(Type::TimeDuration()) +
                        "Operator" +
                        "==" +
                        JOV::OfType(Type::TimeDuration()) +
                        JOVTE::NoExtras(),
                    ReturnSlots() + JOV::OfType(Type::Integer(1, false)),
                    &FORA_clib_TimeDurationEqualsTimeDuration,
                    ImmutableTreeVector<uword_t>() + 0 + 3
                    )
                ;

            AxiomGroups("TimeDuration") +=
                LibcallAxiomGroup::create(
                    JOVT() +
                        JOV::OfType(Type::TimeDuration()) +
                        "LeftOperator" +
                        "-" +
                        JOVTE::NoExtras(),
                    ReturnSlots() + JOV::OfType(Type::TimeDuration()),
                    &FORA_clib_minusTimeDuration,
                    ImmutableTreeVector<uword_t>() + 0
                    )
                ;

             AxiomGroups("TimeDuration") +=
                LibcallAxiomGroup::create(
                    JOVT() +
                        "TimeDurationFromMicroseconds" +
                        "Call" +
                        JOV::OfType(Type::Integer(64, true)),
					ReturnSlots() +
		                ReturnSlot::Normal(JOV::OfType(Type::TimeDuration())) +
		                ReturnSlot::Exception(JOV()),
                    &FORA_clib_TimeDurationFromMicroseconds,
                    emptyTreeVec() + (uword_t)2
                    )
                ;

			}


};

TimeDurationAxioms timeDurationAxioms;


