/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/
#ifndef FORA_AxiomGroupInterpreterCache_hppml_
#define FORA_AxiomGroupInterpreterCache_hppml_

#include <vector>
#include <boost/shared_ptr.hpp>

class ImplVal;

template<class T>
class Nullable;

class Symbol;

class JudgmentOnValueTuple;

namespace Fora {

class ApplyArgFrame;

}

/*************
AxiomGroupInterpreterCache

An interface for managing the interpreter's ability to cache the specific
axiom entrypoints that it needs.

Some AxiomGroups don't actually produce an axiom for every JOVT that their
signature covers.  As an example, we might have an axiom for

	({Integer}, `Operator, `+, {Integer})

that only produces an axiom if the types of the 1st and 4th element are known.
This is fine since for any given operation we always know the type. But the
interpreter will need to be able to quickly determine which axiom it should
use.

AxiomGroupInterpreterCache allows an axiom group to specify a custom
implementation that handles this problem.  Clients hand it

	Fora::ApplyArgFrame

for it to search for. If it can't find it, the client produces a particular
JOVT and hands it back to the object along with the payload (a void*) which
the AGIC caches for next time.

In particular, its common that we cache only based on a couple of types, in
which case our implementation can use a map<pair<hash,hash>, void*> which is
significantly faster than using a more generic JOVT tree
*****************/

class AxiomGroupInterpreterCache {
public:

		virtual	void*	lookup(const Fora::ApplyArgFrame& data) = 0;

		virtual void	addToCache(	const JudgmentOnValueTuple& jovt,
									void* payload
									)= 0;

		virtual ~AxiomGroupInterpreterCache() {};

		//get a cache based on type of the first argument. Remaining args must be *args
		static boost::shared_ptr<AxiomGroupInterpreterCache> typeOfFirstEltCache(void);

		//get a simple cache - only one entry is allowed
		static boost::shared_ptr<AxiomGroupInterpreterCache> simpleCache(void);

		//get a generic cache based on a judgment tree rule. Slow, but should work...
		static boost::shared_ptr<AxiomGroupInterpreterCache> genericCache(void);
};

#endif

