/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/
#include "Vector_AppendAxiom.hppml"
#include "../Vector/VectorUtilities.hpp"
#include "../VectorDataManager/VectorDataManager.hppml"
#include "../Core/ExecutionContext.hppml"
#include "../../core/UnitTest.hpp"
#include "../../core/threading/CallbackScheduler.hppml"
#include "../Core/MemoryPool.hpp"
#include "../Core/Type.hppml"
#include "../TypedFora/ABI/VectorHandle.hpp"
#include "../TypedFora/ABI/VectorRecord.hpp"

using TypedFora::Abi::VectorRecord;

BOOST_AUTO_TEST_CASE( test_FORA_Axioms_Vector )
{

	VectorDataManager::pointer_type managerPtr;
	PolymorphicSharedPtr<CallbackScheduler> scheduler(CallbackScheduler::singletonForTesting());
	managerPtr.reset(new VectorDataManager(scheduler, 32 * 1024));

	//homogenous vectors in a leaf
		{
		ImplValContainer vec =
			createFORAVector(
				emptyTreeVec() +
					ImplValContainer(CSTValue(1)) +
					ImplValContainer(CSTValue(2)) +
					ImplValContainer(CSTValue(3)) +
					ImplValContainer(CSTValue(4)) +
					ImplValContainer(CSTValue(5)) +
					ImplValContainer(CSTValue(6)) +
					ImplValContainer(CSTValue(7)),
				MemoryPool::getFreeStorePool(),
				hash_type()
				);

		BOOST_CHECK_EQUAL(vec.getReference().cast<VectorRecord>().size(), 7);
		}

	//nonhomogenous vectors
		{
		ImplValContainer vec =
			createFORAVector(
				emptyTreeVec() +
					ImplValContainer(CSTValue(1)) +
					ImplValContainer(CSTValue(2)) +
					ImplValContainer(CSTValue(3)) +
					ImplValContainer(CSTValue("4")) +
					ImplValContainer(CSTValue(5)) +
					ImplValContainer(CSTValue(6)) +
					ImplValContainer(CSTValue(7)),
				MemoryPool::getFreeStorePool(),
				hash_type()
				);

		BOOST_CHECK_EQUAL(vec.getReference().cast<VectorRecord>().size(), 7);
		}

}



BOOST_AUTO_TEST_CASE( test_FORA_Axioms_Vector_CreateVector )
{
	PolymorphicSharedPtr<CallbackScheduler> scheduler(CallbackScheduler::singletonForTesting());
	VectorDataManager::pointer_type manager(
		new VectorDataManager(scheduler, 100*1024)
		);

	Fora::Interpreter::ExecutionContext context(manager);

	Ufora::threading::ScopedThreadLocalContext<Fora::Interpreter::ExecutionContext> contextSetter(context);

	//create a homogenous vector
	ImplValContainer vec =
		createFORAVector(
			emptyTreeVec() +
				ImplValContainer(CSTValue(1)) +
				ImplValContainer(CSTValue(2)) +
				ImplValContainer(CSTValue(3)) +
				ImplValContainer(CSTValue(4)) +
				ImplValContainer(CSTValue(5)) +
				ImplValContainer(CSTValue(6)) +
				ImplValContainer(CSTValue(7)),
			context.getMemoryPool(),
			hash_type()
			);

	//destroy it
	vec = ImplValContainer();

	//create a non-homogenous one
	vec =
		createFORAVector(
			emptyTreeVec() +
				ImplValContainer(CSTValue(1)) +
				ImplValContainer(CSTValue("2")) +
				ImplValContainer(CSTValue(3)) +
				ImplValContainer(CSTValue("4")) +
				ImplValContainer(CSTValue(5)) +
				ImplValContainer(CSTValue("6")) +
				ImplValContainer(CSTValue(7)),
			context.getMemoryPool(),
			hash_type()
			);

	//destroy it
	vec = ImplValContainer();

}

BOOST_AUTO_TEST_CASE( test_FORA_Axioms_Vector_appendVector )
	{
	PolymorphicSharedPtr<CallbackScheduler> scheduler(CallbackScheduler::singletonForTesting());
	VectorDataManager::pointer_type manager(
		new VectorDataManager(scheduler, 100*1024)
		);

	Fora::Interpreter::ExecutionContext context(manager);

	//make sure that the axiom code knows what ExecutionContext its hooked up to
	Ufora::threading::ScopedThreadLocalContext<Fora::Interpreter::ExecutionContext> contextSetter(context);

	//verify that the appendToVector function does what we think it does
	VectorRecord vec;
	for (int64_t k = 0; k < 10; k++)
		vec = vec.append(
			context.getMemoryPool(),
			ImplValContainer((k % 2 ? CSTValue(k) : CSTValue((float)k)).getReference()),
			&*manager,
			boost::bind(&Fora::Interpreter::ExecutionContext::newVectorHash, &context)
			);

	VectorRecord vec2 = vec.paged(context.getMemoryPool(), &*manager);
	}

//A test that builds vectors of vectors and verifies that they teardown correctly
//uses VectorDataManager to isolate our vector client code
BOOST_AUTO_TEST_CASE( test_FORA_Axioms_Vector_appendVectorVectors_Simple )
	{
	PolymorphicSharedPtr<CallbackScheduler> scheduler(CallbackScheduler::singletonForTesting());
	VectorDataManager::pointer_type manager(
		new VectorDataManager(scheduler, 32 * 1024)
		);

	Fora::Interpreter::ExecutionContext context(manager);

	//make sure that the axiom code knows what ExecutionContext its hooked up to
	Ufora::threading::ScopedThreadLocalContext<Fora::Interpreter::ExecutionContext> contextSetter(context);

	//verify that the appendToVector function does what we think it does
	ImplValContainer eltVec =
		createFORAVector(
			emptyTreeVec() +
				ImplValContainer(CSTValue(1)) +
				ImplValContainer(CSTValue(2)) +
				ImplValContainer(CSTValue(3)) +
				ImplValContainer(CSTValue(4)) +
				ImplValContainer(CSTValue(5)) +
				ImplValContainer(CSTValue(6)) +
				ImplValContainer(CSTValue(7)),
			context.getMemoryPool(),
			hash_type()
			);

	BOOST_CHECK(eltVec.cast<VectorRecord>().unpagedPortion().size() != 0);
	BOOST_CHECK_EQUAL(eltVec.cast<VectorRecord>().size(), 7);

	VectorRecord vec;
	for (long k = 0; k < 30; k++)
		vec = vec.append(
			context.getMemoryPool(),
			eltVec.getReference(),
			&*manager,
			boost::bind(&Fora::Interpreter::ExecutionContext::newVectorHash, &context)
			);
	}

//A test that builds vectors of vectors and verifies that they teardown correctly
BOOST_AUTO_TEST_CASE( test_FORA_Axioms_Vector_appendVectorVectors )
	{
	PolymorphicSharedPtr<CallbackScheduler> scheduler(CallbackScheduler::singletonForTesting());
	VectorDataManager::pointer_type manager(
		new VectorDataManager(scheduler, 100*1024)
		);

	Fora::Interpreter::ExecutionContext context(manager);

	//make sure that the axiom code knows what ExecutionContext its hooked up to
	Ufora::threading::ScopedThreadLocalContext<Fora::Interpreter::ExecutionContext> contextSetter(context);

	//verify that the appendToVector function does what we think it does
	ImplValContainer eltVec =
		createFORAVector(
			emptyTreeVec() +
				ImplValContainer(CSTValue(1)) +
				ImplValContainer(CSTValue(2)) +
				ImplValContainer(CSTValue(3)) +
				ImplValContainer(CSTValue(4)) +
				ImplValContainer(CSTValue(5)) +
				ImplValContainer(CSTValue(6)) +
				ImplValContainer(CSTValue(7)),
			context.getMemoryPool(),
			hash_type()
			);

	BOOST_CHECK(eltVec.cast<VectorRecord>().unpagedPortion().size() != 0);
	BOOST_CHECK_EQUAL(eltVec.cast<VectorRecord>().size(), 7);

	VectorRecord vec;
	for (long k = 0; k < 30; k++)
		vec = vec.append(
			context.getMemoryPool(),
			eltVec,
			&*manager,
			boost::bind(&Fora::Interpreter::ExecutionContext::newVectorHash, &context)
			);
	}



