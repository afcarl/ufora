/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/
#ifndef FORA_SimpleAxiom_hppml_
#define FORA_SimpleAxiom_hppml_

#include "Axiom.hppml"
#include "AxiomGroup.hppml"

//Simple implementation of an axiom that always expands to the same thing
class SimpleAxiomGroup : public AxiomGroup {
public:
		SimpleAxiomGroup(const Axiom& a, axiom_signature_to_joa_function_ptr inPtr = 0) :
				AxiomGroup(a.signature()),
				mJOAFunctionPtr(inPtr)
			{
			mAxiom = a;

			if (mAxiom.isNative())
				mAxiomJOA = AxiomJOA::Native(mAxiom.getNative().resultSignature());
			else
				mAxiomJOA = AxiomJOA::Expands();
			}
		Nullable<Axiom> axiom(TypedFora::Compiler& c, const JudgmentOnValueTuple& s)
			{
			return null() << mAxiom;
			}
		Nullable<AxiomJOA>	axiomJOA(const JudgmentOnValueTuple& s)
			{
			if (mJOAFunctionPtr)
				return mJOAFunctionPtr(s);
			else
				return null() << mAxiomJOA;
			}
private:
		Axiom									mAxiom;
		AxiomJOA 								mAxiomJOA;
		axiom_signature_to_joa_function_ptr		mJOAFunctionPtr;
};


#endif

