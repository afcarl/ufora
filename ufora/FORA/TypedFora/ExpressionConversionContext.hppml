/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/
#pragma once

#include "TypedFora.hppml"
#include "../Native/NativeCode.hppml"

namespace TypedFora {

typedef ImmutableTreeSet<pair<NativeVariable, TypedFora::Type> > teardown_set_type;

@type ExpressionConversionContext =
	ImmutableTreeMap<TypedFora::Variable, NativeVariable> variableMap,
	teardown_set_type unnamedVariablesToTearDownOnControlTransfer,
	//subset of the above that are from mapped-in variables
	ImmutableTreeSet<TypedFora::Variable> variablesToTearDownOnControlTransfer,
	ResultSignature resultSignature,
	ImmutableTreeMap<TypedFora::BlockID, TypedFora::Block> blockMap,
	ImmutableTreeSet<NativeVariable> boundVars,
	Nullable<NativeVariable> callbacksVariable

{
public:
	ExpressionConversionContext withCallbacksVar(NativeVariable var) const
		{
		ExpressionConversionContext res = *this;
		res.callbacksVariable() = var;
		return res;
		}

	ExpressionConversionContext withoutTeardowns() const
		{
		return ExpressionConversionContext(
			variableMap(),
			emptyTreeSet(),
			emptyTreeSet(),
			resultSignature(),
			blockMap(),
			boundVars(),
			callbacksVariable()
			);
		}

	ExpressionConversionContext withoutSpecificTeardown(const Variable& var) const
		{
		ExpressionConversionContext tr(*this);

		tr.variablesToTearDownOnControlTransfer() =
			tr.variablesToTearDownOnControlTransfer() - var;

		return tr;
		}

	ExpressionConversionContext withoutSpecificTeardowns(const ImmutableTreeSet<Variable>& vars) const
		{
		ExpressionConversionContext tr(*this);
		tr.variablesToTearDownOnControlTransfer() =
			tr.variablesToTearDownOnControlTransfer() - vars;

		return tr;
		}

	ExpressionConversionContext withNewStackVariable(
			const TypedFora::Variable& inVar,
			const NativeVariable& inNativeVar
			) const
		{
		return ExpressionConversionContext(
			variableMap() + inVar + inNativeVar,
			unnamedVariablesToTearDownOnControlTransfer(),
			variablesToTearDownOnControlTransfer() + inVar,
			resultSignature(),
			blockMap(),
			boundVars() + inNativeVar,
			callbacksVariable()
			);
		}

	ExpressionConversionContext withNewTeardown(
			const TypedFora::Type& inType,
			const NativeVariable& inNativeVar
			) const
		{
		return ExpressionConversionContext(
			variableMap(),
			unnamedVariablesToTearDownOnControlTransfer() + make_pair(inNativeVar, inType),
			variablesToTearDownOnControlTransfer(),
			resultSignature(),
			blockMap(),
			boundVars(),
			callbacksVariable()
			);
		}

	ExpressionConversionContext withNewTeardown(
			const ImmutableTreeSet<TypedFora::Variable>& inVars
			) const
		{
		ExpressionConversionContext tr = *this;

		tr.variablesToTearDownOnControlTransfer() =
			tr.variablesToTearDownOnControlTransfer() + inVars;

		return tr;
		}

	ExpressionConversionContext withNewTeardown(
			const ImmutableTreeVector<pair<NativeVariable, TypedFora::Type> >& inVars
			) const
		{
		ExpressionConversionContext tr = *this;

		for (long k = 0; k < inVars.size();k++)
			tr = tr.withNewTeardown(inVars[k].second, inVars[k].first);

		return tr;
		}

	ExpressionConversionContext withNewTeardown(
			const ImmutableTreeSet<pair<NativeVariable, TypedFora::Type> >& inVars
			) const
		{
		ExpressionConversionContext tr = *this;

		for (long k = 0; k < inVars.size();k++)
			tr = tr.withNewTeardown(inVars[k].second, inVars[k].first);

		return tr;
		}

	ExpressionConversionContext withNewBlockContext(
			const ResultSignature& inSignature,
			const ImmutableTreeMap<TypedFora::BlockID, TypedFora::Block>& inBlockMap
			) const
		{
		return ExpressionConversionContext(
			variableMap(),
			teardown_set_type(),
			emptyTreeSet(),
			inSignature,
			inBlockMap,
			boundVars(),
			callbacksVariable()
			);
		}
};


}

