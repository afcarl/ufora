/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/
#pragma once

#include "TypedFora.hppml"

class NativeType;
class NativeExpression;

namespace TypedFora {

/************ Calculations on Expressions ********/

bool isSimpleExpression(const Expression& inExpression);

//false if the expression might not return to the caller
bool expressionDefinitelyHasValue(const Expression& inExpression);

/************ Graphs and Callables ************/

//determines whether the callable is "Simple", consisting of no real semantic content, just
//type casting and variable manipulation
bool isSimpleCallable(const Callable& inCallable);

NativeExpression mapVariablesInNativeExpressionToCanonicals(
						const NativeExpression& inNativeExpr,
						const ImmutableTreeVector<InlineNativeOperationArg>& varmap
						);

NativeExpression mapVariablesInNativeExpressionToSpecificVars(
						const NativeExpression& inNativeExpr,
						const ImmutableTreeVector<InlineNativeOperationArg>& varmap,
						const ImmutableTreeVector<NativeVariable>& actualVarmap
						);

Callable addDummyArgumentsPassByValueUnowned(
						const Callable& inCallTarget,
						const ImmutableTreeVector<JudgmentOnValue>& inJOVs
						);

//Change the call and result signature of a Callable at Block::entry().
//The call signature must be as specific (or moreso) than the existing signature
//of 'target'. The result signature may be more or less specific.
//If 'fullTypeCheckingOnResult' is set, then we route all outgoing values to the most
//specific value possible.  Otherwise, no checks are performed and results are mapped
//to the most specific continuation that can contain them.
Callable adaptSignatureOfCallable(
						const Callable& target,
						const JudgmentOnValueTuple& inCallSignature,
						const JudgmentOnValueTuple& inDesiredCallSignature,
						const ResultSignature& inResultSignature,
						bool fullTypeCheckingOnResult
						);

Callable adaptSimpleExpressionResultSignatureAllowingUncheckedCasting(
					const Callable& target,
					const ResultSignature& inDesiredResultSignature
					);

Callable graphFromNativeCfgPassingOwned(
						const JOVT& inSignature,
						const JudgmentOnAction& inJoa,
						const NativeCFG& cfg
						);

Callable graphFromNativeCfgPassingOwned(
						const JOVT& inSignature,
						const ImmutableTreeVector<NativeVariable>& inArgumentVariables,
						const JudgmentOnValue& inJov,
						bool isException,
						const NativeExpression& cfg
						);

Callable graphFromNativeCfg(
						const ImmutableTreeVector<Type>& inSignature,
						const JudgmentOnAction& inJoa,
						const RefcountStyle& inResultStyle,
						const NativeCFG& cfg
						);

Expression upgradeNativeExpression(
				const ImmutableTreeVector<Variable>& inVariables,
				const NativeExpression& inExpression,
				const Type& outputType,
				bool isException,
				const ImmutableTreeVector<Expression>& inArguments
				);

/************ Types ****************/

ImmutableTreeVector<Type> sortTypesFromTightestToWidest(ImmutableTreeVector<Type> types);

NativeType nativeTypeForPassingAsOwnedValue(const JudgmentOnValue& inJOV);

Nullable<Type> typeForMergedControlFlowPaths(	const Nullable<Type>& inLeft,
												const Nullable<Type>& inRight
												);

NativeVariable nativeVariableFor(const Variable& inVar);

Type boolType(void);

Type applyNewClassBodyToType(const Type& inType, const Nullable<ClassBody>& inNewClassBody);

JOV applyNewClassBodyToJOV(const JOV& inType, const Nullable<ClassBody>& inNewClassBody);

bool jovAlreadyHasClassBody(const JOV& inType, const Nullable<ClassBody>& inNewClassBody);

/*********** Signatures *******/

ImmutableTreeVector<Expression> passthroughArgsForCallVars(
									const ImmutableTreeVector<Variable>& callVariables
									);

ImmutableTreeVector<Variable>
callVariablesFromSignature(const ImmutableTreeVector<Type>& inSignature);

ResultSignature resultSignatureFromJoaAsOwnedValues(const JudgmentOnAction& inJOA);

ResultSignature resultSignatureFromJoaWithLayoutsFrom(
											const JudgmentOnAction& inJOA,
											const ResultSignature& inResultSignature
											);

ImmutableTreeVector<Type>
transferSignatureFromJovsAsOwnedValues(const ImmutableTreeVector<JudgmentOnValue>& inJovs);

ImmutableTreeVector<Type> callSignatureFromJovtAsUnownedValues(const JOVT& inJovt);

ImmutableTreeVector<Type> callSignatureFromJovt(const JOVT& inJovt, const RefcountStyle& inStyle);

ImmutableTreeVector<Type>
callSignatureFromJovtWithLayoutsFrom(const JOVT& inJovt, const ImmutableTreeVector<Type>& inTypes);

ResultSignature resultSignatureFromTypeAndFlag(
										const Type& outputType,
										bool isException
										);

ResultSignature	resultSignatureFromJoa(	const JudgmentOnAction& inJOA,
										const RefcountStyle& inStyle
										);

ResultSignature	resultSignatureFromJoa(	const JudgmentOnAction& inJOA,
										const RefcountStyle& inStyleNormal,
										const RefcountStyle& inStyleException
										);

bool expressionsMatchCallSignature( const ImmutableTreeVector<Expression>& inExpressions,
									const ImmutableTreeVector<Type>& inSignature
									);

Type singleTypeFromResultSignature(const ResultSignature& inSignature);

bool isSingleTypeResultSignature(const ResultSignature& inSignature);

ImmutableTreeVector<NativeType> nativeReturnTypesForResultSignature(
									const ResultSignature& inSignature
									);

/********** List Conversions *******************/

ImmutableTreeVector<Expression>	expressionsFromMakeTupleArgs(
				const ImmutableTreeVector<MakeTupleArgument>& inArgs
				);

ImmutableTreeVector<Expression>	expressionsFromVariables(
				const ImmutableTreeVector<Variable>& inArgs
				);

ImmutableTreeVector<NativeVariable>	nativeVariablesForForaVariables(
				const ImmutableTreeVector<Variable>& inVariables
				);

ImmutableTreeVector<Variable>	variablesFromJOVs(
				const ImmutableTreeVector<JudgmentOnValue>& inJOVs,
				const RefcountStyle& inStyle
				);

ImmutableTreeVector<Variable>	variablesFromTypes(
				const ImmutableTreeVector<Type>& inTypes
				);

ImmutableTreeVector<Type>	typesFromJOVs(
				const ImmutableTreeVector<JudgmentOnValue>& inJOVs,
				const RefcountStyle& inStyle
				);

bool anyHaveNullType(const ImmutableTreeVector<Expression>& in);

bool anyHaveNullType(const ImmutableTreeVector<MakeTupleArgument>& in);

ImmutableTreeSet<Variable> variableSetFromCallVariables(
								const ImmutableTreeVector<Variable>& inVars
								);

ImmutableTreeVector<Type>
typeListFromExpressions(const ImmutableTreeVector<Expression>& inExpressions);

ImmutableTreeVector<Type>
typeListFromVariables(const ImmutableTreeVector<Variable>& inExpressions);

ImmutableTreeVector<Type>
typeListFromContinuationArgTypes(const ImmutableTreeVector<Continuation>& inContinuations);

ImmutableTreeVector<Type>
typeListFromMakeTupleArguments(const ImmutableTreeVector<MakeTupleArgument>& inExpressions);

ImmutableTreeVector<JudgmentOnValue>
jovListFromTypes(const ImmutableTreeVector<Type>& inTypes);

JOVT
jovtFromTypes(const ImmutableTreeVector<Type>& inTypes);

Expression wrapExpressionInLetBindings(
					const ImmutableTreeVector<pair<Variable, Expression> >& inBindings,
					const Expression& inExpr
					);

template<class Collection>
Collection relaxedList(const Collection& inCollection)
	{
	Collection outCollection;
	for (auto it = inCollection.begin(); it != inCollection.end(); ++it)
		{
		outCollection = outCollection + it->relaxed();
		}
	return outCollection;
	}
/********** Continuations *************/

ImmutableTreeVector<Nullable<Type> >
nullableTypeListFromContinuations(const ImmutableTreeVector<Continuation>& inConts);

bool continuationsMatchResultSignature(
			const ContinuationFrame& inFrame,
			const ResultSignature& inSignature
			);

Nullable<uword_t> pickResultSignatureIndexForType(
						const Type& inType,
						const ResultSignature& inSignature,
						bool isException
						);

Nullable<uword_t> pickSingleResultSignatureIndexForType(
						const Type& inType,
						const ResultSignature& inSignature,
						bool isException
						);

Nullable<uword_t> pickResultSignatureIndexForTypeAllowingUncheckedCasting(
						const Type& inType,
						const ResultSignature& inSignature,
						bool isException
						);

Nullable<uword_t> pickContinuationForType(
						const Type& inType,
						const ImmutableTreeVector<Continuation>& inContinuations
						);

Continuation simplePassthroughContinuation(const Type& inType);

Continuation simpleReturnContinuation(const Type& inType, bool isException);

bool anyContinuationHasAType(const ImmutableTreeVector<Continuation>& inConts);

ContinuationFrame simpleReturnContinuationsForResultSignature(
											const ResultSignature& inSignature
											);

Continuation adaptContinuationToType(const Continuation& inCont, const Type& inNewType);

//generate a continuation for a function returning 'inType' in a larger function with signature
//inSignature, assuming that inSignature is _more_ specific than 'inType', but that there's an
//obvious covering for it.

Continuation generateReturnContinuationInMoreSpecificEnvironment(
									const ResultSignature& inSignature,
									const Type& inType,
									bool isException,
									bool fullTypecheck
									);

//generate a ContinuationFrame adapting 'inSignature' for an environment with continuations
//inOuterSig.  If 'fullTypecheck', then ensure that all values get mapped to the most specific
//value in the outer signature possible.  Otherwise, map them to whatever value you can.
//we assume that all values will be mappable to _one_ of the continuations.
ContinuationFrame adaptReturnContinuationsForResultSignature(
											const ResultSignature& inSignature,
											const ResultSignature& inOuterSig,
											bool fullTypecheck
											);

/******** Interpreter ***********/

ImmutableTreeVector<Type> interpreterCallSignature();

ResultSignature interpreterResultSignature();

}
