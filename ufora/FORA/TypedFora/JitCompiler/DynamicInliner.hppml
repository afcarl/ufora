/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/
#pragma once

class NativeCodeCompiler;
class NativeCFG;
class NativeCFGTable;
class CallSite;
class NativeCallSiteStatistics;

template<class T>
class ImmutableTreeVector;

class FunctionPointerTable;

namespace TypedFora {

class StaticInliner;

class Compiler;

class DynamicInliner {
private:
	StaticInliner& mStaticInliner;

	NativeCallSiteStatistics& mStats;

	NativeCFGTable& mCFGTable;

	TypedFora::Compiler& mRuntime;

	void inlineSites(const ImmutableTreeVector<CallSite>& toInline);

	//Produces a new CFG from that given, with the
	//specified call site inlined.
	NativeCFG inlineCallSiteInCFG(const NativeCFG& callerBody,
                                  const CallSite& site);

public:
	//Constructs a new DynamicInliner.
	DynamicInliner(StaticInliner& inInliner,
				   NativeCallSiteStatistics& inStats,
	               NativeCFGTable& inCfgTable,
	               TypedFora::Compiler& inRuntime
	               );

	//Loops infinitely, polling the NativeCallSiteStatistics
	//instance for call sites and inlining them.
	void runInliningTask();
};

}

