/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/
#pragma once

#include "../../../core/IntegerTypes.hpp"

class NativeExpression;
class NativeVariable;
class JudgmentOnValue;

/*****************

TypedForaValueTypecasting

Utilities to typecast a TypedFora value from one layout to another, e.g. from {String}^ to * or
somesuch, and utilities to determine whether such typecasts are legal.

******************/

namespace TypedFora {

class Type;
class RefcountStyle;

namespace Abi {


//assumes that we're about to destroy 'inExpr', so takes responsibility for
//tearing inExpr down as well.
NativeExpression transferCastExpression(
							const NativeExpression& inExpr,
							const TypedFora::Type& fromType,
							const TypedFora::Type& toType
							);

NativeExpression transferCastExpression(
							const NativeVariable& inExpr,
							const TypedFora::Type& fromType,
							const TypedFora::Type& toType
							);

//produces a new value which we're expected to tear down
NativeExpression castExpression(
							const NativeExpression& inExpr,
							const TypedFora::Type& fromType,
							const TypedFora::Type& toType
							);

NativeExpression castExpression(
							const NativeVariable& inExpr,
							const TypedFora::Type& fromType,
							const TypedFora::Type& toType
							);

NativeExpression typecastForaValue(
					const NativeExpression& e,
					const JudgmentOnValue& currentlyKnown,
					const JudgmentOnValue& toKnown,
					bool isOwned
					);

bool layoutDirectlyCastable(const RefcountStyle& fromStyle, const RefcountStyle& toStyle);

bool typeDirectlyCastable(const Type& inFromFrom, const Type& inTypeTo);

RefcountStyle bestCommonRefcountStyle(const RefcountStyle& style1, const RefcountStyle& style2);

}

}
