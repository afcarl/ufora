/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/
#include "ForaValueArraySlice.hppml"

namespace TypedFora {
namespace Abi {

ForaValueArraySlice ForaValueArraySlice::offsetInputs(int64_t shiftBy) const
	{
	//x * stride + newOffset == (x - s) * stride + oldOffset
	//so, newOffset = oldOffset - s * stride
	return ForaValueArraySlice(
		array(),
		mapping().offsetInputs(shiftBy)
		);
	}

Nullable<int64_t> ForaValueArraySlice::firstValueLoadedInRange(int64_t low, int64_t high)
	{
	if (!array())
		return null();

	if (low < mapping().lowIndex())
		low = mapping().lowIndex();

	if (low >= high)
		return null();

	for (int64_t k = low; k < mapping().highIndex() && k < high; k++)
		if (offsetFor(k))
			return null() << k;

	return null();
	}

Nullable<int64_t> ForaValueArraySlice::firstValueNotLoadedInRange(int64_t low, int64_t high)
	{
	if (low >= high)
		return null();

	if (!array())
		return null() << low;

	if (low < mapping().lowIndex())
		return null() << low;

	if (mapping().highIndex() <= low)
		return null() << low;

	if (high > mapping().highIndex())
		return null() << mapping().highIndex();

	return null();
	}

ForaValueArraySlice ForaValueArraySlice::compose(RangeToIntegerSequence first) const
	{
	return ForaValueArraySlice(array(), mapping().compose(first));
	}

ForaValueArraySlice ForaValueArraySlice::restrictedTo(IntegerRange inputRange) const
	{
	return ForaValueArraySlice(array(), mapping().restrictedTo(inputRange));
	}

uint8_t* ForaValueArraySlice::offsetFor(int64_t index) const
	{
	if (!array() || !mapping().indexIsValid(index))
		return 0;
	return array()->offsetFor(mapping().offsetForIndex(index));
	}

JudgmentOnValue ForaValueArraySlice::jovFor(int64_t index) const
	{
	lassert(array() && mapping().indexIsValid(index));
	return array()->jovFor(mapping().offsetForIndex(index));
	}

ImplValContainer ForaValueArraySlice::operator[](uint32_t index) const
	{
	lassert(mapping().indexIsValid(index));
	return (*array())[mapping().offsetForIndex(index)];
	}

bool ForaValueArraySlice::overlaps(const ForaValueArraySlice& other) const
	{
	return mapping().domainOverlaps(other.mapping());
	}

}
}

void CPPMLPrettyPrint<TypedFora::Abi::ForaValueArraySlice>::prettyPrint(
						CPPMLPrettyPrintStream& s,
						const TypedFora::Abi::ForaValueArraySlice& t
						)
	{
	s << "Slice(mapping=" << t.mapping() << ",array="
		<< (const TypedFora::Abi::ForaValueArray*)t.array() << ")";
	}





