/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/
#pragma once

#include <unistd.h>
#include "../../Core/Type.hppml"
#include "../../Core/MemoryPool.hpp"
#include "../../VectorDataManager/VectorDataMemoryManagerHeap.hppml"
#include "../../../core/PolymorphicSharedPtr.hpp"

class VectorDataMemoryManager;
class VectorDataManager;

namespace TypedFora {
namespace Abi {

class BigVectorHandle;

class BigVectorHandleMemoryPool : public MemoryPool {
public:
	BigVectorHandleMemoryPool(PolymorphicSharedPtr<VectorDataMemoryManager> inMemoryManager);

	~BigVectorHandleMemoryPool();

	std::string stringRepresentation();

	size_t totalBytesAllocatedFromOSExcludingPagelets() const;

	size_t totalBytesAllocatedFromOS() const;

	size_t totalBytesAllocated() const;

	size_t totalBytesFromOSHeldInPagelets() const;

	uint8_t* allocate(size_t inBytes);

	void free(uint8_t* inBytes);

	uint8_t* realloc(uint8_t* inBytes, uword_t inNewBytes);

	bool permitAllocation(size_t inBytes);

	Fora::ShareableMemoryBlockHandle convertPointerToShareableMemoryBlock(uint8_t* inBytes, int64_t bytes);

	uint8_t* importShareableMemoryBlock(const Fora::ShareableMemoryBlockHandle& inHandle);

	void vectorPageMapped(
						boost::shared_ptr<VectorPage> mappedPage,
						boost::shared_ptr<Ufora::threading::Trigger> mappedPageWantsUnmapped
						)
		{
		lassert_dump(false,
			"this should never happen. Mapping vectors in a BigVectorHandleMemoryPool can't work"
			);
		}

	bool isVectorPageMapped(boost::shared_ptr<VectorPage> mappedPage)
		{
		return false;
		}

private:
	mutable boost::recursive_mutex mMutex;

	PolymorphicSharedPtr<VectorDataMemoryManager> mMemoryManager;

	VectorDataMemoryManagerHeap mHeap;
};

}
}



