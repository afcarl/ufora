/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/
#pragma once

#include "PointerArray.hppml"
#include "BigVectorHandleFixedSizeCache.hppml"
#include "SimplePODArray.hppml"
#include "../../VectorDataManager/BigVectorId.hppml"
#include "ForaValueArray.hppml"
#include "../../../core/math/IntegerSequence.hppml"
#include "../../../core/RefcountingPtr.hppml"

class VectorDataManager;
class VectorDataMemoryManager;

namespace Fora {

class PageId;

namespace Interpreter {
class ExecutionContextImpl;
}

}

namespace TypedFora {
namespace Abi {

class ForaValueArray;
class BigVectorLayouts;

class BigVectorHandle;
class BigVectorHandleMappedSlices;


@type BigVectorHandle =
		///fixed size machine code cache
		BigVectorHandleFixedSizeCache fixedSizeCache,
		MemoryPool* memoryPool,
		///runtime access
		BigVectorHandleMappedSlices* mappedSlices,
		Fora::Interpreter::ExecutionContextImpl* executionContext
{
private:
	void initialize(MemoryPool* inMemoryPool,
		Fora::Interpreter::ExecutionContextImpl* parentExecutionContext);

public:
	static BigVectorHandle* create(MemoryPool* memoryPool,
		Fora::Interpreter::ExecutionContextImpl* parentExecutionContext);

	static BigVectorHandle* empty()
		{
		static BigVectorHandle emptySlot;

		return &emptySlot;
		}

	void setSlicestoStatusUnreported();

	bool isTheEmptySlot() const;

	~BigVectorHandle();

	void associateArray(ForaValueArray* array, int64_t offset, IntegerSequence slice, Nullable<Fora::PageId> pageId);

	void associateArray(ForaValueArraySlice slice, Nullable<Fora::PageId> pageId);

	ForaValueArraySlice sliceForOffset(int64_t offset);

	uint8_t* offsetFor(int64_t offset);

	bool hasAnyLoadedArrays() const;

	bool allValuesAreLoadedBetween(int64_t lowInclusive, int64_t highExclusive) const;

	void unmapAllValuesBetween(int64_t low, int64_t high);

	Nullable<int64_t> firstValueNotLoadedInRange(int64_t lowIndex, int64_t highIndex) const;

	Nullable<int64_t> firstValueLoadedInRange(int64_t lowIndex, int64_t highIndex) const;

	void visitAllLoadedArrays(boost::function1<void, ForaValueArraySlice> loadedSliceVisitor);

	//used by generated code when an entry is not found in the bigvector handle. This gives
	//machine code a chance to look values up in 'sortedMappedSlots' without resorting to
	//an expensive cache miss
	static ForaValueArraySlice retrieveSlice(BigVectorHandle* handle, int64_t index);

private:
	ForaValueArraySlice retrieveSlice_(int64_t index);
};



}
}


