/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/
#pragma once

#include "../../../core/Common.hppml"
#include "VectorRecord.hpp"
#include "ForaValueArray.hppml"

namespace TypedFora {
namespace Abi {

class HomogenousDoubleVectorStashRecord;

/***********************************
HomogenousDoubleVectorStash

A datastructure that supports fast cache-local accesses into a vector
of the form

	v[offset1][offset2]

**********************************/

@type HomogenousDoubleVectorStash =
	int64_t offset1Start,
	int64_t offset1Stop,
	int64_t offset2Start,
	int64_t offset2Stop,
	pair<uint8_t*, int64_t>* pointerAndStrideTable,
	HomogenousDoubleVectorStashRecord* stashRecord
{
public:
	static HomogenousDoubleVectorStash withStashRecord(HomogenousDoubleVectorStashRecord* rec)
		{
		return HomogenousDoubleVectorStash(0,0,0,0,nullptr,rec);
		}

	static HomogenousDoubleVectorStash canonicalOutOfBoundsDim1()
		{
		return HomogenousDoubleVectorStash(1,0,0,0,nullptr,nullptr);
		}

	static HomogenousDoubleVectorStash canonicalOutOfBoundsDim2()
		{
		return HomogenousDoubleVectorStash(0,0,1,0,nullptr,nullptr);
		}

	bool dim1IsOutOfBounds() const
		{
		return offset1Stop() < offset1Start();
		}

	bool dim2IsOutOfBounds() const
		{
		return offset2Stop() < offset2Start();
		}

	uint8_t* offsetFor(int64_t offset1, int64_t offset2) const
		{
		if (offset1 < offset1Start() || offset1 >= offset1Stop())
			return nullptr;

		if (offset2 < offset2Start() || offset1 >= offset2Stop())
			return nullptr;

		return nullptr;
		}

	uint8_t* offsetForInBounds(int64_t offset1, int64_t offset2) const
		{
		auto pointerAndStride = pointerAndStrideTable()[offset1];
		return pointerAndStride.first + offset2 * pointerAndStride.second;
		}

	static VectorLoadRequest getLoadRequest(
						HomogenousDoubleVectorStash stash,
						TypedFora::Abi::VectorRecord handle,
						int64_t offset1,
						int64_t offset2,
						//how many bytes into v[offset1] is the second vector record?
						int64_t offsetWithinRecord1
						);

	//create a double-vector-stash, which models v[offset1][offset2]. We attempt to give
	//the largest square region that can be read into in the source vector. If offset1 or
	//offset2 is out of bounds, we return a stash with stop<start in the appropriate region.
	//if we need a vector loaded, we return stop==start.
	static HomogenousDoubleVectorStash updateStash(
						HomogenousDoubleVectorStash currentStashRecord,
						TypedFora::Abi::VectorRecord handle,
						int64_t offset1,
						int64_t offset2,
						//how many bytes into v[offset1] is the second vector record?
						int64_t offsetWithinRecord1
						);
};

}
}

