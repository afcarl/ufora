/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/
#include "MutableVectorHandle.hpp"
#include "../../Core/MemoryPool.hpp"
#include "../../../core/Logging.hpp"

using namespace TypedFora::Abi;

MutableVectorHandle::MutableVectorHandle(
							MemoryPool* inPool,
							JudgmentOnValue inJOV,
							hash_type inVectorHash
							) :
		mOwningMemoryPool(inPool),
		mElementJOV(inJOV),
		mVectorHash(inVectorHash),
		mSize(0),
		mRawDataPtr(0),
		mRefcount(1)
	{
	}

MutableVectorHandle::~MutableVectorHandle()
	{
	if (mRawDataPtr)
		{
		destroyElements(0, mSize);
		mOwningMemoryPool->free(mRawDataPtr);
		}
	}

void MutableVectorHandle::destroyElements(long start, long stop)
	{
	if (mElementJOV.constant())
		{
		lassert(!mRawDataPtr);
		}
		else
	if (mElementJOV.type())
		{
		Type t = *mElementJOV.type();
		size_t stride = t.size();

		t.destroy(mRawDataPtr + start * t.size(), stop - start, t.size());
		}
	else
		{
		ImplValContainer* values = (ImplValContainer*)mRawDataPtr;
		for (long k = start; k < stop;k++)
			values[k].~ImplValContainer();
		}
	}

void MutableVectorHandle::resize(size_t inTotalElements, const ImplValContainer& inValue)
	{
	if (mElementJOV.constant())
		{
		mSize = inTotalElements;
		return;
		}

	if (mSize == inTotalElements)
		return;

	if (inTotalElements < mSize)
		{
		shrink(inTotalElements);
		return;
		}

	lassert(mElementJOV.covers(inValue));

	if (mSize == 0)
		mRawDataPtr = mOwningMemoryPool->allocate(inTotalElements * stride());
	else
		mRawDataPtr = mOwningMemoryPool->realloc(mRawDataPtr, inTotalElements * stride());

	if (mElementJOV.type())
		{
		mElementJOV.type()->initialize(
			mRawDataPtr + mSize * stride(),
			inValue.data(),
			inTotalElements - mSize,
			stride(),
			0
			);
		}
	else
		{
		ImplValContainer* values = (ImplValContainer*)mRawDataPtr;
		for (long k = mSize; k < inTotalElements; k++)
			new (values + k) ImplValContainer(inValue);
		}

	mSize = inTotalElements;
	}

void MutableVectorHandle::shrink(size_t inTotalElements)
	{
	if (mElementJOV.constant())
		{
		mSize = inTotalElements;
		return;
		}

	if (mSize == inTotalElements)
		return;

	lassert(inTotalElements <= mSize);

	destroyElements(inTotalElements, mSize);

	mSize = inTotalElements;

	if (mSize == 0)
		{
		mOwningMemoryPool->free(mRawDataPtr);
		mRawDataPtr = 0;
		}
	else
		mRawDataPtr = mOwningMemoryPool->realloc(mRawDataPtr, mSize * stride());
	}

ImplValContainer MutableVectorHandle::operator[](int index) const
	{
	if (mElementJOV.constant())
		return *mElementJOV.constant();

	if (mElementJOV.type())
		return ImplValContainer(ImplVal(*mElementJOV.type(), mRawDataPtr + index * stride()));
	else
		return ((ImplValContainer*)mRawDataPtr)[index];
	}

void MutableVectorHandle::setItem(int index, const ImplValContainer& inValue)
	{
	lassert(index >= 0 && index < mSize);
	lassert(mElementJOV.covers(inValue));

	if (mElementJOV.constant())
		return;

	if (mElementJOV.type())
		{
		if (inValue.data() == mRawDataPtr + index * stride())
			return;

		mElementJOV.type()->destroy(mRawDataPtr + index * stride());
		mElementJOV.type()->initialize(mRawDataPtr + index * stride(), inValue.data());
		}
	else
		((ImplValContainer*)mRawDataPtr)[index] = inValue;
	}

void MutableVectorHandle::incrementRefcount()
	{
	AO_fetch_and_add_full(&mRefcount, 1);
	}

bool MutableVectorHandle::decrementRefcount()
	{
	if (AO_fetch_and_add_full(&mRefcount, -1) == 1)
		{
		mOwningMemoryPool->destroy(this);
		return true;
		}
	return false;
	}

size_t MutableVectorHandle::stride() const
	{
	if (mElementJOV.type())
		return mElementJOV.type()->size();

	return sizeof(ImplValContainer);
	}

PackedForaValues MutableVectorHandle::packedValues() const
	{
	return PackedForaValues(mElementJOV, mRawDataPtr, mSize,  stride());
	}

PackedForaValues MutableVectorHandle::appendUninitialized(long count)
	{
	if (mSize == 0)
		mRawDataPtr = mOwningMemoryPool->allocate((mSize + count) * stride());
	else
		mRawDataPtr = mOwningMemoryPool->realloc(mRawDataPtr, (mSize + count) * stride());

	PackedForaValues tr(mElementJOV, mRawDataPtr + stride() * mSize, count, stride());

	mSize += count;

	return tr;
	}

void MutableVectorHandle::swapContentsWith(MutableVectorHandle& otherHandle)
	{
	lassert(mVectorHash == otherHandle.mVectorHash);
	lassert(mElementJOV == otherHandle.mElementJOV);
	lassert(mOwningMemoryPool == otherHandle.mOwningMemoryPool);

	std::swap(mRawDataPtr, otherHandle.mRawDataPtr);
	std::swap(mSize, otherHandle.mSize);
	}

namespace TypedFora {
namespace Abi {

ostream&	operator<<(ostream& s, MutableVectorHandle* vd)
	{
	s << "MutableVectorHandle("
		<< prettyPrintString(vd->elementJOV())
		<< " x "
		<< vd->size()
		<< ")";

	return s;
	}

}
}
