/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/
#pragma once

#include "../../Judgment/JudgmentOnValue.hppml"

namespace TypedFora {
namespace Abi {

//the 'packed' memory layout for fora values
//values are packed homogenously (with a stride) into an array. They take
//size based on Type, even if their judgments are constant. If their judgments are
//nonconstant, they become ImplValContainers.
@type PackedForaValues =
		JudgmentOnValue elementJOV,
		uint8_t* data,
		size_t count,
		size_t stride
	{
	public:
		template<class T>
		T* pointerToElement(int index) const
			{
			return (T*)(data() + stride() * index);
			}

		static size_t strideFor(JudgmentOnValue jmt);

		void destroy();

		void initialize(PackedForaValues otherValues);

		static void initialize(PackedForaValues target, PackedForaValues source);
	};

}
}
