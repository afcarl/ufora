/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/
#pragma once

#include "../../Native/NativeTypeFor.hpp"

/******
Functions for manipulating ImplVal objects using NativeCode
******/

class Type;
class CSTValue;
class ImplVal;
class ImplValContainer;
class NativeCFG;
class NativeType;
class NativeExpression;

namespace TypedFora {
namespace Abi {

//the native type for implVal objects
NativeType nativeTypeForImplVal(void);

//makes a NativeCFG that wraps up its argument into an ImplVal.
NativeExpression outputToImplVal(const ::Type& inType, bool increment, const NativeExpression& inExpr);

NativeExpression implValGetAddress(const NativeExpression& inImplValExpr);
NativeExpression implValExtract(const NativeType& t, const NativeExpression& inImplValExpr);
NativeExpression implValGetType(const NativeExpression& inImplValExpr);

NativeExpression 	allocateImplValMem(const ::Type& t, bool isOwned);

NativeExpression constantToImplVal(const ::CSTValue& c);

}
}

template<>
class NativeTypeForImpl<ImplVal> {
public:
	static NativeType get()
		{
		return TypedFora::Abi::nativeTypeForImplVal();
		}
};

template<>
class NativeTypeForImpl<ImplValContainer> {
public:
	static NativeType get()
		{
		return TypedFora::Abi::nativeTypeForImplVal();
		}
};

