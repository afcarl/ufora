/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/
#include <boost/python.hpp>
#include "../../../core/Logging.hpp"
#include "../../../native/Registrar.hpp"
#include "../../../core/python/CPPMLWrapper.hpp"
#include "../../../core/python/ScopedPyThreads.hpp"
#include "../../../core/Clock.hpp"
#include "../../Core/ExecutionContextMemoryPool.hppml"
#include "../../VectorDataManager/VectorDataMemoryManager.hppml"
#include "../../VectorDataManager/Pagelet.hppml"
#include "../../../core/UnitTest.hpp"
#include "../../../core/Logging.hpp"

using namespace TypedFora::Abi;

class MemoryPoolTestWrapper :
		public native::module::Exporter<MemoryPoolTestWrapper> {
public:
		std::string		getModuleName(void)
			{
			return "FORA";
			}

		static int64_t executeMMapAndFreeForTimePeriod(
									PolymorphicSharedPtr<VectorDataMemoryManager> memoryManager,
									double timeLimit,
									long allocationSize,
									bool forceInitializeMemory
									)
			{
			ScopedPyThreads releaseTheGil;

			boost:shared_ptr<ExecutionContextMemoryPool> pool(
				new ExecutionContextMemoryPool(nullptr, memoryManager)
				);

			double t0 = curClock();

			int64_t totalAllocated = 0;

			while (curClock() - t0 < timeLimit)
				{
				uint8_t* data = (uint8_t*) memoryManager->mmapForPool(&*pool, allocationSize);

				long* dataLong = (long*)data;
				long longs = allocationSize / sizeof(long);

				if (forceInitializeMemory)
					for (long k = 0; k < longs;k++)
						dataLong[k] = 0;

				memoryManager->munmapForPool(&*pool, data, allocationSize);

				totalAllocated += allocationSize;
				}

			return totalAllocated;
			}

		static int64_t executeBigVectorHandleAllocationsForTimePeriod(
									PolymorphicSharedPtr<VectorDataMemoryManager> memoryManager,
									double timeLimit,
									long allocationSize
									)
			{
			ScopedPyThreads releaseTheGil;

			boost:shared_ptr<ExecutionContextMemoryPool> pool(
				new ExecutionContextMemoryPool(nullptr, memoryManager)
				);

			double t0 = curClock();

			int64_t totalAllocated = 0;

			while (curClock() - t0 < timeLimit)
				{
				//allocate a megabyte in small chunks
				std::vector<uint8_t*> pointers;
				long allocated = 0;

				while (allocated < allocationSize)
					{
					long bytecount = 1024 * 16;

					uint8_t* p = pool->allocate(bytecount);

					pointers.push_back(p);

					for (long k = 0; k < bytecount; k++)
						p[k] = 0;

					allocated += bytecount;
					}

				totalAllocated += allocated;

				for (auto ptr: pointers)
					pool->free(ptr);
				}

			return totalAllocated;
			}

		static int64_t executeMemoryUpdatesForTimePeriod(
									double timeLimit,
									long allocationSize
									)
			{
			ScopedPyThreads releaseTheGil;

			int64_t totalBytes = 0;

			long* data = (long*)malloc(allocationSize);
			long count = allocationSize / sizeof(long);

			double t0 = curClock();

			while (curClock() - t0 < timeLimit)
				{
				for (long k = 0; k < count; k++)
					data[k] = data[k] + 1;

				totalBytes += allocationSize;
				}

			free(data);

			return totalBytes;
			}

		void exportPythonWrapper()
			{
			using namespace boost::python;

			def("executeMMapAndFreeForTimePeriod",
					&executeMMapAndFreeForTimePeriod);

			def("executeBigVectorHandleAllocationsForTimePeriod",
					&executeBigVectorHandleAllocationsForTimePeriod);

			def("executeMemoryUpdatesForTimePeriod",
					&executeMemoryUpdatesForTimePeriod);
			}
};

//explicitly instantiating the registration element causes the linker to need
//this file
template<>
char native::module::Exporter<
	MemoryPoolTestWrapper>::mEnforceRegistration =
		native::module::ExportRegistrar<
			MemoryPoolTestWrapper>::registerWrapper();

