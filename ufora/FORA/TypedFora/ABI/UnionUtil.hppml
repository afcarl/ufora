/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/
#pragma once

#include <boost/bind.hpp>

class NativeExpression;
class JudgmentOnValue;
class ImplVal;

namespace TypedFora {
namespace Abi {

//iterate over all jovs in the unionJOV and evaluate to 'f(expr, jov)' for whichever one matches
NativeExpression foreachUnionAlternative(
				const JudgmentOnValue& unionJOV,
				const NativeExpression& e,
				boost::function2<NativeExpression, NativeExpression, JudgmentOnValue> toApply
				);

NativeExpression createUnionExpression(
				const JudgmentOnValue& unionJOV,
				const NativeExpression& indexExpression,
				boost::function2<NativeExpression, long, JudgmentOnValue> toApply
				);

long extractUnionIndexFromLiveValue(const JudgmentOnValue& unionJov, void* unionData);

void setUnionIndexInLiveValue(const JudgmentOnValue& unionJOV, void* unionData, long index);

std::pair<JudgmentOnValue, void*> getPointerToUnionValue(const JudgmentOnValue& unionJov, void* unionData, long index);

long pickBestUnionIndex(const JudgmentOnValue& unionJOV, const JudgmentOnValue& valueJOV);

long pickBestUnionIndex(const JudgmentOnValue& unionJOV, const ImplVal& valueJOV);

}
}

