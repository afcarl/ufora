/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/
#pragma once

#include "ForaValueArray.hppml"
#include "ScatteredForaValues.hppml"
#include "../../../core/cppml/MemoizedAlternativePointer.hppml"

namespace TypedFora {
namespace Abi {

typedef MemoizedAlternativePointer<JOV> RawJOV;

class ForaValueArrayImpl : public TypedFora::Abi::ForaValueArray {
public:
	ForaValueArrayImpl(MemoryPool* inOwningMemoryPool);

	ForaValueArrayImpl(MemoryPool* inOwningMemoryPool, size_t maxValueCount);

	ForaValueArrayImpl(const ForaValueArrayImpl& array);

	ForaValueArrayImpl& getImpl();

	const ForaValueArrayImpl& getImpl() const;

	bool allValuesArePOD() const;

	~ForaValueArrayImpl();

	ForaValueArraySpaceRequirements getSpaceRequirements() const;

	ForaValueArraySpaceRequirements getSpaceRequirements(long lowIndex, long highIndex) const;

	void prepareForAppending(const ForaValueArraySpaceRequirements& requirements);

	hash_type hashValues();

	bool isMappable() const;

	size_t size() const;

	bool isWriteable() const;

	void markUnwriteable(bool releaseUnusedMemory);

	void append(const ImplValContainer& inValue);

	void append(const ForaValueArray& inOtherArray, bool targetArrayWillBeWriteable = true);

	void append(const ForaValueArray& inOtherArray, long lowIndex, long highIndex, bool targetArrayWillBeWriteable = true);

	void append(const ForaValueArray& inOtherArray,
				long lowIndex,
				long highIndex,
				boost::function<void (ScatteredForaValues, ScatteredForaValues)> memoryCopyOperation,
				bool targetArrayWillBeWriteable = true
				);

	void append(const JudgmentOnValue& inType, uint8_t* data, uint32_t inCount, uint32_t inStride);

	void append(PackedForaValues values);

	//map every value from "x" to (x,T()) for some type 'T'
	void entuple(Type elementType);

	//assuming every value is of form (x,T) for some type "T", remove that tuple element
	void detuple(Type elementType);

	PackedForaValues appendUninitialized(JudgmentOnValue values, uint32_t inCount);

	ImplValContainer operator[](uint32_t index) const;

	ImplVal getItemRaw(uint32_t index) const;

	uint8_t* offsetFor(uint32_t index) const;

	uint8_t* offsetPlusStrideFor(uint32_t index) const;

	JudgmentOnValue jovFor(uint32_t index) const;

	MemoryPool* getOwningMemoryPool() const;

	void validateInternalState() const;

	void upgradeToFullJovPerValue();

	void upgradeToFullJovPerValue(int64_t values);

	void upgradeToPerValueOffsets();

	void upgradeToPerValueOffsets(int64_t valueCount);

	bool usingJudgmentTable() const;

	uint8_t* getPerValueJudgmentIndices() const;

	size_t judgmentCount() const;

	JudgmentOnValue judgmentTableLookup(uint32_t index) const;

	bool isHomogenous() const;

	bool isHomogenousPodArray() const;

	bool validDataPtr(uint8_t* ptr) const;

	JudgmentOnValue getHomogenousJOV() const;

	//bytes of mDataPtr used by data.
	size_t bytesUsed() const;

	size_t bytesReserved() const;

	bool usingOffsetTable() const;

	uint32_t offsetTableSize() const;

	uint32_t homogenousStride() const;

	JudgmentOnResult currentJor() const;

	void reserveBytes(size_t newMinBytesReserved);

	void fillOutJovIndexTable(std::vector<uint8_t>& outJovIndices, JudgmentOnResult jorLayout) const;

	void prepareForIncomingDataGivenJovs(const std::vector<uint8_t>& jovIndices, JudgmentOnResult jorLayout);

	void visitScatteredValues(
					long indexLow,
					long indexHigh,
					long indexLowInOther,
					const ForaValueArrayImpl& array2,
					boost::function<void (ScatteredForaValues, ScatteredForaValues)> visitor
					);

	void visitScatteredValues(
					long indexLow,
					long indexHigh,
					boost::function<void (ScatteredForaValues)> visitor
					);

//internal methods
	void prepareJudgmentTable(JudgmentOnResult jor, size_t valuesToAllocate);


	void appendHomogenousPodArray(
					const ForaValueArray& inOtherArrayBase,
					long lowIndex,
					long highIndex,
					bool targetArrayWillBeWriteable
					);

	void appendJudgmentsFromArray(
					const ForaValueArrayImpl& inOtherArray,
					long lowIndex,
					long highIndex
					);

	void appendValuesFromArray(
					const ForaValueArrayImpl& inOtherArray,
					long lowIndex,
					long highIndex,
					boost::function<void (ScatteredForaValues, ScatteredForaValues)>
						memoryCopyOperation
					);

	void copyStridedForeignValuesDirectly(
					uint8_t* targetMemory,
					size_t targetStride,
					uint8_t* sourceMemory,
					size_t sourceStride,
					long count
					);

	void expandHomogenousStride(size_t newStride);

	void contractHomogenousStride(size_t newStride);

	void reallocDataPtr(size_t newMinBytesReserved);

	void ensureSpaceForValues(size_t inBytesOfData, size_t inElementCount);

	void initializeForJudgment(const JudgmentOnValue& inJudgment);

	PackedForaValues appendUninitializedHomogenously(JudgmentOnValue elementJOV, uint32_t inCount);

	void resizeOffsetTable(uint32_t inNewSize);

	void resizePerValueJudgments(uint32_t inNewSize);

	size_t mIsWriteable;

	MemoryPool* mOwningMemoryPool;

	uint8_t* mDataPtr;

	//number of bytes reserved in 'mDataPtr'
	size_t mBytesReserved;

	//if nonzero, then a pointer offset table for all the valid packed values.
	uint8_t** mOffsetTablePtr;

	//if mOffsetTablePtr is zero, then values are packed with this spacing. Otherwise, this is
	//the number of offsets allocated
	size_t mPerValueOffsetOrOffsetTableCountAllocated;

	//base pointer for the judgment table. If this field is null, then 'mPerValueJudgments'
	//should be interpreted as a JOV*
	JudgmentOnValue* mJudgmentLookupTable;

	//number of judgments allocated in the judgment table.
	size_t mJudgmentLookupTableSize;

	//if the judgment table is nonempty, then this is a uint8_t*, where each uint8_t represents
	//an offset into that table. Otherwise, it should be interpreted as a JOV* with
	//'mPerValueJudgmentsAllocated' pointers allocated (of which
	//mValueCount are populated). It should only be empty if the pool is homogenous
	void* mPerValueJudgments;

	size_t mPerValueJudgmentsAllocated;

	//total number of values packed into the array so far
	size_t mValueCount;

	mutable JudgmentOnResult *mCurrentJOR;

	mutable size_t mCurrentJORIncludesValuesTo;

	JudgmentOnValue mJOVToUseIfReferencingOneJOV;

	size_t mMappedValuesAreContiguous;

	map<RawJOV, int> mJovToJudgmentTableSlot;

	mutable boost::mutex mCurrentJorMutex;
};
};


}

