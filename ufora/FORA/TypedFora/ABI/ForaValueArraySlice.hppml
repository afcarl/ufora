/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/
#pragma once

#include "../../../core/math/RangeToIntegerSequence.hppml"
#include "../../../core/math/IntegerSequence.hppml"
#include "ForaValueArray.hppml"

namespace TypedFora {
namespace Abi {

class ForaValueArray;

/******************

Models a slice of a ForaValueArray. Given an offset "o" such that

	o >= lowOffset() && o < highOffset()

then you may map into the ForaValueArray with offset

	o * strideInArray() + offsetInArray()

*******************/

@type ForaValueArraySlice =
	TypedFora::Abi::ForaValueArray* array,
	RangeToIntegerSequence mapping
{
public:
	ForaValueArraySlice offsetInputs(int64_t shiftBy) const;

	Nullable<int64_t> firstValueLoadedInRange(int64_t low, int64_t high);

	Nullable<int64_t> firstValueNotLoadedInRange(int64_t low, int64_t high);

	ForaValueArraySlice compose(RangeToIntegerSequence first) const;

	ForaValueArraySlice restrictedTo(IntegerRange inputRange) const;

	bool overlaps(const ForaValueArraySlice& other) const;

	uint8_t* offsetFor(int64_t index) const;

	JudgmentOnValue jovFor(int64_t index) const;

	ImplValContainer operator[](uint32_t index) const;
};

}
}

template<>
class CPPMLPrettyPrint<TypedFora::Abi::ForaValueArraySlice> {
public:
		static void prettyPrint(CPPMLPrettyPrintStream& s, const TypedFora::Abi::ForaValueArraySlice& t);
};





