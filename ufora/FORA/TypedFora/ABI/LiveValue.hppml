/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/
#pragma once

#include "../TypedFora.hppml"
#include "BinaryLayoutStyle.hppml"

class Type;

namespace Fora {
namespace Interpreter {

class RefcountPool;

}
}

namespace TypedFora {
namespace Abi {

@type LiveValue = Type type, void* data {
public:
	void destroy();

	bool isOwned();

	bool isCST();

	bool isUnion();

	bool isConstant();

	bool isTypedData();

	bool isImplval();

	::Type untypedForaType();

	LiveValue extractUnionValue();

	//get the value represented as an implval. If the value is a constant or a union, this
	//will still return a valid object.
	ImplVal getImplval();

	//only legal is 'isImplval' is true
	ImplVal& getReferenceToImplval();

	void transferCast(LiveValue& dest, Fora::Interpreter::RefcountPool* inRefcountPool) const;

	bool canTransferCast(TypedFora::Type targetType);

	void addSelfToRefcountPool(Fora::Interpreter::RefcountPool* pool);
};

void transferCastLiveValue(
		void* dest,
		const TypedFora::Type& destType,
		void* src,
		const TypedFora::Type& srcType,
		Fora::Interpreter::RefcountPool* inRefcountPool
		);

bool canTransferCastValue(void* data, TypedFora::Type valueType, TypedFora::Type targetType);

}
}


