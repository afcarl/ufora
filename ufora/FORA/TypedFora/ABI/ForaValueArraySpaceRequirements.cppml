/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/
#include "ForaValueArraySpaceRequirements.hppml"
#include "PackedForaValues.hppml"
#include "../../../core/math/Largest.hpp"
#include "../../../core/math/Smallest.hpp"

namespace TypedFora {
namespace Abi {

namespace {

size_t maxStride(JudgmentOnResult jor)
	{
	Largest<size_t> stride;
	for (auto jov: jor.vals())
		{
		size_t s = PackedForaValues::strideFor(jov);
		stride.observe(s,s);
		}

	if (stride.largest())
		return *stride.largest();

	return 0;
	}

size_t minStride(JudgmentOnResult jor)
	{
	Smallest<size_t> stride;
	for (auto jov: jor.vals())
		{
		size_t s = PackedForaValues::strideFor(jov);
		stride.observe(s,s);
		}

	if (stride.smallest())
		return *stride.smallest();

	return 0;
	}

}

bool ForaValueArraySpaceRequirements::isHomogenous() const
	{
	return jor().size() == 1;
	}

Nullable<size_t> ForaValueArraySpaceRequirements::strideIfShouldBeEvenlySpaced() const
	{
	return strideIfShouldBeEvenlySpaced(jor());
	}

ForaValueArraySpaceRequirements ForaValueArraySpaceRequirements::empty()
	{
	return ForaValueArraySpaceRequirements();
	}

Nullable<size_t> ForaValueArraySpaceRequirements::strideIfShouldBeEvenlySpaced(JudgmentOnResult jor)
	{
	size_t max = maxStride(jor);

	size_t spread = max - minStride(jor);

	if (spread > sizeof(int64_t))
		return null();

	return null() << max;
	}
}
}

TypedFora::Abi::ForaValueArraySpaceRequirements operator+(
		const TypedFora::Abi::ForaValueArraySpaceRequirements& lhs,
		const TypedFora::Abi::ForaValueArraySpaceRequirements& rhs
		)
	{
	return TypedFora::Abi::ForaValueArraySpaceRequirements(
		lhs.bytesReservedForData() + rhs.bytesReservedForData(),
		lhs.valueCount() + rhs.valueCount(),
		lhs.jor() + rhs.jor()
		);
	}

