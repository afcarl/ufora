/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/
#pragma once

#include "../../Native/NativeCode.hppml"
#include "../../Interpreter/EvalFrame.hpp"
#include "../../Runtime.hppml"

namespace TypedFora {
namespace Abi {

class LiveValue;

/***************
NativeStackFrameWrapper

Helper class for parsing the layout of native stack frames.
***************/

class NativeStackFrameWrapper {
public:
	@type Write = char* target, std::string data;

	NativeStackFrameWrapper(const NativeRuntimeContinuationBase& inStackFramePtr);

	const NativeRuntimeContinuationBase& getContinuation() const { return mStackFramePtr; }

	NativeRuntimeContinuationValueVector getAllContinuations() const;

	const ImmutableTreeVector<NativeContinuationMetadataSerialized>& getMetadata() const;

	const ImmutableTreeVector<NativeType>& getSlotTypes() const;

	void* getSlotData() const;

	//rebuild a value at 'targetData' held in the stack at 'sourceData'
	static char* readStackFrameLayoutToStandardLayout(
					char* standardLayoutPtr,
					char* stackFramePtr,
					const NativeContinuationExpressionSerialized& node
					);

	static LiveValue readStackFrameLayoutToLiveValue(
						std::vector<char>& ioTempStorage,
						NativeContinuationVarMetadataSerialized varMetadata,
						void* rawData
						);

	//copy a value back into the stack at 'targetData' from a real value at 'sourceData'
	static char* pushStandardLayoutIntoStackframe(
					char* standardLayoutPtr,
					char* stackFramePtr,
					const NativeContinuationExpressionSerialized& node
					);

	static char* pushStandardLayoutIntoStackframe(
					char* standardLayoutPtr,
					char* stackFramePtr,
					const NativeContinuationExpressionSerialized& node,
					std::vector<Write>& outWrites
					);

	static void destroyValue(NativeContinuationVarMetadataSerialized varMetadata, void* data);

private:
	static char* reassembleNativeConstantDirectly(const NativeConstant& c, char* targetData);

	static const void* nativeConstantSourceData(const NativeConstant& c);

	static char* reassembleNativeConstant(
						char* targetData,
						NativeConstant constant,
						NativeType subtype,
						long offset
						);

	NativeRuntimeContinuationBase mStackFramePtr;

	ImmutableTreeVector<NativeContinuationMetadataSerialized> mMetadata;

	ImmutableTreeVector<NativeType> mSlotTypes;
};

}
}

