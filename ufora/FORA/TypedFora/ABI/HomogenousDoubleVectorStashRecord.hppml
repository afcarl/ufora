/***************************************************************************
    Copyright 2015 Ufora Inc.

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
****************************************************************************/
#pragma once

#include "../../Core/MemoryPool.hpp"
#include "VectorRecord.hpp"
#include "HomogenousDoubleVectorStash.hppml"

namespace TypedFora {
namespace Abi {

class HomogenousDoubleVectorStashRecord {
public:
    HomogenousDoubleVectorStashRecord(MemoryPool* inPool, const VectorRecord& vector, int64_t offsetWithinFirstVector);

    ~HomogenousDoubleVectorStashRecord();

    //assumes that offset1 and offset2 are in bounds
    void updateStashForOffsets(int64_t offset1, int64_t offset2);

    HomogenousDoubleVectorStash getStash() const;

    bool isAlreadyInBounds(int64_t offset1, int64_t offset2) const
        {
        if (!mPointers)
            return false;

        int64_t vecSize = mVector.size();

        if (offset1 >= -vecSize && offset1 < vecSize)
            {
            auto validRange = mValidRanges[offset1 + vecSize];

            if (offset2 >= validRange.first && offset2 < validRange.second)
                return true;
            }

        return false;
        }

private:
    void mapColumn(int64_t offset1, int64_t offset2);

    MemoryPool* mPool;

    VectorRecord mVector;

    //the byte offset of the second vector within each record
    //contained in the first.
    int64_t mOffsetWithinFirstVector;

    //there are mVector.size() * 2 of these
    std::pair<uint8_t*, int64_t>* mPointers;

    std::pair<int64_t, int64_t>* mValidRanges;

    HomogenousDoubleVectorStash mStash;
};

}
}
