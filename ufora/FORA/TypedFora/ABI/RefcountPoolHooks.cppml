/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/
#include "RefcountPoolHooks.hppml"
#include "ImplValNativeCodeModel.hppml"
#include "NativeLayoutType.hppml"
#include "../../../core/Logging.hpp"
#include "../../Core/ExecutionContext.hppml"
#include "../../Core/RefcountPool.hppml"
#include "../../Primitives/CodeLocation.hppml"
#include "../../Primitives/ExternalFunctionDescription.hppml"
#include "../../Axioms/MutableVectorAxioms.hppml"
#include "../../Vector/MutableVectorRecord.hppml"
#include "../../TypedFora/ABI/VectorRecord.hpp"
#include "../../TypedFora/ABI/VectorRecordCodegen.hppml"
#include "../../TypedFora/ABI/StringCodegen.hppml"
#include "../../Native/NativeExpressionBuilder.hppml"
#include "../../Native/TypedNativeExpression.hppml"
#include "../../Native/TypedNativeLibraryFunction.hpp"
#include "UnionUtil.hppml"
#include <boost/python.hpp>

using Fora::Interpreter::ExecutionContext;
using Fora::Interpreter::RefcountPool;

typedef Type untyped_fora_type;

extern "C" {

BSA_DLLEXPORT
ImplVal FORA_clib_addToRefcountPoolAndReturn_Implval(const ImplVal& val)
	{
	return ExecutionContext::currentExecutionContext()
		->getRefcountPool()->add(val);
	}

BSA_DLLEXPORT
void FORA_clib_addToRefcountPool_String(String val)
	{
	if (val.isEmptyOrPackedIntoPointer())
		return;
	ExecutionContext::currentExecutionContext()->getRefcountPool()->add(val);
	}

BSA_DLLEXPORT
void FORA_clib_addToRefcountPool_JOV(JOV val)
	{
	ExecutionContext::currentExecutionContext()->getRefcountPool()->add(val);
	}

BSA_DLLEXPORT
void FORA_clib_addToRefcountPool_ForaStackTrace(ForaStackTrace val)
	{
	ExecutionContext::currentExecutionContext()->getRefcountPool()->add(val);
	}

BSA_DLLEXPORT
void FORA_clib_addToRefcountPool_Dictionary(Dictionary val)
	{
	ExecutionContext::currentExecutionContext()->getRefcountPool()->add(val);
	}

BSA_DLLEXPORT
void FORA_clib_addToRefcountPool_ExternalFunctionDescriptor(
		ExternalFunctionDescriptor val
		)
	{
	ExecutionContext::currentExecutionContext()->getRefcountPool()->add(val);
	}

BSA_DLLEXPORT
void FORA_clib_addToRefcountPool_Vector(TypedFora::Abi::VectorRecord val)
	{
	ExecutionContext::currentExecutionContext()->getRefcountPool()->add(val);
	}


BSA_DLLEXPORT
void FORA_clib_addToRefcountPool_MutableVectorRecord(
		const MutableVectorRecord& vec
		)
	{
	ExecutionContext::currentExecutionContext()->getRefcountPool()->add(vec);
	}

BSA_DLLEXPORT
void FORA_clib_transferIntoRefcountPool_Implval(const ImplVal& val)
	{
	ExecutionContext::currentExecutionContext()
		->getRefcountPool()->addAlreadyRefcounted(val);
	}

BSA_DLLEXPORT
void FORA_clib_transferIntoRefcountPool_String(String val)
	{
	ExecutionContext::currentExecutionContext()
		->getRefcountPool()->addAlreadyRefcounted(val);
	}

BSA_DLLEXPORT
void FORA_clib_transferIntoRefcountPool_JOV(JOV val)
	{
	ExecutionContext::currentExecutionContext()
		->getRefcountPool()->addAlreadyRefcounted(val);
	}

BSA_DLLEXPORT
void FORA_clib_transferIntoRefcountPool_ForaStackTrace(ForaStackTrace val)
	{
	ExecutionContext::currentExecutionContext()
		->getRefcountPool()->addAlreadyRefcounted(val);
	}

BSA_DLLEXPORT
void FORA_clib_transferIntoRefcountPool_Dictionary(Dictionary val)
	{
	ExecutionContext::currentExecutionContext()
		->getRefcountPool()->addAlreadyRefcounted(val);
	}

BSA_DLLEXPORT
void FORA_clib_transferIntoRefcountPool_ExternalFunctionDescriptor(
		ExternalFunctionDescriptor val
		)
	{
	ExecutionContext::currentExecutionContext()
		->getRefcountPool()->addAlreadyRefcounted(val);
	}

BSA_DLLEXPORT
void FORA_clib_transferIntoRefcountPool_Vector(TypedFora::Abi::VectorRecord val)
	{
	ExecutionContext::currentExecutionContext()->getRefcountPool()
		->addAlreadyRefcounted(val);
	}

BSA_DLLEXPORT
void FORA_clib_transferIntoRefcountPool_MutableVectorRecord(
		const MutableVectorRecord& vec
		)
	{
	ExecutionContext::currentExecutionContext()->getRefcountPool()
		->addAlreadyRefcounted(vec);
	}

}

namespace TypedFora {
namespace Abi {

NativeExpression addToRefcountPoolExpression(
									const ::Type& inType,
									const NativeExpression& inExpr
									)
	{
	NativeExpressionBuilder builder;

	if (inType.size() == 0)
		return NativeExpression::Nothing();

	if (inType.isPOD())
		return NativeExpression::Nothing();

	@match untyped_fora_type(inType)
		-|	JOVAsValue() ->> {
			return
				makeTypedNativeLibraryFunction(
					&FORA_clib_addToRefcountPool_JOV
					)(inExpr)
				.getExpression()
				;
			}
		-|	ExternalFunction() ->> {
			return
				makeTypedNativeLibraryFunction(
					&FORA_clib_addToRefcountPool_ExternalFunctionDescriptor
					)(inExpr)
				.getExpression()
				;
			}
		-|	StackTrace() ->> {
			return
				makeTypedNativeLibraryFunction(
					&FORA_clib_addToRefcountPool_ForaStackTrace
					)(inExpr)
				.getExpression()
				;
			}
		-|	Alternative(altType) ->>  {
			return addToRefcountPoolExpression(altType, inExpr[1]);
			}
		-|	String() ->> {
			return
				makeTypedNativeLibraryFunction(
					&FORA_clib_addToRefcountPool_String
					)(inExpr)
				.getExpression()
				;
			}
		-|	Class(types) ->> {
			return addToRefcountPoolExpression(
				untyped_fora_type::UnnamedTuple(types),
				inExpr
				);
			}
		-|	Tuple(types) ->> {
			NativeExpressionBuilder builder;

			NativeExpression tupleExpr = builder.add(inExpr);

			for (long k = 0; k < types.size();k++)
				builder.add(addToRefcountPoolExpression(types[k], tupleExpr[k]));

			return builder(NativeExpression::Nothing());
			}
		-|	Dictionary(isCST) ->> {
			return
				makeTypedNativeLibraryFunction(
					&FORA_clib_addToRefcountPool_Dictionary
					)(inExpr)
				.getExpression()
				;
			}
		-|	Vector() ->> {
			return makeTypedNativeLibraryFunction(
				&FORA_clib_addToRefcountPool_Vector
				)(inExpr)
				.getExpression();
			}
		-|	MutableVector() ->> {
			NativeExpressionBuilder builder;

			NativeExpression mutableVectorRecordHolderPtr =
				builder.add(
					NativeExpression::Alloc(
						*inExpr.type(),
						1,
						false
						)
					);

			builder.add(
				mutableVectorRecordHolderPtr.store(inExpr)
				);

			return
				builder(
					makeTypedNativeLibraryFunction(
						FORA_clib_addToRefcountPool_MutableVectorRecord
						)(mutableVectorRecordHolderPtr)
					.getExpression()
					);
			}
		-|	_ ->> { }
		;

	return NativeExpression::Nothing();
	}

NativeExpression duplicateIntoRefcountPoolExpression(
									const JudgmentOnValue& jov,
									const NativeExpression& inExpr
									)
	{
	if (jov.constant())
		return NativeExpression::Nothing();

	if (jov.isUnion())
		{
		return foreachUnionAlternative(
			jov,
			inExpr,
			[&](NativeExpression e, JudgmentOnValue j) {
				return duplicateIntoRefcountPoolExpression(j, e) >> NativeExpression::Nothing();
				}
			) >> inExpr;
		}

	if (!jov.type())
		{
		NativeExpressionBuilder builder;

		NativeExpression implValPtr =
			builder.getPointerExprToCopyOnStack(
				inExpr
				);

		return
		 	builder(
		 		makeTypedNativeLibraryFunction(
		 			&FORA_clib_addToRefcountPoolAndReturn_Implval
		 			)(implValPtr)
		 		.getExpression()
		 		);
		}

	return addToRefcountPoolExpression(*jov.type(), inExpr) >> inExpr;
	}

NativeExpression transferIntoRefcountPoolExpression(
									const ::Type& inType,
									const NativeExpression& inExpr
									)
	{
	NativeExpressionBuilder builder;

	if (inType.size() == 0)
		return NativeExpression::Nothing();

	if (inType.isPOD())
		return NativeExpression::Nothing();

	@match untyped_fora_type(inType)
		-|	JOVAsValue() ->> {
			return
				makeTypedNativeLibraryFunction(
					&FORA_clib_transferIntoRefcountPool_JOV
					)(inExpr)
				.getExpression()
				;
			}
		-|	ExternalFunction() ->> {
			return
				makeTypedNativeLibraryFunction(
					&FORA_clib_transferIntoRefcountPool_ExternalFunctionDescriptor
					)(inExpr)
				.getExpression()
				;
			}
		-|	StackTrace() ->> {
			return
				makeTypedNativeLibraryFunction(
					&FORA_clib_transferIntoRefcountPool_ForaStackTrace
					)(inExpr)
				.getExpression()
				;
			}
		-|	Alternative(altType) ->>  {
			return transferIntoRefcountPoolExpression(altType, inExpr[1]);
			}
		-|	String() ->> {
			return makeTypedNativeLibraryFunction(
				&FORA_clib_transferIntoRefcountPool_String
				)(inExpr)
				.getExpression()
				;
			}
		-|	Class(types) ->> {
			return transferIntoRefcountPoolExpression(
				untyped_fora_type::UnnamedTuple(types),
				inExpr
				);
			}
		-|	Tuple(types) ->> {
			NativeExpressionBuilder builder;

			NativeExpression tupleExpr = builder.add(inExpr);

			for (long k = 0; k < types.size();k++)
				builder.add(transferIntoRefcountPoolExpression(types[k], tupleExpr[k]));

			return builder(NativeExpression::Nothing());
			}
		-|	Dictionary(isCST) ->> {
			return
				makeTypedNativeLibraryFunction(
					&FORA_clib_transferIntoRefcountPool_Dictionary
					)(inExpr)
				.getExpression()
				;
			}
		-|	Vector() ->> {
			return makeTypedNativeLibraryFunction(
				&FORA_clib_transferIntoRefcountPool_Vector
				)(inExpr)
				.getExpression();
			}
		-|	MutableVector() ->> {
			NativeExpressionBuilder builder;

			NativeExpression mutableVectorRecordHolderPtr =
				builder.add(
					NativeExpression::Alloc(
						*inExpr.type(),
						1,
						false
						)
					);

			builder.add(
				mutableVectorRecordHolderPtr.store(inExpr)
				);

			return
				builder(
					makeTypedNativeLibraryFunction(
						&FORA_clib_transferIntoRefcountPool_MutableVectorRecord
						)(mutableVectorRecordHolderPtr)
					.getExpression()
					);
			}
		-|	_ ->> { }
		;

	return NativeExpression::Nothing();
	}

NativeExpression transferIntoRefcountPoolExpression(
									const JudgmentOnValue& jov,
									const NativeExpression& inExpr
									)
	{
	if (jov.constant())
		return NativeExpression::Nothing();

	if (!jov.type())
		{
		NativeExpressionBuilder builder;

		NativeExpression implValPtr =
			builder.getPointerExprToCopyOnStack(
				inExpr
				);

		return
		 	builder(
		 		makeTypedNativeLibraryFunction(
		 			&FORA_clib_transferIntoRefcountPool_Implval
		 			)(implValPtr)
		 		.getExpression()
		 		);
		}

	return transferIntoRefcountPoolExpression(*jov.type(), inExpr);
	}


}
}


