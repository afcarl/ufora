/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/
#pragma once

#include "../../core/containers/ImmutableTreeVector.hppml"
#include "../Judgment/JudgmentOnValue.hppml"
#include "TypedFora.hppml"

class NativeExpression;
class NativeVariable;

namespace TypedFora {

//compute the type object for a tuple-related expression
Type tupleResultType(const JOV& inJov, const RefcountStyle& inSourceLayout);

//create a tuple out of the variables in 'expressions'. Note that this function
//creates a new tuple, but doesn't tear anything down. Callers are responsible for tearing down
//arguments themselves.
NativeExpression createTupleExpression(
		const ImmutableTreeVector<NativeExpression>& expressions,
		const ImmutableTreeVector<MakeTupleArgument>& makeTupleArgs,
		const Type& inTargetType
		);

NativeExpression createUntypedTupleExpression(
		const ImmutableTreeVector<NativeExpression>& expressions,
		const ImmutableTreeVector<MakeTupleArgument>& makeTupleArgs,
		const Type& inTargetType
		);

NativeExpression createTypedTupleExpression(
		const ImmutableTreeVector<NativeExpression>& expressions,
		const ImmutableTreeVector<MakeTupleArgument>& makeTupleArgs,
		const Type& inTargetType
		);

Nullable<Type> makeTupleType(const ImmutableTreeVector<Expression>& arguments);

Nullable<Type> makeTupleType(const ImmutableTreeVector<MakeTupleArgument>& arguments);

Type tupleGetItemType(const Type& inExpr, uword_t inIndex);

Type tupleGetSliceType(const Type& inExpr, uword_t inIndex);

ImmutableTreeVector<MakeTupleArgument> expressionsToNormalUnnamedMakeTupleArgs(
					const ImmutableTreeVector<Expression>& inExpressions
					);

NativeExpression nativeExprTupleGetItem(
							const NativeVariable& inExpr,
							const Type& inType,
							uword_t index,
							const Type& outType
							);

NativeExpression nativeExprTupleGetSlice(
							const NativeVariable& inExpr,
							const Type& inType,
							uword_t index,
							const Type& outType
							);
}

