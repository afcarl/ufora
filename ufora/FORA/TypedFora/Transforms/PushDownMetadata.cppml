/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/
#include "PushDownMetadata.hppml"
#include "../TypedForaUtil.hppml"
#include "../../../core/cppml/CPPMLTransform.hppml"

namespace TypedFora {
namespace Transforms {




@type PushDownMetadataTransformer =
		ImmutableTreeVector<TypedFora::MetadataStackFrame> metadataToAdd {
public:
	template<class T>
	Nullable<T> processDown(const T& t, bool& b) const { return null(); }

	template<class T>
	Nullable<T> processUp(const T& t) const { return null(); }

	Nullable<Expression> processDown(const Expression& e, bool& ioContinue) const
		{
		@match Expression(e)
			-|	InterruptCheck(stackMeta) ->> {
				return null() << Expression::InterruptCheck(metadataToAdd() + stackMeta);
				}
			-|	Call(target, args, continuations, stackMeta) ->> {
				ioContinue = false;

				return null() << Expression::Call(
					//DONT recurse into 'target', since the Call operation pushes
					//its own metadata down onto any calls within
					target,
					transform(args, *this),
					transform(continuations, *this),
					metadataToAdd() + stackMeta
					);
				}
			-|	TransferTo(target, expressions, stackMeta) ->> {
				ioContinue = false;

				return null() << Expression::TransferTo(
					//DONT recurse into 'target', since the Call operation pushes
					//its own metadata down onto any calls within
					target,
					transform(expressions, *this),
					metadataToAdd() + stackMeta
					);
				}
			-|	InlineNativeOperation(varmap, expr, outputType, hasSideEffects, stackMeta) ->> {
				ioContinue = false;

				return null() << Expression::InlineNativeOperation(
					transform(varmap, *this),
					expr,
					outputType,
					hasSideEffects,
					metadataToAdd() + stackMeta
					);
				}
			-| _ ->> {
				return null();
				}
		}
};

Expression pushDownMetadata(
				const Expression& toCleanUp,
				const ImmutableTreeVector<TypedFora::MetadataStackFrame>& meta
				)
	{
	PushDownMetadataTransformer transformer(meta);

	return transform(toCleanUp, transformer);
	}

}
}

