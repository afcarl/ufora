/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/
#pragma once

#include "TypedFora.hppml"

class NativeCFG;
class NativeVariable;
class NativeType;
class NativeBlock;
class NativeBlockID;
class NativeContinuation;
class NativeContinuationMetadata;
class NativeContinuationMetadataInstruction;
class NativeContinuationVarMetadata;
class NativeCallTarget;
class NativeExpressionBuilder;

namespace TypedFora {

typedef ImmutableTreeSet<pair<NativeVariable, TypedFora::Type> > teardown_set_type;

class ExpressionConversionContext;

class Converter {
public:
	Converter();

	NativeCFG convertCallable(const Callable& inGraph) const;

	NativeCFG convertCallable(
			const Callable& inGraph,
			const ExpressionConversionContext& context
			) const;

	NativeBlockID convertBlockID(const BlockID& inBlock) const;

	NativeBlock convertBlock(
							const Block& inBlock,
							const ExpressionConversionContext& context
							) const;


	NativeExpression dataMetadataForVar(	const NativeVariable& v,
											const Type& inType
											) const;

	NativeExpression
	convertExpression(	const TypedFora::Expression& inExpression,
						const ExpressionConversionContext& context,
						const Nullable<TypedFora::Type>& inTargetType,
						ImmutableTreeSet<TypedFora::Variable>& ioToTearDownJustAfterEvaluation
						) const;

	NativeExpression
	convertExpression(	const TypedFora::Expression& inExpression,
						const ExpressionConversionContext& context,
						const Nullable<TypedFora::Type>& inTargetType
						) const;

	NativeExpression
	convertLocalityHintExpression(
							const TypedFora::Expression& inExpression,
							const ExpressionConversionContext& context,
							const Nullable<TypedFora::Type>& inTargetType,
							ImmutableTreeSet<TypedFora::Variable>& ioToTearDownJustAfterEvaluation
							) const;

	NativeExpression
	convertLetExpression(
							const TypedFora::Expression& inExpression,
							const ExpressionConversionContext& context,
							const Nullable<TypedFora::Type>& inTargetType,
							ImmutableTreeSet<TypedFora::Variable>& ioToTearDownJustAfterEvaluation
							) const;

	NativeExpression
	convertIfExpression(
							const TypedFora::Expression& inExpression,
							const ExpressionConversionContext& context,
							const Nullable<TypedFora::Type>& inTargetType,
							ImmutableTreeSet<TypedFora::Variable>& ioToTearDownJustAfterEvaluation
							) const;

	NativeExpression
	convertDiscardFirstExpression(
							const TypedFora::Expression& inExpression,
							const ExpressionConversionContext& context,
							const Nullable<TypedFora::Type>& inTargetType,
							ImmutableTreeSet<TypedFora::Variable>& ioToTearDownJustAfterEvaluation
							) const;

	NativeExpression
	convertInterruptCheckExpression(
							const TypedFora::Expression& inExpression,
							const ExpressionConversionContext& context,
							const Nullable<TypedFora::Type>& inTargetType,
							ImmutableTreeSet<TypedFora::Variable>& ioToTearDownJustAfterEvaluation
							) const;

	NativeExpression
	convertKickCheckExpression(
							const TypedFora::Expression& inExpression,
							const ExpressionConversionContext& context,
							const Nullable<TypedFora::Type>& inTargetType,
							ImmutableTreeSet<TypedFora::Variable>& ioToTearDownJustAfterEvaluation
							) const;

	NativeExpression
	convertTransferToInterpreterExpression(
							const TypedFora::Expression& inExpression,
							const ExpressionConversionContext& context,
							const Nullable<TypedFora::Type>& inTargetType,
							ImmutableTreeSet<TypedFora::Variable>& ioToTearDownJustAfterEvaluation
							) const;

	NativeExpression
	convertCastWithoutCheckExpression(
							const TypedFora::Expression& inExpression,
							const ExpressionConversionContext& context,
							const Nullable<TypedFora::Type>& inTargetType,
							ImmutableTreeSet<TypedFora::Variable>& ioToTearDownJustAfterEvaluation
							) const;

	NativeExpression
	convertChangeClassBodyExpression(
							const TypedFora::Expression& inExpression,
							const ExpressionConversionContext& context,
							const Nullable<TypedFora::Type>& inTargetType,
							ImmutableTreeSet<TypedFora::Variable>& ioToTearDownJustAfterEvaluation
							) const;

	NativeExpression
	convertInlineNativeOperationExpression(
							const TypedFora::Expression& inExpression,
							const ExpressionConversionContext& context,
							const Nullable<TypedFora::Type>& inTargetType,
							ImmutableTreeSet<TypedFora::Variable>& ioToTearDownJustAfterEvaluation
							) const;

	NativeExpression
	convertTypeCheckExpression(
							const TypedFora::Expression& inExpression,
							const ExpressionConversionContext& context,
							const Nullable<TypedFora::Type>& inTargetType,
							ImmutableTreeSet<TypedFora::Variable>& ioToTearDownJustAfterEvaluation
							) const;

	NativeExpression
	convertCallExpression(
							const TypedFora::Expression& inExpression,
							const ExpressionConversionContext& context,
							const Nullable<TypedFora::Type>& inTargetType,
							ImmutableTreeSet<TypedFora::Variable>& ioToTearDownJustAfterEvaluation
							) const;

	NativeExpression
	convertTransferToExpression(
							const TypedFora::Expression& inExpression,
							const ExpressionConversionContext& context,
							const Nullable<TypedFora::Type>& inTargetType,
							ImmutableTreeSet<TypedFora::Variable>& ioToTearDownJustAfterEvaluation
							) const;

	NativeExpression
	convertJumpExpression(
							const TypedFora::Expression& inExpression,
							const ExpressionConversionContext& context,
							const Nullable<TypedFora::Type>& inTargetType,
							ImmutableTreeSet<TypedFora::Variable>& ioToTearDownJustAfterEvaluation
							) const;

	NativeExpression
	convertReturnExpression(
							const TypedFora::Expression& inExpression,
							const ExpressionConversionContext& context,
							const Nullable<TypedFora::Type>& inTargetType,
							ImmutableTreeSet<TypedFora::Variable>& ioToTearDownJustAfterEvaluation
							) const;

	NativeExpression
	convertIsTupleExpression(
							const TypedFora::Expression& inExpression,
							const ExpressionConversionContext& context,
							const Nullable<TypedFora::Type>& inTargetType,
							ImmutableTreeSet<TypedFora::Variable>& ioToTearDownJustAfterEvaluation
							) const;

	NativeExpression
	convertGetItemExpression(
							const TypedFora::Expression& inExpression,
							const ExpressionConversionContext& context,
							const Nullable<TypedFora::Type>& inTargetType,
							ImmutableTreeSet<TypedFora::Variable>& ioToTearDownJustAfterEvaluation
							) const;

	NativeExpression
	convertGetSliceExpression(
							const TypedFora::Expression& inExpression,
							const ExpressionConversionContext& context,
							const Nullable<TypedFora::Type>& inTargetType,
							ImmutableTreeSet<TypedFora::Variable>& ioToTearDownJustAfterEvaluation
							) const;

	NativeExpression
	convertMakeTupleExpression(
							const TypedFora::Expression& inExpression,
							const ExpressionConversionContext& context,
							const Nullable<TypedFora::Type>& inTargetType,
							ImmutableTreeSet<TypedFora::Variable>& ioToTearDownJustAfterEvaluation
							) const;

	ImmutableTreeVector<NativeContinuationMetadata> convertMetadata(
							const NativeContinuationMetadata& inMetadata
							) const;

	ImmutableTreeVector<NativeType> returnTypesFromResultSignature(
							const ResultSignature& inSignature
							) const;

	uword_t pickContinuationFrameElement(
							const TypedFora::ContinuationFrame& inFrame,
							const TypedFora::Type& inType,
							bool isException
							) const;

	Nullable<uword_t> pickReturnContinuationFor(
							const TypedFora::ResultSignature& inSignature,
							const TypedFora::Type& inType,
							bool isException
							) const;

	NativeExpression getTeardownExpression(const ExpressionConversionContext& context) const;

	NativeExpression getTeardownExpression(
							const teardown_set_type& inUnnamedTeardowns,
							const ImmutableTreeSet<TypedFora::Variable>& inNamedTeardowns,
							const ExpressionConversionContext& context
							) const;

	pair<ImmutableTreeVector<pair<NativeVariable, TypedFora::Type> >,
		ImmutableTreeVector<NativeExpression> >
					evaluateExpressionList(
							const ImmutableTreeVector<Expression>& inExpressions,
							const ExpressionConversionContext& inContext,
							NativeExpressionBuilder& ioBuilder
							) const;

	pair<ImmutableTreeVector<pair<NativeVariable, TypedFora::Type> >,
		ImmutableTreeVector<NativeExpression> >
					evaluateExpressionList(
							const ImmutableTreeVector<Expression>& inExpressions,
							const ImmutableTreeVector<Type>& inTypes,
							const ExpressionConversionContext& inContext,
							NativeExpressionBuilder& ioBuilder
							) const;

	pair<ImmutableTreeVector<pair<NativeVariable, TypedFora::Type> >,
		ImmutableTreeVector<NativeExpression> >
					evaluateExpressionList(
							const ImmutableTreeVector<Expression>& inExpressions,
							const ImmutableTreeVector<Type>& inTypes,
							const ExpressionConversionContext& inContext,
							NativeExpressionBuilder& ioBuilder,
							ImmutableTreeSet<TypedFora::Variable>& ioToTearDownJustAfterEvaluation
							) const;

	TypedFora::Expression putDiscardFirstsAroundExpressionList(
							const ImmutableTreeVector<TypedFora::Expression>& exprs,
							const ExpressionConversionContext& context
							) const;

	NativeExpression vectorLoadCheckExpression(
							const NativeExpression& vec,
							const ExpressionConversionContext& context
							) const;

	NativeContinuation convertContinuation(
							const Continuation& inFrame,
							bool isException,
							const ExpressionConversionContext& context,
							const Nullable<TypedFora::Type>& inTargetType,
							ImmutableTreeSet<TypedFora::Variable>& ioToTearDownJustAfterEvaluation
							) const;

	ImmutableTreeVector<NativeContinuation> generateTransferContinuations(
							const ResultSignature& inCallTargetSignature,
							const ExpressionConversionContext& inContext
							) const;

	ImmutableTreeVector<NativeContinuation> convertContinuationFrame(
							const ContinuationFrame& inFrame,
							const ExpressionConversionContext& context,
							const ResultSignature& targetResultSignature,
							const Nullable<TypedFora::Type>& inTargetType,
							ImmutableTreeSet<TypedFora::Variable>& ioToTearDownJustAfterEvaluation
							) const;

	NativeCallTarget convertCallTarget(
							const CallTarget& inCallTarget,
							const ExpressionConversionContext& context
							) const;

	NativeContinuationMetadataInstruction convertMetadataInstruction(
							const MetadataInstruction& inMetadata,
							const ExpressionConversionContext& context
							) const;

	NativeContinuationVarMetadata convertMetadataVariable(
							const MetadataVariable& inMetadata,
							const ExpressionConversionContext& context
							) const;

	ImmutableTreeVector<NativeContinuationVarMetadata> convertMetadataVariables(
							const ImmutableTreeVector<MetadataVariable>& inMetadata,
							const ExpressionConversionContext& context
							) const;

	NativeContinuationMetadata convertMetadata(
							const MetadataStackFrame& inMetadata,
							const ExpressionConversionContext& context
							) const;

	ImmutableTreeVector<NativeContinuationMetadata> convertMetadata(
							const ImmutableTreeVector<MetadataStackFrame>& inMetadata,
							const ExpressionConversionContext& context
							) const;

	ImmutableTreeVector<NativeContinuationMetadata> convertMetadata(
							const ImmutableTreeVector<MetadataStackFrame>& inMetadata,
							const ExpressionConversionContext& context,
							const ImmutableTreeSet<NativeVariable>& variablesUsed
							) const;

	NativeExpression computeTransferToExternalSubgraph(
			const ImmutableTreeVector<Expression>& arguments,
			const ResultSignature& output,
			const ImmutableTreeVector<TypedFora::Type>& input,
			const std::string& inTargetName,
			const BlockID& blockID,
			const ImmutableTreeVector<MetadataStackFrame>& stackMetadata,
			const ExpressionConversionContext& context
			) const;

	NativeExpression dataMetadataForVar(const Variable& v,
										const ExpressionConversionContext& inContext
										) const;

	NativeContinuationMetadata localVariablesMetadataStackFrame(
										const ExpressionConversionContext& inSet
										) const;

	NativeContinuationMetadata localVariablesMetadataStackFrame(
										const ExpressionConversionContext& inSet,
										const ImmutableTreeSet<NativeVariable>& variablesUsed
										) const;


};

}


