/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/
#pragma once

#include "../../core/cppml/CPPMLPrettyPrinter.hppml"

namespace TypedFora {

class RefcountStyle;
class CallTarget;
class Callable;
class Type;
class Variable;
class ResultSignature;
class Block;
class BlockID;
class Continuation;
class Expression;
class TransferTarget;
class MakeTupleArgument;
class MetadataStackFrame;
class MetadataVariable;
class MetadataInstruction;

}

template<>
class CPPMLPrettyPrint<TypedFora::RefcountStyle> {
public:
		static void prettyPrint(CPPMLPrettyPrintStream& s, const TypedFora::RefcountStyle& t);
};
template<>
class CPPMLPrettyPrint<TypedFora::CallTarget> {
public:
		static void prettyPrint(CPPMLPrettyPrintStream& s, const TypedFora::CallTarget& t);
};
template<>
class CPPMLPrettyPrint<TypedFora::TransferTarget> {
public:
		static void prettyPrint(CPPMLPrettyPrintStream& s, const TypedFora::TransferTarget& t);
};
template<>
class CPPMLPrettyPrint<TypedFora::Callable> {
public:
		static void prettyPrint(CPPMLPrettyPrintStream& s, const TypedFora::Callable& t);
};
template<>
class CPPMLPrettyPrint<TypedFora::Type> {
public:
		static void prettyPrint(CPPMLPrettyPrintStream& s, const TypedFora::Type& t);
};
template<>
class CPPMLPrettyPrint<TypedFora::Variable> {
public:
		static void prettyPrint(CPPMLPrettyPrintStream& s, const TypedFora::Variable& t);
};
template<>
class CPPMLPrettyPrint<TypedFora::ResultSignature> {
public:
		static void prettyPrint(CPPMLPrettyPrintStream& s, const TypedFora::ResultSignature& t);
};
template<>
class CPPMLPrettyPrint<TypedFora::BlockID> {
public:
		static void prettyPrint(CPPMLPrettyPrintStream& s, const TypedFora::BlockID& t);
};
template<>
class CPPMLPrettyPrint<TypedFora::Block> {
public:
		static void prettyPrint(CPPMLPrettyPrintStream& s, const TypedFora::Block& t);
};
template<>
class CPPMLPrettyPrint<TypedFora::Continuation> {
public:
		static void prettyPrint(CPPMLPrettyPrintStream& s, const TypedFora::Continuation& t);
};
template<>
class CPPMLPrettyPrint<TypedFora::Expression> {
public:
		static void prettyPrint(CPPMLPrettyPrintStream& s, const TypedFora::Expression& t);
};
template<>
class CPPMLPrettyPrint<TypedFora::MakeTupleArgument> {
public:
		static void prettyPrint(CPPMLPrettyPrintStream& s, const TypedFora::MakeTupleArgument& t);
};
template<>
class CPPMLPrettyPrint<TypedFora::MetadataInstruction> {
public:
		static void prettyPrint(CPPMLPrettyPrintStream& s, const TypedFora::MetadataInstruction& t);
};
template<>
class CPPMLPrettyPrint<TypedFora::MetadataVariable> {
public:
		static void prettyPrint(CPPMLPrettyPrintStream& s, const TypedFora::MetadataVariable& t);
};
template<>
class CPPMLPrettyPrint<TypedFora::MetadataStackFrame> {
public:
		static void prettyPrint(CPPMLPrettyPrintStream& s, const TypedFora::MetadataStackFrame& t);
};



