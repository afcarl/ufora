/***************************************************************************
    Copyright 2017 Ufora Inc.
 
    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at
 
        http://www.apache.org/licenses/LICENSE-2.0
 
    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
****************************************************************************/
#include "RecursiveJudgmentFolder.hppml"
#include "../../core/Logging.hpp"
#include "../../core/UnitTest.hpp"
#include "../Core/ClassMediator.hppml"

namespace {

RecursiveJudgment constant(CSTValue r1)
	{
	return RecursiveJudgment::Atom(JudgmentOnValueAtom::Valued(r1));
	}

RecursiveJudgment constant(int64_t r1)
	{
	return constant(CSTValue(r1));
	}

RecursiveJudgment tup(RecursiveJudgment r1)
	{
	return RecursiveJudgment::Tuple(emptyTreeVec() + r1, emptyTreeVec() + Nullable<Symbol>(), RecursiveJudgment());
	}

RecursiveJudgment tup(RecursiveJudgment r1, RecursiveJudgment r2)
	{
	return RecursiveJudgment::Tuple(emptyTreeVec() + r1 + r2, emptyTreeVec() + Nullable<Symbol>() + Nullable<Symbol>(), RecursiveJudgment());
	}

RecursiveJudgment tup(RecursiveJudgment r1, RecursiveJudgment r2, RecursiveJudgment r3)
	{
	return RecursiveJudgment::Tuple(
		emptyTreeVec() + r1 + r2 + r3, 
		emptyTreeVec() + Nullable<Symbol>() + Nullable<Symbol>() + Nullable<Symbol>(), 
		RecursiveJudgment()
		);
	}

}

BOOST_AUTO_TEST_CASE( test_RecursiveJudgmentFolder )
	{
	std::vector<RecursiveJudgment> toFold;

	toFold.push_back(tup(constant(1)));
	for (long k = 0; k < 10; k++)
		toFold.push_back(tup(constant(k+2), toFold[k]));

	RecursiveJudgment folded, foldedReverse;
	for (long k = 0; k < toFold.size(); k++)
		{
		folded = foldRecursiveJudgments(folded, toFold[k]);
		foldedReverse = foldRecursiveJudgments(foldedReverse, toFold[toFold.size()-k-1]);
		}

	BOOST_CHECK(folded == foldedReverse);
	}

