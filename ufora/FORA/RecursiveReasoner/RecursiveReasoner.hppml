/***************************************************************************
    Copyright 2017 Ufora Inc.
 
    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at
 
        http://www.apache.org/licenses/LICENSE-2.0
 
    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
****************************************************************************/

#pragma once

#include "../Axioms/Axioms.hppml"
#include "../../core/PolymorphicSharedPtr.hpp"
#include "../ControlFlowGraph/ControlFlowGraph.hppml"

#include "ReasonerPredicateTree.hppml"
#include "RecursiveJudgment.hppml"

namespace TypedFora {

class Compiler;

}

class RecursiveReasoner : public PolymorphicSharedPtrBase<RecursiveReasoner> {
public:
    RecursiveReasoner(
            PolymorphicSharedPtr<TypedFora::Compiler> inCompiler,
            PolymorphicSharedPtr<Axioms> inAxioms
            );

    //what we know about the values flowing through this node
    @type LeafState = 
        std::vector<RecursiveJudgment> values,
        RecursiveJudgment normalValuesOut,
        RecursiveJudgment exceptionValuesOut
        ;

    //what we know about all paths that enter a graph based on a particular predicate
    @type EntrypointState = 
        map<ControlFlowGraphLabel, ReasonerPredicateTree<LeafState> > values
        ;

    //what we know about all paths entering a given graph
    @type GraphState = 
        ReasonerPredicateTree<EntrypointState> tree
        ;

    RecursiveJudgment reasonAboutApply(JudgmentOnValueTuple jovt);

private:
    void addIncoming(
            ControlFlowGraph graph, 
            ImmutableTreeVector<RecursiveJudgment> judgments
            );

    void addIncoming(
            EntrypointState& entrypointState,
            ControlFlowGraphLabel label,
            ImmutableTreeVector<RecursiveJudgment> judgments
            );

    void addIncoming(
            LeafState& leafState,
            ImmutableTreeVector<RecursiveJudgment> judgments
            );

    void process();

    PolymorphicSharedPtr<TypedFora::Compiler> mCompiler;

    PolymorphicSharedPtr<Axioms> mAxioms;

    map<ControlFlowGraph, GraphState> mStates;
};