/***************************************************************************
    Copyright 2017 Ufora Inc.
 
    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at
 
        http://www.apache.org/licenses/LICENSE-2.0
 
    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
****************************************************************************/
#pragma once

#include "../Judgment/JudgmentOnValue.hppml"
#include "../Core/ClassBody.hppml"

@type RecursiveJudgmentName = 
    -| String of std::string name
    -| SymbolValue of Symbol name
    -| Class of ClassBody name
    -| Integer of int64_t value
    -| Compound of ImmutableTreeVector<RecursiveJudgmentName> names
with
    hash_type hash = (hashValue(*this))
{
public:
    static RecursiveJudgmentName Create(Symbol name)
        {
        return RecursiveJudgmentName::SymbolValue(name);
        }
    static RecursiveJudgmentName Create(std::string name)
        {
        return RecursiveJudgmentName::String(name);
        }
    static RecursiveJudgmentName Create(int64_t name)
        {
        return RecursiveJudgmentName::Integer(name);
        }
    static RecursiveJudgmentName Create(ClassBody name)
        {
        return RecursiveJudgmentName::Class(name);
        }

    template<class T1, class ... T2>
    static RecursiveJudgmentName CreateCompound(T1 t1, T2 ... ts)
        {
        return RecursiveJudgmentName::Compound(CreateList(t1, ts...));
        }

    template<class T1>
    static ImmutableTreeVector<RecursiveJudgmentName> CreateList(T1 t1)
        {
        return emptyTreeVec() + Create(t1);
        }

    template<class T1, class ... T2>
    static ImmutableTreeVector<RecursiveJudgmentName> CreateList(T1 t1, T2 ... t2)
        {
        return emptyTreeVec() + Create(t1) + CreateList(t2...);
        }
};

macro_defineCppmlComparisonOperators(RecursiveJudgmentName)
macro_defineMemberHashFunction(RecursiveJudgmentName)


template<>
class CPPMLPrettyPrint<RecursiveJudgmentName> {
public:
        static void prettyPrint(CPPMLPrettyPrintStream& s, const RecursiveJudgmentName& t);
};
